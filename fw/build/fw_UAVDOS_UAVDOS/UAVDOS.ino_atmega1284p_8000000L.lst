
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/build/UAVDOS.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__dtors_end>
       4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      10:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      14:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      40:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__vector_18>
      4c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      50:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__vector_20>
      54:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__vector_21>
      58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      60:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      68:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_26>
      6c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      70:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      74:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      7c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      80:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      84:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	00 02       	muls	r16, r16
      90:	03 00       	.word	0x0003	; ????
      92:	0a 0b       	sbc	r16, r26
      94:	00 00       	nop
      96:	00 00       	nop
      98:	05 04       	cpc	r0, r5
      9a:	09 08       	sbc	r0, r9
	...

000000ac <digital_pin_to_bit_mask_PGM>:
      ac:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      bc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000cc <digital_pin_to_port_PGM>:
      cc:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      dc:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000ec <port_to_output_PGM>:
      ec:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000100 <__ctors_start>:
__ctors_start():
     100:	03 06       	cpc	r0, r19
     102:	f6 0d       	add	r31, r6
     104:	b4 11       	cpse	r27, r4

00000106 <__ctors_end>:
__dtors_start():
     106:	0f 06       	cpc	r0, r31

00000108 <__dtors_end>:
__dtors_end():
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d0 e4       	ldi	r29, 0x40	; 64
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     114:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     116:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     118:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     11a:	e0 ef       	ldi	r30, 0xF0	; 240
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     11c:	ff e2       	ldi	r31, 0x2F	; 47
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     11e:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     120:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     124:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     126:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     128:	a2 38       	cpi	r26, 0x82	; 130
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     12a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0x10>

0000012e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     12e:	24 e0       	ldi	r18, 0x04	; 4
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     130:	a2 e8       	ldi	r26, 0x82	; 130
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     132:	b2 e0       	ldi	r27, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     138:	a7 34       	cpi	r26, 0x47	; 71
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     13a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>

0000013e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     13e:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     140:	c3 e8       	ldi	r28, 0x83	; 131
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     142:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     144:	04 c0       	rjmp	.+8      	; 0x14e <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     146:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     148:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     14a:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     14e:	c0 38       	cpi	r28, 0x80	; 128
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     150:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     152:	c9 f7       	brne	.-14     	; 0x146 <__do_global_ctors+0x8>
     154:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <main>
     158:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__do_global_dtors>

0000015c <__bad_interrupt>:
__vector_22():
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <crc_accumulate>:
crc_accumulate():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:36
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
     160:	fb 01       	movw	r30, r22
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:40
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
     162:	90 81       	ld	r25, Z
     164:	89 27       	eor	r24, r25
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:41
        tmp ^= (tmp<<4);
     166:	90 e1       	ldi	r25, 0x10	; 16
     168:	89 9f       	mul	r24, r25
     16a:	90 01       	movw	r18, r0
     16c:	11 24       	eor	r1, r1
     16e:	82 27       	eor	r24, r18
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:42
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	38 2f       	mov	r19, r24
     174:	22 27       	eor	r18, r18
     176:	ac 01       	movw	r20, r24
     178:	63 e0       	ldi	r22, 0x03	; 3
     17a:	44 0f       	add	r20, r20
     17c:	55 1f       	adc	r21, r21
     17e:	6a 95       	dec	r22
     180:	e1 f7       	brne	.-8      	; 0x17a <crc_accumulate+0x1a>
     182:	24 27       	eor	r18, r20
     184:	35 27       	eor	r19, r21
     186:	41 81       	ldd	r20, Z+1	; 0x01
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	24 27       	eor	r18, r20
     18c:	35 27       	eor	r19, r21
     18e:	74 e0       	ldi	r23, 0x04	; 4
     190:	95 95       	asr	r25
     192:	87 95       	ror	r24
     194:	7a 95       	dec	r23
     196:	e1 f7       	brne	.-8      	; 0x190 <crc_accumulate+0x30>
     198:	82 27       	eor	r24, r18
     19a:	93 27       	eor	r25, r19
     19c:	91 83       	std	Z+1, r25	; 0x01
     19e:	80 83       	st	Z, r24
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:43
}
     1a0:	08 95       	ret

000001a2 <mavlink_sha256_update>:
mavlink_sha256_update():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:153
    m->counter[6] += GG;
    m->counter[7] += HH;
}

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
     1a2:	2f 92       	push	r2
     1a4:	3f 92       	push	r3
     1a6:	4f 92       	push	r4
     1a8:	5f 92       	push	r5
     1aa:	6f 92       	push	r6
     1ac:	7f 92       	push	r7
     1ae:	8f 92       	push	r8
     1b0:	9f 92       	push	r9
     1b2:	af 92       	push	r10
     1b4:	bf 92       	push	r11
     1b6:	cf 92       	push	r12
     1b8:	df 92       	push	r13
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	ca 58       	subi	r28, 0x8A	; 138
     1cc:	d1 40       	sbci	r29, 0x01	; 1
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	1c 01       	movw	r2, r24
     1da:	cf 59       	subi	r28, 0x9F	; 159
     1dc:	de 4f       	sbci	r29, 0xFE	; 254
     1de:	79 83       	std	Y+1, r23	; 0x01
     1e0:	68 83       	st	Y, r22
     1e2:	c1 56       	subi	r28, 0x61	; 97
     1e4:	d1 40       	sbci	r29, 0x01	; 1
     1e6:	c9 5b       	subi	r28, 0xB9	; 185
     1e8:	de 4f       	sbci	r29, 0xFE	; 254
     1ea:	28 83       	st	Y, r18
     1ec:	39 83       	std	Y+1, r19	; 0x01
     1ee:	4a 83       	std	Y+2, r20	; 0x02
     1f0:	5b 83       	std	Y+3, r21	; 0x03
     1f2:	c7 54       	subi	r28, 0x47	; 71
     1f4:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:155
    const unsigned char *p = (const unsigned char *)v;
    uint32_t old_sz = m->sz[0];
     1f6:	dc 01       	movw	r26, r24
     1f8:	cd 90       	ld	r12, X+
     1fa:	dd 90       	ld	r13, X+
     1fc:	ed 90       	ld	r14, X+
     1fe:	fc 90       	ld	r15, X
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:158
    uint32_t offset;

    m->sz[0] += len * 8;
     200:	da 01       	movw	r26, r20
     202:	c9 01       	movw	r24, r18
     204:	13 e0       	ldi	r17, 0x03	; 3
     206:	88 0f       	add	r24, r24
     208:	99 1f       	adc	r25, r25
     20a:	aa 1f       	adc	r26, r26
     20c:	bb 1f       	adc	r27, r27
     20e:	1a 95       	dec	r17
     210:	d1 f7       	brne	.-12     	; 0x206 <mavlink_sha256_update+0x64>
     212:	8c 0d       	add	r24, r12
     214:	9d 1d       	adc	r25, r13
     216:	ae 1d       	adc	r26, r14
     218:	bf 1d       	adc	r27, r15
     21a:	f1 01       	movw	r30, r2
     21c:	80 83       	st	Z, r24
     21e:	91 83       	std	Z+1, r25	; 0x01
     220:	a2 83       	std	Z+2, r26	; 0x02
     222:	b3 83       	std	Z+3, r27	; 0x03
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:159
    if (m->sz[0] < old_sz)
     224:	8c 15       	cp	r24, r12
     226:	9d 05       	cpc	r25, r13
     228:	ae 05       	cpc	r26, r14
     22a:	bf 05       	cpc	r27, r15
     22c:	58 f4       	brcc	.+22     	; 0x244 <mavlink_sha256_update+0xa2>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:160
	++m->sz[1];
     22e:	84 81       	ldd	r24, Z+4	; 0x04
     230:	95 81       	ldd	r25, Z+5	; 0x05
     232:	a6 81       	ldd	r26, Z+6	; 0x06
     234:	b7 81       	ldd	r27, Z+7	; 0x07
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	a1 1d       	adc	r26, r1
     23a:	b1 1d       	adc	r27, r1
     23c:	84 83       	std	Z+4, r24	; 0x04
     23e:	95 83       	std	Z+5, r25	; 0x05
     240:	a6 83       	std	Z+6, r26	; 0x06
     242:	b7 83       	std	Z+7, r27	; 0x07
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:161
    offset = (old_sz / 8) % 64;
     244:	a3 e0       	ldi	r26, 0x03	; 3
     246:	f6 94       	lsr	r15
     248:	e7 94       	ror	r14
     24a:	d7 94       	ror	r13
     24c:	c7 94       	ror	r12
     24e:	aa 95       	dec	r26
     250:	d1 f7       	brne	.-12     	; 0x246 <mavlink_sha256_update+0xa4>
     252:	ff e3       	ldi	r31, 0x3F	; 63
     254:	cf 22       	and	r12, r31
     256:	dd 24       	eor	r13, r13
     258:	ee 24       	eor	r14, r14
     25a:	ff 24       	eor	r15, r15
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:167
    while(len > 0){
	uint32_t l = 64 - offset;
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
     25c:	81 01       	movw	r16, r2
     25e:	08 5d       	subi	r16, 0xD8	; 216
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	c9 57       	subi	r28, 0x79	; 121
     264:	de 4f       	sbci	r29, 0xFE	; 254
     266:	19 83       	std	Y+1, r17	; 0x01
     268:	08 83       	st	Y, r16
     26a:	c7 58       	subi	r28, 0x87	; 135
     26c:	d1 40       	sbci	r29, 0x01	; 1
     26e:	8e 01       	movw	r16, r28
     270:	0f 5b       	subi	r16, 0xBF	; 191
     272:	1e 4f       	sbci	r17, 0xFE	; 254
     274:	cf 5b       	subi	r28, 0xBF	; 191
     276:	de 4f       	sbci	r29, 0xFE	; 254
     278:	19 83       	std	Y+1, r17	; 0x01
     27a:	08 83       	st	Y, r16
     27c:	c1 54       	subi	r28, 0x41	; 65
     27e:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:162

    m->sz[0] += len * 8;
    if (m->sz[0] < old_sz)
	++m->sz[1];
    offset = (old_sz / 8) % 64;
    while(len > 0){
     280:	c9 5b       	subi	r28, 0xB9	; 185
     282:	de 4f       	sbci	r29, 0xFE	; 254
     284:	48 80       	ld	r4, Y
     286:	59 80       	ldd	r5, Y+1	; 0x01
     288:	6a 80       	ldd	r6, Y+2	; 0x02
     28a:	7b 80       	ldd	r7, Y+3	; 0x03
     28c:	c7 54       	subi	r28, 0x47	; 71
     28e:	d1 40       	sbci	r29, 0x01	; 1
     290:	41 14       	cp	r4, r1
     292:	51 04       	cpc	r5, r1
     294:	61 04       	cpc	r6, r1
     296:	71 04       	cpc	r7, r1
     298:	09 f4       	brne	.+2      	; 0x29c <mavlink_sha256_update+0xfa>
     29a:	9b c4       	rjmp	.+2358   	; 0xbd2 <__LOCK_REGION_LENGTH__+0x7d2>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:163
	uint32_t l = 64 - offset;
     29c:	80 e4       	ldi	r24, 0x40	; 64
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	a0 e0       	ldi	r26, 0x00	; 0
     2a2:	b0 e0       	ldi	r27, 0x00	; 0
     2a4:	8c 19       	sub	r24, r12
     2a6:	9d 09       	sbc	r25, r13
     2a8:	ae 09       	sbc	r26, r14
     2aa:	bf 09       	sbc	r27, r15
     2ac:	53 01       	movw	r10, r6
     2ae:	42 01       	movw	r8, r4
     2b0:	84 15       	cp	r24, r4
     2b2:	95 05       	cpc	r25, r5
     2b4:	a6 05       	cpc	r26, r6
     2b6:	b7 05       	cpc	r27, r7
     2b8:	10 f4       	brcc	.+4      	; 0x2be <mavlink_sha256_update+0x11c>
     2ba:	4c 01       	movw	r8, r24
     2bc:	5d 01       	movw	r10, r26
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:167
        if (len < l) {
            l = len;
        }
	memcpy(m->u.save_bytes + offset, p, l);
     2be:	c9 57       	subi	r28, 0x79	; 121
     2c0:	de 4f       	sbci	r29, 0xFE	; 254
     2c2:	88 81       	ld	r24, Y
     2c4:	99 81       	ldd	r25, Y+1	; 0x01
     2c6:	c7 58       	subi	r28, 0x87	; 135
     2c8:	d1 40       	sbci	r29, 0x01	; 1
     2ca:	8c 0d       	add	r24, r12
     2cc:	9d 1d       	adc	r25, r13
     2ce:	a4 01       	movw	r20, r8
     2d0:	cf 59       	subi	r28, 0x9F	; 159
     2d2:	de 4f       	sbci	r29, 0xFE	; 254
     2d4:	68 81       	ld	r22, Y
     2d6:	79 81       	ldd	r23, Y+1	; 0x01
     2d8:	c1 56       	subi	r28, 0x61	; 97
     2da:	d1 40       	sbci	r29, 0x01	; 1
     2dc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <memcpy>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:168
	offset += l;
     2e0:	c8 0c       	add	r12, r8
     2e2:	d9 1c       	adc	r13, r9
     2e4:	ea 1c       	adc	r14, r10
     2e6:	fb 1c       	adc	r15, r11
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:169
	p += l;
     2e8:	cf 59       	subi	r28, 0x9F	; 159
     2ea:	de 4f       	sbci	r29, 0xFE	; 254
     2ec:	68 80       	ld	r6, Y
     2ee:	79 80       	ldd	r7, Y+1	; 0x01
     2f0:	c1 56       	subi	r28, 0x61	; 97
     2f2:	d1 40       	sbci	r29, 0x01	; 1
     2f4:	68 0c       	add	r6, r8
     2f6:	79 1c       	adc	r7, r9
     2f8:	cf 59       	subi	r28, 0x9F	; 159
     2fa:	de 4f       	sbci	r29, 0xFE	; 254
     2fc:	79 82       	std	Y+1, r7	; 0x01
     2fe:	68 82       	st	Y, r6
     300:	c1 56       	subi	r28, 0x61	; 97
     302:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:170
	len -= l;
     304:	c9 5b       	subi	r28, 0xB9	; 185
     306:	de 4f       	sbci	r29, 0xFE	; 254
     308:	48 80       	ld	r4, Y
     30a:	59 80       	ldd	r5, Y+1	; 0x01
     30c:	6a 80       	ldd	r6, Y+2	; 0x02
     30e:	7b 80       	ldd	r7, Y+3	; 0x03
     310:	c7 54       	subi	r28, 0x47	; 71
     312:	d1 40       	sbci	r29, 0x01	; 1
     314:	48 18       	sub	r4, r8
     316:	59 08       	sbc	r5, r9
     318:	6a 08       	sbc	r6, r10
     31a:	7b 08       	sbc	r7, r11
     31c:	c9 5b       	subi	r28, 0xB9	; 185
     31e:	de 4f       	sbci	r29, 0xFE	; 254
     320:	48 82       	st	Y, r4
     322:	59 82       	std	Y+1, r5	; 0x01
     324:	6a 82       	std	Y+2, r6	; 0x02
     326:	7b 82       	std	Y+3, r7	; 0x03
     328:	c7 54       	subi	r28, 0x47	; 71
     32a:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:171
	if(offset == 64){
     32c:	00 e4       	ldi	r16, 0x40	; 64
     32e:	c0 16       	cp	r12, r16
     330:	d1 04       	cpc	r13, r1
     332:	e1 04       	cpc	r14, r1
     334:	f1 04       	cpc	r15, r1
     336:	09 f0       	breq	.+2      	; 0x33a <mavlink_sha256_update+0x198>
     338:	a3 cf       	rjmp	.-186    	; 0x280 <mavlink_sha256_update+0xde>
     33a:	c9 57       	subi	r28, 0x79	; 121
     33c:	de 4f       	sbci	r29, 0xFE	; 254
     33e:	88 81       	ld	r24, Y
     340:	99 81       	ldd	r25, Y+1	; 0x01
     342:	c7 58       	subi	r28, 0x87	; 135
     344:	d1 40       	sbci	r29, 0x01	; 1
     346:	8e 01       	movw	r16, r28
     348:	0f 5f       	subi	r16, 0xFF	; 255
     34a:	1e 4f       	sbci	r17, 0xFE	; 254
     34c:	f8 01       	movw	r30, r16
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:178 (discriminator 2)
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
                const uint8_t *p1 = (const uint8_t *)&u[i];
                uint8_t *p2 = (uint8_t *)&current[i];
                p2[0] = p1[3];
     34e:	dc 01       	movw	r26, r24
     350:	13 96       	adiw	r26, 0x03	; 3
     352:	2c 91       	ld	r18, X
     354:	13 97       	sbiw	r26, 0x03	; 3
     356:	20 83       	st	Z, r18
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:179 (discriminator 2)
                p2[1] = p1[2];
     358:	12 96       	adiw	r26, 0x02	; 2
     35a:	2c 91       	ld	r18, X
     35c:	12 97       	sbiw	r26, 0x02	; 2
     35e:	21 83       	std	Z+1, r18	; 0x01
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:180 (discriminator 2)
                p2[2] = p1[1];
     360:	11 96       	adiw	r26, 0x01	; 1
     362:	2c 91       	ld	r18, X
     364:	11 97       	sbiw	r26, 0x01	; 1
     366:	22 83       	std	Z+2, r18	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:181 (discriminator 2)
                p2[3] = p1[0];
     368:	2c 91       	ld	r18, X
     36a:	23 83       	std	Z+3, r18	; 0x03
     36c:	04 96       	adiw	r24, 0x04	; 4
     36e:	34 96       	adiw	r30, 0x04	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:175 (discriminator 2)
	len -= l;
	if(offset == 64){
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
	    for (i = 0; i < 16; i++){
     370:	cf 5b       	subi	r28, 0xBF	; 191
     372:	de 4f       	sbci	r29, 0xFE	; 254
     374:	48 80       	ld	r4, Y
     376:	59 80       	ldd	r5, Y+1	; 0x01
     378:	c1 54       	subi	r28, 0x41	; 65
     37a:	d1 40       	sbci	r29, 0x01	; 1
     37c:	4e 16       	cp	r4, r30
     37e:	5f 06       	cpc	r5, r31
     380:	31 f7       	brne	.-52     	; 0x34e <mavlink_sha256_update+0x1ac>
mavlink_sha256_calc():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:111
{
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
     382:	d1 01       	movw	r26, r2
     384:	18 96       	adiw	r26, 0x08	; 8
     386:	cd 90       	ld	r12, X+
     388:	dd 90       	ld	r13, X+
     38a:	ed 90       	ld	r14, X+
     38c:	fc 90       	ld	r15, X
     38e:	1b 97       	sbiw	r26, 0x0b	; 11
     390:	cd 59       	subi	r28, 0x9D	; 157
     392:	de 4f       	sbci	r29, 0xFE	; 254
     394:	c8 82       	st	Y, r12
     396:	d9 82       	std	Y+1, r13	; 0x01
     398:	ea 82       	std	Y+2, r14	; 0x02
     39a:	fb 82       	std	Y+3, r15	; 0x03
     39c:	c3 56       	subi	r28, 0x63	; 99
     39e:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:112
    BB = m->counter[1];
     3a0:	1c 96       	adiw	r26, 0x0c	; 12
     3a2:	4d 90       	ld	r4, X+
     3a4:	5d 90       	ld	r5, X+
     3a6:	6d 90       	ld	r6, X+
     3a8:	7c 90       	ld	r7, X
     3aa:	1f 97       	sbiw	r26, 0x0f	; 15
     3ac:	c9 59       	subi	r28, 0x99	; 153
     3ae:	de 4f       	sbci	r29, 0xFE	; 254
     3b0:	48 82       	st	Y, r4
     3b2:	59 82       	std	Y+1, r5	; 0x01
     3b4:	6a 82       	std	Y+2, r6	; 0x02
     3b6:	7b 82       	std	Y+3, r7	; 0x03
     3b8:	c7 56       	subi	r28, 0x67	; 103
     3ba:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:113
    CC = m->counter[2];
     3bc:	50 96       	adiw	r26, 0x10	; 16
     3be:	4d 90       	ld	r4, X+
     3c0:	5d 90       	ld	r5, X+
     3c2:	6d 90       	ld	r6, X+
     3c4:	7c 90       	ld	r7, X
     3c6:	53 97       	sbiw	r26, 0x13	; 19
     3c8:	c5 59       	subi	r28, 0x95	; 149
     3ca:	de 4f       	sbci	r29, 0xFE	; 254
     3cc:	48 82       	st	Y, r4
     3ce:	59 82       	std	Y+1, r5	; 0x01
     3d0:	6a 82       	std	Y+2, r6	; 0x02
     3d2:	7b 82       	std	Y+3, r7	; 0x03
     3d4:	cb 56       	subi	r28, 0x6B	; 107
     3d6:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:114
    DD = m->counter[3];
     3d8:	54 96       	adiw	r26, 0x14	; 20
     3da:	4d 90       	ld	r4, X+
     3dc:	5d 90       	ld	r5, X+
     3de:	6d 90       	ld	r6, X+
     3e0:	7c 90       	ld	r7, X
     3e2:	57 97       	sbiw	r26, 0x17	; 23
     3e4:	c1 59       	subi	r28, 0x91	; 145
     3e6:	de 4f       	sbci	r29, 0xFE	; 254
     3e8:	48 82       	st	Y, r4
     3ea:	59 82       	std	Y+1, r5	; 0x01
     3ec:	6a 82       	std	Y+2, r6	; 0x02
     3ee:	7b 82       	std	Y+3, r7	; 0x03
     3f0:	cf 56       	subi	r28, 0x6F	; 111
     3f2:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:115
    EE = m->counter[4];
     3f4:	58 96       	adiw	r26, 0x18	; 24
     3f6:	4d 90       	ld	r4, X+
     3f8:	5d 90       	ld	r5, X+
     3fa:	6d 90       	ld	r6, X+
     3fc:	7c 90       	ld	r7, X
     3fe:	5b 97       	sbiw	r26, 0x1b	; 27
     400:	cd 58       	subi	r28, 0x8D	; 141
     402:	de 4f       	sbci	r29, 0xFE	; 254
     404:	48 82       	st	Y, r4
     406:	59 82       	std	Y+1, r5	; 0x01
     408:	6a 82       	std	Y+2, r6	; 0x02
     40a:	7b 82       	std	Y+3, r7	; 0x03
     40c:	c3 57       	subi	r28, 0x73	; 115
     40e:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:116
    FF = m->counter[5];
     410:	5c 96       	adiw	r26, 0x1c	; 28
     412:	4d 90       	ld	r4, X+
     414:	5d 90       	ld	r5, X+
     416:	6d 90       	ld	r6, X+
     418:	7c 90       	ld	r7, X
     41a:	5f 97       	sbiw	r26, 0x1f	; 31
     41c:	c9 58       	subi	r28, 0x89	; 137
     41e:	de 4f       	sbci	r29, 0xFE	; 254
     420:	48 82       	st	Y, r4
     422:	59 82       	std	Y+1, r5	; 0x01
     424:	6a 82       	std	Y+2, r6	; 0x02
     426:	7b 82       	std	Y+3, r7	; 0x03
     428:	c7 57       	subi	r28, 0x77	; 119
     42a:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:117
    GG = m->counter[6];
     42c:	90 96       	adiw	r26, 0x20	; 32
     42e:	4d 90       	ld	r4, X+
     430:	5d 90       	ld	r5, X+
     432:	6d 90       	ld	r6, X+
     434:	7c 90       	ld	r7, X
     436:	93 97       	sbiw	r26, 0x23	; 35
     438:	c5 58       	subi	r28, 0x85	; 133
     43a:	de 4f       	sbci	r29, 0xFE	; 254
     43c:	48 82       	st	Y, r4
     43e:	59 82       	std	Y+1, r5	; 0x01
     440:	6a 82       	std	Y+2, r6	; 0x02
     442:	7b 82       	std	Y+3, r7	; 0x03
     444:	cb 57       	subi	r28, 0x7B	; 123
     446:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:118
    HH = m->counter[7];
     448:	94 96       	adiw	r26, 0x24	; 36
     44a:	4d 90       	ld	r4, X+
     44c:	5d 90       	ld	r5, X+
     44e:	6d 90       	ld	r6, X+
     450:	7c 90       	ld	r7, X
     452:	97 97       	sbiw	r26, 0x27	; 39
     454:	c1 58       	subi	r28, 0x81	; 129
     456:	de 4f       	sbci	r29, 0xFE	; 254
     458:	48 82       	st	Y, r4
     45a:	59 82       	std	Y+1, r5	; 0x01
     45c:	6a 82       	std	Y+2, r6	; 0x02
     45e:	7b 82       	std	Y+3, r7	; 0x03
     460:	cf 57       	subi	r28, 0x7F	; 127
     462:	d1 40       	sbci	r29, 0x01	; 1
     464:	9e 01       	movw	r18, r28
     466:	2f 5f       	subi	r18, 0xFF	; 255
     468:	3f 4f       	sbci	r19, 0xFF	; 255
     46a:	cd 5a       	subi	r28, 0xAD	; 173
     46c:	de 4f       	sbci	r29, 0xFE	; 254
     46e:	39 83       	std	Y+1, r19	; 0x01
     470:	28 83       	st	Y, r18
     472:	c3 55       	subi	r28, 0x53	; 83
     474:	d1 40       	sbci	r29, 0x01	; 1
     476:	c9 01       	movw	r24, r18
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:121

    for (i = 0; i < 16; ++i)
	data[i] = in[i];
     478:	d8 01       	movw	r26, r16
     47a:	4d 91       	ld	r20, X+
     47c:	5d 91       	ld	r21, X+
     47e:	6d 91       	ld	r22, X+
     480:	7d 91       	ld	r23, X+
     482:	8d 01       	movw	r16, r26
     484:	dc 01       	movw	r26, r24
     486:	4d 93       	st	X+, r20
     488:	5d 93       	st	X+, r21
     48a:	6d 93       	st	X+, r22
     48c:	7d 93       	st	X+, r23
     48e:	cd 01       	movw	r24, r26
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:120
    EE = m->counter[4];
    FF = m->counter[5];
    GG = m->counter[6];
    HH = m->counter[7];

    for (i = 0; i < 16; ++i)
     490:	e0 17       	cp	r30, r16
     492:	f1 07       	cpc	r31, r17
     494:	89 f7       	brne	.-30     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     496:	cd 5a       	subi	r28, 0xAD	; 173
     498:	de 4f       	sbci	r29, 0xFE	; 254
     49a:	48 80       	ld	r4, Y
     49c:	59 80       	ldd	r5, Y+1	; 0x01
     49e:	c3 55       	subi	r28, 0x53	; 83
     4a0:	d1 40       	sbci	r29, 0x01	; 1
     4a2:	b0 ec       	ldi	r27, 0xC0	; 192
     4a4:	4b 0e       	add	r4, r27
     4a6:	51 1c       	adc	r5, r1
     4a8:	cd 5a       	subi	r28, 0xAD	; 173
     4aa:	de 4f       	sbci	r29, 0xFE	; 254
     4ac:	68 80       	ld	r6, Y
     4ae:	79 80       	ldd	r7, Y+1	; 0x01
     4b0:	c3 55       	subi	r28, 0x53	; 83
     4b2:	d1 40       	sbci	r29, 0x01	; 1
     4b4:	cd 5b       	subi	r28, 0xBD	; 189
     4b6:	de 4f       	sbci	r29, 0xFE	; 254
     4b8:	79 82       	std	Y+1, r7	; 0x01
     4ba:	68 82       	st	Y, r6
     4bc:	c3 54       	subi	r28, 0x43	; 67
     4be:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:123
	data[i] = in[i];
    for (i = 16; i < 64; ++i)
	data[i] = sigma1(data[i-2]) + data[i-7] + 
     4c0:	f3 01       	movw	r30, r6
     4c2:	80 ad       	ldd	r24, Z+56	; 0x38
     4c4:	91 ad       	ldd	r25, Z+57	; 0x39
     4c6:	a2 ad       	ldd	r26, Z+58	; 0x3a
     4c8:	b3 ad       	ldd	r27, Z+59	; 0x3b
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:124
	    sigma0(data[i-15]) + data[i - 16];
     4ca:	04 81       	ldd	r16, Z+4	; 0x04
     4cc:	15 81       	ldd	r17, Z+5	; 0x05
     4ce:	26 81       	ldd	r18, Z+6	; 0x06
     4d0:	37 81       	ldd	r19, Z+7	; 0x07
     4d2:	f4 e0       	ldi	r31, 0x04	; 4
     4d4:	6f 0e       	add	r6, r31
     4d6:	71 1c       	adc	r7, r1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:123
    HH = m->counter[7];

    for (i = 0; i < 16; ++i)
	data[i] = in[i];
    for (i = 16; i < 64; ++i)
	data[i] = sigma1(data[i-2]) + data[i-7] + 
     4d8:	6c 01       	movw	r12, r24
     4da:	7d 01       	movw	r14, r26
     4dc:	4f e0       	ldi	r20, 0x0F	; 15
     4de:	cc 0c       	add	r12, r12
     4e0:	dd 1c       	adc	r13, r13
     4e2:	ee 1c       	adc	r14, r14
     4e4:	ff 1c       	adc	r15, r15
     4e6:	4a 95       	dec	r20
     4e8:	d1 f7       	brne	.-12     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4ea:	ac 01       	movw	r20, r24
     4ec:	bd 01       	movw	r22, r26
     4ee:	e1 e1       	ldi	r30, 0x11	; 17
     4f0:	76 95       	lsr	r23
     4f2:	67 95       	ror	r22
     4f4:	57 95       	ror	r21
     4f6:	47 95       	ror	r20
     4f8:	ea 95       	dec	r30
     4fa:	d1 f7       	brne	.-12     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
     4fc:	c4 2a       	or	r12, r20
     4fe:	d5 2a       	or	r13, r21
     500:	e6 2a       	or	r14, r22
     502:	f7 2a       	or	r15, r23
     504:	ac 01       	movw	r20, r24
     506:	bd 01       	movw	r22, r26
     508:	fd e0       	ldi	r31, 0x0D	; 13
     50a:	44 0f       	add	r20, r20
     50c:	55 1f       	adc	r21, r21
     50e:	66 1f       	adc	r22, r22
     510:	77 1f       	adc	r23, r23
     512:	fa 95       	dec	r31
     514:	d1 f7       	brne	.-12     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     516:	4c 01       	movw	r8, r24
     518:	5d 01       	movw	r10, r26
     51a:	e3 e1       	ldi	r30, 0x13	; 19
     51c:	b6 94       	lsr	r11
     51e:	a7 94       	ror	r10
     520:	97 94       	ror	r9
     522:	87 94       	ror	r8
     524:	ea 95       	dec	r30
     526:	d1 f7       	brne	.-12     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     528:	48 29       	or	r20, r8
     52a:	59 29       	or	r21, r9
     52c:	6a 29       	or	r22, r10
     52e:	7b 29       	or	r23, r11
     530:	4c 25       	eor	r20, r12
     532:	5d 25       	eor	r21, r13
     534:	6e 25       	eor	r22, r14
     536:	7f 25       	eor	r23, r15
     538:	fa e0       	ldi	r31, 0x0A	; 10
     53a:	b6 95       	lsr	r27
     53c:	a7 95       	ror	r26
     53e:	97 95       	ror	r25
     540:	87 95       	ror	r24
     542:	fa 95       	dec	r31
     544:	d1 f7       	brne	.-12     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     546:	84 27       	eor	r24, r20
     548:	95 27       	eor	r25, r21
     54a:	a6 27       	eor	r26, r22
     54c:	b7 27       	eor	r27, r23
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:124
	    sigma0(data[i-15]) + data[i - 16];
     54e:	cd 5b       	subi	r28, 0xBD	; 189
     550:	de 4f       	sbci	r29, 0xFE	; 254
     552:	e8 81       	ld	r30, Y
     554:	f9 81       	ldd	r31, Y+1	; 0x01
     556:	c3 54       	subi	r28, 0x43	; 67
     558:	d1 40       	sbci	r29, 0x01	; 1
     55a:	44 a1       	ldd	r20, Z+36	; 0x24
     55c:	55 a1       	ldd	r21, Z+37	; 0x25
     55e:	66 a1       	ldd	r22, Z+38	; 0x26
     560:	77 a1       	ldd	r23, Z+39	; 0x27
     562:	c0 80       	ld	r12, Z
     564:	d1 80       	ldd	r13, Z+1	; 0x01
     566:	e2 80       	ldd	r14, Z+2	; 0x02
     568:	f3 80       	ldd	r15, Z+3	; 0x03
     56a:	4c 0d       	add	r20, r12
     56c:	5d 1d       	adc	r21, r13
     56e:	6e 1d       	adc	r22, r14
     570:	7f 1d       	adc	r23, r15
     572:	84 0f       	add	r24, r20
     574:	95 1f       	adc	r25, r21
     576:	a6 1f       	adc	r26, r22
     578:	b7 1f       	adc	r27, r23
     57a:	68 01       	movw	r12, r16
     57c:	79 01       	movw	r14, r18
     57e:	47 e0       	ldi	r20, 0x07	; 7
     580:	f6 94       	lsr	r15
     582:	e7 94       	ror	r14
     584:	d7 94       	ror	r13
     586:	c7 94       	ror	r12
     588:	4a 95       	dec	r20
     58a:	d1 f7       	brne	.-12     	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     58c:	b9 01       	movw	r22, r18
     58e:	a8 01       	movw	r20, r16
     590:	e9 e1       	ldi	r30, 0x19	; 25
     592:	44 0f       	add	r20, r20
     594:	55 1f       	adc	r21, r21
     596:	66 1f       	adc	r22, r22
     598:	77 1f       	adc	r23, r23
     59a:	ea 95       	dec	r30
     59c:	d1 f7       	brne	.-12     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     59e:	c4 2a       	or	r12, r20
     5a0:	d5 2a       	or	r13, r21
     5a2:	e6 2a       	or	r14, r22
     5a4:	f7 2a       	or	r15, r23
     5a6:	b9 01       	movw	r22, r18
     5a8:	a8 01       	movw	r20, r16
     5aa:	fe e0       	ldi	r31, 0x0E	; 14
     5ac:	44 0f       	add	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	66 1f       	adc	r22, r22
     5b2:	77 1f       	adc	r23, r23
     5b4:	fa 95       	dec	r31
     5b6:	d1 f7       	brne	.-12     	; 0x5ac <__LOCK_REGION_LENGTH__+0x1ac>
     5b8:	48 01       	movw	r8, r16
     5ba:	59 01       	movw	r10, r18
     5bc:	e2 e1       	ldi	r30, 0x12	; 18
     5be:	b6 94       	lsr	r11
     5c0:	a7 94       	ror	r10
     5c2:	97 94       	ror	r9
     5c4:	87 94       	ror	r8
     5c6:	ea 95       	dec	r30
     5c8:	d1 f7       	brne	.-12     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5ca:	48 29       	or	r20, r8
     5cc:	59 29       	or	r21, r9
     5ce:	6a 29       	or	r22, r10
     5d0:	7b 29       	or	r23, r11
     5d2:	4c 25       	eor	r20, r12
     5d4:	5d 25       	eor	r21, r13
     5d6:	6e 25       	eor	r22, r14
     5d8:	7f 25       	eor	r23, r15
     5da:	f3 e0       	ldi	r31, 0x03	; 3
     5dc:	36 95       	lsr	r19
     5de:	27 95       	ror	r18
     5e0:	17 95       	ror	r17
     5e2:	07 95       	ror	r16
     5e4:	fa 95       	dec	r31
     5e6:	d1 f7       	brne	.-12     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5e8:	40 27       	eor	r20, r16
     5ea:	51 27       	eor	r21, r17
     5ec:	62 27       	eor	r22, r18
     5ee:	73 27       	eor	r23, r19
     5f0:	84 0f       	add	r24, r20
     5f2:	95 1f       	adc	r25, r21
     5f4:	a6 1f       	adc	r26, r22
     5f6:	b7 1f       	adc	r27, r23
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:123
    HH = m->counter[7];

    for (i = 0; i < 16; ++i)
	data[i] = in[i];
    for (i = 16; i < 64; ++i)
	data[i] = sigma1(data[i-2]) + data[i-7] + 
     5f8:	f3 01       	movw	r30, r6
     5fa:	84 af       	std	Z+60, r24	; 0x3c
     5fc:	95 af       	std	Z+61, r25	; 0x3d
     5fe:	a6 af       	std	Z+62, r26	; 0x3e
     600:	b7 af       	std	Z+63, r27	; 0x3f
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:122
    GG = m->counter[6];
    HH = m->counter[7];

    for (i = 0; i < 16; ++i)
	data[i] = in[i];
    for (i = 16; i < 64; ++i)
     602:	46 14       	cp	r4, r6
     604:	57 04       	cpc	r5, r7
     606:	09 f0       	breq	.+2      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     608:	55 cf       	rjmp	.-342    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     60a:	0a e5       	ldi	r16, 0x5A	; 90
     60c:	11 e0       	ldi	r17, 0x01	; 1
     60e:	c7 57       	subi	r28, 0x77	; 119
     610:	de 4f       	sbci	r29, 0xFE	; 254
     612:	19 83       	std	Y+1, r17	; 0x01
     614:	08 83       	st	Y, r16
     616:	c9 58       	subi	r28, 0x89	; 137
     618:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:114
    int i;

    AA = m->counter[0];
    BB = m->counter[1];
    CC = m->counter[2];
    DD = m->counter[3];
     61a:	c1 59       	subi	r28, 0x91	; 145
     61c:	de 4f       	sbci	r29, 0xFE	; 254
     61e:	28 81       	ld	r18, Y
     620:	39 81       	ldd	r19, Y+1	; 0x01
     622:	4a 81       	ldd	r20, Y+2	; 0x02
     624:	5b 81       	ldd	r21, Y+3	; 0x03
     626:	cf 56       	subi	r28, 0x6F	; 111
     628:	d1 40       	sbci	r29, 0x01	; 1
     62a:	cd 57       	subi	r28, 0x7D	; 125
     62c:	de 4f       	sbci	r29, 0xFE	; 254
     62e:	28 83       	st	Y, r18
     630:	39 83       	std	Y+1, r19	; 0x01
     632:	4a 83       	std	Y+2, r20	; 0x02
     634:	5b 83       	std	Y+3, r21	; 0x03
     636:	c3 58       	subi	r28, 0x83	; 131
     638:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:113
    uint32_t data[64];
    int i;

    AA = m->counter[0];
    BB = m->counter[1];
    CC = m->counter[2];
     63a:	c5 59       	subi	r28, 0x95	; 149
     63c:	de 4f       	sbci	r29, 0xFE	; 254
     63e:	88 81       	ld	r24, Y
     640:	99 81       	ldd	r25, Y+1	; 0x01
     642:	aa 81       	ldd	r26, Y+2	; 0x02
     644:	bb 81       	ldd	r27, Y+3	; 0x03
     646:	cb 56       	subi	r28, 0x6B	; 107
     648:	d1 40       	sbci	r29, 0x01	; 1
     64a:	c1 5b       	subi	r28, 0xB1	; 177
     64c:	de 4f       	sbci	r29, 0xFE	; 254
     64e:	88 83       	st	Y, r24
     650:	99 83       	std	Y+1, r25	; 0x01
     652:	aa 83       	std	Y+2, r26	; 0x02
     654:	bb 83       	std	Y+3, r27	; 0x03
     656:	cf 54       	subi	r28, 0x4F	; 79
     658:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:112
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
    BB = m->counter[1];
     65a:	c9 59       	subi	r28, 0x99	; 153
     65c:	de 4f       	sbci	r29, 0xFE	; 254
     65e:	48 80       	ld	r4, Y
     660:	59 80       	ldd	r5, Y+1	; 0x01
     662:	6a 80       	ldd	r6, Y+2	; 0x02
     664:	7b 80       	ldd	r7, Y+3	; 0x03
     666:	c7 56       	subi	r28, 0x67	; 103
     668:	d1 40       	sbci	r29, 0x01	; 1
     66a:	c5 5b       	subi	r28, 0xB5	; 181
     66c:	de 4f       	sbci	r29, 0xFE	; 254
     66e:	48 82       	st	Y, r4
     670:	59 82       	std	Y+1, r5	; 0x01
     672:	6a 82       	std	Y+2, r6	; 0x02
     674:	7b 82       	std	Y+3, r7	; 0x03
     676:	cb 54       	subi	r28, 0x4B	; 75
     678:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:111
{
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
     67a:	cd 59       	subi	r28, 0x9D	; 157
     67c:	de 4f       	sbci	r29, 0xFE	; 254
     67e:	48 81       	ld	r20, Y
     680:	59 81       	ldd	r21, Y+1	; 0x01
     682:	6a 81       	ldd	r22, Y+2	; 0x02
     684:	7b 81       	ldd	r23, Y+3	; 0x03
     686:	c3 56       	subi	r28, 0x63	; 99
     688:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:117
    BB = m->counter[1];
    CC = m->counter[2];
    DD = m->counter[3];
    EE = m->counter[4];
    FF = m->counter[5];
    GG = m->counter[6];
     68a:	c5 58       	subi	r28, 0x85	; 133
     68c:	de 4f       	sbci	r29, 0xFE	; 254
     68e:	c8 80       	ld	r12, Y
     690:	d9 80       	ldd	r13, Y+1	; 0x01
     692:	ea 80       	ldd	r14, Y+2	; 0x02
     694:	fb 80       	ldd	r15, Y+3	; 0x03
     696:	cb 57       	subi	r28, 0x7B	; 123
     698:	d1 40       	sbci	r29, 0x01	; 1
     69a:	c7 5a       	subi	r28, 0xA7	; 167
     69c:	de 4f       	sbci	r29, 0xFE	; 254
     69e:	c8 82       	st	Y, r12
     6a0:	d9 82       	std	Y+1, r13	; 0x01
     6a2:	ea 82       	std	Y+2, r14	; 0x02
     6a4:	fb 82       	std	Y+3, r15	; 0x03
     6a6:	c9 55       	subi	r28, 0x59	; 89
     6a8:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:116
    AA = m->counter[0];
    BB = m->counter[1];
    CC = m->counter[2];
    DD = m->counter[3];
    EE = m->counter[4];
    FF = m->counter[5];
     6aa:	c9 58       	subi	r28, 0x89	; 137
     6ac:	de 4f       	sbci	r29, 0xFE	; 254
     6ae:	e8 80       	ld	r14, Y
     6b0:	f9 80       	ldd	r15, Y+1	; 0x01
     6b2:	0a 81       	ldd	r16, Y+2	; 0x02
     6b4:	1b 81       	ldd	r17, Y+3	; 0x03
     6b6:	c7 57       	subi	r28, 0x77	; 119
     6b8:	d1 40       	sbci	r29, 0x01	; 1
     6ba:	cb 5a       	subi	r28, 0xAB	; 171
     6bc:	de 4f       	sbci	r29, 0xFE	; 254
     6be:	e8 82       	st	Y, r14
     6c0:	f9 82       	std	Y+1, r15	; 0x01
     6c2:	0a 83       	std	Y+2, r16	; 0x02
     6c4:	1b 83       	std	Y+3, r17	; 0x03
     6c6:	c5 55       	subi	r28, 0x55	; 85
     6c8:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:118
    GG = m->counter[6];
    HH = m->counter[7];
     6ca:	c1 58       	subi	r28, 0x81	; 129
     6cc:	de 4f       	sbci	r29, 0xFE	; 254
     6ce:	08 81       	ld	r16, Y
     6d0:	19 81       	ldd	r17, Y+1	; 0x01
     6d2:	2a 81       	ldd	r18, Y+2	; 0x02
     6d4:	3b 81       	ldd	r19, Y+3	; 0x03
     6d6:	cf 57       	subi	r28, 0x7F	; 127
     6d8:	d1 40       	sbci	r29, 0x01	; 1
     6da:	cd 5b       	subi	r28, 0xBD	; 189
     6dc:	de 4f       	sbci	r29, 0xFE	; 254
     6de:	08 83       	st	Y, r16
     6e0:	19 83       	std	Y+1, r17	; 0x01
     6e2:	2a 83       	std	Y+2, r18	; 0x02
     6e4:	3b 83       	std	Y+3, r19	; 0x03
     6e6:	c3 54       	subi	r28, 0x43	; 67
     6e8:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:115

    AA = m->counter[0];
    BB = m->counter[1];
    CC = m->counter[2];
    DD = m->counter[3];
    EE = m->counter[4];
     6ea:	cd 58       	subi	r28, 0x8D	; 141
     6ec:	de 4f       	sbci	r29, 0xFE	; 254
     6ee:	88 81       	ld	r24, Y
     6f0:	99 81       	ldd	r25, Y+1	; 0x01
     6f2:	aa 81       	ldd	r26, Y+2	; 0x02
     6f4:	bb 81       	ldd	r27, Y+3	; 0x03
     6f6:	c3 57       	subi	r28, 0x73	; 115
     6f8:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:129
	    sigma0(data[i-15]) + data[i - 16];

    for (i = 0; i < 64; i++) {
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
     6fa:	c7 57       	subi	r28, 0x77	; 119
     6fc:	de 4f       	sbci	r29, 0xFE	; 254
     6fe:	e8 81       	ld	r30, Y
     700:	f9 81       	ldd	r31, Y+1	; 0x01
     702:	c9 58       	subi	r28, 0x89	; 137
     704:	d1 40       	sbci	r29, 0x01	; 1
     706:	e1 90       	ld	r14, Z+
     708:	f1 90       	ld	r15, Z+
     70a:	01 91       	ld	r16, Z+
     70c:	11 91       	ld	r17, Z+
     70e:	c7 57       	subi	r28, 0x77	; 119
     710:	de 4f       	sbci	r29, 0xFE	; 254
     712:	f9 83       	std	Y+1, r31	; 0x01
     714:	e8 83       	st	Y, r30
     716:	c9 58       	subi	r28, 0x89	; 137
     718:	d1 40       	sbci	r29, 0x01	; 1
     71a:	c3 5a       	subi	r28, 0xA3	; 163
     71c:	de 4f       	sbci	r29, 0xFE	; 254
     71e:	e8 82       	st	Y, r14
     720:	f9 82       	std	Y+1, r15	; 0x01
     722:	0a 83       	std	Y+2, r16	; 0x02
     724:	1b 83       	std	Y+3, r17	; 0x03
     726:	cd 55       	subi	r28, 0x5D	; 93
     728:	d1 40       	sbci	r29, 0x01	; 1
     72a:	cd 5a       	subi	r28, 0xAD	; 173
     72c:	de 4f       	sbci	r29, 0xFE	; 254
     72e:	e8 81       	ld	r30, Y
     730:	f9 81       	ldd	r31, Y+1	; 0x01
     732:	c3 55       	subi	r28, 0x53	; 83
     734:	d1 40       	sbci	r29, 0x01	; 1
     736:	81 90       	ld	r8, Z+
     738:	91 90       	ld	r9, Z+
     73a:	a1 90       	ld	r10, Z+
     73c:	b1 90       	ld	r11, Z+
     73e:	cd 5a       	subi	r28, 0xAD	; 173
     740:	de 4f       	sbci	r29, 0xFE	; 254
     742:	f9 83       	std	Y+1, r31	; 0x01
     744:	e8 83       	st	Y, r30
     746:	c3 55       	subi	r28, 0x53	; 83
     748:	d1 40       	sbci	r29, 0x01	; 1
     74a:	2c 01       	movw	r4, r24
     74c:	3d 01       	movw	r6, r26
     74e:	2a e1       	ldi	r18, 0x1A	; 26
     750:	44 0c       	add	r4, r4
     752:	55 1c       	adc	r5, r5
     754:	66 1c       	adc	r6, r6
     756:	77 1c       	adc	r7, r7
     758:	2a 95       	dec	r18
     75a:	d1 f7       	brne	.-12     	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     75c:	8c 01       	movw	r16, r24
     75e:	9d 01       	movw	r18, r26
     760:	e6 e0       	ldi	r30, 0x06	; 6
     762:	36 95       	lsr	r19
     764:	27 95       	ror	r18
     766:	17 95       	ror	r17
     768:	07 95       	ror	r16
     76a:	ea 95       	dec	r30
     76c:	d1 f7       	brne	.-12     	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     76e:	40 2a       	or	r4, r16
     770:	51 2a       	or	r5, r17
     772:	62 2a       	or	r6, r18
     774:	73 2a       	or	r7, r19
     776:	8c 01       	movw	r16, r24
     778:	9d 01       	movw	r18, r26
     77a:	f5 e1       	ldi	r31, 0x15	; 21
     77c:	00 0f       	add	r16, r16
     77e:	11 1f       	adc	r17, r17
     780:	22 1f       	adc	r18, r18
     782:	33 1f       	adc	r19, r19
     784:	fa 95       	dec	r31
     786:	d1 f7       	brne	.-12     	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
     788:	6c 01       	movw	r12, r24
     78a:	7d 01       	movw	r14, r26
     78c:	eb e0       	ldi	r30, 0x0B	; 11
     78e:	f6 94       	lsr	r15
     790:	e7 94       	ror	r14
     792:	d7 94       	ror	r13
     794:	c7 94       	ror	r12
     796:	ea 95       	dec	r30
     798:	d1 f7       	brne	.-12     	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     79a:	0c 29       	or	r16, r12
     79c:	1d 29       	or	r17, r13
     79e:	2e 29       	or	r18, r14
     7a0:	3f 29       	or	r19, r15
     7a2:	04 25       	eor	r16, r4
     7a4:	15 25       	eor	r17, r5
     7a6:	26 25       	eor	r18, r6
     7a8:	37 25       	eor	r19, r7
     7aa:	2c 01       	movw	r4, r24
     7ac:	3d 01       	movw	r6, r26
     7ae:	f9 e1       	ldi	r31, 0x19	; 25
     7b0:	76 94       	lsr	r7
     7b2:	67 94       	ror	r6
     7b4:	57 94       	ror	r5
     7b6:	47 94       	ror	r4
     7b8:	fa 95       	dec	r31
     7ba:	d1 f7       	brne	.-12     	; 0x7b0 <__LOCK_REGION_LENGTH__+0x3b0>
     7bc:	6c 01       	movw	r12, r24
     7be:	7d 01       	movw	r14, r26
     7c0:	e7 e0       	ldi	r30, 0x07	; 7
     7c2:	cc 0c       	add	r12, r12
     7c4:	dd 1c       	adc	r13, r13
     7c6:	ee 1c       	adc	r14, r14
     7c8:	ff 1c       	adc	r15, r15
     7ca:	ea 95       	dec	r30
     7cc:	d1 f7       	brne	.-12     	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
     7ce:	c4 28       	or	r12, r4
     7d0:	d5 28       	or	r13, r5
     7d2:	e6 28       	or	r14, r6
     7d4:	f7 28       	or	r15, r7
     7d6:	0c 25       	eor	r16, r12
     7d8:	1d 25       	eor	r17, r13
     7da:	2e 25       	eor	r18, r14
     7dc:	3f 25       	eor	r19, r15
     7de:	c3 5a       	subi	r28, 0xA3	; 163
     7e0:	de 4f       	sbci	r29, 0xFE	; 254
     7e2:	48 80       	ld	r4, Y
     7e4:	59 80       	ldd	r5, Y+1	; 0x01
     7e6:	6a 80       	ldd	r6, Y+2	; 0x02
     7e8:	7b 80       	ldd	r7, Y+3	; 0x03
     7ea:	cd 55       	subi	r28, 0x5D	; 93
     7ec:	d1 40       	sbci	r29, 0x01	; 1
     7ee:	84 0c       	add	r8, r4
     7f0:	95 1c       	adc	r9, r5
     7f2:	a6 1c       	adc	r10, r6
     7f4:	b7 1c       	adc	r11, r7
     7f6:	08 0d       	add	r16, r8
     7f8:	19 1d       	adc	r17, r9
     7fa:	2a 1d       	adc	r18, r10
     7fc:	3b 1d       	adc	r19, r11
     7fe:	4c 01       	movw	r8, r24
     800:	5d 01       	movw	r10, r26
     802:	80 94       	com	r8
     804:	90 94       	com	r9
     806:	a0 94       	com	r10
     808:	b0 94       	com	r11
     80a:	c7 5a       	subi	r28, 0xA7	; 167
     80c:	de 4f       	sbci	r29, 0xFE	; 254
     80e:	c8 80       	ld	r12, Y
     810:	d9 80       	ldd	r13, Y+1	; 0x01
     812:	ea 80       	ldd	r14, Y+2	; 0x02
     814:	fb 80       	ldd	r15, Y+3	; 0x03
     816:	c9 55       	subi	r28, 0x59	; 89
     818:	d1 40       	sbci	r29, 0x01	; 1
     81a:	8c 20       	and	r8, r12
     81c:	9d 20       	and	r9, r13
     81e:	ae 20       	and	r10, r14
     820:	bf 20       	and	r11, r15
     822:	cb 5a       	subi	r28, 0xAB	; 171
     824:	de 4f       	sbci	r29, 0xFE	; 254
     826:	c8 80       	ld	r12, Y
     828:	d9 80       	ldd	r13, Y+1	; 0x01
     82a:	ea 80       	ldd	r14, Y+2	; 0x02
     82c:	fb 80       	ldd	r15, Y+3	; 0x03
     82e:	c5 55       	subi	r28, 0x55	; 85
     830:	d1 40       	sbci	r29, 0x01	; 1
     832:	c8 22       	and	r12, r24
     834:	d9 22       	and	r13, r25
     836:	ea 22       	and	r14, r26
     838:	fb 22       	and	r15, r27
     83a:	8c 24       	eor	r8, r12
     83c:	9d 24       	eor	r9, r13
     83e:	ae 24       	eor	r10, r14
     840:	bf 24       	eor	r11, r15
     842:	80 0e       	add	r8, r16
     844:	91 1e       	adc	r9, r17
     846:	a2 1e       	adc	r10, r18
     848:	b3 1e       	adc	r11, r19
     84a:	cd 5b       	subi	r28, 0xBD	; 189
     84c:	de 4f       	sbci	r29, 0xFE	; 254
     84e:	e8 80       	ld	r14, Y
     850:	f9 80       	ldd	r15, Y+1	; 0x01
     852:	0a 81       	ldd	r16, Y+2	; 0x02
     854:	1b 81       	ldd	r17, Y+3	; 0x03
     856:	c3 54       	subi	r28, 0x43	; 67
     858:	d1 40       	sbci	r29, 0x01	; 1
     85a:	8e 0c       	add	r8, r14
     85c:	9f 1c       	adc	r9, r15
     85e:	a0 1e       	adc	r10, r16
     860:	b1 1e       	adc	r11, r17
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:135
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
			     
	HH = GG;
	GG = FF;
	FF = EE;
	EE = DD + T1;
     862:	cd 57       	subi	r28, 0x7D	; 125
     864:	de 4f       	sbci	r29, 0xFE	; 254
     866:	08 81       	ld	r16, Y
     868:	19 81       	ldd	r17, Y+1	; 0x01
     86a:	2a 81       	ldd	r18, Y+2	; 0x02
     86c:	3b 81       	ldd	r19, Y+3	; 0x03
     86e:	c3 58       	subi	r28, 0x83	; 131
     870:	d1 40       	sbci	r29, 0x01	; 1
     872:	08 0d       	add	r16, r8
     874:	19 1d       	adc	r17, r9
     876:	2a 1d       	adc	r18, r10
     878:	3b 1d       	adc	r19, r11
     87a:	c3 5a       	subi	r28, 0xA3	; 163
     87c:	de 4f       	sbci	r29, 0xFE	; 254
     87e:	08 83       	st	Y, r16
     880:	19 83       	std	Y+1, r17	; 0x01
     882:	2a 83       	std	Y+2, r18	; 0x02
     884:	3b 83       	std	Y+3, r19	; 0x03
     886:	cd 55       	subi	r28, 0x5D	; 93
     888:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:130

    for (i = 0; i < 64; i++) {
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
     88a:	6a 01       	movw	r12, r20
     88c:	7b 01       	movw	r14, r22
     88e:	fe e1       	ldi	r31, 0x1E	; 30
     890:	cc 0c       	add	r12, r12
     892:	dd 1c       	adc	r13, r13
     894:	ee 1c       	adc	r14, r14
     896:	ff 1c       	adc	r15, r15
     898:	fa 95       	dec	r31
     89a:	d1 f7       	brne	.-12     	; 0x890 <__LOCK_REGION_LENGTH__+0x490>
     89c:	8a 01       	movw	r16, r20
     89e:	9b 01       	movw	r18, r22
     8a0:	e2 e0       	ldi	r30, 0x02	; 2
     8a2:	36 95       	lsr	r19
     8a4:	27 95       	ror	r18
     8a6:	17 95       	ror	r17
     8a8:	07 95       	ror	r16
     8aa:	ea 95       	dec	r30
     8ac:	d1 f7       	brne	.-12     	; 0x8a2 <__LOCK_REGION_LENGTH__+0x4a2>
     8ae:	28 01       	movw	r4, r16
     8b0:	39 01       	movw	r6, r18
     8b2:	4c 28       	or	r4, r12
     8b4:	5d 28       	or	r5, r13
     8b6:	6e 28       	or	r6, r14
     8b8:	7f 28       	or	r7, r15
     8ba:	8a 01       	movw	r16, r20
     8bc:	9b 01       	movw	r18, r22
     8be:	f3 e1       	ldi	r31, 0x13	; 19
     8c0:	00 0f       	add	r16, r16
     8c2:	11 1f       	adc	r17, r17
     8c4:	22 1f       	adc	r18, r18
     8c6:	33 1f       	adc	r19, r19
     8c8:	fa 95       	dec	r31
     8ca:	d1 f7       	brne	.-12     	; 0x8c0 <__LOCK_REGION_LENGTH__+0x4c0>
     8cc:	6a 01       	movw	r12, r20
     8ce:	7b 01       	movw	r14, r22
     8d0:	ed e0       	ldi	r30, 0x0D	; 13
     8d2:	f6 94       	lsr	r15
     8d4:	e7 94       	ror	r14
     8d6:	d7 94       	ror	r13
     8d8:	c7 94       	ror	r12
     8da:	ea 95       	dec	r30
     8dc:	d1 f7       	brne	.-12     	; 0x8d2 <__LOCK_REGION_LENGTH__+0x4d2>
     8de:	0c 29       	or	r16, r12
     8e0:	1d 29       	or	r17, r13
     8e2:	2e 29       	or	r18, r14
     8e4:	3f 29       	or	r19, r15
     8e6:	04 25       	eor	r16, r4
     8e8:	15 25       	eor	r17, r5
     8ea:	26 25       	eor	r18, r6
     8ec:	37 25       	eor	r19, r7
     8ee:	2a 01       	movw	r4, r20
     8f0:	3b 01       	movw	r6, r22
     8f2:	f6 e1       	ldi	r31, 0x16	; 22
     8f4:	76 94       	lsr	r7
     8f6:	67 94       	ror	r6
     8f8:	57 94       	ror	r5
     8fa:	47 94       	ror	r4
     8fc:	fa 95       	dec	r31
     8fe:	d1 f7       	brne	.-12     	; 0x8f4 <__LOCK_REGION_LENGTH__+0x4f4>
     900:	6a 01       	movw	r12, r20
     902:	7b 01       	movw	r14, r22
     904:	ea e0       	ldi	r30, 0x0A	; 10
     906:	cc 0c       	add	r12, r12
     908:	dd 1c       	adc	r13, r13
     90a:	ee 1c       	adc	r14, r14
     90c:	ff 1c       	adc	r15, r15
     90e:	ea 95       	dec	r30
     910:	d1 f7       	brne	.-12     	; 0x906 <__LOCK_REGION_LENGTH__+0x506>
     912:	4c 28       	or	r4, r12
     914:	5d 28       	or	r5, r13
     916:	6e 28       	or	r6, r14
     918:	7f 28       	or	r7, r15
     91a:	73 01       	movw	r14, r6
     91c:	62 01       	movw	r12, r4
     91e:	c0 26       	eor	r12, r16
     920:	d1 26       	eor	r13, r17
     922:	e2 26       	eor	r14, r18
     924:	f3 26       	eor	r15, r19
     926:	cd 5b       	subi	r28, 0xBD	; 189
     928:	de 4f       	sbci	r29, 0xFE	; 254
     92a:	c8 82       	st	Y, r12
     92c:	d9 82       	std	Y+1, r13	; 0x01
     92e:	ea 82       	std	Y+2, r14	; 0x02
     930:	fb 82       	std	Y+3, r15	; 0x03
     932:	c3 54       	subi	r28, 0x43	; 67
     934:	d1 40       	sbci	r29, 0x01	; 1
     936:	c5 5b       	subi	r28, 0xB5	; 181
     938:	de 4f       	sbci	r29, 0xFE	; 254
     93a:	08 81       	ld	r16, Y
     93c:	19 81       	ldd	r17, Y+1	; 0x01
     93e:	2a 81       	ldd	r18, Y+2	; 0x02
     940:	3b 81       	ldd	r19, Y+3	; 0x03
     942:	cb 54       	subi	r28, 0x4B	; 75
     944:	d1 40       	sbci	r29, 0x01	; 1
     946:	c1 5b       	subi	r28, 0xB1	; 177
     948:	de 4f       	sbci	r29, 0xFE	; 254
     94a:	48 80       	ld	r4, Y
     94c:	59 80       	ldd	r5, Y+1	; 0x01
     94e:	6a 80       	ldd	r6, Y+2	; 0x02
     950:	7b 80       	ldd	r7, Y+3	; 0x03
     952:	cf 54       	subi	r28, 0x4F	; 79
     954:	d1 40       	sbci	r29, 0x01	; 1
     956:	04 25       	eor	r16, r4
     958:	15 25       	eor	r17, r5
     95a:	26 25       	eor	r18, r6
     95c:	37 25       	eor	r19, r7
     95e:	04 23       	and	r16, r20
     960:	15 23       	and	r17, r21
     962:	26 23       	and	r18, r22
     964:	37 23       	and	r19, r23
     966:	c5 5b       	subi	r28, 0xB5	; 181
     968:	de 4f       	sbci	r29, 0xFE	; 254
     96a:	c8 80       	ld	r12, Y
     96c:	d9 80       	ldd	r13, Y+1	; 0x01
     96e:	ea 80       	ldd	r14, Y+2	; 0x02
     970:	fb 80       	ldd	r15, Y+3	; 0x03
     972:	cb 54       	subi	r28, 0x4B	; 75
     974:	d1 40       	sbci	r29, 0x01	; 1
     976:	c4 20       	and	r12, r4
     978:	d5 20       	and	r13, r5
     97a:	e6 20       	and	r14, r6
     97c:	f7 20       	and	r15, r7
     97e:	0c 25       	eor	r16, r12
     980:	1d 25       	eor	r17, r13
     982:	2e 25       	eor	r18, r14
     984:	3f 25       	eor	r19, r15
     986:	cd 5b       	subi	r28, 0xBD	; 189
     988:	de 4f       	sbci	r29, 0xFE	; 254
     98a:	c8 80       	ld	r12, Y
     98c:	d9 80       	ldd	r13, Y+1	; 0x01
     98e:	ea 80       	ldd	r14, Y+2	; 0x02
     990:	fb 80       	ldd	r15, Y+3	; 0x03
     992:	c3 54       	subi	r28, 0x43	; 67
     994:	d1 40       	sbci	r29, 0x01	; 1
     996:	0c 0d       	add	r16, r12
     998:	1d 1d       	adc	r17, r13
     99a:	2e 1d       	adc	r18, r14
     99c:	3f 1d       	adc	r19, r15
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:139
	FF = EE;
	EE = DD + T1;
	DD = CC;
	CC = BB;
	BB = AA;
	AA = T1 + T2;
     99e:	08 0d       	add	r16, r8
     9a0:	19 1d       	adc	r17, r9
     9a2:	2a 1d       	adc	r18, r10
     9a4:	3b 1d       	adc	r19, r11
     9a6:	c7 5a       	subi	r28, 0xA7	; 167
     9a8:	de 4f       	sbci	r29, 0xFE	; 254
     9aa:	48 80       	ld	r4, Y
     9ac:	59 80       	ldd	r5, Y+1	; 0x01
     9ae:	6a 80       	ldd	r6, Y+2	; 0x02
     9b0:	7b 80       	ldd	r7, Y+3	; 0x03
     9b2:	c9 55       	subi	r28, 0x59	; 89
     9b4:	d1 40       	sbci	r29, 0x01	; 1
     9b6:	cd 5b       	subi	r28, 0xBD	; 189
     9b8:	de 4f       	sbci	r29, 0xFE	; 254
     9ba:	48 82       	st	Y, r4
     9bc:	59 82       	std	Y+1, r5	; 0x01
     9be:	6a 82       	std	Y+2, r6	; 0x02
     9c0:	7b 82       	std	Y+3, r7	; 0x03
     9c2:	c3 54       	subi	r28, 0x43	; 67
     9c4:	d1 40       	sbci	r29, 0x01	; 1
     9c6:	c1 5b       	subi	r28, 0xB1	; 177
     9c8:	de 4f       	sbci	r29, 0xFE	; 254
     9ca:	c8 80       	ld	r12, Y
     9cc:	d9 80       	ldd	r13, Y+1	; 0x01
     9ce:	ea 80       	ldd	r14, Y+2	; 0x02
     9d0:	fb 80       	ldd	r15, Y+3	; 0x03
     9d2:	cf 54       	subi	r28, 0x4F	; 79
     9d4:	d1 40       	sbci	r29, 0x01	; 1
     9d6:	cd 57       	subi	r28, 0x7D	; 125
     9d8:	de 4f       	sbci	r29, 0xFE	; 254
     9da:	c8 82       	st	Y, r12
     9dc:	d9 82       	std	Y+1, r13	; 0x01
     9de:	ea 82       	std	Y+2, r14	; 0x02
     9e0:	fb 82       	std	Y+3, r15	; 0x03
     9e2:	c3 58       	subi	r28, 0x83	; 131
     9e4:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:126
	data[i] = in[i];
    for (i = 16; i < 64; ++i)
	data[i] = sigma1(data[i-2]) + data[i-7] + 
	    sigma0(data[i-15]) + data[i - 16];

    for (i = 0; i < 64; i++) {
     9e6:	fa e5       	ldi	r31, 0x5A	; 90
     9e8:	ef 2e       	mov	r14, r31
     9ea:	f2 e0       	ldi	r31, 0x02	; 2
     9ec:	ff 2e       	mov	r15, r31
     9ee:	c7 57       	subi	r28, 0x77	; 119
     9f0:	de 4f       	sbci	r29, 0xFE	; 254
     9f2:	e8 81       	ld	r30, Y
     9f4:	f9 81       	ldd	r31, Y+1	; 0x01
     9f6:	c9 58       	subi	r28, 0x89	; 137
     9f8:	d1 40       	sbci	r29, 0x01	; 1
     9fa:	ee 16       	cp	r14, r30
     9fc:	ff 06       	cpc	r15, r31
     9fe:	09 f0       	breq	.+2      	; 0xa02 <__LOCK_REGION_LENGTH__+0x602>
     a00:	ad c0       	rjmp	.+346    	; 0xb5c <__LOCK_REGION_LENGTH__+0x75c>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:142
	CC = BB;
	BB = AA;
	AA = T1 + T2;
    }

    m->counter[0] += AA;
     a02:	cd 59       	subi	r28, 0x9D	; 157
     a04:	de 4f       	sbci	r29, 0xFE	; 254
     a06:	48 80       	ld	r4, Y
     a08:	59 80       	ldd	r5, Y+1	; 0x01
     a0a:	6a 80       	ldd	r6, Y+2	; 0x02
     a0c:	7b 80       	ldd	r7, Y+3	; 0x03
     a0e:	c3 56       	subi	r28, 0x63	; 99
     a10:	d1 40       	sbci	r29, 0x01	; 1
     a12:	04 0d       	add	r16, r4
     a14:	15 1d       	adc	r17, r5
     a16:	26 1d       	adc	r18, r6
     a18:	37 1d       	adc	r19, r7
     a1a:	f1 01       	movw	r30, r2
     a1c:	00 87       	std	Z+8, r16	; 0x08
     a1e:	11 87       	std	Z+9, r17	; 0x09
     a20:	22 87       	std	Z+10, r18	; 0x0a
     a22:	33 87       	std	Z+11, r19	; 0x0b
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:143
    m->counter[1] += BB;
     a24:	c9 59       	subi	r28, 0x99	; 153
     a26:	de 4f       	sbci	r29, 0xFE	; 254
     a28:	48 80       	ld	r4, Y
     a2a:	59 80       	ldd	r5, Y+1	; 0x01
     a2c:	6a 80       	ldd	r6, Y+2	; 0x02
     a2e:	7b 80       	ldd	r7, Y+3	; 0x03
     a30:	c7 56       	subi	r28, 0x67	; 103
     a32:	d1 40       	sbci	r29, 0x01	; 1
     a34:	44 0d       	add	r20, r4
     a36:	55 1d       	adc	r21, r5
     a38:	66 1d       	adc	r22, r6
     a3a:	77 1d       	adc	r23, r7
     a3c:	44 87       	std	Z+12, r20	; 0x0c
     a3e:	55 87       	std	Z+13, r21	; 0x0d
     a40:	66 87       	std	Z+14, r22	; 0x0e
     a42:	77 87       	std	Z+15, r23	; 0x0f
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:144
    m->counter[2] += CC;
     a44:	c5 59       	subi	r28, 0x95	; 149
     a46:	de 4f       	sbci	r29, 0xFE	; 254
     a48:	48 81       	ld	r20, Y
     a4a:	59 81       	ldd	r21, Y+1	; 0x01
     a4c:	6a 81       	ldd	r22, Y+2	; 0x02
     a4e:	7b 81       	ldd	r23, Y+3	; 0x03
     a50:	cb 56       	subi	r28, 0x6B	; 107
     a52:	d1 40       	sbci	r29, 0x01	; 1
     a54:	c5 5b       	subi	r28, 0xB5	; 181
     a56:	de 4f       	sbci	r29, 0xFE	; 254
     a58:	48 80       	ld	r4, Y
     a5a:	59 80       	ldd	r5, Y+1	; 0x01
     a5c:	6a 80       	ldd	r6, Y+2	; 0x02
     a5e:	7b 80       	ldd	r7, Y+3	; 0x03
     a60:	cb 54       	subi	r28, 0x4B	; 75
     a62:	d1 40       	sbci	r29, 0x01	; 1
     a64:	44 0d       	add	r20, r4
     a66:	55 1d       	adc	r21, r5
     a68:	66 1d       	adc	r22, r6
     a6a:	77 1d       	adc	r23, r7
     a6c:	40 8b       	std	Z+16, r20	; 0x10
     a6e:	51 8b       	std	Z+17, r21	; 0x11
     a70:	62 8b       	std	Z+18, r22	; 0x12
     a72:	73 8b       	std	Z+19, r23	; 0x13
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:145
    m->counter[3] += DD;
     a74:	c1 59       	subi	r28, 0x91	; 145
     a76:	de 4f       	sbci	r29, 0xFE	; 254
     a78:	48 81       	ld	r20, Y
     a7a:	59 81       	ldd	r21, Y+1	; 0x01
     a7c:	6a 81       	ldd	r22, Y+2	; 0x02
     a7e:	7b 81       	ldd	r23, Y+3	; 0x03
     a80:	cf 56       	subi	r28, 0x6F	; 111
     a82:	d1 40       	sbci	r29, 0x01	; 1
     a84:	c1 5b       	subi	r28, 0xB1	; 177
     a86:	de 4f       	sbci	r29, 0xFE	; 254
     a88:	48 80       	ld	r4, Y
     a8a:	59 80       	ldd	r5, Y+1	; 0x01
     a8c:	6a 80       	ldd	r6, Y+2	; 0x02
     a8e:	7b 80       	ldd	r7, Y+3	; 0x03
     a90:	cf 54       	subi	r28, 0x4F	; 79
     a92:	d1 40       	sbci	r29, 0x01	; 1
     a94:	44 0d       	add	r20, r4
     a96:	55 1d       	adc	r21, r5
     a98:	66 1d       	adc	r22, r6
     a9a:	77 1d       	adc	r23, r7
     a9c:	44 8b       	std	Z+20, r20	; 0x14
     a9e:	55 8b       	std	Z+21, r21	; 0x15
     aa0:	66 8b       	std	Z+22, r22	; 0x16
     aa2:	77 8b       	std	Z+23, r23	; 0x17
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:146
    m->counter[4] += EE;
     aa4:	cd 58       	subi	r28, 0x8D	; 141
     aa6:	de 4f       	sbci	r29, 0xFE	; 254
     aa8:	48 81       	ld	r20, Y
     aaa:	59 81       	ldd	r21, Y+1	; 0x01
     aac:	6a 81       	ldd	r22, Y+2	; 0x02
     aae:	7b 81       	ldd	r23, Y+3	; 0x03
     ab0:	c3 57       	subi	r28, 0x73	; 115
     ab2:	d1 40       	sbci	r29, 0x01	; 1
     ab4:	c3 5a       	subi	r28, 0xA3	; 163
     ab6:	de 4f       	sbci	r29, 0xFE	; 254
     ab8:	48 80       	ld	r4, Y
     aba:	59 80       	ldd	r5, Y+1	; 0x01
     abc:	6a 80       	ldd	r6, Y+2	; 0x02
     abe:	7b 80       	ldd	r7, Y+3	; 0x03
     ac0:	cd 55       	subi	r28, 0x5D	; 93
     ac2:	d1 40       	sbci	r29, 0x01	; 1
     ac4:	44 0d       	add	r20, r4
     ac6:	55 1d       	adc	r21, r5
     ac8:	66 1d       	adc	r22, r6
     aca:	77 1d       	adc	r23, r7
     acc:	40 8f       	std	Z+24, r20	; 0x18
     ace:	51 8f       	std	Z+25, r21	; 0x19
     ad0:	62 8f       	std	Z+26, r22	; 0x1a
     ad2:	73 8f       	std	Z+27, r23	; 0x1b
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:147
    m->counter[5] += FF;
     ad4:	c9 58       	subi	r28, 0x89	; 137
     ad6:	de 4f       	sbci	r29, 0xFE	; 254
     ad8:	48 80       	ld	r4, Y
     ada:	59 80       	ldd	r5, Y+1	; 0x01
     adc:	6a 80       	ldd	r6, Y+2	; 0x02
     ade:	7b 80       	ldd	r7, Y+3	; 0x03
     ae0:	c7 57       	subi	r28, 0x77	; 119
     ae2:	d1 40       	sbci	r29, 0x01	; 1
     ae4:	84 0d       	add	r24, r4
     ae6:	95 1d       	adc	r25, r5
     ae8:	a6 1d       	adc	r26, r6
     aea:	b7 1d       	adc	r27, r7
     aec:	84 8f       	std	Z+28, r24	; 0x1c
     aee:	95 8f       	std	Z+29, r25	; 0x1d
     af0:	a6 8f       	std	Z+30, r26	; 0x1e
     af2:	b7 8f       	std	Z+31, r27	; 0x1f
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:148
    m->counter[6] += GG;
     af4:	c5 58       	subi	r28, 0x85	; 133
     af6:	de 4f       	sbci	r29, 0xFE	; 254
     af8:	88 81       	ld	r24, Y
     afa:	99 81       	ldd	r25, Y+1	; 0x01
     afc:	aa 81       	ldd	r26, Y+2	; 0x02
     afe:	bb 81       	ldd	r27, Y+3	; 0x03
     b00:	cb 57       	subi	r28, 0x7B	; 123
     b02:	d1 40       	sbci	r29, 0x01	; 1
     b04:	cb 5a       	subi	r28, 0xAB	; 171
     b06:	de 4f       	sbci	r29, 0xFE	; 254
     b08:	48 80       	ld	r4, Y
     b0a:	59 80       	ldd	r5, Y+1	; 0x01
     b0c:	6a 80       	ldd	r6, Y+2	; 0x02
     b0e:	7b 80       	ldd	r7, Y+3	; 0x03
     b10:	c5 55       	subi	r28, 0x55	; 85
     b12:	d1 40       	sbci	r29, 0x01	; 1
     b14:	84 0d       	add	r24, r4
     b16:	95 1d       	adc	r25, r5
     b18:	a6 1d       	adc	r26, r6
     b1a:	b7 1d       	adc	r27, r7
     b1c:	80 a3       	std	Z+32, r24	; 0x20
     b1e:	91 a3       	std	Z+33, r25	; 0x21
     b20:	a2 a3       	std	Z+34, r26	; 0x22
     b22:	b3 a3       	std	Z+35, r27	; 0x23
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:149
    m->counter[7] += HH;
     b24:	c1 58       	subi	r28, 0x81	; 129
     b26:	de 4f       	sbci	r29, 0xFE	; 254
     b28:	88 81       	ld	r24, Y
     b2a:	99 81       	ldd	r25, Y+1	; 0x01
     b2c:	aa 81       	ldd	r26, Y+2	; 0x02
     b2e:	bb 81       	ldd	r27, Y+3	; 0x03
     b30:	cf 57       	subi	r28, 0x7F	; 127
     b32:	d1 40       	sbci	r29, 0x01	; 1
     b34:	c7 5a       	subi	r28, 0xA7	; 167
     b36:	de 4f       	sbci	r29, 0xFE	; 254
     b38:	48 80       	ld	r4, Y
     b3a:	59 80       	ldd	r5, Y+1	; 0x01
     b3c:	6a 80       	ldd	r6, Y+2	; 0x02
     b3e:	7b 80       	ldd	r7, Y+3	; 0x03
     b40:	c9 55       	subi	r28, 0x59	; 89
     b42:	d1 40       	sbci	r29, 0x01	; 1
     b44:	84 0d       	add	r24, r4
     b46:	95 1d       	adc	r25, r5
     b48:	a6 1d       	adc	r26, r6
     b4a:	b7 1d       	adc	r27, r7
     b4c:	84 a3       	std	Z+36, r24	; 0x24
     b4e:	95 a3       	std	Z+37, r25	; 0x25
     b50:	a6 a3       	std	Z+38, r26	; 0x26
     b52:	b7 a3       	std	Z+39, r27	; 0x27
mavlink_sha256_update():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:184
                p2[1] = p1[2];
                p2[2] = p1[1];
                p2[3] = p1[0];
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
     b54:	c1 2c       	mov	r12, r1
     b56:	d1 2c       	mov	r13, r1
     b58:	76 01       	movw	r14, r12
     b5a:	92 cb       	rjmp	.-2268   	; 0x280 <mavlink_sha256_update+0xde>
mavlink_sha256_calc():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:126
	data[i] = in[i];
    for (i = 16; i < 64; ++i)
	data[i] = sigma1(data[i-2]) + data[i-7] + 
	    sigma0(data[i-15]) + data[i - 16];

    for (i = 0; i < 64; i++) {
     b5c:	c5 5b       	subi	r28, 0xB5	; 181
     b5e:	de 4f       	sbci	r29, 0xFE	; 254
     b60:	48 80       	ld	r4, Y
     b62:	59 80       	ldd	r5, Y+1	; 0x01
     b64:	6a 80       	ldd	r6, Y+2	; 0x02
     b66:	7b 80       	ldd	r7, Y+3	; 0x03
     b68:	cb 54       	subi	r28, 0x4B	; 75
     b6a:	d1 40       	sbci	r29, 0x01	; 1
     b6c:	c1 5b       	subi	r28, 0xB1	; 177
     b6e:	de 4f       	sbci	r29, 0xFE	; 254
     b70:	48 82       	st	Y, r4
     b72:	59 82       	std	Y+1, r5	; 0x01
     b74:	6a 82       	std	Y+2, r6	; 0x02
     b76:	7b 82       	std	Y+3, r7	; 0x03
     b78:	cf 54       	subi	r28, 0x4F	; 79
     b7a:	d1 40       	sbci	r29, 0x01	; 1
     b7c:	c5 5b       	subi	r28, 0xB5	; 181
     b7e:	de 4f       	sbci	r29, 0xFE	; 254
     b80:	48 83       	st	Y, r20
     b82:	59 83       	std	Y+1, r21	; 0x01
     b84:	6a 83       	std	Y+2, r22	; 0x02
     b86:	7b 83       	std	Y+3, r23	; 0x03
     b88:	cb 54       	subi	r28, 0x4B	; 75
     b8a:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:139
	FF = EE;
	EE = DD + T1;
	DD = CC;
	CC = BB;
	BB = AA;
	AA = T1 + T2;
     b8c:	b9 01       	movw	r22, r18
     b8e:	a8 01       	movw	r20, r16
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:126
	data[i] = in[i];
    for (i = 16; i < 64; ++i)
	data[i] = sigma1(data[i-2]) + data[i-7] + 
	    sigma0(data[i-15]) + data[i - 16];

    for (i = 0; i < 64; i++) {
     b90:	cb 5a       	subi	r28, 0xAB	; 171
     b92:	de 4f       	sbci	r29, 0xFE	; 254
     b94:	c8 80       	ld	r12, Y
     b96:	d9 80       	ldd	r13, Y+1	; 0x01
     b98:	ea 80       	ldd	r14, Y+2	; 0x02
     b9a:	fb 80       	ldd	r15, Y+3	; 0x03
     b9c:	c5 55       	subi	r28, 0x55	; 85
     b9e:	d1 40       	sbci	r29, 0x01	; 1
     ba0:	c7 5a       	subi	r28, 0xA7	; 167
     ba2:	de 4f       	sbci	r29, 0xFE	; 254
     ba4:	c8 82       	st	Y, r12
     ba6:	d9 82       	std	Y+1, r13	; 0x01
     ba8:	ea 82       	std	Y+2, r14	; 0x02
     baa:	fb 82       	std	Y+3, r15	; 0x03
     bac:	c9 55       	subi	r28, 0x59	; 89
     bae:	d1 40       	sbci	r29, 0x01	; 1
     bb0:	cb 5a       	subi	r28, 0xAB	; 171
     bb2:	de 4f       	sbci	r29, 0xFE	; 254
     bb4:	88 83       	st	Y, r24
     bb6:	99 83       	std	Y+1, r25	; 0x01
     bb8:	aa 83       	std	Y+2, r26	; 0x02
     bba:	bb 83       	std	Y+3, r27	; 0x03
     bbc:	c5 55       	subi	r28, 0x55	; 85
     bbe:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:135
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
			     
	HH = GG;
	GG = FF;
	FF = EE;
	EE = DD + T1;
     bc0:	c3 5a       	subi	r28, 0xA3	; 163
     bc2:	de 4f       	sbci	r29, 0xFE	; 254
     bc4:	88 81       	ld	r24, Y
     bc6:	99 81       	ldd	r25, Y+1	; 0x01
     bc8:	aa 81       	ldd	r26, Y+2	; 0x02
     bca:	bb 81       	ldd	r27, Y+3	; 0x03
     bcc:	cd 55       	subi	r28, 0x5D	; 93
     bce:	d1 40       	sbci	r29, 0x01	; 1
     bd0:	94 cd       	rjmp	.-1240   	; 0x6fa <__LOCK_REGION_LENGTH__+0x2fa>
mavlink_sha256_update():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:187
	    }
	    mavlink_sha256_calc(m, current);
	    offset = 0;
	}
    }
}
     bd2:	c6 57       	subi	r28, 0x76	; 118
     bd4:	de 4f       	sbci	r29, 0xFE	; 254
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	f8 94       	cli
     bda:	de bf       	out	0x3e, r29	; 62
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	cd bf       	out	0x3d, r28	; 61
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	3f 90       	pop	r3
     c02:	2f 90       	pop	r2
     c04:	08 95       	ret

00000c06 <_GLOBAL__sub_I_FWversion>:
_GLOBAL__sub_I_FWversion():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:1
String FWversion = "UAV00"; // 8 MHz crystal
     c06:	69 e0       	ldi	r22, 0x09	; 9
     c08:	71 e0       	ldi	r23, 0x01	; 1
     c0a:	85 ef       	ldi	r24, 0xF5	; 245
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	0e 94 ca 12 	call	0x2594	; 0x2594 <String::String(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/githash.h:2
// This file is overwritten by github actions, do not update it manually
String githash = "1749b94d4e8e8fffbfc67e24aa856b80742219fb";
     c12:	6f e0       	ldi	r22, 0x0F	; 15
     c14:	71 e0       	ldi	r23, 0x01	; 1
     c16:	8f ee       	ldi	r24, 0xEF	; 239
     c18:	92 e0       	ldi	r25, 0x02	; 2
     c1a:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <String::String(char const*)>

00000c1e <_GLOBAL__sub_D_FWversion>:
_GLOBAL__sub_D_FWversion():
     c1e:	8f ee       	ldi	r24, 0xEF	; 239
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	0e 94 58 12 	call	0x24b0	; 0x24b0 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:1
     c26:	85 ef       	ldi	r24, 0xF5	; 245
     c28:	92 e0       	ldi	r25, 0x02	; 2
     c2a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <String::~String()>

00000c2e <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)>:
_Z14SendTunnelDataPhhhhh():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:115
uint8_t analog_reference = INTERNAL2V56; // DEFAULT, INTERNAL, INTERNAL1V1, INTERNAL2V56, or EXTERNAL


HardwareSerial &hs = Serial;

void SendTunnelData(uint8_t *payload_data, uint8_t payload_length, uint8_t payload_type = 0, uint8_t sysid = 0, uint8_t compid = 0){
     c2e:	af 92       	push	r10
     c30:	bf 92       	push	r11
     c32:	cf 92       	push	r12
     c34:	df 92       	push	r13
     c36:	ef 92       	push	r14
     c38:	ff 92       	push	r15
     c3a:	0f 93       	push	r16
     c3c:	1f 93       	push	r17
     c3e:	cf 93       	push	r28
     c40:	df 93       	push	r29
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	cf 5f       	subi	r28, 0xFF	; 255
     c48:	d2 40       	sbci	r29, 0x02	; 2
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	fc 01       	movw	r30, r24
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:120
  
  mavlink_message_t msgtn;
  mavlink_tunnel_t tunnel;
  uint8_t buftn[MAVLINK_MAX_PACKET_LEN];
  mavlink_msg_tunnel_pack(1, 10, &msgtn, sysid, compid, payload_type, payload_length, payload_data);
     c56:	50 e0       	ldi	r21, 0x00	; 0
     c58:	cc 5d       	subi	r28, 0xDC	; 220
     c5a:	de 4f       	sbci	r29, 0xFE	; 254
     c5c:	59 83       	std	Y+1, r21	; 0x01
     c5e:	48 83       	st	Y, r20
     c60:	c4 52       	subi	r28, 0x24	; 36
     c62:	d1 40       	sbci	r29, 0x01	; 1
mavlink_msg_tunnel_pack():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/common/mavlink_msg_tunnel.h:77
    _mav_put_uint8_t_array(buf, 5, payload, 128);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_TUNNEL_LEN);
#else
    mavlink_tunnel_t packet;
    packet.payload_type = payload_type;
    packet.target_system = target_system;
     c64:	ca 5d       	subi	r28, 0xDA	; 218
     c66:	de 4f       	sbci	r29, 0xFE	; 254
     c68:	28 83       	st	Y, r18
     c6a:	c6 52       	subi	r28, 0x26	; 38
     c6c:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/common/mavlink_msg_tunnel.h:78
    packet.target_component = target_component;
     c6e:	c9 5d       	subi	r28, 0xD9	; 217
     c70:	de 4f       	sbci	r29, 0xFE	; 254
     c72:	08 83       	st	Y, r16
     c74:	c7 52       	subi	r28, 0x27	; 39
     c76:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/common/mavlink_msg_tunnel.h:79
    packet.payload_length = payload_length;
     c78:	c8 5d       	subi	r28, 0xD8	; 216
     c7a:	de 4f       	sbci	r29, 0xFE	; 254
     c7c:	68 83       	st	Y, r22
     c7e:	c8 52       	subi	r28, 0x28	; 40
     c80:	d1 40       	sbci	r29, 0x01	; 1
mav_array_memcpy():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/protocol.h:173
/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
	if (src == NULL) {
     c82:	89 2b       	or	r24, r25
     c84:	c9 f5       	brne	.+114    	; 0xcf8 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xca>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/protocol.h:174
		memset(dest, 0, n);
     c86:	80 e8       	ldi	r24, 0x80	; 128
     c88:	e4 e2       	ldi	r30, 0x24	; 36
     c8a:	f1 e0       	ldi	r31, 0x01	; 1
     c8c:	ec 0f       	add	r30, r28
     c8e:	fd 1f       	adc	r31, r29
     c90:	35 96       	adiw	r30, 0x05	; 5
     c92:	df 01       	movw	r26, r30
     c94:	1d 92       	st	X+, r1
     c96:	8a 95       	dec	r24
     c98:	e9 f7       	brne	.-6      	; 0xc94 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
mavlink_msg_tunnel_pack():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/common/mavlink_msg_tunnel.h:81
    mav_array_memcpy(packet.payload, payload, sizeof(uint8_t)*128);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_TUNNEL_LEN);
     c9a:	85 e8       	ldi	r24, 0x85	; 133
     c9c:	fe 01       	movw	r30, r28
     c9e:	ec 5d       	subi	r30, 0xDC	; 220
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	de 01       	movw	r26, r28
     ca4:	1d 96       	adiw	r26, 0x0d	; 13
     ca6:	01 90       	ld	r0, Z+
     ca8:	0d 92       	st	X+, r0
     caa:	8a 95       	dec	r24
     cac:	e1 f7       	brne	.-8      	; 0xca6 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x78>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/common/mavlink_msg_tunnel.h:84
#endif

    msg->msgid = MAVLINK_MSG_ID_TUNNEL;
     cae:	81 e8       	ldi	r24, 0x81	; 129
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	8a 87       	std	Y+10, r24	; 0x0a
     cb6:	9b 87       	std	Y+11, r25	; 0x0b
     cb8:	ac 87       	std	Y+12, r26	; 0x0c
     cba:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <mavlink_get_channel_status::m_mavlink_status+0xc>
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:217
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
     cbe:	28 2f       	mov	r18, r24
     cc0:	22 70       	andi	r18, 0x02	; 2
     cc2:	81 fd       	sbrc	r24, 1
     cc4:	24 c0       	rjmp	.+72     	; 0xd0e <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xe0>
     cc6:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <mavlink_get_channel_status::m_mavlink_status+0xe>
     cca:	f0 91 b6 02 	lds	r31, 0x02B6	; 0x8002b6 <mavlink_get_channel_status::m_mavlink_status+0xf>
     cce:	f1 2c       	mov	r15, r1
     cd0:	30 97       	sbiw	r30, 0x00	; 0
     cd2:	19 f0       	breq	.+6      	; 0xcda <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xac>
     cd4:	80 81       	ld	r24, Z
     cd6:	81 70       	andi	r24, 0x01	; 1
     cd8:	f8 2e       	mov	r15, r24
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:225
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
     cda:	8d ef       	ldi	r24, 0xFD	; 253
     cdc:	8b 83       	std	Y+3, r24	; 0x03
     cde:	fe 01       	movw	r30, r28
     ce0:	ee 56       	subi	r30, 0x6E	; 110
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	85 e8       	ldi	r24, 0x85	; 133
_mav_trim_payload():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:111
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
	while (length > 1 && payload[length-1] == 0) {
     ce6:	92 91       	ld	r25, -Z
     ce8:	91 11       	cpse	r25, r1
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:112
		length--;
     cec:	81 50       	subi	r24, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:111
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
	while (length > 1 && payload[length-1] == 0) {
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	d1 f7       	brne	.-12     	; 0xce6 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:219
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
     cf2:	3a e0       	ldi	r19, 0x0A	; 10
     cf4:	e3 2e       	mov	r14, r19
     cf6:	11 c0       	rjmp	.+34     	; 0xd1a <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
mav_array_memcpy():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/protocol.h:176
	} else {
		memcpy(dest, src, n);
     cf8:	90 e8       	ldi	r25, 0x80	; 128
     cfa:	a4 e2       	ldi	r26, 0x24	; 36
     cfc:	b1 e0       	ldi	r27, 0x01	; 1
     cfe:	ac 0f       	add	r26, r28
     d00:	bd 1f       	adc	r27, r29
     d02:	15 96       	adiw	r26, 0x05	; 5
     d04:	01 90       	ld	r0, Z+
     d06:	0d 92       	st	X+, r0
     d08:	9a 95       	dec	r25
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xd6>
     d0c:	c6 cf       	rjmp	.-116    	; 0xc9a <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x6c>
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:222
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
     d0e:	8e ef       	ldi	r24, 0xFE	; 254
     d10:	8b 83       	std	Y+3, r24	; 0x03
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:223
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
     d12:	46 e0       	ldi	r20, 0x06	; 6
     d14:	e4 2e       	mov	r14, r20
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:222
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
		msg->magic = MAVLINK_STX_MAVLINK1;
     d16:	f1 2c       	mov	r15, r1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:227
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
	} else {
		msg->magic = MAVLINK_STX;
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
     d18:	85 e8       	ldi	r24, 0x85	; 133
     d1a:	8c 83       	std	Y+4, r24	; 0x04
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:228
	msg->sysid = system_id;
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	98 87       	std	Y+8, r25	; 0x08
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:229
	msg->compid = component_id;
     d20:	3a e0       	ldi	r19, 0x0A	; 10
     d22:	39 87       	std	Y+9, r19	; 0x09
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:231
	msg->incompat_flags = 0;
	if (signing) {
     d24:	f1 10       	cpse	r15, r1
     d26:	48 c0       	rjmp	.+144    	; 0xdb8 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x18a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:230
		msg->magic = MAVLINK_STX;
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
	msg->sysid = system_id;
	msg->compid = component_id;
	msg->incompat_flags = 0;
     d28:	1d 82       	std	Y+5, r1	; 0x05
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:234
	if (signing) {
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
	}
	msg->compat_flags = 0;
     d2a:	1e 82       	std	Y+6, r1	; 0x06
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:235
	msg->seq = status->current_tx_seq;
     d2c:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <mavlink_get_channel_status::m_mavlink_status+0x7>
     d30:	9f 83       	std	Y+7, r25	; 0x07
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:236
	status->current_tx_seq = status->current_tx_seq + 1;
     d32:	31 e0       	ldi	r19, 0x01	; 1
     d34:	39 0f       	add	r19, r25
     d36:	30 93 ae 02 	sts	0x02AE, r19	; 0x8002ae <mavlink_get_channel_status::m_mavlink_status+0x7>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:239

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
     d3a:	3b 81       	ldd	r19, Y+3	; 0x03
     d3c:	c4 51       	subi	r28, 0x14	; 20
     d3e:	dd 4f       	sbci	r29, 0xFD	; 253
     d40:	38 83       	st	Y, r19
     d42:	cc 5e       	subi	r28, 0xEC	; 236
     d44:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:240
	buf[1] = msg->len;
     d46:	c3 51       	subi	r28, 0x13	; 19
     d48:	dd 4f       	sbci	r29, 0xFD	; 253
     d4a:	88 83       	st	Y, r24
     d4c:	cd 5e       	subi	r28, 0xED	; 237
     d4e:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:241
	if (mavlink1) {
     d50:	22 23       	and	r18, r18
     d52:	a1 f1       	breq	.+104    	; 0xdbc <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x18e>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:242
		buf[2] = msg->seq;
     d54:	c2 51       	subi	r28, 0x12	; 18
     d56:	dd 4f       	sbci	r29, 0xFD	; 253
     d58:	98 83       	st	Y, r25
     d5a:	ce 5e       	subi	r28, 0xEE	; 238
     d5c:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:243
		buf[3] = msg->sysid;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	c1 51       	subi	r28, 0x11	; 17
     d62:	dd 4f       	sbci	r29, 0xFD	; 253
     d64:	88 83       	st	Y, r24
     d66:	cf 5e       	subi	r28, 0xEF	; 239
     d68:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:244
		buf[4] = msg->compid;
     d6a:	8a e0       	ldi	r24, 0x0A	; 10
     d6c:	c0 51       	subi	r28, 0x10	; 16
     d6e:	dd 4f       	sbci	r29, 0xFD	; 253
     d70:	88 83       	st	Y, r24
     d72:	c0 5f       	subi	r28, 0xF0	; 240
     d74:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:245
		buf[5] = msg->msgid & 0xFF;
     d76:	81 e8       	ldi	r24, 0x81	; 129
     d78:	cf 50       	subi	r28, 0x0F	; 15
     d7a:	dd 4f       	sbci	r29, 0xFD	; 253
     d7c:	88 83       	st	Y, r24
     d7e:	c1 5f       	subi	r28, 0xF1	; 241
     d80:	d2 40       	sbci	r29, 0x02	; 2
crc_init():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:54
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
        *crcAccum = X25_INIT_CRC;
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	9f ef       	ldi	r25, 0xFF	; 255
     d86:	c4 5c       	subi	r28, 0xC4	; 196
     d88:	dd 4f       	sbci	r29, 0xFD	; 253
     d8a:	99 83       	std	Y+1, r25	; 0x01
     d8c:	88 83       	st	Y, r24
     d8e:	cc 53       	subi	r28, 0x3C	; 60
     d90:	d2 40       	sbci	r29, 0x02	; 2
     d92:	8e 01       	movw	r16, r28
     d94:	04 51       	subi	r16, 0x14	; 20
     d96:	1d 4f       	sbci	r17, 0xFD	; 253
     d98:	68 01       	movw	r12, r16
     d9a:	ce 0c       	add	r12, r14
     d9c:	d1 1c       	adc	r13, r1
     d9e:	0f 5f       	subi	r16, 0xFF	; 255
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
crc_calculate():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:69
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
     da2:	0c 15       	cp	r16, r12
     da4:	1d 05       	cpc	r17, r13
     da6:	b9 f1       	breq	.+110    	; 0xe16 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x1e8>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:70
                crc_accumulate(*pBuffer++, &crcTmp);
     da8:	be 01       	movw	r22, r28
     daa:	64 5c       	subi	r22, 0xC4	; 196
     dac:	7d 4f       	sbci	r23, 0xFD	; 253
     dae:	f8 01       	movw	r30, r16
     db0:	80 81       	ld	r24, Z
     db2:	0e 94 b0 00 	call	0x160	; 0x160 <crc_accumulate>
     db6:	f3 cf       	rjmp	.-26     	; 0xd9e <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:232
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
	msg->sysid = system_id;
	msg->compid = component_id;
	msg->incompat_flags = 0;
	if (signing) {
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
     db8:	9d 83       	std	Y+5, r25	; 0x05
     dba:	b7 cf       	rjmp	.-146    	; 0xd2a <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0xfc>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:247
		buf[2] = msg->seq;
		buf[3] = msg->sysid;
		buf[4] = msg->compid;
		buf[5] = msg->msgid & 0xFF;
	} else {
		buf[2] = msg->incompat_flags;
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	c2 51       	subi	r28, 0x12	; 18
     dc0:	dd 4f       	sbci	r29, 0xFD	; 253
     dc2:	88 83       	st	Y, r24
     dc4:	ce 5e       	subi	r28, 0xEE	; 238
     dc6:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:248
		buf[3] = msg->compat_flags;
     dc8:	c1 51       	subi	r28, 0x11	; 17
     dca:	dd 4f       	sbci	r29, 0xFD	; 253
     dcc:	18 82       	st	Y, r1
     dce:	cf 5e       	subi	r28, 0xEF	; 239
     dd0:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:249
		buf[4] = msg->seq;
     dd2:	c0 51       	subi	r28, 0x10	; 16
     dd4:	dd 4f       	sbci	r29, 0xFD	; 253
     dd6:	98 83       	st	Y, r25
     dd8:	c0 5f       	subi	r28, 0xF0	; 240
     dda:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:250
		buf[5] = msg->sysid;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	cf 50       	subi	r28, 0x0F	; 15
     de0:	dd 4f       	sbci	r29, 0xFD	; 253
     de2:	88 83       	st	Y, r24
     de4:	c1 5f       	subi	r28, 0xF1	; 241
     de6:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:251
		buf[6] = msg->compid;
     de8:	9a e0       	ldi	r25, 0x0A	; 10
     dea:	ce 50       	subi	r28, 0x0E	; 14
     dec:	dd 4f       	sbci	r29, 0xFD	; 253
     dee:	98 83       	st	Y, r25
     df0:	c2 5f       	subi	r28, 0xF2	; 242
     df2:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:252
		buf[7] = msg->msgid & 0xFF;
     df4:	91 e8       	ldi	r25, 0x81	; 129
     df6:	cd 50       	subi	r28, 0x0D	; 13
     df8:	dd 4f       	sbci	r29, 0xFD	; 253
     dfa:	98 83       	st	Y, r25
     dfc:	c3 5f       	subi	r28, 0xF3	; 243
     dfe:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:253
		buf[8] = (msg->msgid >> 8) & 0xFF;
     e00:	cc 50       	subi	r28, 0x0C	; 12
     e02:	dd 4f       	sbci	r29, 0xFD	; 253
     e04:	88 83       	st	Y, r24
     e06:	c4 5f       	subi	r28, 0xF4	; 244
     e08:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:254
		buf[9] = (msg->msgid >> 16) & 0xFF;
     e0a:	cb 50       	subi	r28, 0x0B	; 11
     e0c:	dd 4f       	sbci	r29, 0xFD	; 253
     e0e:	18 82       	st	Y, r1
     e10:	c5 5f       	subi	r28, 0xF5	; 245
     e12:	d2 40       	sbci	r29, 0x02	; 2
     e14:	b6 cf       	rjmp	.-148    	; 0xd82 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x154>
crc_calculate():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:72
        }
        return crcTmp;
     e16:	c4 5c       	subi	r28, 0xC4	; 196
     e18:	dd 4f       	sbci	r29, 0xFD	; 253
     e1a:	88 81       	ld	r24, Y
     e1c:	99 81       	ldd	r25, Y+1	; 0x01
     e1e:	cc 53       	subi	r28, 0x3C	; 60
     e20:	d2 40       	sbci	r29, 0x02	; 2
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:257
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
     e22:	c2 50       	subi	r28, 0x02	; 2
     e24:	dd 4f       	sbci	r29, 0xFD	; 253
     e26:	99 83       	std	Y+1, r25	; 0x01
     e28:	88 83       	st	Y, r24
     e2a:	ce 5f       	subi	r28, 0xFE	; 254
     e2c:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:258
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
     e2e:	0c 81       	ldd	r16, Y+4	; 0x04
     e30:	10 e0       	ldi	r17, 0x00	; 0
     e32:	5e 01       	movw	r10, r28
     e34:	fd e0       	ldi	r31, 0x0D	; 13
     e36:	af 0e       	add	r10, r31
     e38:	b1 1c       	adc	r11, r1
     e3a:	65 01       	movw	r12, r10
crc_accumulate_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:88
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
     e3c:	01 50       	subi	r16, 0x01	; 1
     e3e:	11 09       	sbc	r17, r1
     e40:	48 f0       	brcs	.+18     	; 0xe54 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x226>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/checksum.h:89
                crc_accumulate(*p++, crcAccum);
     e42:	be 01       	movw	r22, r28
     e44:	62 50       	subi	r22, 0x02	; 2
     e46:	7d 4f       	sbci	r23, 0xFD	; 253
     e48:	d5 01       	movw	r26, r10
     e4a:	8d 91       	ld	r24, X+
     e4c:	5d 01       	movw	r10, r26
     e4e:	0e 94 b0 00 	call	0x160	; 0x160 <crc_accumulate>
     e52:	f4 cf       	rjmp	.-24     	; 0xe3c <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x20e>
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:259
	crc_accumulate(crc_extra, &checksum);
     e54:	be 01       	movw	r22, r28
     e56:	62 50       	subi	r22, 0x02	; 2
     e58:	7d 4f       	sbci	r23, 0xFD	; 253
     e5a:	83 e9       	ldi	r24, 0x93	; 147
     e5c:	0e 94 b0 00 	call	0x160	; 0x160 <crc_accumulate>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:260
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
     e60:	c2 50       	subi	r28, 0x02	; 2
     e62:	dd 4f       	sbci	r29, 0xFD	; 253
     e64:	98 81       	ld	r25, Y
     e66:	ce 5f       	subi	r28, 0xFE	; 254
     e68:	d2 40       	sbci	r29, 0x02	; 2
     e6a:	c1 50       	subi	r28, 0x01	; 1
     e6c:	dd 4f       	sbci	r29, 0xFD	; 253
     e6e:	88 81       	ld	r24, Y
     e70:	cf 5f       	subi	r28, 0xFF	; 255
     e72:	d2 40       	sbci	r29, 0x02	; 2
     e74:	ec 81       	ldd	r30, Y+4	; 0x04
     e76:	ec 0d       	add	r30, r12
     e78:	fd 2d       	mov	r31, r13
     e7a:	f1 1d       	adc	r31, r1
     e7c:	90 83       	st	Z, r25
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:261
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
     e7e:	ec 81       	ldd	r30, Y+4	; 0x04
     e80:	ec 0f       	add	r30, r28
     e82:	fd 2f       	mov	r31, r29
     e84:	f1 1d       	adc	r31, r1
     e86:	86 87       	std	Z+14, r24	; 0x0e
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:263

	msg->checksum = checksum;
     e88:	99 83       	std	Y+1, r25	; 0x01
     e8a:	8a 83       	std	Y+2, r24	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:265

	if (signing) {
     e8c:	ff 20       	and	r15, r15
     e8e:	09 f4       	brne	.+2      	; 0xe92 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x264>
     e90:	a9 c1       	rjmp	.+850    	; 0x11e4 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x5b6>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:266
		mavlink_sign_packet(status->signing,
     e92:	00 91 b5 02 	lds	r16, 0x02B5	; 0x8002b5 <mavlink_get_channel_status::m_mavlink_status+0xe>
     e96:	10 91 b6 02 	lds	r17, 0x02B6	; 0x8002b6 <mavlink_get_channel_status::m_mavlink_status+0xf>
mavlink_sign_packet():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:83
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
     e9a:	01 15       	cp	r16, r1
     e9c:	11 05       	cpc	r17, r1
     e9e:	09 f4       	brne	.+2      	; 0xea2 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x274>
     ea0:	a1 c1       	rjmp	.+834    	; 0x11e4 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x5b6>
     ea2:	f8 01       	movw	r30, r16
     ea4:	80 81       	ld	r24, Z
     ea6:	80 ff       	sbrs	r24, 0
     ea8:	9d c1       	rjmp	.+826    	; 0x11e4 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x5b6>
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:270
	if (signing) {
		mavlink_sign_packet(status->signing,
				    msg->signature,
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
     eaa:	fc 80       	ldd	r15, Y+4	; 0x04
mavlink_sign_packet():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:86
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
	    return 0;
	}
	signature[0] = signing->link_id;
     eac:	81 81       	ldd	r24, Z+1	; 0x01
     eae:	c9 5e       	subi	r28, 0xE9	; 233
     eb0:	de 4f       	sbci	r29, 0xFE	; 254
     eb2:	88 83       	st	Y, r24
     eb4:	c7 51       	subi	r28, 0x17	; 23
     eb6:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:87
	tstamp.t64 = signing->timestamp;
     eb8:	72 81       	ldd	r23, Z+2	; 0x02
     eba:	63 81       	ldd	r22, Z+3	; 0x03
     ebc:	54 81       	ldd	r21, Z+4	; 0x04
     ebe:	45 81       	ldd	r20, Z+5	; 0x05
     ec0:	36 81       	ldd	r19, Z+6	; 0x06
     ec2:	27 81       	ldd	r18, Z+7	; 0x07
     ec4:	90 85       	ldd	r25, Z+8	; 0x08
     ec6:	81 85       	ldd	r24, Z+9	; 0x09
     ec8:	ca 50       	subi	r28, 0x0A	; 10
     eca:	dd 4f       	sbci	r29, 0xFD	; 253
     ecc:	78 83       	st	Y, r23
     ece:	c6 5f       	subi	r28, 0xF6	; 246
     ed0:	d2 40       	sbci	r29, 0x02	; 2
     ed2:	c9 50       	subi	r28, 0x09	; 9
     ed4:	dd 4f       	sbci	r29, 0xFD	; 253
     ed6:	68 83       	st	Y, r22
     ed8:	c7 5f       	subi	r28, 0xF7	; 247
     eda:	d2 40       	sbci	r29, 0x02	; 2
     edc:	c8 50       	subi	r28, 0x08	; 8
     ede:	dd 4f       	sbci	r29, 0xFD	; 253
     ee0:	58 83       	st	Y, r21
     ee2:	c8 5f       	subi	r28, 0xF8	; 248
     ee4:	d2 40       	sbci	r29, 0x02	; 2
     ee6:	c7 50       	subi	r28, 0x07	; 7
     ee8:	dd 4f       	sbci	r29, 0xFD	; 253
     eea:	48 83       	st	Y, r20
     eec:	c9 5f       	subi	r28, 0xF9	; 249
     eee:	d2 40       	sbci	r29, 0x02	; 2
     ef0:	c6 50       	subi	r28, 0x06	; 6
     ef2:	dd 4f       	sbci	r29, 0xFD	; 253
     ef4:	38 83       	st	Y, r19
     ef6:	ca 5f       	subi	r28, 0xFA	; 250
     ef8:	d2 40       	sbci	r29, 0x02	; 2
     efa:	c5 50       	subi	r28, 0x05	; 5
     efc:	dd 4f       	sbci	r29, 0xFD	; 253
     efe:	28 83       	st	Y, r18
     f00:	cb 5f       	subi	r28, 0xFB	; 251
     f02:	d2 40       	sbci	r29, 0x02	; 2
     f04:	c4 50       	subi	r28, 0x04	; 4
     f06:	dd 4f       	sbci	r29, 0xFD	; 253
     f08:	98 83       	st	Y, r25
     f0a:	cc 5f       	subi	r28, 0xFC	; 252
     f0c:	d2 40       	sbci	r29, 0x02	; 2
     f0e:	c3 50       	subi	r28, 0x03	; 3
     f10:	dd 4f       	sbci	r29, 0xFD	; 253
     f12:	88 83       	st	Y, r24
     f14:	cd 5f       	subi	r28, 0xFD	; 253
     f16:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:88
	memcpy(&signature[1], tstamp.t8, 6);
     f18:	86 e0       	ldi	r24, 0x06	; 6
     f1a:	fe 01       	movw	r30, r28
     f1c:	ea 50       	subi	r30, 0x0A	; 10
     f1e:	fd 4f       	sbci	r31, 0xFD	; 253
     f20:	de 01       	movw	r26, r28
     f22:	a8 5e       	subi	r26, 0xE8	; 232
     f24:	be 4f       	sbci	r27, 0xFE	; 254
     f26:	01 90       	ld	r0, Z+
     f28:	0d 92       	st	X+, r0
     f2a:	8a 95       	dec	r24
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x2f8>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:89
	signing->timestamp++;
     f2e:	d8 01       	movw	r26, r16
     f30:	12 96       	adiw	r26, 0x02	; 2
     f32:	2c 91       	ld	r18, X
     f34:	12 97       	sbiw	r26, 0x02	; 2
     f36:	13 96       	adiw	r26, 0x03	; 3
     f38:	3c 91       	ld	r19, X
     f3a:	13 97       	sbiw	r26, 0x03	; 3
     f3c:	14 96       	adiw	r26, 0x04	; 4
     f3e:	4c 91       	ld	r20, X
     f40:	14 97       	sbiw	r26, 0x04	; 4
     f42:	15 96       	adiw	r26, 0x05	; 5
     f44:	5c 91       	ld	r21, X
     f46:	15 97       	sbiw	r26, 0x05	; 5
     f48:	16 96       	adiw	r26, 0x06	; 6
     f4a:	6c 91       	ld	r22, X
     f4c:	16 97       	sbiw	r26, 0x06	; 6
     f4e:	17 96       	adiw	r26, 0x07	; 7
     f50:	7c 91       	ld	r23, X
     f52:	17 97       	sbiw	r26, 0x07	; 7
     f54:	18 96       	adiw	r26, 0x08	; 8
     f56:	8c 91       	ld	r24, X
     f58:	18 97       	sbiw	r26, 0x08	; 8
     f5a:	19 96       	adiw	r26, 0x09	; 9
     f5c:	9c 91       	ld	r25, X
     f5e:	a1 e0       	ldi	r26, 0x01	; 1
     f60:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__adddi3_s8>
     f64:	f8 01       	movw	r30, r16
     f66:	22 83       	std	Z+2, r18	; 0x02
     f68:	33 83       	std	Z+3, r19	; 0x03
     f6a:	44 83       	std	Z+4, r20	; 0x04
     f6c:	55 83       	std	Z+5, r21	; 0x05
     f6e:	66 83       	std	Z+6, r22	; 0x06
     f70:	77 83       	std	Z+7, r23	; 0x07
     f72:	80 87       	std	Z+8, r24	; 0x08
     f74:	91 87       	std	Z+9, r25	; 0x09
mavlink_sha256_init():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:93
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
    m->sz[0] = 0;
     f76:	c4 5c       	subi	r28, 0xC4	; 196
     f78:	dd 4f       	sbci	r29, 0xFD	; 253
     f7a:	18 82       	st	Y, r1
     f7c:	19 82       	std	Y+1, r1	; 0x01
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	1b 82       	std	Y+3, r1	; 0x03
     f82:	cc 53       	subi	r28, 0x3C	; 60
     f84:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:94
    m->sz[1] = 0;
     f86:	c0 5c       	subi	r28, 0xC0	; 192
     f88:	dd 4f       	sbci	r29, 0xFD	; 253
     f8a:	18 82       	st	Y, r1
     f8c:	19 82       	std	Y+1, r1	; 0x01
     f8e:	1a 82       	std	Y+2, r1	; 0x02
     f90:	1b 82       	std	Y+3, r1	; 0x03
     f92:	c0 54       	subi	r28, 0x40	; 64
     f94:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:95
    m->counter[0] = 0x6a09e667;
     f96:	87 e6       	ldi	r24, 0x67	; 103
     f98:	96 ee       	ldi	r25, 0xE6	; 230
     f9a:	a9 e0       	ldi	r26, 0x09	; 9
     f9c:	ba e6       	ldi	r27, 0x6A	; 106
     f9e:	cc 5b       	subi	r28, 0xBC	; 188
     fa0:	dd 4f       	sbci	r29, 0xFD	; 253
     fa2:	88 83       	st	Y, r24
     fa4:	99 83       	std	Y+1, r25	; 0x01
     fa6:	aa 83       	std	Y+2, r26	; 0x02
     fa8:	bb 83       	std	Y+3, r27	; 0x03
     faa:	c4 54       	subi	r28, 0x44	; 68
     fac:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:96
    m->counter[1] = 0xbb67ae85;
     fae:	85 e8       	ldi	r24, 0x85	; 133
     fb0:	9e ea       	ldi	r25, 0xAE	; 174
     fb2:	a7 e6       	ldi	r26, 0x67	; 103
     fb4:	bb eb       	ldi	r27, 0xBB	; 187
     fb6:	c8 5b       	subi	r28, 0xB8	; 184
     fb8:	dd 4f       	sbci	r29, 0xFD	; 253
     fba:	88 83       	st	Y, r24
     fbc:	99 83       	std	Y+1, r25	; 0x01
     fbe:	aa 83       	std	Y+2, r26	; 0x02
     fc0:	bb 83       	std	Y+3, r27	; 0x03
     fc2:	c8 54       	subi	r28, 0x48	; 72
     fc4:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:97
    m->counter[2] = 0x3c6ef372;
     fc6:	82 e7       	ldi	r24, 0x72	; 114
     fc8:	93 ef       	ldi	r25, 0xF3	; 243
     fca:	ae e6       	ldi	r26, 0x6E	; 110
     fcc:	bc e3       	ldi	r27, 0x3C	; 60
     fce:	c4 5b       	subi	r28, 0xB4	; 180
     fd0:	dd 4f       	sbci	r29, 0xFD	; 253
     fd2:	88 83       	st	Y, r24
     fd4:	99 83       	std	Y+1, r25	; 0x01
     fd6:	aa 83       	std	Y+2, r26	; 0x02
     fd8:	bb 83       	std	Y+3, r27	; 0x03
     fda:	cc 54       	subi	r28, 0x4C	; 76
     fdc:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:98
    m->counter[3] = 0xa54ff53a;
     fde:	8a e3       	ldi	r24, 0x3A	; 58
     fe0:	95 ef       	ldi	r25, 0xF5	; 245
     fe2:	af e4       	ldi	r26, 0x4F	; 79
     fe4:	b5 ea       	ldi	r27, 0xA5	; 165
     fe6:	c0 5b       	subi	r28, 0xB0	; 176
     fe8:	dd 4f       	sbci	r29, 0xFD	; 253
     fea:	88 83       	st	Y, r24
     fec:	99 83       	std	Y+1, r25	; 0x01
     fee:	aa 83       	std	Y+2, r26	; 0x02
     ff0:	bb 83       	std	Y+3, r27	; 0x03
     ff2:	c0 55       	subi	r28, 0x50	; 80
     ff4:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:99
    m->counter[4] = 0x510e527f;
     ff6:	8f e7       	ldi	r24, 0x7F	; 127
     ff8:	92 e5       	ldi	r25, 0x52	; 82
     ffa:	ae e0       	ldi	r26, 0x0E	; 14
     ffc:	b1 e5       	ldi	r27, 0x51	; 81
     ffe:	cc 5a       	subi	r28, 0xAC	; 172
    1000:	dd 4f       	sbci	r29, 0xFD	; 253
    1002:	88 83       	st	Y, r24
    1004:	99 83       	std	Y+1, r25	; 0x01
    1006:	aa 83       	std	Y+2, r26	; 0x02
    1008:	bb 83       	std	Y+3, r27	; 0x03
    100a:	c4 55       	subi	r28, 0x54	; 84
    100c:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:100
    m->counter[5] = 0x9b05688c;
    100e:	8c e8       	ldi	r24, 0x8C	; 140
    1010:	98 e6       	ldi	r25, 0x68	; 104
    1012:	a5 e0       	ldi	r26, 0x05	; 5
    1014:	bb e9       	ldi	r27, 0x9B	; 155
    1016:	c8 5a       	subi	r28, 0xA8	; 168
    1018:	dd 4f       	sbci	r29, 0xFD	; 253
    101a:	88 83       	st	Y, r24
    101c:	99 83       	std	Y+1, r25	; 0x01
    101e:	aa 83       	std	Y+2, r26	; 0x02
    1020:	bb 83       	std	Y+3, r27	; 0x03
    1022:	c8 55       	subi	r28, 0x58	; 88
    1024:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:101
    m->counter[6] = 0x1f83d9ab;
    1026:	8b ea       	ldi	r24, 0xAB	; 171
    1028:	99 ed       	ldi	r25, 0xD9	; 217
    102a:	a3 e8       	ldi	r26, 0x83	; 131
    102c:	bf e1       	ldi	r27, 0x1F	; 31
    102e:	c4 5a       	subi	r28, 0xA4	; 164
    1030:	dd 4f       	sbci	r29, 0xFD	; 253
    1032:	88 83       	st	Y, r24
    1034:	99 83       	std	Y+1, r25	; 0x01
    1036:	aa 83       	std	Y+2, r26	; 0x02
    1038:	bb 83       	std	Y+3, r27	; 0x03
    103a:	cc 55       	subi	r28, 0x5C	; 92
    103c:	d2 40       	sbci	r29, 0x02	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:102
    m->counter[7] = 0x5be0cd19;
    103e:	89 e1       	ldi	r24, 0x19	; 25
    1040:	9d ec       	ldi	r25, 0xCD	; 205
    1042:	a0 ee       	ldi	r26, 0xE0	; 224
    1044:	bb e5       	ldi	r27, 0x5B	; 91
    1046:	c0 5a       	subi	r28, 0xA0	; 160
    1048:	dd 4f       	sbci	r29, 0xFD	; 253
    104a:	88 83       	st	Y, r24
    104c:	99 83       	std	Y+1, r25	; 0x01
    104e:	aa 83       	std	Y+2, r26	; 0x02
    1050:	bb 83       	std	Y+3, r27	; 0x03
    1052:	c0 56       	subi	r28, 0x60	; 96
    1054:	d2 40       	sbci	r29, 0x02	; 2
mavlink_sign_packet():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:92
	
	mavlink_sha256_init(&ctx);
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
    1056:	b8 01       	movw	r22, r16
    1058:	66 5f       	subi	r22, 0xF6	; 246
    105a:	7f 4f       	sbci	r23, 0xFF	; 255
    105c:	20 e2       	ldi	r18, 0x20	; 32
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e0       	ldi	r20, 0x00	; 0
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	ce 01       	movw	r24, r28
    1066:	84 5c       	subi	r24, 0xC4	; 196
    1068:	9d 4f       	sbci	r25, 0xFD	; 253
    106a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mavlink_sha256_update>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:93
	mavlink_sha256_update(&ctx, header, header_len);
    106e:	2e 2d       	mov	r18, r14
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	40 e0       	ldi	r20, 0x00	; 0
    1076:	be 01       	movw	r22, r28
    1078:	64 51       	subi	r22, 0x14	; 20
    107a:	7d 4f       	sbci	r23, 0xFD	; 253
    107c:	ce 01       	movw	r24, r28
    107e:	84 5c       	subi	r24, 0xC4	; 196
    1080:	9d 4f       	sbci	r25, 0xFD	; 253
    1082:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mavlink_sha256_update>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:94
	mavlink_sha256_update(&ctx, packet, packet_len);
    1086:	2f 2d       	mov	r18, r15
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	50 e0       	ldi	r21, 0x00	; 0
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	b6 01       	movw	r22, r12
    1090:	ce 01       	movw	r24, r28
    1092:	84 5c       	subi	r24, 0xC4	; 196
    1094:	9d 4f       	sbci	r25, 0xFD	; 253
    1096:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mavlink_sha256_update>
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:266
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);

	msg->checksum = checksum;

	if (signing) {
		mavlink_sign_packet(status->signing,
    109a:	b6 01       	movw	r22, r12
    109c:	6f 0d       	add	r22, r15
    109e:	71 1d       	adc	r23, r1
mavlink_sign_packet():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:95
	
	mavlink_sha256_init(&ctx);
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
	mavlink_sha256_update(&ctx, header, header_len);
	mavlink_sha256_update(&ctx, packet, packet_len);
	mavlink_sha256_update(&ctx, crc, 2);
    10a0:	22 e0       	ldi	r18, 0x02	; 2
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e0       	ldi	r20, 0x00	; 0
    10a6:	50 e0       	ldi	r21, 0x00	; 0
    10a8:	ce 01       	movw	r24, r28
    10aa:	84 5c       	subi	r24, 0xC4	; 196
    10ac:	9d 4f       	sbci	r25, 0xFD	; 253
    10ae:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mavlink_sha256_update>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:96
	mavlink_sha256_update(&ctx, signature, 7);
    10b2:	27 e0       	ldi	r18, 0x07	; 7
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e0       	ldi	r20, 0x00	; 0
    10b8:	50 e0       	ldi	r21, 0x00	; 0
    10ba:	be 01       	movw	r22, r28
    10bc:	69 5e       	subi	r22, 0xE9	; 233
    10be:	7e 4f       	sbci	r23, 0xFE	; 254
    10c0:	ce 01       	movw	r24, r28
    10c2:	84 5c       	subi	r24, 0xC4	; 196
    10c4:	9d 4f       	sbci	r25, 0xFD	; 253
    10c6:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mavlink_sha256_update>
mavlink_sha256_final_48():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:195
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
    10ca:	c4 5c       	subi	r28, 0xC4	; 196
    10cc:	dd 4f       	sbci	r29, 0xFD	; 253
    10ce:	88 81       	ld	r24, Y
    10d0:	99 81       	ldd	r25, Y+1	; 0x01
    10d2:	aa 81       	ldd	r26, Y+2	; 0x02
    10d4:	bb 81       	ldd	r27, Y+3	; 0x03
    10d6:	cc 53       	subi	r28, 0x3C	; 60
    10d8:	d2 40       	sbci	r29, 0x02	; 2
    10da:	ac 01       	movw	r20, r24
    10dc:	bd 01       	movw	r22, r26
    10de:	23 e0       	ldi	r18, 0x03	; 3
    10e0:	76 95       	lsr	r23
    10e2:	67 95       	ror	r22
    10e4:	57 95       	ror	r21
    10e6:	47 95       	ror	r20
    10e8:	2a 95       	dec	r18
    10ea:	d1 f7       	brne	.-12     	; 0x10e0 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x4b2>
    10ec:	4f 73       	andi	r20, 0x3F	; 63
    10ee:	55 27       	eor	r21, r21
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:196
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
    10f0:	27 e7       	ldi	r18, 0x77	; 119
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	24 1b       	sub	r18, r20
    10f6:	35 0b       	sbc	r19, r21
    10f8:	2f 73       	andi	r18, 0x3F	; 63
    10fa:	33 27       	eor	r19, r19
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:199
    uint8_t *p = (uint8_t *)&m->counter[0];
    
    *zeros = 0x80;
    10fc:	be 01       	movw	r22, r28
    10fe:	6c 55       	subi	r22, 0x5C	; 92
    1100:	7d 4f       	sbci	r23, 0xFD	; 253
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	fb 01       	movw	r30, r22
    1106:	41 93       	st	Z+, r20
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:200
    memset (zeros + 1, 0, sizeof(zeros) - 1);
    1108:	47 e4       	ldi	r20, 0x47	; 71
    110a:	11 92       	st	Z+, r1
    110c:	4a 95       	dec	r20
    110e:	e9 f7       	brne	.-6      	; 0x110a <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x4dc>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:201
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
    1110:	e4 ea       	ldi	r30, 0xA4	; 164
    1112:	f2 e0       	ldi	r31, 0x02	; 2
    1114:	ec 0f       	add	r30, r28
    1116:	fd 1f       	adc	r31, r29
    1118:	e2 0f       	add	r30, r18
    111a:	f3 1f       	adc	r31, r19
    111c:	80 87       	std	Z+8, r24	; 0x08
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:202
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
    111e:	97 83       	std	Z+7, r25	; 0x07
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:203
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
    1120:	a6 83       	std	Z+6, r26	; 0x06
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:204
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
    1122:	b5 83       	std	Z+5, r27	; 0x05
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:205
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
    1124:	c0 5c       	subi	r28, 0xC0	; 192
    1126:	dd 4f       	sbci	r29, 0xFD	; 253
    1128:	58 81       	ld	r21, Y
    112a:	c0 54       	subi	r28, 0x40	; 64
    112c:	d2 40       	sbci	r29, 0x02	; 2
    112e:	cf 5b       	subi	r28, 0xBF	; 191
    1130:	dd 4f       	sbci	r29, 0xFD	; 253
    1132:	48 81       	ld	r20, Y
    1134:	c1 54       	subi	r28, 0x41	; 65
    1136:	d2 40       	sbci	r29, 0x02	; 2
    1138:	ce 5b       	subi	r28, 0xBE	; 190
    113a:	dd 4f       	sbci	r29, 0xFD	; 253
    113c:	98 81       	ld	r25, Y
    113e:	c2 54       	subi	r28, 0x42	; 66
    1140:	d2 40       	sbci	r29, 0x02	; 2
    1142:	cd 5b       	subi	r28, 0xBD	; 189
    1144:	dd 4f       	sbci	r29, 0xFD	; 253
    1146:	88 81       	ld	r24, Y
    1148:	c3 54       	subi	r28, 0x43	; 67
    114a:	d2 40       	sbci	r29, 0x02	; 2
    114c:	54 83       	std	Z+4, r21	; 0x04
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:206
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
    114e:	43 83       	std	Z+3, r20	; 0x03
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:207
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
    1150:	92 83       	std	Z+2, r25	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:208
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
    1152:	81 83       	std	Z+1, r24	; 0x01
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:210

    mavlink_sha256_update(m, zeros, dstart + 8);
    1154:	27 5f       	subi	r18, 0xF7	; 247
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	be 01       	movw	r22, r28
    115e:	6c 55       	subi	r22, 0x5C	; 92
    1160:	7d 4f       	sbci	r23, 0xFD	; 253
    1162:	ce 01       	movw	r24, r28
    1164:	84 5c       	subi	r24, 0xC4	; 196
    1166:	9d 4f       	sbci	r25, 0xFD	; 253
    1168:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <mavlink_sha256_update>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:215

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
    116c:	c9 5b       	subi	r28, 0xB9	; 185
    116e:	dd 4f       	sbci	r29, 0xFD	; 253
    1170:	88 81       	ld	r24, Y
    1172:	c7 54       	subi	r28, 0x47	; 71
    1174:	d2 40       	sbci	r29, 0x02	; 2
    1176:	c2 5e       	subi	r28, 0xE2	; 226
    1178:	de 4f       	sbci	r29, 0xFE	; 254
    117a:	88 83       	st	Y, r24
    117c:	ce 51       	subi	r28, 0x1E	; 30
    117e:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:216
    result[1] = p[2];
    1180:	ca 5b       	subi	r28, 0xBA	; 186
    1182:	dd 4f       	sbci	r29, 0xFD	; 253
    1184:	88 81       	ld	r24, Y
    1186:	c6 54       	subi	r28, 0x46	; 70
    1188:	d2 40       	sbci	r29, 0x02	; 2
    118a:	c1 5e       	subi	r28, 0xE1	; 225
    118c:	de 4f       	sbci	r29, 0xFE	; 254
    118e:	88 83       	st	Y, r24
    1190:	cf 51       	subi	r28, 0x1F	; 31
    1192:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:217
    result[2] = p[1];
    1194:	cb 5b       	subi	r28, 0xBB	; 187
    1196:	dd 4f       	sbci	r29, 0xFD	; 253
    1198:	88 81       	ld	r24, Y
    119a:	c5 54       	subi	r28, 0x45	; 69
    119c:	d2 40       	sbci	r29, 0x02	; 2
    119e:	c0 5e       	subi	r28, 0xE0	; 224
    11a0:	de 4f       	sbci	r29, 0xFE	; 254
    11a2:	88 83       	st	Y, r24
    11a4:	c0 52       	subi	r28, 0x20	; 32
    11a6:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:218
    result[3] = p[0];
    11a8:	cc 5b       	subi	r28, 0xBC	; 188
    11aa:	dd 4f       	sbci	r29, 0xFD	; 253
    11ac:	88 81       	ld	r24, Y
    11ae:	c4 54       	subi	r28, 0x44	; 68
    11b0:	d2 40       	sbci	r29, 0x02	; 2
    11b2:	cf 5d       	subi	r28, 0xDF	; 223
    11b4:	de 4f       	sbci	r29, 0xFE	; 254
    11b6:	88 83       	st	Y, r24
    11b8:	c1 52       	subi	r28, 0x21	; 33
    11ba:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:219
    result[4] = p[7];
    11bc:	c5 5b       	subi	r28, 0xB5	; 181
    11be:	dd 4f       	sbci	r29, 0xFD	; 253
    11c0:	88 81       	ld	r24, Y
    11c2:	cb 54       	subi	r28, 0x4B	; 75
    11c4:	d2 40       	sbci	r29, 0x02	; 2
    11c6:	ce 5d       	subi	r28, 0xDE	; 222
    11c8:	de 4f       	sbci	r29, 0xFE	; 254
    11ca:	88 83       	st	Y, r24
    11cc:	c2 52       	subi	r28, 0x22	; 34
    11ce:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_sha256.h:220
    result[5] = p[6];
    11d0:	c6 5b       	subi	r28, 0xB6	; 182
    11d2:	dd 4f       	sbci	r29, 0xFD	; 253
    11d4:	88 81       	ld	r24, Y
    11d6:	ca 54       	subi	r28, 0x4A	; 74
    11d8:	d2 40       	sbci	r29, 0x02	; 2
    11da:	cd 5d       	subi	r28, 0xDD	; 221
    11dc:	de 4f       	sbci	r29, 0xFE	; 254
    11de:	88 83       	st	Y, r24
    11e0:	c3 52       	subi	r28, 0x23	; 35
    11e2:	d1 40       	sbci	r29, 0x01	; 1
mavlink_finalize_message_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:273
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
	}
	
	return msg->len + header_len + 2 + signature_len;
    11e4:	fc 80       	ldd	r15, Y+4	; 0x04
mavlink_msg_to_send_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:435
{
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	5f 81       	ldd	r21, Y+7	; 0x07
    11ea:	48 85       	ldd	r20, Y+8	; 0x08
    11ec:	39 85       	ldd	r19, Y+9	; 0x09
    11ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    11f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    11f2:	ac 85       	ldd	r26, Y+12	; 0x0c
    11f4:	0f 2d       	mov	r16, r15
    11f6:	10 e0       	ldi	r17, 0x00	; 0
    11f8:	2e 3f       	cpi	r18, 0xFE	; 254
    11fa:	09 f4       	brne	.+2      	; 0x11fe <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x5d0>
    11fc:	8b c0       	rjmp	.+278    	; 0x1314 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x6e6>
    11fe:	e1 e0       	ldi	r30, 0x01	; 1
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	ec 0f       	add	r30, r28
    1204:	fd 1f       	adc	r31, r29
    1206:	e0 0f       	add	r30, r16
    1208:	f1 1f       	adc	r31, r17
    120a:	f0 2e       	mov	r15, r16
_mav_trim_payload():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:111
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
	while (length > 1 && payload[length-1] == 0) {
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	60 17       	cp	r22, r16
    1210:	40 f4       	brcc	.+16     	; 0x1222 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x5f4>
    1212:	b3 85       	ldd	r27, Z+11	; 0x0b
    1214:	b8 01       	movw	r22, r16
    1216:	61 50       	subi	r22, 0x01	; 1
    1218:	71 09       	sbc	r23, r1
    121a:	31 97       	sbiw	r30, 0x01	; 1
    121c:	bb 23       	and	r27, r27
    121e:	09 f4       	brne	.+2      	; 0x1222 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x5f4>
    1220:	ab c0       	rjmp	.+342    	; 0x1378 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x74a>
mavlink_msg_to_send_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:449
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
		ck = buf + header_len + 1 + (uint16_t)msg->len;
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
		header_len = MAVLINK_CORE_HEADER_LEN;
		buf[0] = msg->magic;
    1222:	cc 5d       	subi	r28, 0xDC	; 220
    1224:	de 4f       	sbci	r29, 0xFE	; 254
    1226:	28 83       	st	Y, r18
    1228:	c4 52       	subi	r28, 0x24	; 36
    122a:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:450
		buf[1] = length;
    122c:	cb 5d       	subi	r28, 0xDB	; 219
    122e:	de 4f       	sbci	r29, 0xFE	; 254
    1230:	f8 82       	st	Y, r15
    1232:	c5 52       	subi	r28, 0x25	; 37
    1234:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:451
		buf[2] = msg->incompat_flags;
    1236:	ed 80       	ldd	r14, Y+5	; 0x05
    1238:	ca 5d       	subi	r28, 0xDA	; 218
    123a:	de 4f       	sbci	r29, 0xFE	; 254
    123c:	e8 82       	st	Y, r14
    123e:	c6 52       	subi	r28, 0x26	; 38
    1240:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:452
		buf[3] = msg->compat_flags;
    1242:	2e 81       	ldd	r18, Y+6	; 0x06
    1244:	c9 5d       	subi	r28, 0xD9	; 217
    1246:	de 4f       	sbci	r29, 0xFE	; 254
    1248:	28 83       	st	Y, r18
    124a:	c7 52       	subi	r28, 0x27	; 39
    124c:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:453
		buf[4] = msg->seq;
    124e:	c8 5d       	subi	r28, 0xD8	; 216
    1250:	de 4f       	sbci	r29, 0xFE	; 254
    1252:	58 83       	st	Y, r21
    1254:	c8 52       	subi	r28, 0x28	; 40
    1256:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:454
		buf[5] = msg->sysid;
    1258:	c7 5d       	subi	r28, 0xD7	; 215
    125a:	de 4f       	sbci	r29, 0xFE	; 254
    125c:	48 83       	st	Y, r20
    125e:	c9 52       	subi	r28, 0x29	; 41
    1260:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:455
		buf[6] = msg->compid;
    1262:	c6 5d       	subi	r28, 0xD6	; 214
    1264:	de 4f       	sbci	r29, 0xFE	; 254
    1266:	38 83       	st	Y, r19
    1268:	ca 52       	subi	r28, 0x2A	; 42
    126a:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:456
		buf[7] = msg->msgid & 0xFF;
    126c:	c5 5d       	subi	r28, 0xD5	; 213
    126e:	de 4f       	sbci	r29, 0xFE	; 254
    1270:	88 83       	st	Y, r24
    1272:	cb 52       	subi	r28, 0x2B	; 43
    1274:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:457
		buf[8] = (msg->msgid >> 8) & 0xFF;
    1276:	c4 5d       	subi	r28, 0xD4	; 212
    1278:	de 4f       	sbci	r29, 0xFE	; 254
    127a:	98 83       	st	Y, r25
    127c:	cc 52       	subi	r28, 0x2C	; 44
    127e:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:458
		buf[9] = (msg->msgid >> 16) & 0xFF;
    1280:	c3 5d       	subi	r28, 0xD3	; 211
    1282:	de 4f       	sbci	r29, 0xFE	; 254
    1284:	a8 83       	st	Y, r26
    1286:	cd 52       	subi	r28, 0x2D	; 45
    1288:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:459
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
    128a:	a8 01       	movw	r20, r16
    128c:	b6 01       	movw	r22, r12
    128e:	84 e2       	ldi	r24, 0x24	; 36
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	8c 0f       	add	r24, r28
    1294:	9d 1f       	adc	r25, r29
    1296:	0a 96       	adiw	r24, 0x0a	; 10
    1298:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <memcpy>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:460
		ck = buf + header_len + 1 + (uint16_t)length;
    129c:	06 5f       	subi	r16, 0xF6	; 246
    129e:	1f 4f       	sbci	r17, 0xFF	; 255
    12a0:	e4 e2       	ldi	r30, 0x24	; 36
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	ec 0f       	add	r30, r28
    12a6:	fd 1f       	adc	r31, r29
    12a8:	e0 0f       	add	r30, r16
    12aa:	f1 1f       	adc	r31, r17
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:448
		buf[5] = msg->msgid & 0xFF;
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
		ck = buf + header_len + 1 + (uint16_t)msg->len;
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
		header_len = MAVLINK_CORE_HEADER_LEN;
    12ac:	19 e0       	ldi	r17, 0x09	; 9
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:461
		buf[7] = msg->msgid & 0xFF;
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
		ck = buf + header_len + 1 + (uint16_t)length;
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
    12ae:	8d e0       	ldi	r24, 0x0D	; 13
    12b0:	e0 fe       	sbrs	r14, 0
    12b2:	60 c0       	rjmp	.+192    	; 0x1374 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x746>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:463
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
    12b4:	29 81       	ldd	r18, Y+1	; 0x01
    12b6:	9a 81       	ldd	r25, Y+2	; 0x02
    12b8:	20 83       	st	Z, r18
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:464
	ck[1] = (uint8_t)(msg->checksum >> 8);
    12ba:	91 83       	std	Z+1, r25	; 0x01
    12bc:	c8 2e       	mov	r12, r24
    12be:	d1 2c       	mov	r13, r1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:465
	if (signature_len > 0) {
    12c0:	88 23       	and	r24, r24
    12c2:	41 f0       	breq	.+16     	; 0x12d4 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a6>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:466
		memcpy(&ck[2], msg->signature, signature_len);
    12c4:	a6 01       	movw	r20, r12
    12c6:	be 01       	movw	r22, r28
    12c8:	69 5e       	subi	r22, 0xE9	; 233
    12ca:	7e 4f       	sbci	r23, 0xFE	; 254
    12cc:	cf 01       	movw	r24, r30
    12ce:	02 96       	adiw	r24, 0x02	; 2
    12d0:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <memcpy>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:469
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
    12d4:	a6 01       	movw	r20, r12
    12d6:	41 0f       	add	r20, r17
    12d8:	51 1d       	adc	r21, r1
    12da:	4d 5f       	subi	r20, 0xFD	; 253
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	4f 0d       	add	r20, r15
    12e0:	51 1d       	adc	r21, r1
_Z14SendTunnelDataPhhhhh():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:122
  uint16_t lentn = mavlink_msg_to_send_buffer(buftn, &msgtn);
  hs.write(buftn, lentn);
    12e2:	be 01       	movw	r22, r28
    12e4:	6c 5d       	subi	r22, 0xDC	; 220
    12e6:	7e 4f       	sbci	r23, 0xFE	; 254
    12e8:	8d e9       	ldi	r24, 0x9D	; 157
    12ea:	93 e0       	ldi	r25, 0x03	; 3
    12ec:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <Print::write(unsigned char const*, unsigned int)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:125

  return;
}
    12f0:	c1 50       	subi	r28, 0x01	; 1
    12f2:	dd 4f       	sbci	r29, 0xFD	; 253
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	bf 90       	pop	r11
    1310:	af 90       	pop	r10
    1312:	08 95       	ret
mavlink_msg_to_send_buffer():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:438
        uint8_t length = msg->len;
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
		signature_len = 0;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
		buf[0] = msg->magic;
    1314:	cc 5d       	subi	r28, 0xDC	; 220
    1316:	de 4f       	sbci	r29, 0xFE	; 254
    1318:	28 83       	st	Y, r18
    131a:	c4 52       	subi	r28, 0x24	; 36
    131c:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:439
		buf[1] = length;
    131e:	cb 5d       	subi	r28, 0xDB	; 219
    1320:	de 4f       	sbci	r29, 0xFE	; 254
    1322:	f8 82       	st	Y, r15
    1324:	c5 52       	subi	r28, 0x25	; 37
    1326:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:440
		buf[2] = msg->seq;
    1328:	ca 5d       	subi	r28, 0xDA	; 218
    132a:	de 4f       	sbci	r29, 0xFE	; 254
    132c:	58 83       	st	Y, r21
    132e:	c6 52       	subi	r28, 0x26	; 38
    1330:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:441
		buf[3] = msg->sysid;
    1332:	c9 5d       	subi	r28, 0xD9	; 217
    1334:	de 4f       	sbci	r29, 0xFE	; 254
    1336:	48 83       	st	Y, r20
    1338:	c7 52       	subi	r28, 0x27	; 39
    133a:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:442
		buf[4] = msg->compid;
    133c:	c8 5d       	subi	r28, 0xD8	; 216
    133e:	de 4f       	sbci	r29, 0xFE	; 254
    1340:	38 83       	st	Y, r19
    1342:	c8 52       	subi	r28, 0x28	; 40
    1344:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:443
		buf[5] = msg->msgid & 0xFF;
    1346:	c7 5d       	subi	r28, 0xD7	; 215
    1348:	de 4f       	sbci	r29, 0xFE	; 254
    134a:	88 83       	st	Y, r24
    134c:	c9 52       	subi	r28, 0x29	; 41
    134e:	d1 40       	sbci	r29, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:444
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
    1350:	a8 01       	movw	r20, r16
    1352:	b6 01       	movw	r22, r12
    1354:	84 e2       	ldi	r24, 0x24	; 36
    1356:	91 e0       	ldi	r25, 0x01	; 1
    1358:	8c 0f       	add	r24, r28
    135a:	9d 1f       	adc	r25, r29
    135c:	06 96       	adiw	r24, 0x06	; 6
    135e:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <memcpy>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:445
		ck = buf + header_len + 1 + (uint16_t)msg->len;
    1362:	0a 5f       	subi	r16, 0xFA	; 250
    1364:	1f 4f       	sbci	r17, 0xFF	; 255
    1366:	e4 e2       	ldi	r30, 0x24	; 36
    1368:	f1 e0       	ldi	r31, 0x01	; 1
    136a:	ec 0f       	add	r30, r28
    136c:	fd 1f       	adc	r31, r29
    136e:	e0 0f       	add	r30, r16
    1370:	f1 1f       	adc	r31, r17
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:437
	uint8_t *ck;
        uint8_t length = msg->len;
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
		signature_len = 0;
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
    1372:	15 e0       	ldi	r17, 0x05	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:461
		buf[7] = msg->msgid & 0xFF;
		buf[8] = (msg->msgid >> 8) & 0xFF;
		buf[9] = (msg->msgid >> 16) & 0xFF;
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
		ck = buf + header_len + 1 + (uint16_t)length;
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	9e cf       	rjmp	.-196    	; 0x12b4 <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x686>
_mav_trim_payload():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/src/mavlink/mavlink_helpers.h:111
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
	while (length > 1 && payload[length-1] == 0) {
    1378:	8b 01       	movw	r16, r22
    137a:	47 cf       	rjmp	.-370    	; 0x120a <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)+0x5dc>

0000137c <loop>:
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:246
  // Initiates RTC
}


void loop()
{
    137c:	4f 92       	push	r4
    137e:	5f 92       	push	r5
    1380:	6f 92       	push	r6
    1382:	7f 92       	push	r7
    1384:	8f 92       	push	r8
    1386:	9f 92       	push	r9
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	c0 58       	subi	r28, 0x80	; 128
    13a2:	d5 40       	sbci	r29, 0x05	; 5
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:252
  uint16_t histogram[CHANNELS];
  uint8_t mavlink_buffer_1[128];
  uint8_t mavlink_buffer_2[128];
  uint8_t mavlink_buffer_3[128];
  
  memset(histogram, 0, sizeof(histogram));  // clear array
    13ae:	9e 01       	movw	r18, r28
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	69 01       	movw	r12, r18
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	94 e0       	ldi	r25, 0x04	; 4
    13ba:	f9 01       	movw	r30, r18
    13bc:	9c 01       	movw	r18, r24
    13be:	11 92       	st	Z+, r1
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	30 40       	sbci	r19, 0x00	; 0
    13c4:	e1 f7       	brne	.-8      	; 0x13be <loop+0x42>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:253
  memset(mavlink_buffer_1, 0, sizeof(mavlink_buffer_1));
    13c6:	7e 01       	movw	r14, r28
    13c8:	3f ef       	ldi	r19, 0xFF	; 255
    13ca:	e3 1a       	sub	r14, r19
    13cc:	3a ef       	ldi	r19, 0xFA	; 250
    13ce:	f3 0a       	sbc	r15, r19
    13d0:	80 e8       	ldi	r24, 0x80	; 128
    13d2:	f7 01       	movw	r30, r14
    13d4:	28 2f       	mov	r18, r24
    13d6:	11 92       	st	Z+, r1
    13d8:	2a 95       	dec	r18
    13da:	e9 f7       	brne	.-6      	; 0x13d6 <loop+0x5a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:254
  memset(mavlink_buffer_2, 0, sizeof(mavlink_buffer_2));
    13dc:	4e 01       	movw	r8, r28
    13de:	3f e7       	ldi	r19, 0x7F	; 127
    13e0:	83 1a       	sub	r8, r19
    13e2:	3b ef       	ldi	r19, 0xFB	; 251
    13e4:	93 0a       	sbc	r9, r19
    13e6:	f4 01       	movw	r30, r8
    13e8:	28 2f       	mov	r18, r24
    13ea:	11 92       	st	Z+, r1
    13ec:	2a 95       	dec	r18
    13ee:	e9 f7       	brne	.-6      	; 0x13ea <loop+0x6e>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:255
  memset(mavlink_buffer_3, 0, sizeof(mavlink_buffer_3));
    13f0:	3e 01       	movw	r6, r28
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	63 1a       	sub	r6, r19
    13f6:	3b ef       	ldi	r19, 0xFB	; 251
    13f8:	73 0a       	sbc	r7, r19
    13fa:	f3 01       	movw	r30, r6
    13fc:	11 92       	st	Z+, r1
    13fe:	8a 95       	dec	r24
    1400:	e9 f7       	brne	.-6      	; 0x13fc <loop+0x80>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:258

  // dummy conversion
  ADMUX = (analog_reference << 6) | 0b10000; // Select +A0,-A1 for measurement
    1402:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
    1406:	f0 e4       	ldi	r31, 0x40	; 64
    1408:	8f 9f       	mul	r24, r31
    140a:	c0 01       	movw	r24, r0
    140c:	11 24       	eor	r1, r1
    140e:	80 61       	ori	r24, 0x10	; 16
    1410:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:259
  ADCSRB = 0;               // Switching ADC to Free Running mode
    1414:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:260
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
    1418:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    141c:	80 62       	ori	r24, 0x20	; 32
    141e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:261
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
    1422:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:262
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
    142c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1430:	84 60       	ori	r24, 0x04	; 4
    1432:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:263
  sbi(ADCSRA, 1);        
    1436:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:264
  sbi(ADCSRA, 0);        
    1440:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1444:	81 60       	ori	r24, 0x01	; 1
    1446:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:266
  
  PORTB = 1;                          // Set reset output for peak detector to H
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	85 b9       	out	0x05, r24	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:267
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
    144e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1452:	80 61       	ori	r24, 0x10	; 16
    1454:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:268
  while (bit_is_clear(ADCSRA, ADIF)); // wait for the first dummy conversion 
    1458:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    145c:	84 ff       	sbrs	r24, 4
    145e:	fc cf       	rjmp	.-8      	; 0x1458 <loop+0xdc>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:269
  DDRB = 0b10011111;                  // Reset peak detector
    1460:	8f e9       	ldi	r24, 0x9F	; 159
    1462:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:270
  delayMicroseconds(100);             // guaranteed reset
    1464:	84 e6       	ldi	r24, 0x64	; 100
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	0e 94 89 14 	call	0x2912	; 0x2912 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:271
  DDRB = 0b10011110;
    146c:	8e e9       	ldi	r24, 0x9E	; 158
    146e:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:273

  sbi(ADCSRA, ADIF);        // reset interrupt flag from ADC
    1470:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1474:	80 61       	ori	r24, 0x10	; 16
    1476:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:277

  uint16_t suppress = 0;      
    
  while (bit_is_clear(ADCSRA, ADIF)); // wait for dummy conversion 
    147a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    147e:	84 ff       	sbrs	r24, 4
    1480:	fc cf       	rjmp	.-8      	; 0x147a <loop+0xfe>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:278
  DDRB = 0b10011111;                  // Reset peak detector
    1482:	8f e9       	ldi	r24, 0x9F	; 159
    1484:	84 b9       	out	0x04, r24	; 4
	...
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:283
  asm("NOP");                         // cca 6 us for 2k2 resistor and 1k capacitor in peak detector
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
    148e:	00 00       	nop
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:284
  DDRB = 0b10011110;
    1490:	8e e9       	ldi	r24, 0x9E	; 158
    1492:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:285
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
    1494:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1498:	80 61       	ori	r24, 0x10	; 16
    149a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    149e:	70 ef       	ldi	r23, 0xF0	; 240
    14a0:	a7 2e       	mov	r10, r23
    14a2:	73 e2       	ldi	r23, 0x23	; 35
    14a4:	b7 2e       	mov	r11, r23
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:275
  delayMicroseconds(100);             // guaranteed reset
  DDRB = 0b10011110;

  sbi(ADCSRA, ADIF);        // reset interrupt flag from ADC

  uint16_t suppress = 0;      
    14a6:	10 e0       	ldi	r17, 0x00	; 0
    14a8:	00 e0       	ldi	r16, 0x00	; 0
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:294
  for (uint16_t i=0; i<(4600*2); i++)    // cca 2 s
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
    delayMicroseconds(150);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
    
    DDRB = 0b10011111;                  // Reset peak detector
    14aa:	ef e9       	ldi	r30, 0x9F	; 159
    14ac:	5e 2e       	mov	r5, r30
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:296
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
    DDRB = 0b10011110;
    14ae:	fe e9       	ldi	r31, 0x9E	; 158
    14b0:	4f 2e       	mov	r4, r31
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:291
  
  // dosimeter integration
  //for (uint16_t i=0; i<(46000); i++)    // cca 10 s
  for (uint16_t i=0; i<(4600*2); i++)    // cca 2 s
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
    14b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14b6:	84 ff       	sbrs	r24, 4
    14b8:	fc cf       	rjmp	.-8      	; 0x14b2 <loop+0x136>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:292
    delayMicroseconds(150);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
    14ba:	86 e9       	ldi	r24, 0x96	; 150
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	0e 94 89 14 	call	0x2912	; 0x2912 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:294
    
    DDRB = 0b10011111;                  // Reset peak detector
    14c2:	54 b8       	out	0x04, r5	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:295
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
    14c4:	87 e0       	ldi	r24, 0x07	; 7
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 89 14 	call	0x2912	; 0x2912 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:296
    DDRB = 0b10011110;
    14cc:	44 b8       	out	0x04, r4	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:297
    sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
    14ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    14d2:	80 61       	ori	r24, 0x10	; 16
    14d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:303

    // we have to read ADCL first; doing so locks both ADCL
    // and ADCH until ADCH is read.  reading ADCL second would
    // cause the results of each conversion to be discarded,
    // as ADCL and ADCH would be locked when it completed.
    lo = ADCL;
    14d8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    14dc:	20 93 87 02 	sts	0x0287, r18	; 0x800287 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:304
    hi = ADCH;
    14e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    14e4:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:307

    // combine the two bytes
    u_sensor = (hi << 7) | (lo >> 1);
    14e8:	30 e8       	ldi	r19, 0x80	; 128
    14ea:	83 9f       	mul	r24, r19
    14ec:	c0 01       	movw	r24, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	35 95       	asr	r19
    14f4:	27 95       	ror	r18
    14f6:	82 2b       	or	r24, r18
    14f8:	93 2b       	or	r25, r19
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:310

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
    14fa:	8f 3f       	cpi	r24, 0xFF	; 255
    14fc:	91 05       	cpc	r25, r1
    14fe:	09 f0       	breq	.+2      	; 0x1502 <loop+0x186>
    1500:	b4 f5       	brge	.+108    	; 0x156e <loop+0x1f2>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:310 (discriminator 1)
    1502:	93 95       	inc	r25
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:310 (discriminator 2)
    1504:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <u_sensor+0x1>
    1508:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:312 (discriminator 2)
              
    if (u_sensor > maximum) // filter double detection for pulses between two samples
    150c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <u_sensor>
    1510:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <u_sensor+0x1>
    1514:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <__data_end>
    1518:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <__data_end+0x1>
    151c:	e8 17       	cp	r30, r24
    151e:	f9 07       	cpc	r31, r25
    1520:	40 f5       	brcc	.+80     	; 0x1572 <loop+0x1f6>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:314
    {
      maximum = u_sensor;
    1522:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <__data_end+0x1>
    1526:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:315
      suppress++;
    152a:	0f 5f       	subi	r16, 0xFF	; 255
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	a8 1a       	sub	r10, r24
    1532:	b1 08       	sbc	r11, r1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:289 (discriminator 2)
  DDRB = 0b10011110;
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
  
  // dosimeter integration
  //for (uint16_t i=0; i<(46000); i++)    // cca 10 s
  for (uint16_t i=0; i<(4600*2); i++)    // cca 2 s
    1534:	09 f0       	breq	.+2      	; 0x1538 <loop+0x1bc>
    1536:	bd cf       	rjmp	.-134    	; 0x14b2 <loop+0x136>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:326
    }
  }  
  
  // Data out
  {
    uint16_t noise = base_offset+2;
    1538:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <base_offset>
    153c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <base_offset+0x1>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:330
    uint32_t dose=0;
    #define RANGE 252

    for(int n=noise; n<(base_offset+RANGE); n++)  
    1540:	c9 01       	movw	r24, r18
    1542:	02 96       	adiw	r24, 0x02	; 2
    1544:	fc 01       	movw	r30, r24
    1546:	ee 0f       	add	r30, r30
    1548:	ff 1f       	adc	r31, r31
    154a:	ec 0d       	add	r30, r12
    154c:	fd 1d       	adc	r31, r13
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:327
  }  
  
  // Data out
  {
    uint16_t noise = base_offset+2;
    uint32_t dose=0;
    154e:	a1 2c       	mov	r10, r1
    1550:	b1 2c       	mov	r11, r1
    1552:	65 01       	movw	r12, r10
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:330
    #define RANGE 252

    for(int n=noise; n<(base_offset+RANGE); n++)  
    1554:	24 50       	subi	r18, 0x04	; 4
    1556:	3f 4f       	sbci	r19, 0xFF	; 255
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:330 (discriminator 3)
    1558:	82 17       	cp	r24, r18
    155a:	93 07       	cpc	r25, r19
    155c:	c0 f4       	brcc	.+48     	; 0x158e <loop+0x212>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:332 (discriminator 2)
    {
      dose += histogram[n]; 
    155e:	41 91       	ld	r20, Z+
    1560:	51 91       	ld	r21, Z+
    1562:	a4 0e       	add	r10, r20
    1564:	b5 1e       	adc	r11, r21
    1566:	c1 1c       	adc	r12, r1
    1568:	d1 1c       	adc	r13, r1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:330 (discriminator 2)
  {
    uint16_t noise = base_offset+2;
    uint32_t dose=0;
    #define RANGE 252

    for(int n=noise; n<(base_offset+RANGE); n++)  
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	f5 cf       	rjmp	.-22     	; 0x1558 <loop+0x1dc>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:310 (discriminator 2)

    // combine the two bytes
    u_sensor = (hi << 7) | (lo >> 1);

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
    156e:	9a 95       	dec	r25
    1570:	c9 cf       	rjmp	.-110    	; 0x1504 <loop+0x188>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:319
      maximum = u_sensor;
      suppress++;
    }
    else
    {
      histogram[maximum]++;
    1572:	ee 0f       	add	r30, r30
    1574:	ff 1f       	adc	r31, r31
    1576:	ec 0d       	add	r30, r12
    1578:	fd 1d       	adc	r31, r13
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:320
      maximum = 0;
    1584:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <__data_end+0x1>
    1588:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
    158c:	d0 cf       	rjmp	.-96     	; 0x152e <loop+0x1b2>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:335
    for(int n=noise; n<(base_offset+RANGE); n++)  
    {
      dose += histogram[n]; 
    }

    digitalWrite(LED3, HIGH); 
    158e:	61 e0       	ldi	r22, 0x01	; 1
    1590:	87 e1       	ldi	r24, 0x17	; 23
    1592:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:337

    mavlink_buffer_1[0] = (count & 0xff00) >> 8;
    1596:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <count>
    159a:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <count+0x1>
    159e:	f7 01       	movw	r30, r14
    15a0:	90 83       	st	Z, r25
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:338
    mavlink_buffer_1[1] = (count & 0x00ff);
    15a2:	81 83       	std	Z+1, r24	; 0x01
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:339
    mavlink_buffer_1[2] = (dose& 0xff000000) >> 24;
    15a4:	d2 82       	std	Z+2, r13	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:340
    mavlink_buffer_1[3] = (dose& 0x00ff0000) >> 16;
    15a6:	c3 82       	std	Z+3, r12	; 0x03
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:341
    mavlink_buffer_1[4] = (dose& 0x0000ff00) >> 8;
    15a8:	b4 82       	std	Z+4, r11	; 0x04
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:342
    mavlink_buffer_1[5] = (dose& 0x000000ff);
    15aa:	a5 82       	std	Z+5, r10	; 0x05
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:343
    mavlink_buffer_1[6] = (suppress & 0xff00) >> 8;
    15ac:	16 83       	std	Z+6, r17	; 0x06
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:344
    mavlink_buffer_1[7] = (suppress & 0x00ff);
    15ae:	07 83       	std	Z+7, r16	; 0x07
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:345
    mavlink_buffer_1[8] = (base_offset & 0xff00) >> 8;
    15b0:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <base_offset>
    15b4:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <base_offset+0x1>
    15b8:	30 87       	std	Z+8, r19	; 0x08
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:346
    mavlink_buffer_1[9] = (base_offset & 0x00ff);
    15ba:	21 87       	std	Z+9, r18	; 0x09
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:347
    mavlink_buffer_1[10] = 0;
    15bc:	12 86       	std	Z+10, r1	; 0x0a
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:348
    mavlink_buffer_1[11] = 0;
    15be:	13 86       	std	Z+11, r1	; 0x0b
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:394
    dataString += String(int(maxch-noise+3)); 
    dataString += ",";
    dataString += String(maxener); 
    */
    
    count++;
    15c0:	01 96       	adiw	r24, 0x01	; 1
    15c2:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <count+0x1>
    15c6:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <count>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:398

    {
      //SendTunnelData(mavlink_info, sizeof(mavlink_info), 10+0, 0, 0);
      SendTunnelData(mavlink_buffer_1, sizeof(mavlink_buffer_1), 10+1, 0, 0);
    15ca:	00 e0       	ldi	r16, 0x00	; 0
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	4b e0       	ldi	r20, 0x0B	; 11
    15d0:	60 e8       	ldi	r22, 0x80	; 128
    15d2:	c7 01       	movw	r24, r14
    15d4:	0e 94 17 06 	call	0xc2e	; 0xc2e <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:399
      SendTunnelData(mavlink_buffer_2, sizeof(mavlink_buffer_2), 10+2, 0, 0);
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	4c e0       	ldi	r20, 0x0C	; 12
    15dc:	60 e8       	ldi	r22, 0x80	; 128
    15de:	c4 01       	movw	r24, r8
    15e0:	0e 94 17 06 	call	0xc2e	; 0xc2e <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:400
      SendTunnelData(mavlink_buffer_3, sizeof(mavlink_buffer_3), 10+3, 0, 0);
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	4d e0       	ldi	r20, 0x0D	; 13
    15e8:	60 e8       	ldi	r22, 0x80	; 128
    15ea:	c3 01       	movw	r24, r6
    15ec:	0e 94 17 06 	call	0xc2e	; 0xc2e <SendTunnelData(unsigned char*, unsigned char, unsigned char, unsigned char, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:401
      digitalWrite(LED3, LOW); 
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	87 e1       	ldi	r24, 0x17	; 23
    15f4:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:404
    }          
  }    
}
    15f8:	c0 58       	subi	r28, 0x80	; 128
    15fa:	da 4f       	sbci	r29, 0xFA	; 250
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	df 90       	pop	r13
    1614:	cf 90       	pop	r12
    1616:	bf 90       	pop	r11
    1618:	af 90       	pop	r10
    161a:	9f 90       	pop	r9
    161c:	8f 90       	pop	r8
    161e:	7f 90       	pop	r7
    1620:	6f 90       	pop	r6
    1622:	5f 90       	pop	r5
    1624:	4f 90       	pop	r4
    1626:	08 95       	ret

00001628 <setup>:
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:128

  return;
}

void setup()
{
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	62 97       	sbiw	r28, 0x12	; 18
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:129
  pinMode(LED1, OUTPUT); 
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	85 e1       	ldi	r24, 0x15	; 21
    1646:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:130
  digitalWrite(LED1, HIGH); 
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	85 e1       	ldi	r24, 0x15	; 21
    164e:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:131
  delay(100);
    1652:	64 e6       	ldi	r22, 0x64	; 100
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:133

  memset(mavlink_info, 0, sizeof(mavlink_info));
    165e:	ee e8       	ldi	r30, 0x8E	; 142
    1660:	f2 e0       	ldi	r31, 0x02	; 2
    1662:	89 e1       	ldi	r24, 0x19	; 25
    1664:	df 01       	movw	r26, r30
    1666:	1d 92       	st	X+, r1
    1668:	8a 95       	dec	r24
    166a:	e9 f7       	brne	.-6      	; 0x1666 <setup+0x3e>
_ZN14HardwareSerial5beginEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    166c:	26 e0       	ldi	r18, 0x06	; 6
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	52 ec       	ldi	r21, 0xC2	; 194
    1672:	61 e0       	ldi	r22, 0x01	; 1
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	8d e9       	ldi	r24, 0x9D	; 157
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:138

  // Open serial communications and wait for port to open:
  Serial.begin(115200);

  Serial.println("#Cvak...");
    167e:	68 e3       	ldi	r22, 0x38	; 56
    1680:	71 e0       	ldi	r23, 0x01	; 1
    1682:	8d e9       	ldi	r24, 0x9D	; 157
    1684:	93 e0       	ldi	r25, 0x03	; 3
    1686:	0e 94 41 12 	call	0x2482	; 0x2482 <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:140
  
  ADMUX = (analog_reference << 6) | ((PIN | 0x10) & 0x1F);
    168a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
    168e:	b0 e4       	ldi	r27, 0x40	; 64
    1690:	8b 9f       	mul	r24, r27
    1692:	c0 01       	movw	r24, r0
    1694:	11 24       	eor	r1, r1
    1696:	80 61       	ori	r24, 0x10	; 16
    1698:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:141
  ADCSRB = 0;               // Switching ADC to Free Running mode
    169c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:142
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
    16a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:143
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
    16aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16ae:	80 64       	ori	r24, 0x40	; 64
    16b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:144
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128, 125 kHz, 104 us for 13 cycles of one AD conversion, 12 us for 1.5 cycle for sample-hold
    16b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16b8:	84 60       	ori	r24, 0x04	; 4
    16ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:145
  sbi(ADCSRA, 1);        
    16be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16c2:	82 60       	ori	r24, 0x02	; 2
    16c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:146
  sbi(ADCSRA, 0);        
    16c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    16cc:	81 60       	ori	r24, 0x01	; 1
    16ce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:148

  pinMode(RESET, OUTPUT);   // reset for peak detetor
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:158
  //pinMode(SS, OUTPUT);     
  //pinMode(MOSI, INPUT);     
  //pinMode(MISO, INPUT);     
  //pinMode(SCK, OUTPUT);  

  DDRB = 0b10011110;
    16da:	8e e9       	ldi	r24, 0x9E	; 158
    16dc:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:159
  PORTB = 0b00000000;  // SDcard Power OFF
    16de:	15 b8       	out	0x05, r1	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:161

  DDRA = 0b11111100;
    16e0:	8c ef       	ldi	r24, 0xFC	; 252
    16e2:	81 b9       	out	0x01, r24	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:162
  PORTA = 0b00000000;  // SDcard Power OFF
    16e4:	12 b8       	out	0x02, r1	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:163
  DDRC = 0b11101100;
    16e6:	9c ee       	ldi	r25, 0xEC	; 236
    16e8:	97 b9       	out	0x07, r25	; 7
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:164
  PORTC = 0b00000000;  // SDcard Power OFF
    16ea:	18 b8       	out	0x08, r1	; 8
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:165
  DDRD = 0b11111100;
    16ec:	8a b9       	out	0x0a, r24	; 10
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:166
  PORTD = 0b10000000;  // SDcard Power OFF
    16ee:	80 e8       	ldi	r24, 0x80	; 128
    16f0:	8b b9       	out	0x0b, r24	; 11
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:168

  Wire.setClock(100000);
    16f2:	40 ea       	ldi	r20, 0xA0	; 160
    16f4:	56 e8       	ldi	r21, 0x86	; 134
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	8b ef       	ldi	r24, 0xFB	; 251
    16fc:	92 e0       	ldi	r25, 0x02	; 2
    16fe:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <TwoWire::setClock(unsigned long)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:170

  pinMode(LED1, OUTPUT); 
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	85 e1       	ldi	r24, 0x15	; 21
    1706:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:171
  digitalWrite(LED1, HIGH); 
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	85 e1       	ldi	r24, 0x15	; 21
    170e:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:172
  delay(100);  
    1712:	64 e6       	ldi	r22, 0x64	; 100
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:173
  Serial.println("#Hmmm...");
    171e:	61 e4       	ldi	r22, 0x41	; 65
    1720:	71 e0       	ldi	r23, 0x01	; 1
    1722:	8d e9       	ldi	r24, 0x9D	; 157
    1724:	93 e0       	ldi	r25, 0x03	; 3
    1726:	0e 94 41 12 	call	0x2482	; 0x2482 <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:174
  pinMode(LED2, OUTPUT); 
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	86 e1       	ldi	r24, 0x16	; 22
    172e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:175
  digitalWrite(LED2, HIGH); 
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	86 e1       	ldi	r24, 0x16	; 22
    1736:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:176
  delay(100);  
    173a:	64 e6       	ldi	r22, 0x64	; 100
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
    1746:	58 e0       	ldi	r21, 0x08	; 8
    1748:	f5 2e       	mov	r15, r21
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:183
  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
    { 
      // measurement of ADC offset
      ADMUX = (analog_reference << 6) | 0b10001; // Select +A1,-A1 for offset correction
    174a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
    174e:	20 e4       	ldi	r18, 0x40	; 64
    1750:	82 9f       	mul	r24, r18
    1752:	c0 01       	movw	r24, r0
    1754:	11 24       	eor	r1, r1
    1756:	81 61       	ori	r24, 0x11	; 17
    1758:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:184
      delay(50);
    175c:	62 e3       	ldi	r22, 0x32	; 50
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:185
      ADCSRB = 0;               // Switching ADC to Free Running mode
    1768:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:186
      sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
    176c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1770:	80 62       	ori	r24, 0x20	; 32
    1772:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:187
      sbi(ADCSRA, ADSC);        // ADC start the first conversions
    1776:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    177a:	80 64       	ori	r24, 0x40	; 64
    177c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:188
      sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
    1780:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1784:	84 60       	ori	r24, 0x04	; 4
    1786:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:189
      sbi(ADCSRA, 1);        
    178a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:190
      sbi(ADCSRA, 0);        
    1794:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1798:	81 60       	ori	r24, 0x01	; 1
    179a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:191
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
    179e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    17a2:	80 61       	ori	r24, 0x10	; 16
    17a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:192
      while (bit_is_clear(ADCSRA, ADIF)); // wait for the first conversion 
    17a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    17ac:	84 ff       	sbrs	r24, 4
    17ae:	fc cf       	rjmp	.-8      	; 0x17a8 <setup+0x180>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:193
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
    17b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    17b4:	80 61       	ori	r24, 0x10	; 16
    17b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:194
      lo = ADCL;
    17ba:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    17be:	20 93 87 02 	sts	0x0287, r18	; 0x800287 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:195
      hi = ADCH;
    17c2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    17c6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:197
      // combine the two bytes
      u_sensor = (hi << 7) | (lo >> 1);
    17ca:	30 e8       	ldi	r19, 0x80	; 128
    17cc:	83 9f       	mul	r24, r19
    17ce:	c0 01       	movw	r24, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	35 95       	asr	r19
    17d6:	27 95       	ror	r18
    17d8:	82 2b       	or	r24, r18
    17da:	93 2b       	or	r25, r19
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:199
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
    17dc:	8f 3f       	cpi	r24, 0xFF	; 255
    17de:	91 05       	cpc	r25, r1
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <setup+0x1be>
    17e2:	0c f0       	brlt	.+2      	; 0x17e6 <setup+0x1be>
    17e4:	ec c0       	rjmp	.+472    	; 0x19be <setup+0x396>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:199 (discriminator 1)
    17e6:	93 95       	inc	r25
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:199 (discriminator 2)
    17e8:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <u_sensor+0x1>
    17ec:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:200 (discriminator 2)
      DCoffset += u_sensor;
    17f0:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <u_sensor>
    17f4:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <u_sensor+0x1>
    17f8:	08 0f       	add	r16, r24
    17fa:	19 1f       	adc	r17, r25
    17fc:	fa 94       	dec	r15
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:180 (discriminator 2)
  digitalWrite(LED2, HIGH); 
  delay(100);  

  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
    17fe:	f1 10       	cpse	r15, r1
    1800:	a4 cf       	rjmp	.-184    	; 0x174a <setup+0x122>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:202
      u_sensor = (hi << 7) | (lo >> 1);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
      DCoffset += u_sensor;
    }
    base_offset = DCoffset >> 3; // Calculate mean of 8 measurements
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	16 95       	lsr	r17
    1806:	07 95       	ror	r16
    1808:	8a 95       	dec	r24
    180a:	e1 f7       	brne	.-8      	; 0x1804 <setup+0x1dc>
    180c:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <base_offset+0x1>
    1810:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <base_offset>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:205
  }

  pinMode(LED3, OUTPUT); 
    1814:	61 e0       	ldi	r22, 0x01	; 1
    1816:	87 e1       	ldi	r24, 0x17	; 23
    1818:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:206
  digitalWrite(LED3, HIGH); 
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	87 e1       	ldi	r24, 0x17	; 23
    1820:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:207
  delay(100);  
    1824:	64 e6       	ldi	r22, 0x64	; 100
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:210
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
    1830:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <base_offset>
    1834:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <base_offset+0x1>
    1838:	4a e0       	ldi	r20, 0x0A	; 10
    183a:	ce 01       	movw	r24, r28
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	0e 94 16 13 	call	0x262c	; 0x262c <String::String(unsigned int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
    1842:	6a e4       	ldi	r22, 0x4A	; 74
    1844:	71 e0       	ldi	r23, 0x01	; 1
    1846:	ce 01       	movw	r24, r28
    1848:	07 96       	adiw	r24, 0x07	; 7
    184a:	0e 94 ca 12 	call	0x2594	; 0x2594 <String::String(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:210
    184e:	65 ef       	ldi	r22, 0xF5	; 245
    1850:	72 e0       	ldi	r23, 0x02	; 2
    1852:	ce 01       	movw	r24, r28
    1854:	07 96       	adiw	r24, 0x07	; 7
    1856:	0e 94 a4 13 	call	0x2748	; 0x2748 <operator+(StringSumHelper const&, String const&)>
    185a:	68 e5       	ldi	r22, 0x58	; 88
    185c:	71 e0       	ldi	r23, 0x01	; 1
    185e:	0e 94 b7 13 	call	0x276e	; 0x276e <operator+(StringSumHelper const&, char const*)>
    1862:	be 01       	movw	r22, r28
    1864:	6f 5f       	subi	r22, 0xFF	; 255
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	0e 94 a4 13 	call	0x2748	; 0x2748 <operator+(StringSumHelper const&, String const&)>
    186c:	68 e5       	ldi	r22, 0x58	; 88
    186e:	71 e0       	ldi	r23, 0x01	; 1
    1870:	0e 94 b7 13 	call	0x276e	; 0x276e <operator+(StringSumHelper const&, char const*)>
    1874:	6f ee       	ldi	r22, 0xEF	; 239
    1876:	72 e0       	ldi	r23, 0x02	; 2
    1878:	0e 94 a4 13 	call	0x2748	; 0x2748 <operator+(StringSumHelper const&, String const&)>
    187c:	68 e5       	ldi	r22, 0x58	; 88
    187e:	71 e0       	ldi	r23, 0x01	; 1
    1880:	0e 94 b7 13 	call	0x276e	; 0x276e <operator+(StringSumHelper const&, char const*)>
    1884:	bc 01       	movw	r22, r24
    1886:	ce 01       	movw	r24, r28
    1888:	0d 96       	adiw	r24, 0x0d	; 13
    188a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <String::String(String const&)>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
    188e:	ce 01       	movw	r24, r28
    1890:	07 96       	adiw	r24, 0x07	; 7
    1892:	0e 94 58 12 	call	0x24b0	; 0x24b0 <String::~String()>
    1896:	ce 01       	movw	r24, r28
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:212
  
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
    189e:	68 e5       	ldi	r22, 0x58	; 88
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	8b ef       	ldi	r24, 0xFB	; 251
    18a4:	92 e0       	ldi	r25, 0x02	; 2
    18a6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <TwoWire::beginTransmission(int)>
_ZN7TwoWire5writeEi():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.h:86
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    18aa:	68 e0       	ldi	r22, 0x08	; 8
    18ac:	8b ef       	ldi	r24, 0xFB	; 251
    18ae:	92 e0       	ldi	r25, 0x02	; 2
    18b0:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <TwoWire::write(unsigned char)>
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	8b ef       	ldi	r24, 0xFB	; 251
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <TwoWire::write(unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:215
  Wire.write((int)0x08); // MSB
  Wire.write((int)0x00); // LSB
  Wire.endTransmission();
    18be:	8b ef       	ldi	r24, 0xFB	; 251
    18c0:	92 e0       	ldi	r25, 0x02	; 2
    18c2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:216
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
    18c6:	40 e1       	ldi	r20, 0x10	; 16
    18c8:	68 e5       	ldi	r22, 0x58	; 88
    18ca:	8b ef       	ldi	r24, 0xFB	; 251
    18cc:	92 e0       	ldi	r25, 0x02	; 2
    18ce:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <TwoWire::requestFrom(unsigned char, unsigned char)>
    18d2:	10 e1       	ldi	r17, 0x10	; 16
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:219
  for (int8_t reg=0; reg<16; reg++)
  { 
    uint8_t serialbyte = Wire.read(); // receive a byte
    18d4:	8b ef       	ldi	r24, 0xFB	; 251
    18d6:	92 e0       	ldi	r25, 0x02	; 2
    18d8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <TwoWire::read()>
    18dc:	08 2f       	mov	r16, r24
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:220
    if (serialbyte<0x10) dataString += "0";
    18de:	80 31       	cpi	r24, 0x10	; 16
    18e0:	30 f4       	brcc	.+12     	; 0x18ee <setup+0x2c6>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
    18e2:	6d e0       	ldi	r22, 0x0D	; 13
    18e4:	71 e0       	ldi	r23, 0x01	; 1
    18e6:	ce 01       	movw	r24, r28
    18e8:	0d 96       	adiw	r24, 0x0d	; 13
    18ea:	0e 94 95 13 	call	0x272a	; 0x272a <String::concat(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:221 (discriminator 2)
    dataString += String(serialbyte,HEX);    
    18ee:	40 e1       	ldi	r20, 0x10	; 16
    18f0:	60 2f       	mov	r22, r16
    18f2:	ce 01       	movw	r24, r28
    18f4:	01 96       	adiw	r24, 0x01	; 1
    18f6:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <String::String(unsigned char, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113 (discriminator 2)
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
    18fa:	be 01       	movw	r22, r28
    18fc:	6f 5f       	subi	r22, 0xFF	; 255
    18fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1900:	ce 01       	movw	r24, r28
    1902:	0d 96       	adiw	r24, 0x0d	; 13
    1904:	0e 94 8e 13 	call	0x271c	; 0x271c <String::concat(String const&)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:221 (discriminator 2)
    1908:	ce 01       	movw	r24, r28
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	0e 94 58 12 	call	0x24b0	; 0x24b0 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:222 (discriminator 2)
    serialhash += serialbyte;
    1910:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <serialhash>
    1914:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <serialhash+0x1>
    1918:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <serialhash+0x2>
    191c:	b0 91 8b 02 	lds	r27, 0x028B	; 0x80028b <serialhash+0x3>
    1920:	80 0f       	add	r24, r16
    1922:	91 1d       	adc	r25, r1
    1924:	a1 1d       	adc	r26, r1
    1926:	b1 1d       	adc	r27, r1
    1928:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <serialhash>
    192c:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <serialhash+0x1>
    1930:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <serialhash+0x2>
    1934:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <serialhash+0x3>
    1938:	11 50       	subi	r17, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:217 (discriminator 2)
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
  Wire.write((int)0x08); // MSB
  Wire.write((int)0x00); // LSB
  Wire.endTransmission();
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
  for (int8_t reg=0; reg<16; reg++)
    193a:	61 f6       	brne	.-104    	; 0x18d4 <setup+0x2ac>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:226
    dataString += String(serialbyte,HEX);    
    serialhash += serialbyte;
  }

  {
    Serial.println(dataString);  // print SN to terminal 
    193c:	be 01       	movw	r22, r28
    193e:	63 5f       	subi	r22, 0xF3	; 243
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	8d e9       	ldi	r24, 0x9D	; 157
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 2f 12 	call	0x245e	; 0x245e <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:230
  }    

  
  pinMode(LED1, OUTPUT); 
    194a:	61 e0       	ldi	r22, 0x01	; 1
    194c:	85 e1       	ldi	r24, 0x15	; 21
    194e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:231
  digitalWrite(LED1, LOW); 
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	85 e1       	ldi	r24, 0x15	; 21
    1956:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:232
  delay(100);  
    195a:	64 e6       	ldi	r22, 0x64	; 100
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:233
  pinMode(LED2, OUTPUT); 
    1966:	61 e0       	ldi	r22, 0x01	; 1
    1968:	86 e1       	ldi	r24, 0x16	; 22
    196a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:234
  digitalWrite(LED2, LOW); 
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	86 e1       	ldi	r24, 0x16	; 22
    1972:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:235
  delay(100);  
    1976:	64 e6       	ldi	r22, 0x64	; 100
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:236
  pinMode(LED3, OUTPUT); 
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	87 e1       	ldi	r24, 0x17	; 23
    1986:	0e 94 fe 14 	call	0x29fc	; 0x29fc <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:237
  digitalWrite(LED3, LOW); 
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	87 e1       	ldi	r24, 0x17	; 23
    198e:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:238
  delay(100);  
    1992:	64 e6       	ldi	r22, 0x64	; 100
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 50 14 	call	0x28a0	; 0x28a0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:210
  pinMode(LED3, OUTPUT); 
  digitalWrite(LED3, HIGH); 
  delay(100);  
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
    199e:	ce 01       	movw	r24, r28
    19a0:	0d 96       	adiw	r24, 0x0d	; 13
    19a2:	0e 94 58 12 	call	0x24b0	; 0x24b0 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:242
  digitalWrite(LED3, LOW); 
  delay(100);  


  // Initiates RTC
}
    19a6:	62 96       	adiw	r28, 0x12	; 18
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	1f 91       	pop	r17
    19b8:	0f 91       	pop	r16
    19ba:	ff 90       	pop	r15
    19bc:	08 95       	ret
/home/runner/work/LABDOS01/LABDOS01/fw/UAVDOS/UAVDOS.ino:199 (discriminator 2)
      lo = ADCL;
      hi = ADCH;
      // combine the two bytes
      u_sensor = (hi << 7) | (lo >> 1);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
    19be:	9a 95       	dec	r25
    19c0:	13 cf       	rjmp	.-474    	; 0x17e8 <setup+0x1c0>

000019c2 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:378

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	08 95       	ret

000019c8 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    19c8:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <TwoWire::rxBufferLength>
    19cc:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <TwoWire::rxBufferIndex>
    19d0:	89 1b       	sub	r24, r25
    19d2:	99 0b       	sbc	r25, r25
    19d4:	08 95       	ret

000019d6 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    19d6:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <TwoWire::rxBufferIndex>
    19da:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <TwoWire::rxBufferLength>
    19de:	2f ef       	ldi	r18, 0xFF	; 255
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	98 17       	cp	r25, r24
    19e4:	48 f4       	brcc	.+18     	; 0x19f8 <TwoWire::read()+0x22>
    19e6:	e9 2f       	mov	r30, r25
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	e3 5d       	subi	r30, 0xD3	; 211
    19ec:	fc 4f       	sbci	r31, 0xFC	; 252
    19ee:	20 81       	ld	r18, Z
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	9f 5f       	subi	r25, 0xFF	; 255
    19f4:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <TwoWire::rxBufferIndex>
    19f8:	c9 01       	movw	r24, r18
    19fa:	08 95       	ret

000019fc <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    19fc:	e0 91 2c 03 	lds	r30, 0x032C	; 0x80032c <TwoWire::rxBufferIndex>
    1a00:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <TwoWire::rxBufferLength>
    1a04:	e8 17       	cp	r30, r24
    1a06:	30 f4       	brcc	.+12     	; 0x1a14 <TwoWire::peek()+0x18>
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	e3 5d       	subi	r30, 0xD3	; 211
    1a0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a0e:	80 81       	ld	r24, Z
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	08 95       	ret
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	9f ef       	ldi	r25, 0xFF	; 255
    1a18:	08 95       	ret

00001a1a <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1a1a:	08 95       	ret

00001a1c <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	69 83       	std	Y+1, r22	; 0x01
    1a28:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <TwoWire::transmitting>
    1a2c:	22 23       	and	r18, r18
    1a2e:	f9 f0       	breq	.+62     	; 0x1a6e <TwoWire::write(unsigned char)+0x52>
    1a30:	20 91 08 03 	lds	r18, 0x0308	; 0x800308 <TwoWire::txBufferLength>
    1a34:	20 32       	cpi	r18, 0x20	; 32
    1a36:	58 f0       	brcs	.+22     	; 0x1a4e <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1a38:	21 e0       	ldi	r18, 0x01	; 1
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	33 83       	std	Z+3, r19	; 0x03
    1a40:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	0f 90       	pop	r0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret
    1a4e:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <TwoWire::txBufferIndex>
    1a52:	e8 2f       	mov	r30, r24
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	e6 5f       	subi	r30, 0xF6	; 246
    1a58:	fc 4f       	sbci	r31, 0xFC	; 252
    1a5a:	99 81       	ldd	r25, Y+1	; 0x01
    1a5c:	90 83       	st	Z, r25
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <TwoWire::txBufferIndex>
    1a64:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <TwoWire::txBufferLength>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	ec cf       	rjmp	.-40     	; 0x1a46 <TwoWire::write(unsigned char)+0x2a>
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	ce 01       	movw	r24, r28
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <twi_transmit>
    1a78:	f7 cf       	rjmp	.-18     	; 0x1a68 <TwoWire::write(unsigned char)+0x4c>

00001a7a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1a7a:	cf 92       	push	r12
    1a7c:	df 92       	push	r13
    1a7e:	ef 92       	push	r14
    1a80:	ff 92       	push	r15
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	8a 01       	movw	r16, r20
    1a90:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <TwoWire::transmitting>
    1a94:	22 23       	and	r18, r18
    1a96:	89 f0       	breq	.+34     	; 0x1aba <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1a98:	eb 01       	movw	r28, r22
    1a9a:	6b 01       	movw	r12, r22
    1a9c:	c4 0e       	add	r12, r20
    1a9e:	d5 1e       	adc	r13, r21
    1aa0:	cc 15       	cp	r28, r12
    1aa2:	dd 05       	cpc	r29, r13
    1aa4:	69 f0       	breq	.+26     	; 0x1ac0 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1aa6:	69 91       	ld	r22, Y+
    1aa8:	d7 01       	movw	r26, r14
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	01 90       	ld	r0, Z+
    1ab0:	f0 81       	ld	r31, Z
    1ab2:	e0 2d       	mov	r30, r0
    1ab4:	c7 01       	movw	r24, r14
    1ab6:	09 95       	icall
    1ab8:	f3 cf       	rjmp	.-26     	; 0x1aa0 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1aba:	64 2f       	mov	r22, r20
    1abc:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <twi_transmit>
    1ac0:	c8 01       	movw	r24, r16
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	1f 91       	pop	r17
    1ac8:	0f 91       	pop	r16
    1aca:	ff 90       	pop	r15
    1acc:	ef 90       	pop	r14
    1ace:	df 90       	pop	r13
    1ad0:	cf 90       	pop	r12
    1ad2:	08 95       	ret

00001ad4 <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	ba 01       	movw	r22, r20
    1ad8:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <twi_setFrequency>

00001adc <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <TwoWire::transmitting>
    1ae2:	60 93 2a 03 	sts	0x032A, r22	; 0x80032a <TwoWire::txAddress>
    1ae6:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <TwoWire::txBufferIndex>
    1aea:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <TwoWire::txBufferLength>
    1aee:	08 95       	ret

00001af0 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    1af0:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <TwoWire::beginTransmission(unsigned char)>

00001af4 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1af4:	0f 93       	push	r16
    1af6:	06 2f       	mov	r16, r22
    1af8:	21 e0       	ldi	r18, 0x01	; 1
    1afa:	40 91 08 03 	lds	r20, 0x0308	; 0x800308 <TwoWire::txBufferLength>
    1afe:	6a e0       	ldi	r22, 0x0A	; 10
    1b00:	73 e0       	ldi	r23, 0x03	; 3
    1b02:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <TwoWire::txAddress>
    1b06:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <twi_writeTo>
    1b0a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <TwoWire::txBufferIndex>
    1b0e:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <TwoWire::txBufferLength>
    1b12:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <TwoWire::transmitting>
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    1b1a:	4f 92       	push	r4
    1b1c:	5f 92       	push	r5
    1b1e:	6f 92       	push	r6
    1b20:	7f 92       	push	r7
    1b22:	af 92       	push	r10
    1b24:	bf 92       	push	r11
    1b26:	cf 92       	push	r12
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	5c 01       	movw	r10, r24
    1b36:	f6 2e       	mov	r15, r22
    1b38:	d4 2f       	mov	r29, r20
    1b3a:	28 01       	movw	r4, r16
    1b3c:	39 01       	movw	r6, r18
    1b3e:	ee 20       	and	r14, r14
    1b40:	19 f1       	breq	.+70     	; 0x1b88 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    1b42:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <TwoWire::beginTransmission(unsigned char)>
    1b46:	ce 2d       	mov	r28, r14
    1b48:	c4 30       	cpi	r28, 0x04	; 4
    1b4a:	08 f0       	brcs	.+2      	; 0x1b4e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1b4c:	c3 e0       	ldi	r28, 0x03	; 3
    1b4e:	c1 50       	subi	r28, 0x01	; 1
    1b50:	b8 f0       	brcs	.+46     	; 0x1b80 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    1b52:	28 e0       	ldi	r18, 0x08	; 8
    1b54:	c2 9f       	mul	r28, r18
    1b56:	c0 01       	movw	r24, r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	a3 01       	movw	r20, r6
    1b5c:	92 01       	movw	r18, r4
    1b5e:	04 c0       	rjmp	.+8      	; 0x1b68 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    1b60:	56 95       	lsr	r21
    1b62:	47 95       	ror	r20
    1b64:	37 95       	ror	r19
    1b66:	27 95       	ror	r18
    1b68:	8a 95       	dec	r24
    1b6a:	d2 f7       	brpl	.-12     	; 0x1b60 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	d5 01       	movw	r26, r10
    1b70:	ed 91       	ld	r30, X+
    1b72:	fc 91       	ld	r31, X
    1b74:	01 90       	ld	r0, Z+
    1b76:	f0 81       	ld	r31, Z
    1b78:	e0 2d       	mov	r30, r0
    1b7a:	c5 01       	movw	r24, r10
    1b7c:	09 95       	icall
    1b7e:	e7 cf       	rjmp	.-50     	; 0x1b4e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	c5 01       	movw	r24, r10
    1b84:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <TwoWire::endTransmission(unsigned char)>
    1b88:	4d 2f       	mov	r20, r29
    1b8a:	d1 32       	cpi	r29, 0x21	; 33
    1b8c:	08 f0       	brcs	.+2      	; 0x1b90 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	2c 2d       	mov	r18, r12
    1b92:	6d e2       	ldi	r22, 0x2D	; 45
    1b94:	73 e0       	ldi	r23, 0x03	; 3
    1b96:	8f 2d       	mov	r24, r15
    1b98:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <twi_readFrom>
    1b9c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <TwoWire::rxBufferIndex>
    1ba0:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <TwoWire::rxBufferLength>
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	1f 91       	pop	r17
    1baa:	0f 91       	pop	r16
    1bac:	ff 90       	pop	r15
    1bae:	ef 90       	pop	r14
    1bb0:	cf 90       	pop	r12
    1bb2:	bf 90       	pop	r11
    1bb4:	af 90       	pop	r10
    1bb6:	7f 90       	pop	r7
    1bb8:	6f 90       	pop	r6
    1bba:	5f 90       	pop	r5
    1bbc:	4f 90       	pop	r4
    1bbe:	08 95       	ret

00001bc0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1bc0:	cf 92       	push	r12
    1bc2:	ef 92       	push	r14
    1bc4:	0f 93       	push	r16
    1bc6:	1f 93       	push	r17
    1bc8:	c2 2e       	mov	r12, r18
    1bca:	e1 2c       	mov	r14, r1
    1bcc:	00 e0       	ldi	r16, 0x00	; 0
    1bce:	10 e0       	ldi	r17, 0x00	; 0
    1bd0:	98 01       	movw	r18, r16
    1bd2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ef 90       	pop	r14
    1bdc:	cf 90       	pop	r12
    1bde:	08 95       	ret

00001be0 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    1be0:	21 e0       	ldi	r18, 0x01	; 1
    1be2:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00001be6 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <TwoWire::endTransmission(unsigned char)>

00001bec <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1bec:	eb ef       	ldi	r30, 0xFB	; 251
    1bee:	f2 e0       	ldi	r31, 0x02	; 2
    1bf0:	13 82       	std	Z+3, r1	; 0x03
    1bf2:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1bf4:	88 ee       	ldi	r24, 0xE8	; 232
    1bf6:	93 e0       	ldi	r25, 0x03	; 3
    1bf8:	a0 e0       	ldi	r26, 0x00	; 0
    1bfa:	b0 e0       	ldi	r27, 0x00	; 0
    1bfc:	84 83       	std	Z+4, r24	; 0x04
    1bfe:	95 83       	std	Z+5, r25	; 0x05
    1c00:	a6 83       	std	Z+6, r26	; 0x06
    1c02:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:53
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1c04:	8e e5       	ldi	r24, 0x5E	; 94
    1c06:	92 e0       	ldi	r25, 0x02	; 2
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:382
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1c0c:	08 95       	ret

00001c0e <twi_setFrequency>:
twi_setFrequency():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:531
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1c0e:	9b 01       	movw	r18, r22
    1c10:	ac 01       	movw	r20, r24
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	72 e1       	ldi	r23, 0x12	; 18
    1c16:	8a e7       	ldi	r24, 0x7A	; 122
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__udivmodsi4>
    1c1e:	20 51       	subi	r18, 0x10	; 16
    1c20:	31 09       	sbc	r19, r1
    1c22:	41 09       	sbc	r20, r1
    1c24:	51 09       	sbc	r21, r1
    1c26:	56 95       	lsr	r21
    1c28:	47 95       	ror	r20
    1c2a:	37 95       	ror	r19
    1c2c:	27 95       	ror	r18
    1c2e:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1c32:	08 95       	ret

00001c34 <twi_readFrom>:
twi_readFrom():
    1c34:	41 32       	cpi	r20, 0x21	; 33
    1c36:	e0 f5       	brcc	.+120    	; 0x1cb0 <twi_readFrom+0x7c>
    1c38:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <twi_state>
    1c3c:	91 11       	cpse	r25, r1
    1c3e:	fc cf       	rjmp	.-8      	; 0x1c38 <twi_readFrom+0x4>
    1c40:	91 e0       	ldi	r25, 0x01	; 1
    1c42:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <twi_state>
    1c46:	20 93 9a 03 	sts	0x039A, r18	; 0x80039a <twi_sendStop>
    1c4a:	2f ef       	ldi	r18, 0xFF	; 255
    1c4c:	20 93 4d 03 	sts	0x034D, r18	; 0x80034d <twi_error>
    1c50:	70 93 94 03 	sts	0x0394, r23	; 0x800394 <twi_masterBuffer+0x1>
    1c54:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <twi_masterBuffer>
    1c58:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <twi_masterBufferIndex>
    1c5c:	24 0f       	add	r18, r20
    1c5e:	20 93 91 03 	sts	0x0391, r18	; 0x800391 <twi_masterBufferLength>
    1c62:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <twi_slarw>
    1c66:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <twi_slarw>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	89 2b       	or	r24, r25
    1c6e:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <twi_slarw>
    1c72:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <twi_inRepStart>
    1c76:	81 30       	cpi	r24, 0x01	; 1
    1c78:	c9 f4       	brne	.+50     	; 0x1cac <twi_readFrom+0x78>
    1c7a:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <twi_inRepStart>
    1c7e:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_slarw>
    1c82:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c86:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c8a:	83 fd       	sbrc	r24, 3
    1c8c:	f8 cf       	rjmp	.-16     	; 0x1c7e <twi_readFrom+0x4a>
    1c8e:	85 ec       	ldi	r24, 0xC5	; 197
    1c90:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c94:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_state>
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	e1 f3       	breq	.-8      	; 0x1c94 <twi_readFrom+0x60>
    1c9c:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <twi_masterBufferIndex>
    1ca0:	84 17       	cp	r24, r20
    1ca2:	10 f4       	brcc	.+4      	; 0x1ca8 <twi_readFrom+0x74>
    1ca4:	40 91 92 03 	lds	r20, 0x0392	; 0x800392 <twi_masterBufferIndex>
    1ca8:	84 2f       	mov	r24, r20
    1caa:	08 95       	ret
    1cac:	85 ee       	ldi	r24, 0xE5	; 229
    1cae:	f0 cf       	rjmp	.-32     	; 0x1c90 <twi_readFrom+0x5c>
    1cb0:	40 e0       	ldi	r20, 0x00	; 0
    1cb2:	fa cf       	rjmp	.-12     	; 0x1ca8 <twi_readFrom+0x74>

00001cb4 <twi_writeTo>:
twi_writeTo():
    1cb4:	0f 93       	push	r16
    1cb6:	41 32       	cpi	r20, 0x21	; 33
    1cb8:	08 f0       	brcs	.+2      	; 0x1cbc <twi_writeTo+0x8>
    1cba:	44 c0       	rjmp	.+136    	; 0x1d44 <twi_writeTo+0x90>
    1cbc:	90 91 9c 03 	lds	r25, 0x039C	; 0x80039c <twi_state>
    1cc0:	91 11       	cpse	r25, r1
    1cc2:	fc cf       	rjmp	.-8      	; 0x1cbc <twi_writeTo+0x8>
    1cc4:	92 e0       	ldi	r25, 0x02	; 2
    1cc6:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <twi_state>
    1cca:	00 93 9a 03 	sts	0x039A, r16	; 0x80039a <twi_sendStop>
    1cce:	9f ef       	ldi	r25, 0xFF	; 255
    1cd0:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <twi_error>
    1cd4:	70 93 94 03 	sts	0x0394, r23	; 0x800394 <twi_masterBuffer+0x1>
    1cd8:	60 93 93 03 	sts	0x0393, r22	; 0x800393 <twi_masterBuffer>
    1cdc:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <twi_masterBufferIndex>
    1ce0:	40 93 91 03 	sts	0x0391, r20	; 0x800391 <twi_masterBufferLength>
    1ce4:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <twi_slarw>
    1ce8:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <twi_slarw>
    1cec:	88 0f       	add	r24, r24
    1cee:	89 2b       	or	r24, r25
    1cf0:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <twi_slarw>
    1cf4:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <twi_inRepStart>
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	11 f5       	brne	.+68     	; 0x1d40 <twi_writeTo+0x8c>
    1cfc:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <twi_inRepStart>
    1d00:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_slarw>
    1d04:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1d08:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d0c:	83 fd       	sbrc	r24, 3
    1d0e:	f8 cf       	rjmp	.-16     	; 0x1d00 <twi_writeTo+0x4c>
    1d10:	85 ec       	ldi	r24, 0xC5	; 197
    1d12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d16:	22 23       	and	r18, r18
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <twi_writeTo+0x6e>
    1d1a:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <twi_state>
    1d1e:	82 30       	cpi	r24, 0x02	; 2
    1d20:	d1 f3       	breq	.-12     	; 0x1d16 <twi_writeTo+0x62>
    1d22:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_error>
    1d26:	8f 3f       	cpi	r24, 0xFF	; 255
    1d28:	79 f0       	breq	.+30     	; 0x1d48 <twi_writeTo+0x94>
    1d2a:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_error>
    1d2e:	80 32       	cpi	r24, 0x20	; 32
    1d30:	69 f0       	breq	.+26     	; 0x1d4c <twi_writeTo+0x98>
    1d32:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <twi_error>
    1d36:	80 33       	cpi	r24, 0x30	; 48
    1d38:	59 f0       	breq	.+22     	; 0x1d50 <twi_writeTo+0x9c>
    1d3a:	84 e0       	ldi	r24, 0x04	; 4
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret
    1d40:	85 ee       	ldi	r24, 0xE5	; 229
    1d42:	e7 cf       	rjmp	.-50     	; 0x1d12 <twi_writeTo+0x5e>
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	fa cf       	rjmp	.-12     	; 0x1d3c <twi_writeTo+0x88>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	f8 cf       	rjmp	.-16     	; 0x1d3c <twi_writeTo+0x88>
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	f6 cf       	rjmp	.-20     	; 0x1d3c <twi_writeTo+0x88>
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	f4 cf       	rjmp	.-24     	; 0x1d3c <twi_writeTo+0x88>

00001d54 <twi_transmit>:
twi_transmit():
    1d54:	20 91 6f 03 	lds	r18, 0x036F	; 0x80036f <twi_txBufferLength>
    1d58:	26 0f       	add	r18, r22
    1d5a:	33 27       	eor	r19, r19
    1d5c:	33 1f       	adc	r19, r19
    1d5e:	21 32       	cpi	r18, 0x21	; 33
    1d60:	31 05       	cpc	r19, r1
    1d62:	ec f4       	brge	.+58     	; 0x1d9e <twi_transmit+0x4a>
    1d64:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <twi_state>
    1d68:	fc 01       	movw	r30, r24
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	24 30       	cpi	r18, 0x04	; 4
    1d70:	69 f0       	breq	.+26     	; 0x1d8c <twi_transmit+0x38>
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	08 95       	ret
    1d76:	a0 91 6f 03 	lds	r26, 0x036F	; 0x80036f <twi_txBufferLength>
    1d7a:	21 91       	ld	r18, Z+
    1d7c:	ac 01       	movw	r20, r24
    1d7e:	4f 58       	subi	r20, 0x8F	; 143
    1d80:	5c 4f       	sbci	r21, 0xFC	; 252
    1d82:	a4 0f       	add	r26, r20
    1d84:	b5 2f       	mov	r27, r21
    1d86:	b1 1d       	adc	r27, r1
    1d88:	2c 93       	st	X, r18
    1d8a:	01 96       	adiw	r24, 0x01	; 1
    1d8c:	86 17       	cp	r24, r22
    1d8e:	98 f3       	brcs	.-26     	; 0x1d76 <twi_transmit+0x22>
    1d90:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_txBufferLength>
    1d94:	68 0f       	add	r22, r24
    1d96:	60 93 6f 03 	sts	0x036F, r22	; 0x80036f <twi_txBufferLength>
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	08 95       	ret
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	08 95       	ret

00001da2 <twi_stop>:
twi_stop():
    1da2:	85 ed       	ldi	r24, 0xD5	; 213
    1da4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1da8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1dac:	84 fd       	sbrc	r24, 4
    1dae:	fc cf       	rjmp	.-8      	; 0x1da8 <twi_stop+0x6>
    1db0:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <twi_state>
    1db4:	08 95       	ret

00001db6 <twi_releaseBus>:
twi_releaseBus():
    1db6:	85 ec       	ldi	r24, 0xC5	; 197
    1db8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1dbc:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <twi_state>
    1dc0:	08 95       	ret

00001dc2 <__vector_26>:
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:534

ISR(TWI_vect)
{
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	0b b6       	in	r0, 0x3b	; 59
    1dce:	0f 92       	push	r0
    1dd0:	2f 93       	push	r18
    1dd2:	3f 93       	push	r19
    1dd4:	4f 93       	push	r20
    1dd6:	5f 93       	push	r21
    1dd8:	6f 93       	push	r22
    1dda:	7f 93       	push	r23
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
    1de0:	af 93       	push	r26
    1de2:	bf 93       	push	r27
    1de4:	ef 93       	push	r30
    1de6:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    1de8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1dec:	88 7f       	andi	r24, 0xF8	; 248
    1dee:	80 36       	cpi	r24, 0x60	; 96
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <__vector_26+0x32>
    1df2:	4e c0       	rjmp	.+156    	; 0x1e90 <__vector_26+0xce>
    1df4:	08 f0       	brcs	.+2      	; 0x1df8 <__vector_26+0x36>
    1df6:	41 c0       	rjmp	.+130    	; 0x1e7a <__vector_26+0xb8>
    1df8:	88 32       	cpi	r24, 0x28	; 40
    1dfa:	09 f4       	brne	.+2      	; 0x1dfe <__vector_26+0x3c>
    1dfc:	aa c0       	rjmp	.+340    	; 0x1f52 <__vector_26+0x190>
    1dfe:	28 f5       	brcc	.+74     	; 0x1e4a <__vector_26+0x88>
    1e00:	80 31       	cpi	r24, 0x10	; 16
    1e02:	09 f4       	brne	.+2      	; 0x1e06 <__vector_26+0x44>
    1e04:	9e c0       	rjmp	.+316    	; 0x1f42 <__vector_26+0x180>
    1e06:	c8 f4       	brcc	.+50     	; 0x1e3a <__vector_26+0x78>
    1e08:	88 23       	and	r24, r24
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <__vector_26+0x4c>
    1e0c:	07 c1       	rjmp	.+526    	; 0x201c <__vector_26+0x25a>
    1e0e:	88 30       	cpi	r24, 0x08	; 8
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <__vector_26+0x52>
    1e12:	97 c0       	rjmp	.+302    	; 0x1f42 <__vector_26+0x180>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	bf 91       	pop	r27
    1e1a:	af 91       	pop	r26
    1e1c:	9f 91       	pop	r25
    1e1e:	8f 91       	pop	r24
    1e20:	7f 91       	pop	r23
    1e22:	6f 91       	pop	r22
    1e24:	5f 91       	pop	r21
    1e26:	4f 91       	pop	r20
    1e28:	3f 91       	pop	r19
    1e2a:	2f 91       	pop	r18
    1e2c:	0f 90       	pop	r0
    1e2e:	0b be       	out	0x3b, r0	; 59
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e3a:	88 31       	cpi	r24, 0x18	; 24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <__vector_26+0x7e>
    1e3e:	89 c0       	rjmp	.+274    	; 0x1f52 <__vector_26+0x190>
    1e40:	80 32       	cpi	r24, 0x20	; 32
    1e42:	41 f7       	brne	.-48     	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e44:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <twi_error>
    1e48:	15 c0       	rjmp	.+42     	; 0x1e74 <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e4a:	80 34       	cpi	r24, 0x40	; 64
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <__vector_26+0x8e>
    1e4e:	a6 c0       	rjmp	.+332    	; 0x1f9c <__vector_26+0x1da>
    1e50:	48 f4       	brcc	.+18     	; 0x1e64 <__vector_26+0xa2>
    1e52:	80 33       	cpi	r24, 0x30	; 48
    1e54:	b9 f3       	breq	.-18     	; 0x1e44 <__vector_26+0x82>
    1e56:	88 33       	cpi	r24, 0x38	; 56
    1e58:	e9 f6       	brne	.-70     	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e5a:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <twi_error>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:575
      twi_releaseBus();
    1e5e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:576
      break;
    1e62:	d8 cf       	rjmp	.-80     	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e64:	80 35       	cpi	r24, 0x50	; 80
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <__vector_26+0xa8>
    1e68:	89 c0       	rjmp	.+274    	; 0x1f7c <__vector_26+0x1ba>
    1e6a:	88 35       	cpi	r24, 0x58	; 88
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <__vector_26+0xae>
    1e6e:	9e c0       	rjmp	.+316    	; 0x1fac <__vector_26+0x1ea>
    1e70:	88 34       	cpi	r24, 0x48	; 72
    1e72:	81 f6       	brne	.-96     	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1e74:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <twi_stop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
      break;
  }
}
    1e78:	cd cf       	rjmp	.-102    	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e7a:	88 39       	cpi	r24, 0x98	; 152
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <__vector_26+0xbe>
    1e7e:	94 c0       	rjmp	.+296    	; 0x1fa8 <__vector_26+0x1e6>
    1e80:	38 f5       	brcc	.+78     	; 0x1ed0 <__vector_26+0x10e>
    1e82:	88 37       	cpi	r24, 0x78	; 120
    1e84:	29 f0       	breq	.+10     	; 0x1e90 <__vector_26+0xce>
    1e86:	50 f4       	brcc	.+20     	; 0x1e9c <__vector_26+0xda>
    1e88:	88 36       	cpi	r24, 0x68	; 104
    1e8a:	11 f0       	breq	.+4      	; 0x1e90 <__vector_26+0xce>
    1e8c:	80 37       	cpi	r24, 0x70	; 112
    1e8e:	11 f6       	brne	.-124    	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1e96:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <twi_rxBufferIndex>
    1e9a:	57 c0       	rjmp	.+174    	; 0x1f4a <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e9c:	88 38       	cpi	r24, 0x88	; 136
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <__vector_26+0xe0>
    1ea0:	83 c0       	rjmp	.+262    	; 0x1fa8 <__vector_26+0x1e6>
    1ea2:	80 39       	cpi	r24, 0x90	; 144
    1ea4:	19 f0       	breq	.+6      	; 0x1eac <__vector_26+0xea>
    1ea6:	80 38       	cpi	r24, 0x80	; 128
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <__vector_26+0xea>
    1eaa:	b4 cf       	rjmp	.-152    	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1eac:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_rxBufferIndex>
    1eb0:	80 32       	cpi	r24, 0x20	; 32
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <__vector_26+0xf4>
    1eb4:	79 c0       	rjmp	.+242    	; 0x1fa8 <__vector_26+0x1e6>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1eb6:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <twi_rxBufferIndex>
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	8e 0f       	add	r24, r30
    1ebe:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <twi_rxBufferIndex>
    1ec2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	e1 5b       	subi	r30, 0xB1	; 177
    1eca:	fc 4f       	sbci	r31, 0xFC	; 252
    1ecc:	80 83       	st	Z, r24
    1ece:	3d c0       	rjmp	.+122    	; 0x1f4a <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ed0:	80 3b       	cpi	r24, 0xB0	; 176
    1ed2:	39 f0       	breq	.+14     	; 0x1ee2 <__vector_26+0x120>
    1ed4:	e0 f4       	brcc	.+56     	; 0x1f0e <__vector_26+0x14c>
    1ed6:	80 3a       	cpi	r24, 0xA0	; 160
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <__vector_26+0x11a>
    1eda:	85 c0       	rjmp	.+266    	; 0x1fe6 <__vector_26+0x224>
    1edc:	88 3a       	cpi	r24, 0xA8	; 168
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <__vector_26+0x120>
    1ee0:	99 cf       	rjmp	.-206    	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1ee2:	84 e0       	ldi	r24, 0x04	; 4
    1ee4:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1ee8:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <twi_txBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1eec:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1ef0:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <twi_onSlaveTransmit>
    1ef4:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <twi_onSlaveTransmit+0x1>
    1ef8:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1efa:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_txBufferLength>
    1efe:	81 11       	cpse	r24, r1
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 6f 03 	sts	0x036F, r24	; 0x80036f <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    1f08:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <twi_txBuffer>
    1f0c:	09 c0       	rjmp	.+18     	; 0x1f20 <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f0e:	80 3c       	cpi	r24, 0xC0	; 192
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <__vector_26+0x152>
    1f12:	82 c0       	rjmp	.+260    	; 0x2018 <__vector_26+0x256>
    1f14:	88 3c       	cpi	r24, 0xC8	; 200
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <__vector_26+0x158>
    1f18:	7f c0       	rjmp	.+254    	; 0x2018 <__vector_26+0x256>
    1f1a:	88 3b       	cpi	r24, 0xB8	; 184
    1f1c:	09 f0       	breq	.+2      	; 0x1f20 <__vector_26+0x15e>
    1f1e:	7a cf       	rjmp	.-268    	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1f20:	e0 91 70 03 	lds	r30, 0x0370	; 0x800370 <twi_txBufferIndex>
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	8e 0f       	add	r24, r30
    1f28:	80 93 70 03 	sts	0x0370, r24	; 0x800370 <twi_txBufferIndex>
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	ef 58       	subi	r30, 0x8F	; 143
    1f30:	fc 4f       	sbci	r31, 0xFC	; 252
    1f32:	80 81       	ld	r24, Z
    1f34:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f38:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <twi_txBufferIndex>
    1f3c:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <twi_txBufferLength>
    1f40:	31 c0       	rjmp	.+98     	; 0x1fa4 <__vector_26+0x1e2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f42:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_slarw>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f4a:	85 ec       	ldi	r24, 0xC5	; 197
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f50:	61 cf       	rjmp	.-318    	; 0x1e14 <__vector_26+0x52>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f52:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <twi_masterBufferIndex>
    1f56:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <twi_masterBufferLength>
    1f5a:	98 17       	cp	r25, r24
    1f5c:	b8 f5       	brcc	.+110    	; 0x1fcc <__vector_26+0x20a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f5e:	80 91 93 03 	lds	r24, 0x0393	; 0x800393 <twi_masterBuffer>
    1f62:	90 91 94 03 	lds	r25, 0x0394	; 0x800394 <twi_masterBuffer+0x1>
    1f66:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <twi_masterBufferIndex>
    1f6a:	21 e0       	ldi	r18, 0x01	; 1
    1f6c:	2e 0f       	add	r18, r30
    1f6e:	20 93 92 03 	sts	0x0392, r18	; 0x800392 <twi_masterBufferIndex>
    1f72:	e8 0f       	add	r30, r24
    1f74:	f9 2f       	mov	r31, r25
    1f76:	f1 1d       	adc	r31, r1
    1f78:	80 81       	ld	r24, Z
    1f7a:	e5 cf       	rjmp	.-54     	; 0x1f46 <__vector_26+0x184>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1f7c:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <twi_masterBuffer>
    1f80:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <twi_masterBuffer+0x1>
    1f84:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <twi_masterBufferIndex>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	8e 0f       	add	r24, r30
    1f8c:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <twi_masterBufferIndex>
    1f90:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f94:	e2 0f       	add	r30, r18
    1f96:	f3 2f       	mov	r31, r19
    1f98:	f1 1d       	adc	r31, r1
    1f9a:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f9c:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <twi_masterBufferIndex>
    1fa0:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <twi_masterBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1fa4:	98 17       	cp	r25, r24
    1fa6:	88 f2       	brcs	.-94     	; 0x1f4a <__vector_26+0x188>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fa8:	85 e8       	ldi	r24, 0x85	; 133
    1faa:	d0 cf       	rjmp	.-96     	; 0x1f4c <__vector_26+0x18a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fac:	20 91 93 03 	lds	r18, 0x0393	; 0x800393 <twi_masterBuffer>
    1fb0:	30 91 94 03 	lds	r19, 0x0394	; 0x800394 <twi_masterBuffer+0x1>
    1fb4:	e0 91 92 03 	lds	r30, 0x0392	; 0x800392 <twi_masterBufferIndex>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8e 0f       	add	r24, r30
    1fbc:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <twi_masterBufferIndex>
    1fc0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 2f       	mov	r31, r19
    1fc8:	f1 1d       	adc	r31, r1
    1fca:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    1fcc:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <twi_sendStop>
    1fd0:	81 11       	cpse	r24, r1
    1fd2:	50 cf       	rjmp	.-352    	; 0x1e74 <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <twi_inRepStart>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1fda:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1fdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1fe0:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:686
      break;
    1fe4:	17 cf       	rjmp	.-466    	; 0x1e14 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1fe6:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1fea:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_rxBufferIndex>
    1fee:	80 32       	cpi	r24, 0x20	; 32
    1ff0:	30 f4       	brcc	.+12     	; 0x1ffe <__vector_26+0x23c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1ff2:	e0 91 4e 03 	lds	r30, 0x034E	; 0x80034e <twi_rxBufferIndex>
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	e1 5b       	subi	r30, 0xB1	; 177
    1ffa:	fc 4f       	sbci	r31, 0xFC	; 252
    1ffc:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1ffe:	60 91 4e 03 	lds	r22, 0x034E	; 0x80034e <twi_rxBufferIndex>
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	e0 91 95 03 	lds	r30, 0x0395	; 0x800395 <twi_onSlaveReceive>
    2008:	f0 91 96 03 	lds	r31, 0x0396	; 0x800396 <twi_onSlaveReceive+0x1>
    200c:	8f e4       	ldi	r24, 0x4F	; 79
    200e:	93 e0       	ldi	r25, 0x03	; 3
    2010:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    2012:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <twi_rxBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:644
      break;
    2016:	fe ce       	rjmp	.-516    	; 0x1e14 <__vector_26+0x52>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2018:	85 ec       	ldi	r24, 0xC5	; 197
    201a:	e0 cf       	rjmp	.-64     	; 0x1fdc <__vector_26+0x21a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    201c:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <twi_error>
    2020:	29 cf       	rjmp	.-430    	; 0x1e74 <__vector_26+0xb2>

00002022 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2022:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2024:	91 8d       	ldd	r25, Z+25	; 0x19
    2026:	22 8d       	ldd	r18, Z+26	; 0x1a
    2028:	89 2f       	mov	r24, r25
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	80 5c       	subi	r24, 0xC0	; 192
    202e:	9f 4f       	sbci	r25, 0xFF	; 255
    2030:	82 1b       	sub	r24, r18
    2032:	91 09       	sbc	r25, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    2034:	8f 73       	andi	r24, 0x3F	; 63
    2036:	99 27       	eor	r25, r25
    2038:	08 95       	ret

0000203a <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    203a:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    203c:	91 8d       	ldd	r25, Z+25	; 0x19
    203e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2040:	98 17       	cp	r25, r24
    2042:	31 f0       	breq	.+12     	; 0x2050 <HardwareSerial::peek()+0x16>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2044:	82 8d       	ldd	r24, Z+26	; 0x1a
    2046:	e8 0f       	add	r30, r24
    2048:	f1 1d       	adc	r31, r1
    204a:	85 8d       	ldd	r24, Z+29	; 0x1d
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2054:	08 95       	ret

00002056 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    2056:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2058:	91 8d       	ldd	r25, Z+25	; 0x19
    205a:	82 8d       	ldd	r24, Z+26	; 0x1a
    205c:	98 17       	cp	r25, r24
    205e:	61 f0       	breq	.+24     	; 0x2078 <HardwareSerial::read()+0x22>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2060:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2062:	ae 0f       	add	r26, r30
    2064:	bf 2f       	mov	r27, r31
    2066:	b1 1d       	adc	r27, r1
    2068:	5d 96       	adiw	r26, 0x1d	; 29
    206a:	8c 91       	ld	r24, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    206c:	92 8d       	ldd	r25, Z+26	; 0x1a
    206e:	9f 5f       	subi	r25, 0xFF	; 255
    2070:	9f 73       	andi	r25, 0x3F	; 63
    2072:	92 8f       	std	Z+26, r25	; 0x1a
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2078:	8f ef       	ldi	r24, 0xFF	; 255
    207a:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    207c:	08 95       	ret

0000207e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    207e:	fc 01       	movw	r30, r24
    2080:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    2082:	44 8d       	ldd	r20, Z+28	; 0x1c
    2084:	25 2f       	mov	r18, r21
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	84 2f       	mov	r24, r20
    208a:	90 e0       	ldi	r25, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    208c:	82 1b       	sub	r24, r18
    208e:	93 0b       	sbc	r25, r19
    2090:	54 17       	cp	r21, r20
    2092:	10 f0       	brcs	.+4      	; 0x2098 <HardwareSerial::availableForWrite()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    2094:	cf 96       	adiw	r24, 0x3f	; 63
    2096:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    2098:	01 97       	sbiw	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    209a:	08 95       	ret

0000209c <serialEventRun()>:
_Z14serialEventRunv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    209c:	8a ea       	ldi	r24, 0xAA	; 170
    209e:	91 e1       	ldi	r25, 0x11	; 17
    20a0:	89 2b       	or	r24, r25
    20a2:	49 f0       	breq	.+18     	; 0x20b6 <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	89 2b       	or	r24, r25
    20aa:	29 f0       	breq	.+10     	; 0x20b6 <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    20ac:	0e 94 aa 11 	call	0x2354	; 0x2354 <Serial0_available()>
    20b0:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    20b2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	89 2b       	or	r24, r25
    20bc:	49 f0       	breq	.+18     	; 0x20d0 <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	89 2b       	or	r24, r25
    20c4:	29 f0       	breq	.+10     	; 0x20d0 <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    20c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    20ca:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
    20cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    20d0:	08 95       	ret

000020d2 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    20d2:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    20d4:	a4 8d       	ldd	r26, Z+28	; 0x1c
    20d6:	a8 0f       	add	r26, r24
    20d8:	b9 2f       	mov	r27, r25
    20da:	b1 1d       	adc	r27, r1
    20dc:	a3 5a       	subi	r26, 0xA3	; 163
    20de:	bf 4f       	sbci	r27, 0xFF	; 255
    20e0:	2c 91       	ld	r18, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    20e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	01 96       	adiw	r24, 0x01	; 1
    20e8:	8f 73       	andi	r24, 0x3F	; 63
    20ea:	99 27       	eor	r25, r25
    20ec:	84 8f       	std	Z+28, r24	; 0x1c
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    20ee:	a6 89       	ldd	r26, Z+22	; 0x16
    20f0:	b7 89       	ldd	r27, Z+23	; 0x17
    20f2:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    20f4:	a0 89       	ldd	r26, Z+16	; 0x10
    20f6:	b1 89       	ldd	r27, Z+17	; 0x11
    20f8:	8c 91       	ld	r24, X
    20fa:	83 70       	andi	r24, 0x03	; 3
    20fc:	80 64       	ori	r24, 0x40	; 64
    20fe:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    2100:	93 8d       	ldd	r25, Z+27	; 0x1b
    2102:	84 8d       	ldd	r24, Z+28	; 0x1c
    2104:	98 13       	cpse	r25, r24
    2106:	06 c0       	rjmp	.+12     	; 0x2114 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2108:	02 88       	ldd	r0, Z+18	; 0x12
    210a:	f3 89       	ldd	r31, Z+19	; 0x13
    210c:	e0 2d       	mov	r30, r0
    210e:	80 81       	ld	r24, Z
    2110:	8f 7d       	andi	r24, 0xDF	; 223
    2112:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    2114:	08 95       	ret

00002116 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    211c:	88 8d       	ldd	r24, Y+24	; 0x18
    211e:	88 23       	and	r24, r24
    2120:	b9 f0       	breq	.+46     	; 0x2150 <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2122:	aa 89       	ldd	r26, Y+18	; 0x12
    2124:	bb 89       	ldd	r27, Y+19	; 0x13
    2126:	e8 89       	ldd	r30, Y+16	; 0x10
    2128:	f9 89       	ldd	r31, Y+17	; 0x11
    212a:	8c 91       	ld	r24, X
    212c:	85 fd       	sbrc	r24, 5
    212e:	03 c0       	rjmp	.+6      	; 0x2136 <HardwareSerial::flush()+0x20>
    2130:	80 81       	ld	r24, Z
    2132:	86 fd       	sbrc	r24, 6
    2134:	0d c0       	rjmp	.+26     	; 0x2150 <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	07 fc       	sbrc	r0, 7
    213a:	f7 cf       	rjmp	.-18     	; 0x212a <HardwareSerial::flush()+0x14>
    213c:	8c 91       	ld	r24, X
    213e:	85 ff       	sbrs	r24, 5
    2140:	f2 cf       	rjmp	.-28     	; 0x2126 <HardwareSerial::flush()+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    2142:	80 81       	ld	r24, Z
    2144:	85 ff       	sbrs	r24, 5
    2146:	ed cf       	rjmp	.-38     	; 0x2122 <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    2148:	ce 01       	movw	r24, r28
    214a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <HardwareSerial::_tx_udr_empty_irq()>
    214e:	e9 cf       	rjmp	.-46     	; 0x2122 <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	08 95       	ret

00002156 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    2156:	ef 92       	push	r14
    2158:	ff 92       	push	r15
    215a:	0f 93       	push	r16
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	88 8f       	std	Y+24, r24	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2168:	9b 8d       	ldd	r25, Y+27	; 0x1b
    216a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    216c:	98 13       	cpse	r25, r24
    216e:	1a c0       	rjmp	.+52     	; 0x21a4 <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    2170:	e8 89       	ldd	r30, Y+16	; 0x10
    2172:	f9 89       	ldd	r31, Y+17	; 0x11
    2174:	80 81       	ld	r24, Z
    2176:	85 ff       	sbrs	r24, 5
    2178:	15 c0       	rjmp	.+42     	; 0x21a4 <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    217a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    217c:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    217e:	ee 89       	ldd	r30, Y+22	; 0x16
    2180:	ff 89       	ldd	r31, Y+23	; 0x17
    2182:	60 83       	st	Z, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    2184:	e8 89       	ldd	r30, Y+16	; 0x10
    2186:	f9 89       	ldd	r31, Y+17	; 0x11
    2188:	80 81       	ld	r24, Z
    218a:	83 70       	andi	r24, 0x03	; 3
    218c:	80 64       	ori	r24, 0x40	; 64
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    218e:	80 83       	st	Z, r24
__iRestore():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2190:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	ef 90       	pop	r14
    21a2:	08 95       	ret
    21a4:	f6 2e       	mov	r15, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    21a6:	0b 8d       	ldd	r16, Y+27	; 0x1b
    21a8:	10 e0       	ldi	r17, 0x00	; 0
    21aa:	0f 5f       	subi	r16, 0xFF	; 255
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	0f 73       	andi	r16, 0x3F	; 63
    21b0:	11 27       	eor	r17, r17
    21b2:	e0 2e       	mov	r14, r16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    21b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21b6:	8e 11       	cpse	r24, r14
    21b8:	0c c0       	rjmp	.+24     	; 0x21d2 <HardwareSerial::write(unsigned char)+0x7c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	07 fc       	sbrc	r0, 7
    21be:	fa cf       	rjmp	.-12     	; 0x21b4 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    21c0:	e8 89       	ldd	r30, Y+16	; 0x10
    21c2:	f9 89       	ldd	r31, Y+17	; 0x11
    21c4:	80 81       	ld	r24, Z
    21c6:	85 ff       	sbrs	r24, 5
    21c8:	f5 cf       	rjmp	.-22     	; 0x21b4 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    21ca:	ce 01       	movw	r24, r28
    21cc:	0e 94 69 10 	call	0x20d2	; 0x20d2 <HardwareSerial::_tx_udr_empty_irq()>
    21d0:	f1 cf       	rjmp	.-30     	; 0x21b4 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    21d2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    21d4:	ec 0f       	add	r30, r28
    21d6:	fd 2f       	mov	r31, r29
    21d8:	f1 1d       	adc	r31, r1
    21da:	e3 5a       	subi	r30, 0xA3	; 163
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	f0 82       	st	Z, r15
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    21e0:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21e2:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    21e4:	0b 8f       	std	Y+27, r16	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    21e6:	ea 89       	ldd	r30, Y+18	; 0x12
    21e8:	fb 89       	ldd	r31, Y+19	; 0x13
    21ea:	80 81       	ld	r24, Z
    21ec:	80 62       	ori	r24, 0x20	; 32
    21ee:	cf cf       	rjmp	.-98     	; 0x218e <HardwareSerial::write(unsigned char)+0x38>

000021f0 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    21f0:	cf 92       	push	r12
    21f2:	df 92       	push	r13
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	ec 01       	movw	r28, r24
    2200:	6a 01       	movw	r12, r20
    2202:	7b 01       	movw	r14, r22
    2204:	12 2f       	mov	r17, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2206:	60 e8       	ldi	r22, 0x80	; 128
    2208:	74 e8       	ldi	r23, 0x84	; 132
    220a:	8e e1       	ldi	r24, 0x1E	; 30
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a7 01       	movw	r20, r14
    2210:	96 01       	movw	r18, r12
    2212:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__udivmodsi4>
    2216:	21 50       	subi	r18, 0x01	; 1
    2218:	31 09       	sbc	r19, r1
    221a:	41 09       	sbc	r20, r1
    221c:	51 09       	sbc	r21, r1
    221e:	56 95       	lsr	r21
    2220:	47 95       	ror	r20
    2222:	37 95       	ror	r19
    2224:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    2226:	e8 89       	ldd	r30, Y+16	; 0x10
    2228:	f9 89       	ldd	r31, Y+17	; 0x11
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    222e:	21 15       	cp	r18, r1
    2230:	80 e1       	ldi	r24, 0x10	; 16
    2232:	38 07       	cpc	r19, r24
    2234:	98 f0       	brcs	.+38     	; 0x225c <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    2236:	e8 89       	ldd	r30, Y+16	; 0x10
    2238:	f9 89       	ldd	r31, Y+17	; 0x11
    223a:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    223c:	60 e4       	ldi	r22, 0x40	; 64
    223e:	72 e4       	ldi	r23, 0x42	; 66
    2240:	8f e0       	ldi	r24, 0x0F	; 15
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a7 01       	movw	r20, r14
    2246:	96 01       	movw	r18, r12
    2248:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <__udivmodsi4>
    224c:	21 50       	subi	r18, 0x01	; 1
    224e:	31 09       	sbc	r19, r1
    2250:	41 09       	sbc	r20, r1
    2252:	51 09       	sbc	r21, r1
    2254:	56 95       	lsr	r21
    2256:	47 95       	ror	r20
    2258:	37 95       	ror	r19
    225a:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    225c:	ec 85       	ldd	r30, Y+12	; 0x0c
    225e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2260:	30 83       	st	Z, r19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    2262:	ee 85       	ldd	r30, Y+14	; 0x0e
    2264:	ff 85       	ldd	r31, Y+15	; 0x0f
    2266:	20 83       	st	Z, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    2268:	18 8e       	std	Y+24, r1	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    226a:	ec 89       	ldd	r30, Y+20	; 0x14
    226c:	fd 89       	ldd	r31, Y+21	; 0x15
    226e:	10 83       	st	Z, r17
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2270:	ea 89       	ldd	r30, Y+18	; 0x12
    2272:	fb 89       	ldd	r31, Y+19	; 0x13
    2274:	80 81       	ld	r24, Z
    2276:	88 69       	ori	r24, 0x98	; 152
    2278:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    227a:	ea 89       	ldd	r30, Y+18	; 0x12
    227c:	fb 89       	ldd	r31, Y+19	; 0x13
    227e:	80 81       	ld	r24, Z
    2280:	8f 7d       	andi	r24, 0xDF	; 223
    2282:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    2284:	df 91       	pop	r29
    2286:	cf 91       	pop	r28
    2288:	1f 91       	pop	r17
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	df 90       	pop	r13
    2290:	cf 90       	pop	r12
    2292:	08 95       	ret

00002294 <__vector_20>:
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2294:	1f 92       	push	r1
    2296:	0f 92       	push	r0
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	0f 92       	push	r0
    229c:	11 24       	eor	r1, r1
    229e:	0b b6       	in	r0, 0x3b	; 59
    22a0:	0f 92       	push	r0
    22a2:	2f 93       	push	r18
    22a4:	8f 93       	push	r24
    22a6:	9f 93       	push	r25
    22a8:	ef 93       	push	r30
    22aa:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    22ac:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <Serial+0x10>
    22b0:	f0 91 ae 03 	lds	r31, 0x03AE	; 0x8003ae <Serial+0x11>
    22b4:	80 81       	ld	r24, Z
    22b6:	e0 91 b3 03 	lds	r30, 0x03B3	; 0x8003b3 <Serial+0x16>
    22ba:	f0 91 b4 03 	lds	r31, 0x03B4	; 0x8003b4 <Serial+0x17>
    22be:	82 fd       	sbrc	r24, 2
    22c0:	1d c0       	rjmp	.+58     	; 0x22fc <__vector_20+0x68>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    22c2:	90 81       	ld	r25, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    22c4:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <Serial+0x19>
    22c8:	8f 5f       	subi	r24, 0xFF	; 255
    22ca:	8f 73       	andi	r24, 0x3F	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    22cc:	20 91 b7 03 	lds	r18, 0x03B7	; 0x8003b7 <Serial+0x1a>
    22d0:	82 17       	cp	r24, r18
    22d2:	41 f0       	breq	.+16     	; 0x22e4 <__vector_20+0x50>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    22d4:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <Serial+0x19>
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	e3 56       	subi	r30, 0x63	; 99
    22dc:	fc 4f       	sbci	r31, 0xFC	; 252
    22de:	95 8f       	std	Z+29, r25	; 0x1d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    22e0:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <Serial+0x19>
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    22e4:	ff 91       	pop	r31
    22e6:	ef 91       	pop	r30
    22e8:	9f 91       	pop	r25
    22ea:	8f 91       	pop	r24
    22ec:	2f 91       	pop	r18
    22ee:	0f 90       	pop	r0
    22f0:	0b be       	out	0x3b, r0	; 59
    22f2:	0f 90       	pop	r0
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	0f 90       	pop	r0
    22f8:	1f 90       	pop	r1
    22fa:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    22fc:	80 81       	ld	r24, Z
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    22fe:	f2 cf       	rjmp	.-28     	; 0x22e4 <__vector_20+0x50>

00002300 <__vector_21>:
__vector_21():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2300:	1f 92       	push	r1
    2302:	0f 92       	push	r0
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	0f 92       	push	r0
    2308:	11 24       	eor	r1, r1
    230a:	0b b6       	in	r0, 0x3b	; 59
    230c:	0f 92       	push	r0
    230e:	2f 93       	push	r18
    2310:	3f 93       	push	r19
    2312:	4f 93       	push	r20
    2314:	5f 93       	push	r21
    2316:	6f 93       	push	r22
    2318:	7f 93       	push	r23
    231a:	8f 93       	push	r24
    231c:	9f 93       	push	r25
    231e:	af 93       	push	r26
    2320:	bf 93       	push	r27
    2322:	ef 93       	push	r30
    2324:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2326:	8d e9       	ldi	r24, 0x9D	; 157
    2328:	93 e0       	ldi	r25, 0x03	; 3
    232a:	0e 94 69 10 	call	0x20d2	; 0x20d2 <HardwareSerial::_tx_udr_empty_irq()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    232e:	ff 91       	pop	r31
    2330:	ef 91       	pop	r30
    2332:	bf 91       	pop	r27
    2334:	af 91       	pop	r26
    2336:	9f 91       	pop	r25
    2338:	8f 91       	pop	r24
    233a:	7f 91       	pop	r23
    233c:	6f 91       	pop	r22
    233e:	5f 91       	pop	r21
    2340:	4f 91       	pop	r20
    2342:	3f 91       	pop	r19
    2344:	2f 91       	pop	r18
    2346:	0f 90       	pop	r0
    2348:	0b be       	out	0x3b, r0	; 59
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	0f 90       	pop	r0
    2350:	1f 90       	pop	r1
    2352:	18 95       	reti

00002354 <Serial0_available()>:
_Z17Serial0_availablev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2354:	8d e9       	ldi	r24, 0x9D	; 157
    2356:	93 e0       	ldi	r25, 0x03	; 3
    2358:	0e 94 11 10 	call	0x2022	; 0x2022 <HardwareSerial::available()>
    235c:	21 e0       	ldi	r18, 0x01	; 1
    235e:	89 2b       	or	r24, r25
    2360:	09 f4       	brne	.+2      	; 0x2364 <Serial0_available()+0x10>
    2362:	20 e0       	ldi	r18, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2364:	82 2f       	mov	r24, r18
    2366:	08 95       	ret

00002368 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    2368:	ed e9       	ldi	r30, 0x9D	; 157
    236a:	f3 e0       	ldi	r31, 0x03	; 3
    236c:	13 82       	std	Z+3, r1	; 0x03
    236e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
    2370:	88 ee       	ldi	r24, 0xE8	; 232
    2372:	93 e0       	ldi	r25, 0x03	; 3
    2374:	a0 e0       	ldi	r26, 0x00	; 0
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	84 83       	std	Z+4, r24	; 0x04
    237a:	95 83       	std	Z+5, r25	; 0x05
    237c:	a6 83       	std	Z+6, r26	; 0x06
    237e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2380:	80 e7       	ldi	r24, 0x70	; 112
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	91 83       	std	Z+1, r25	; 0x01
    2386:	80 83       	st	Z, r24
    2388:	85 ec       	ldi	r24, 0xC5	; 197
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	95 87       	std	Z+13, r25	; 0x0d
    238e:	84 87       	std	Z+12, r24	; 0x0c
    2390:	84 ec       	ldi	r24, 0xC4	; 196
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	97 87       	std	Z+15, r25	; 0x0f
    2396:	86 87       	std	Z+14, r24	; 0x0e
    2398:	80 ec       	ldi	r24, 0xC0	; 192
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	91 8b       	std	Z+17, r25	; 0x11
    239e:	80 8b       	std	Z+16, r24	; 0x10
    23a0:	81 ec       	ldi	r24, 0xC1	; 193
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	93 8b       	std	Z+19, r25	; 0x13
    23a6:	82 8b       	std	Z+18, r24	; 0x12
    23a8:	82 ec       	ldi	r24, 0xC2	; 194
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	95 8b       	std	Z+21, r25	; 0x15
    23ae:	84 8b       	std	Z+20, r24	; 0x14
    23b0:	86 ec       	ldi	r24, 0xC6	; 198
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	97 8b       	std	Z+23, r25	; 0x17
    23b6:	86 8b       	std	Z+22, r24	; 0x16
    23b8:	11 8e       	std	Z+25, r1	; 0x19
    23ba:	12 8e       	std	Z+26, r1	; 0x1a
    23bc:	13 8e       	std	Z+27, r1	; 0x1b
    23be:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    23c0:	08 95       	ret

000023c2 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:119
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    23c2:	af 92       	push	r10
    23c4:	bf 92       	push	r11
    23c6:	cf 92       	push	r12
    23c8:	df 92       	push	r13
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	6c 01       	movw	r12, r24
    23d8:	7b 01       	movw	r14, r22
    23da:	8b 01       	movw	r16, r22
    23dc:	04 0f       	add	r16, r20
    23de:	15 1f       	adc	r17, r21
    23e0:	eb 01       	movw	r28, r22
    23e2:	5e 01       	movw	r10, r28
    23e4:	ae 18       	sub	r10, r14
    23e6:	bf 08       	sbc	r11, r15
    23e8:	c0 17       	cp	r28, r16
    23ea:	d1 07       	cpc	r29, r17
    23ec:	59 f0       	breq	.+22     	; 0x2404 <Print::write(unsigned char const*, unsigned int)+0x42>
    23ee:	69 91       	ld	r22, Y+
    23f0:	d6 01       	movw	r26, r12
    23f2:	ed 91       	ld	r30, X+
    23f4:	fc 91       	ld	r31, X
    23f6:	01 90       	ld	r0, Z+
    23f8:	f0 81       	ld	r31, Z
    23fa:	e0 2d       	mov	r30, r0
    23fc:	c6 01       	movw	r24, r12
    23fe:	09 95       	icall
    2400:	89 2b       	or	r24, r25
    2402:	79 f7       	brne	.-34     	; 0x23e2 <Print::write(unsigned char const*, unsigned int)+0x20>
    2404:	c5 01       	movw	r24, r10
    2406:	df 91       	pop	r29
    2408:	cf 91       	pop	r28
    240a:	1f 91       	pop	r17
    240c:	0f 91       	pop	r16
    240e:	ff 90       	pop	r15
    2410:	ef 90       	pop	r14
    2412:	df 90       	pop	r13
    2414:	cf 90       	pop	r12
    2416:	bf 90       	pop	r11
    2418:	af 90       	pop	r10
    241a:	08 95       	ret

0000241c <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    241c:	fb 01       	movw	r30, r22
    241e:	01 90       	ld	r0, Z+
    2420:	00 20       	and	r0, r0
    2422:	e9 f7       	brne	.-6      	; 0x241e <Print::write(char const*) [clone .part.2]+0x2>
    2424:	31 97       	sbiw	r30, 0x01	; 1
    2426:	af 01       	movw	r20, r30
    2428:	46 1b       	sub	r20, r22
    242a:	57 0b       	sbc	r21, r23
    242c:	dc 01       	movw	r26, r24
    242e:	ed 91       	ld	r30, X+
    2430:	fc 91       	ld	r31, X
    2432:	02 80       	ldd	r0, Z+2	; 0x02
    2434:	f3 81       	ldd	r31, Z+3	; 0x03
    2436:	e0 2d       	mov	r30, r0
    2438:	09 94       	ijmp

0000243a <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    243a:	db 01       	movw	r26, r22
    243c:	14 96       	adiw	r26, 0x04	; 4
    243e:	4d 91       	ld	r20, X+
    2440:	5c 91       	ld	r21, X
    2442:	15 97       	sbiw	r26, 0x05	; 5
    2444:	6d 91       	ld	r22, X+
    2446:	7c 91       	ld	r23, X
    2448:	dc 01       	movw	r26, r24
    244a:	ed 91       	ld	r30, X+
    244c:	fc 91       	ld	r31, X
    244e:	02 80       	ldd	r0, Z+2	; 0x02
    2450:	f3 81       	ldd	r31, Z+3	; 0x03
    2452:	e0 2d       	mov	r30, r0
    2454:	09 94       	ijmp

00002456 <Print::println()>:
_ZN5Print5writeEPKc():
    2456:	6e e7       	ldi	r22, 0x7E	; 126
    2458:	72 e0       	ldi	r23, 0x02	; 2
    245a:	0c 94 0e 12 	jmp	0x241c	; 0x241c <Print::write(char const*) [clone .part.2]>

0000245e <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:132
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	cf 93       	push	r28
    2464:	df 93       	push	r29
    2466:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:133
  size_t n = print(s);
    2468:	0e 94 1d 12 	call	0x243a	; 0x243a <Print::print(String const&)>
    246c:	8c 01       	movw	r16, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:134
  n += println();
    246e:	ce 01       	movw	r24, r28
    2470:	0e 94 2b 12 	call	0x2456	; 0x2456 <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:136
  return n;
}
    2474:	80 0f       	add	r24, r16
    2476:	91 1f       	adc	r25, r17
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	08 95       	ret

00002482 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    248c:	d0 e0       	ldi	r29, 0x00	; 0
    248e:	c0 e0       	ldi	r28, 0x00	; 0
    2490:	61 15       	cp	r22, r1
    2492:	71 05       	cpc	r23, r1
    2494:	19 f0       	breq	.+6      	; 0x249c <Print::println(char const*)+0x1a>
    2496:	0e 94 0e 12 	call	0x241c	; 0x241c <Print::write(char const*) [clone .part.2]>
    249a:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    249c:	c8 01       	movw	r24, r16
    249e:	0e 94 2b 12 	call	0x2456	; 0x2456 <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:143
  return n;
}
    24a2:	8c 0f       	add	r24, r28
    24a4:	9d 1f       	adc	r25, r29
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	08 95       	ret

000024b0 <String::~String()>:
_ZN6StringD2Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:342

unsigned char String::concat(const __FlashStringHelper * str)
{
  if (!str) return 0;
  int length = strlen_P((const char *) str);
  if (length == 0) return 1;
    24b0:	fc 01       	movw	r30, r24
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	11 f0       	breq	.+4      	; 0x24be <String::~String()+0xe>
    24ba:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <free>
    24be:	08 95       	ret

000024c0 <String::invalidate()>:
_ZN6String10invalidateEv():
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	ec 01       	movw	r28, r24
    24c6:	88 81       	ld	r24, Y
    24c8:	99 81       	ldd	r25, Y+1	; 0x01
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	11 f0       	breq	.+4      	; 0x24d2 <String::invalidate()+0x12>
    24ce:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <free>
    24d2:	19 82       	std	Y+1, r1	; 0x01
    24d4:	18 82       	st	Y, r1
    24d6:	1d 82       	std	Y+5, r1	; 0x05
    24d8:	1c 82       	std	Y+4, r1	; 0x04
    24da:	1b 82       	std	Y+3, r1	; 0x03
    24dc:	1a 82       	std	Y+2, r1	; 0x02
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	08 95       	ret

000024e4 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	ec 01       	movw	r28, r24
    24ee:	8b 01       	movw	r16, r22
    24f0:	6f 5f       	subi	r22, 0xFF	; 255
    24f2:	7f 4f       	sbci	r23, 0xFF	; 255
    24f4:	88 81       	ld	r24, Y
    24f6:	99 81       	ldd	r25, Y+1	; 0x01
    24f8:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <realloc>
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	51 f0       	breq	.+20     	; 0x2514 <String::changeBuffer(unsigned int)+0x30>
    2500:	99 83       	std	Y+1, r25	; 0x01
    2502:	88 83       	st	Y, r24
    2504:	1b 83       	std	Y+3, r17	; 0x03
    2506:	0a 83       	std	Y+2, r16	; 0x02
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	df 91       	pop	r29
    250c:	cf 91       	pop	r28
    250e:	1f 91       	pop	r17
    2510:	0f 91       	pop	r16
    2512:	08 95       	ret
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	f9 cf       	rjmp	.-14     	; 0x250a <String::changeBuffer(unsigned int)+0x26>

00002518 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	ec 01       	movw	r28, r24
    251e:	88 81       	ld	r24, Y
    2520:	99 81       	ldd	r25, Y+1	; 0x01
    2522:	89 2b       	or	r24, r25
    2524:	49 f0       	breq	.+18     	; 0x2538 <String::reserve(unsigned int)+0x20>
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	9b 81       	ldd	r25, Y+3	; 0x03
    252a:	86 17       	cp	r24, r22
    252c:	97 07       	cpc	r25, r23
    252e:	20 f0       	brcs	.+8      	; 0x2538 <String::reserve(unsigned int)+0x20>
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	df 91       	pop	r29
    2534:	cf 91       	pop	r28
    2536:	08 95       	ret
    2538:	ce 01       	movw	r24, r28
    253a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <String::changeBuffer(unsigned int)>
    253e:	88 23       	and	r24, r24
    2540:	c1 f3       	breq	.-16     	; 0x2532 <String::reserve(unsigned int)+0x1a>
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	9d 81       	ldd	r25, Y+5	; 0x05
    2546:	89 2b       	or	r24, r25
    2548:	99 f7       	brne	.-26     	; 0x2530 <String::reserve(unsigned int)+0x18>
    254a:	e8 81       	ld	r30, Y
    254c:	f9 81       	ldd	r31, Y+1	; 0x01
    254e:	10 82       	st	Z, r1
    2550:	ef cf       	rjmp	.-34     	; 0x2530 <String::reserve(unsigned int)+0x18>

00002552 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	ec 01       	movw	r28, r24
    2560:	7b 01       	movw	r14, r22
    2562:	8a 01       	movw	r16, r20
    2564:	ba 01       	movw	r22, r20
    2566:	0e 94 8c 12 	call	0x2518	; 0x2518 <String::reserve(unsigned int)>
    256a:	81 11       	cpse	r24, r1
    256c:	0b c0       	rjmp	.+22     	; 0x2584 <String::copy(char const*, unsigned int)+0x32>
    256e:	ce 01       	movw	r24, r28
    2570:	0e 94 60 12 	call	0x24c0	; 0x24c0 <String::invalidate()>
    2574:	ce 01       	movw	r24, r28
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	08 95       	ret
    2584:	1d 83       	std	Y+5, r17	; 0x05
    2586:	0c 83       	std	Y+4, r16	; 0x04
    2588:	b7 01       	movw	r22, r14
    258a:	88 81       	ld	r24, Y
    258c:	99 81       	ldd	r25, Y+1	; 0x01
    258e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <strcpy>
    2592:	f0 cf       	rjmp	.-32     	; 0x2574 <String::copy(char const*, unsigned int)+0x22>

00002594 <String::String(char const*)>:
_ZN6String4initEv():
    2594:	fc 01       	movw	r30, r24
    2596:	11 82       	std	Z+1, r1	; 0x01
    2598:	10 82       	st	Z, r1
    259a:	13 82       	std	Z+3, r1	; 0x03
    259c:	12 82       	std	Z+2, r1	; 0x02
    259e:	15 82       	std	Z+5, r1	; 0x05
    25a0:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    25a2:	61 15       	cp	r22, r1
    25a4:	71 05       	cpc	r23, r1
    25a6:	51 f0       	breq	.+20     	; 0x25bc <String::String(char const*)+0x28>
    25a8:	fb 01       	movw	r30, r22
    25aa:	01 90       	ld	r0, Z+
    25ac:	00 20       	and	r0, r0
    25ae:	e9 f7       	brne	.-6      	; 0x25aa <String::String(char const*)+0x16>
    25b0:	31 97       	sbiw	r30, 0x01	; 1
    25b2:	af 01       	movw	r20, r30
    25b4:	46 1b       	sub	r20, r22
    25b6:	57 0b       	sbc	r21, r23
    25b8:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <String::copy(char const*, unsigned int)>
    25bc:	08 95       	ret

000025be <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    25be:	fb 01       	movw	r30, r22
    25c0:	01 90       	ld	r0, Z+
    25c2:	00 20       	and	r0, r0
    25c4:	e9 f7       	brne	.-6      	; 0x25c0 <String::operator=(char const*) [clone .part.3]+0x2>
    25c6:	31 97       	sbiw	r30, 0x01	; 1
    25c8:	af 01       	movw	r20, r30
    25ca:	46 1b       	sub	r20, r22
    25cc:	57 0b       	sbc	r21, r23
    25ce:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <String::copy(char const*, unsigned int)>

000025d2 <String::String(unsigned char, unsigned char)>:
_ZN6StringC2Ehh():
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	29 97       	sbiw	r28, 0x09	; 9
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	8c 01       	movw	r16, r24
    25ec:	86 2f       	mov	r24, r22
_ZN6String4initEv():
    25ee:	f8 01       	movw	r30, r16
    25f0:	11 82       	std	Z+1, r1	; 0x01
    25f2:	10 82       	st	Z, r1
    25f4:	13 82       	std	Z+3, r1	; 0x03
    25f6:	12 82       	std	Z+2, r1	; 0x02
    25f8:	15 82       	std	Z+5, r1	; 0x05
    25fa:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ehh():
    25fc:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    25fe:	be 01       	movw	r22, r28
    2600:	6f 5f       	subi	r22, 0xFF	; 255
    2602:	7f 4f       	sbci	r23, 0xFF	; 255
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <utoa>
_ZN6StringaSEPKc():
    260a:	be 01       	movw	r22, r28
    260c:	6f 5f       	subi	r22, 0xFF	; 255
    260e:	7f 4f       	sbci	r23, 0xFF	; 255
    2610:	c8 01       	movw	r24, r16
    2612:	0e 94 df 12 	call	0x25be	; 0x25be <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ehh():
    2616:	29 96       	adiw	r28, 0x09	; 9
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	df 91       	pop	r29
    2624:	cf 91       	pop	r28
    2626:	1f 91       	pop	r17
    2628:	0f 91       	pop	r16
    262a:	08 95       	ret

0000262c <String::String(unsigned int, unsigned char)>:
_ZN6StringC2Ejh():
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	61 97       	sbiw	r28, 0x11	; 17
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	8c 01       	movw	r16, r24
    2646:	cb 01       	movw	r24, r22
_ZN6String4initEv():
    2648:	f8 01       	movw	r30, r16
    264a:	11 82       	std	Z+1, r1	; 0x01
    264c:	10 82       	st	Z, r1
    264e:	13 82       	std	Z+3, r1	; 0x03
    2650:	12 82       	std	Z+2, r1	; 0x02
    2652:	15 82       	std	Z+5, r1	; 0x05
    2654:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ejh():
    2656:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    2658:	be 01       	movw	r22, r28
    265a:	6f 5f       	subi	r22, 0xFF	; 255
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
    265e:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <utoa>
_ZN6StringaSEPKc():
    2662:	be 01       	movw	r22, r28
    2664:	6f 5f       	subi	r22, 0xFF	; 255
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	c8 01       	movw	r24, r16
    266a:	0e 94 df 12 	call	0x25be	; 0x25be <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ejh():
    266e:	61 96       	adiw	r28, 0x11	; 17
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	df 91       	pop	r29
    267c:	cf 91       	pop	r28
    267e:	1f 91       	pop	r17
    2680:	0f 91       	pop	r16
    2682:	08 95       	ret

00002684 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	ec 01       	movw	r28, r24
    268a:	fb 01       	movw	r30, r22
    268c:	86 17       	cp	r24, r22
    268e:	97 07       	cpc	r25, r23
    2690:	49 f0       	breq	.+18     	; 0x26a4 <String::operator=(String const&)+0x20>
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	61 15       	cp	r22, r1
    2698:	71 05       	cpc	r23, r1
    269a:	41 f0       	breq	.+16     	; 0x26ac <String::operator=(String const&)+0x28>
    269c:	44 81       	ldd	r20, Z+4	; 0x04
    269e:	55 81       	ldd	r21, Z+5	; 0x05
    26a0:	0e 94 a9 12 	call	0x2552	; 0x2552 <String::copy(char const*, unsigned int)>
    26a4:	ce 01       	movw	r24, r28
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	08 95       	ret
    26ac:	0e 94 60 12 	call	0x24c0	; 0x24c0 <String::invalidate()>
    26b0:	f9 cf       	rjmp	.-14     	; 0x26a4 <String::operator=(String const&)+0x20>

000026b2 <String::String(String const&)>:
_ZN6String4initEv():
    26b2:	fc 01       	movw	r30, r24
    26b4:	11 82       	std	Z+1, r1	; 0x01
    26b6:	10 82       	st	Z, r1
    26b8:	13 82       	std	Z+3, r1	; 0x03
    26ba:	12 82       	std	Z+2, r1	; 0x02
    26bc:	15 82       	std	Z+5, r1	; 0x05
    26be:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
    26c0:	0c 94 42 13 	jmp	0x2684	; 0x2684 <String::operator=(String const&)>

000026c4 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	61 15       	cp	r22, r1
    26d2:	71 05       	cpc	r23, r1
    26d4:	41 f4       	brne	.+16     	; 0x26e6 <String::concat(char const*, unsigned int)+0x22>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	df 91       	pop	r29
    26da:	cf 91       	pop	r28
    26dc:	1f 91       	pop	r17
    26de:	0f 91       	pop	r16
    26e0:	ff 90       	pop	r15
    26e2:	ef 90       	pop	r14
    26e4:	08 95       	ret
    26e6:	41 15       	cp	r20, r1
    26e8:	51 05       	cpc	r21, r1
    26ea:	b1 f0       	breq	.+44     	; 0x2718 <String::concat(char const*, unsigned int)+0x54>
    26ec:	7b 01       	movw	r14, r22
    26ee:	ec 01       	movw	r28, r24
    26f0:	0c 81       	ldd	r16, Y+4	; 0x04
    26f2:	1d 81       	ldd	r17, Y+5	; 0x05
    26f4:	04 0f       	add	r16, r20
    26f6:	15 1f       	adc	r17, r21
    26f8:	b8 01       	movw	r22, r16
    26fa:	0e 94 8c 12 	call	0x2518	; 0x2518 <String::reserve(unsigned int)>
    26fe:	88 23       	and	r24, r24
    2700:	51 f3       	breq	.-44     	; 0x26d6 <String::concat(char const*, unsigned int)+0x12>
    2702:	28 81       	ld	r18, Y
    2704:	39 81       	ldd	r19, Y+1	; 0x01
    2706:	8c 81       	ldd	r24, Y+4	; 0x04
    2708:	9d 81       	ldd	r25, Y+5	; 0x05
    270a:	b7 01       	movw	r22, r14
    270c:	82 0f       	add	r24, r18
    270e:	93 1f       	adc	r25, r19
    2710:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <strcpy>
    2714:	1d 83       	std	Y+5, r17	; 0x05
    2716:	0c 83       	std	Y+4, r16	; 0x04
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	de cf       	rjmp	.-68     	; 0x26d8 <String::concat(char const*, unsigned int)+0x14>

0000271c <String::concat(String const&)>:
_ZN6String6concatERKS_():
    271c:	fb 01       	movw	r30, r22
    271e:	44 81       	ldd	r20, Z+4	; 0x04
    2720:	55 81       	ldd	r21, Z+5	; 0x05
    2722:	60 81       	ld	r22, Z
    2724:	71 81       	ldd	r23, Z+1	; 0x01
    2726:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <String::concat(char const*, unsigned int)>

0000272a <String::concat(char const*)>:
_ZN6String6concatEPKc():
    272a:	61 15       	cp	r22, r1
    272c:	71 05       	cpc	r23, r1
    272e:	51 f0       	breq	.+20     	; 0x2744 <String::concat(char const*)+0x1a>
    2730:	fb 01       	movw	r30, r22
    2732:	01 90       	ld	r0, Z+
    2734:	00 20       	and	r0, r0
    2736:	e9 f7       	brne	.-6      	; 0x2732 <String::concat(char const*)+0x8>
    2738:	31 97       	sbiw	r30, 0x01	; 1
    273a:	af 01       	movw	r20, r30
    273c:	46 1b       	sub	r20, r22
    273e:	57 0b       	sbc	r21, r23
    2740:	0c 94 62 13 	jmp	0x26c4	; 0x26c4 <String::concat(char const*, unsigned int)>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	08 95       	ret

00002748 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:355
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    274e:	fb 01       	movw	r30, r22
    2750:	44 81       	ldd	r20, Z+4	; 0x04
    2752:	55 81       	ldd	r21, Z+5	; 0x05
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	0e 94 62 13 	call	0x26c4	; 0x26c4 <String::concat(char const*, unsigned int)>
    275c:	81 11       	cpse	r24, r1
    275e:	03 c0       	rjmp	.+6      	; 0x2766 <operator+(StringSumHelper const&, String const&)+0x1e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357 (discriminator 1)
    2760:	ce 01       	movw	r24, r28
    2762:	0e 94 60 12 	call	0x24c0	; 0x24c0 <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:359
  return a;
}
    2766:	ce 01       	movw	r24, r28
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	08 95       	ret

0000276e <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:362

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    276e:	cf 93       	push	r28
    2770:	df 93       	push	r29
    2772:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    2774:	61 15       	cp	r22, r1
    2776:	71 05       	cpc	r23, r1
    2778:	39 f4       	brne	.+14     	; 0x2788 <operator+(StringSumHelper const&, char const*)+0x1a>
    277a:	ce 01       	movw	r24, r28
    277c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:366
  return a;
}
    2780:	ce 01       	movw	r24, r28
    2782:	df 91       	pop	r29
    2784:	cf 91       	pop	r28
    2786:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364 (discriminator 2)
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    2788:	fb 01       	movw	r30, r22
    278a:	01 90       	ld	r0, Z+
    278c:	00 20       	and	r0, r0
    278e:	e9 f7       	brne	.-6      	; 0x278a <operator+(StringSumHelper const&, char const*)+0x1c>
    2790:	31 97       	sbiw	r30, 0x01	; 1
    2792:	af 01       	movw	r20, r30
    2794:	46 1b       	sub	r20, r22
    2796:	57 0b       	sbc	r21, r23
    2798:	0e 94 62 13 	call	0x26c4	; 0x26c4 <String::concat(char const*, unsigned int)>
    279c:	88 23       	and	r24, r24
    279e:	69 f3       	breq	.-38     	; 0x277a <operator+(StringSumHelper const&, char const*)+0xc>
    27a0:	ef cf       	rjmp	.-34     	; 0x2780 <operator+(StringSumHelper const&, char const*)+0x12>

000027a2 <initVariant>:
initVariant():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    27a2:	08 95       	ret

000027a4 <main>:
main():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    27a4:	0e 94 94 14 	call	0x2928	; 0x2928 <init>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    27a8:	0e 94 d1 13 	call	0x27a2	; 0x27a2 <initVariant>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    27ac:	0e 94 14 0b 	call	0x1628	; 0x1628 <setup>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    27b0:	ce e4       	ldi	r28, 0x4E	; 78
    27b2:	d0 e1       	ldi	r29, 0x10	; 16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    27b4:	0e 94 be 09 	call	0x137c	; 0x137c <loop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    27b8:	20 97       	sbiw	r28, 0x00	; 0
    27ba:	e1 f3       	breq	.-8      	; 0x27b4 <main+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    27bc:	0e 94 4e 10 	call	0x209c	; 0x209c <serialEventRun()>
    27c0:	f9 cf       	rjmp	.-14     	; 0x27b4 <main+0x10>

000027c2 <__vector_18>:
__vector_18():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    27c2:	1f 92       	push	r1
    27c4:	0f 92       	push	r0
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	0f 92       	push	r0
    27ca:	11 24       	eor	r1, r1
    27cc:	2f 93       	push	r18
    27ce:	3f 93       	push	r19
    27d0:	8f 93       	push	r24
    27d2:	9f 93       	push	r25
    27d4:	af 93       	push	r26
    27d6:	bf 93       	push	r27
    27d8:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <timer0_millis>
    27dc:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <timer0_millis+0x1>
    27e0:	a0 91 41 04 	lds	r26, 0x0441	; 0x800441 <timer0_millis+0x2>
    27e4:	b0 91 42 04 	lds	r27, 0x0442	; 0x800442 <timer0_millis+0x3>
    27e8:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <timer0_fract>
    27ec:	26 e0       	ldi	r18, 0x06	; 6
    27ee:	23 0f       	add	r18, r19
    27f0:	2d 37       	cpi	r18, 0x7D	; 125
    27f2:	68 f1       	brcs	.+90     	; 0x284e <__vector_18+0x8c>
    27f4:	29 e8       	ldi	r18, 0x89	; 137
    27f6:	23 0f       	add	r18, r19
    27f8:	03 96       	adiw	r24, 0x03	; 3
    27fa:	a1 1d       	adc	r26, r1
    27fc:	b1 1d       	adc	r27, r1
    27fe:	20 93 3e 04 	sts	0x043E, r18	; 0x80043e <timer0_fract>
    2802:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <timer0_millis>
    2806:	90 93 40 04 	sts	0x0440, r25	; 0x800440 <timer0_millis+0x1>
    280a:	a0 93 41 04 	sts	0x0441, r26	; 0x800441 <timer0_millis+0x2>
    280e:	b0 93 42 04 	sts	0x0442, r27	; 0x800442 <timer0_millis+0x3>
    2812:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <timer0_overflow_count>
    2816:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <timer0_overflow_count+0x1>
    281a:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <timer0_overflow_count+0x2>
    281e:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <timer0_overflow_count+0x3>
    2822:	01 96       	adiw	r24, 0x01	; 1
    2824:	a1 1d       	adc	r26, r1
    2826:	b1 1d       	adc	r27, r1
    2828:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <timer0_overflow_count>
    282c:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <timer0_overflow_count+0x1>
    2830:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <timer0_overflow_count+0x2>
    2834:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <timer0_overflow_count+0x3>
    2838:	bf 91       	pop	r27
    283a:	af 91       	pop	r26
    283c:	9f 91       	pop	r25
    283e:	8f 91       	pop	r24
    2840:	3f 91       	pop	r19
    2842:	2f 91       	pop	r18
    2844:	0f 90       	pop	r0
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	0f 90       	pop	r0
    284a:	1f 90       	pop	r1
    284c:	18 95       	reti
    284e:	02 96       	adiw	r24, 0x02	; 2
    2850:	a1 1d       	adc	r26, r1
    2852:	b1 1d       	adc	r27, r1
    2854:	d4 cf       	rjmp	.-88     	; 0x27fe <__vector_18+0x3c>

00002856 <micros>:
micros():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    2856:	3f b7       	in	r19, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    2858:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    285a:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <timer0_overflow_count>
    285e:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <timer0_overflow_count+0x1>
    2862:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <timer0_overflow_count+0x2>
    2866:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <timer0_overflow_count+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    286a:	26 b5       	in	r18, 0x26	; 38
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    286c:	a8 9b       	sbis	0x15, 0	; 21
    286e:	05 c0       	rjmp	.+10     	; 0x287a <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    2870:	2f 3f       	cpi	r18, 0xFF	; 255
    2872:	19 f0       	breq	.+6      	; 0x287a <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    2874:	01 96       	adiw	r24, 0x01	; 1
    2876:	a1 1d       	adc	r26, r1
    2878:	b1 1d       	adc	r27, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    287a:	3f bf       	out	0x3f, r19	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    287c:	ba 2f       	mov	r27, r26
    287e:	a9 2f       	mov	r26, r25
    2880:	98 2f       	mov	r25, r24
    2882:	88 27       	eor	r24, r24
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	62 0f       	add	r22, r18
    288a:	71 1d       	adc	r23, r1
    288c:	81 1d       	adc	r24, r1
    288e:	91 1d       	adc	r25, r1
    2890:	43 e0       	ldi	r20, 0x03	; 3
    2892:	66 0f       	add	r22, r22
    2894:	77 1f       	adc	r23, r23
    2896:	88 1f       	adc	r24, r24
    2898:	99 1f       	adc	r25, r25
    289a:	4a 95       	dec	r20
    289c:	d1 f7       	brne	.-12     	; 0x2892 <micros+0x3c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    289e:	08 95       	ret

000028a0 <delay>:
delay():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    28a0:	8f 92       	push	r8
    28a2:	9f 92       	push	r9
    28a4:	af 92       	push	r10
    28a6:	bf 92       	push	r11
    28a8:	cf 92       	push	r12
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	6b 01       	movw	r12, r22
    28b2:	7c 01       	movw	r14, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    28b4:	0e 94 2b 14 	call	0x2856	; 0x2856 <micros>
    28b8:	4b 01       	movw	r8, r22
    28ba:	5c 01       	movw	r10, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    28bc:	c1 14       	cp	r12, r1
    28be:	d1 04       	cpc	r13, r1
    28c0:	e1 04       	cpc	r14, r1
    28c2:	f1 04       	cpc	r15, r1
    28c4:	e9 f0       	breq	.+58     	; 0x2900 <delay+0x60>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:400
    yield();
    28c6:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <yield>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    28ca:	0e 94 2b 14 	call	0x2856	; 0x2856 <micros>
    28ce:	68 19       	sub	r22, r8
    28d0:	79 09       	sbc	r23, r9
    28d2:	8a 09       	sbc	r24, r10
    28d4:	9b 09       	sbc	r25, r11
    28d6:	68 3e       	cpi	r22, 0xE8	; 232
    28d8:	73 40       	sbci	r23, 0x03	; 3
    28da:	81 05       	cpc	r24, r1
    28dc:	91 05       	cpc	r25, r1
    28de:	70 f3       	brcs	.-36     	; 0x28bc <delay+0x1c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    28e0:	21 e0       	ldi	r18, 0x01	; 1
    28e2:	c2 1a       	sub	r12, r18
    28e4:	d1 08       	sbc	r13, r1
    28e6:	e1 08       	sbc	r14, r1
    28e8:	f1 08       	sbc	r15, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    28ea:	88 ee       	ldi	r24, 0xE8	; 232
    28ec:	88 0e       	add	r8, r24
    28ee:	83 e0       	ldi	r24, 0x03	; 3
    28f0:	98 1e       	adc	r9, r24
    28f2:	a1 1c       	adc	r10, r1
    28f4:	b1 1c       	adc	r11, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    28f6:	c1 14       	cp	r12, r1
    28f8:	d1 04       	cpc	r13, r1
    28fa:	e1 04       	cpc	r14, r1
    28fc:	f1 04       	cpc	r15, r1
    28fe:	29 f7       	brne	.-54     	; 0x28ca <delay+0x2a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    2900:	ff 90       	pop	r15
    2902:	ef 90       	pop	r14
    2904:	df 90       	pop	r13
    2906:	cf 90       	pop	r12
    2908:	bf 90       	pop	r11
    290a:	af 90       	pop	r10
    290c:	9f 90       	pop	r9
    290e:	8f 90       	pop	r8
    2910:	08 95       	ret

00002912 <delayMicroseconds>:
delayMicroseconds():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    2912:	00 00       	nop
    2914:	00 00       	nop
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    2916:	83 30       	cpi	r24, 0x03	; 3
    2918:	91 05       	cpc	r25, r1
    291a:	28 f0       	brcs	.+10     	; 0x2926 <delayMicroseconds+0x14>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    2920:	05 97       	sbiw	r24, 0x05	; 5
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	f1 f7       	brne	.-4      	; 0x2922 <delayMicroseconds+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    2926:	08 95       	ret

00002928 <init>:
init():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2928:	78 94       	sei
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    292a:	84 b5       	in	r24, 0x24	; 36
    292c:	83 60       	ori	r24, 0x03	; 3
    292e:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2930:	85 b5       	in	r24, 0x25	; 37
    2932:	83 60       	ori	r24, 0x03	; 3
    2934:	85 bd       	out	0x25, r24	; 37
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2936:	ee e6       	ldi	r30, 0x6E	; 110
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	81 60       	ori	r24, 0x01	; 1
    293e:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2940:	e1 e8       	ldi	r30, 0x81	; 129
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2948:	80 81       	ld	r24, Z
    294a:	81 60       	ori	r24, 0x01	; 1
    294c:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    294e:	e0 e8       	ldi	r30, 0x80	; 128
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	81 60       	ori	r24, 0x01	; 1
    2956:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2958:	e1 eb       	ldi	r30, 0xB1	; 177
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	80 81       	ld	r24, Z
    295e:	84 60       	ori	r24, 0x04	; 4
    2960:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2962:	e0 eb       	ldi	r30, 0xB0	; 176
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	81 60       	ori	r24, 0x01	; 1
    296a:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    296c:	e1 e9       	ldi	r30, 0x91	; 145
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	83 60       	ori	r24, 0x03	; 3
    2974:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    2976:	e0 e9       	ldi	r30, 0x90	; 144
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	81 60       	ori	r24, 0x01	; 1
    297e:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    2980:	86 e8       	ldi	r24, 0x86	; 134
    2982:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2986:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    298a:	08 95       	ret

0000298c <turnOffPWM>:
turnOffPWM():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    298c:	82 50       	subi	r24, 0x02	; 2
    298e:	8a 30       	cpi	r24, 0x0A	; 10
    2990:	88 f5       	brcc	.+98     	; 0x29f4 <turnOffPWM+0x68>
    2992:	e8 2f       	mov	r30, r24
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	e1 53       	subi	r30, 0x31	; 49
    2998:	fb 4e       	sbci	r31, 0xEB	; 235
    299a:	0c 94 8b 15 	jmp	0x2b16	; 0x2b16 <__tablejump2__>
    299e:	f7 14       	cp	r15, r7
    29a0:	fb 14       	cp	r15, r11
    29a2:	d9 14       	cp	r13, r9
    29a4:	df 14       	cp	r13, r15
    29a6:	fa 14       	cp	r15, r10
    29a8:	fa 14       	cp	r15, r10
    29aa:	e3 14       	cp	r14, r3
    29ac:	e9 14       	cp	r14, r9
    29ae:	ed 14       	cp	r14, r13
    29b0:	f3 14       	cp	r15, r3
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    29b2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    29b6:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    29b8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    29bc:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    29be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    29c2:	8f 7d       	andi	r24, 0xDF	; 223
    29c4:	f9 cf       	rjmp	.-14     	; 0x29b8 <turnOffPWM+0x2c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    29c6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    29ca:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    29cc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    29d0:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    29d2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    29d6:	8f 7d       	andi	r24, 0xDF	; 223
    29d8:	f9 cf       	rjmp	.-14     	; 0x29cc <turnOffPWM+0x40>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    29da:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    29de:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    29e0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:122
        break;
    29e4:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    29e6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    29ea:	8f 7d       	andi	r24, 0xDF	; 223
    29ec:	f9 cf       	rjmp	.-14     	; 0x29e0 <turnOffPWM+0x54>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    29ee:	84 b5       	in	r24, 0x24	; 36
    29f0:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    29f2:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    29f4:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    29f6:	84 b5       	in	r24, 0x24	; 36
    29f8:	8f 7d       	andi	r24, 0xDF	; 223
    29fa:	fb cf       	rjmp	.-10     	; 0x29f2 <turnOffPWM+0x66>

000029fc <pinMode>:
pinMode():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	fc 01       	movw	r30, r24
    2a04:	e4 55       	subi	r30, 0x54	; 84
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	24 91       	lpm	r18, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2a0a:	84 53       	subi	r24, 0x34	; 52
    2a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0e:	fc 01       	movw	r30, r24
    2a10:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2a12:	88 23       	and	r24, r24
    2a14:	c9 f0       	breq	.+50     	; 0x2a48 <pinMode+0x4c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	ea 50       	subi	r30, 0x0A	; 10
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	a5 91       	lpm	r26, Z+
    2a24:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2a26:	fc 01       	movw	r30, r24
    2a28:	e4 51       	subi	r30, 0x14	; 20
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	c5 91       	lpm	r28, Z+
    2a2e:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2a30:	61 11       	cpse	r22, r1
    2a32:	0d c0       	rjmp	.+26     	; 0x2a4e <pinMode+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2a34:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    2a36:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2a38:	8c 91       	ld	r24, X
    2a3a:	20 95       	com	r18
    2a3c:	82 23       	and	r24, r18
    2a3e:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2a40:	88 81       	ld	r24, Y
    2a42:	28 23       	and	r18, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2a44:	28 83       	st	Y, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2a46:	9f bf       	out	0x3f, r25	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2a4e:	62 30       	cpi	r22, 0x02	; 2
    2a50:	51 f4       	brne	.+20     	; 0x2a66 <pinMode+0x6a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2a52:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    2a54:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2a56:	3c 91       	ld	r19, X
    2a58:	82 2f       	mov	r24, r18
    2a5a:	80 95       	com	r24
    2a5c:	83 23       	and	r24, r19
    2a5e:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2a60:	e8 81       	ld	r30, Y
    2a62:	2e 2b       	or	r18, r30
    2a64:	ef cf       	rjmp	.-34     	; 0x2a44 <pinMode+0x48>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2a66:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    2a68:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2a6a:	ec 91       	ld	r30, X
    2a6c:	2e 2b       	or	r18, r30
    2a6e:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2a70:	8f bf       	out	0x3f, r24	; 63
    2a72:	ea cf       	rjmp	.-44     	; 0x2a48 <pinMode+0x4c>

00002a74 <digitalWrite>:
digitalWrite():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2a74:	1f 93       	push	r17
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	f9 01       	movw	r30, r18
    2a80:	e4 57       	subi	r30, 0x74	; 116
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2a86:	f9 01       	movw	r30, r18
    2a88:	e4 55       	subi	r30, 0x54	; 84
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2a8e:	f9 01       	movw	r30, r18
    2a90:	e4 53       	subi	r30, 0x34	; 52
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	c4 91       	lpm	r28, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2a96:	cc 23       	and	r28, r28
    2a98:	a9 f0       	breq	.+42     	; 0x2ac4 <digitalWrite+0x50>
    2a9a:	16 2f       	mov	r17, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2a9c:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2a9e:	0e 94 c6 14 	call	0x298c	; 0x298c <turnOffPWM>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2aa2:	ec 2f       	mov	r30, r28
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	ee 0f       	add	r30, r30
    2aa8:	ff 1f       	adc	r31, r31
    2aaa:	e4 51       	subi	r30, 0x14	; 20
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	a5 91       	lpm	r26, Z+
    2ab0:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2ab2:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    2ab4:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2ab6:	ec 91       	ld	r30, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2ab8:	11 11       	cpse	r17, r1
    2aba:	08 c0       	rjmp	.+16     	; 0x2acc <digitalWrite+0x58>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2abc:	d0 95       	com	r29
    2abe:	de 23       	and	r29, r30
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2ac0:	dc 93       	st	X, r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2ac2:	8f bf       	out	0x3f, r24	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2acc:	de 2b       	or	r29, r30
    2ace:	f8 cf       	rjmp	.-16     	; 0x2ac0 <digitalWrite+0x4c>

00002ad0 <yield>:
__empty():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    2ad0:	08 95       	ret

00002ad2 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    2ad2:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2ad4:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2ad6:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2ad8:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2ada:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2adc:	0d c0       	rjmp	.+26     	; 0x2af8 <__udivmodsi4_ep>

00002ade <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    2ade:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    2ae0:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    2ae2:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2ae4:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2ae6:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2ae8:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2aea:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2aec:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    2aee:	20 f0       	brcs	.+8      	; 0x2af8 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    2af0:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    2af2:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2af4:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2af6:	f5 0b       	sbc	r31, r21

00002af8 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2af8:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2afa:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2afc:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    2afe:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    2b00:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    2b02:	69 f7       	brne	.-38     	; 0x2ade <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    2b04:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    2b06:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    2b08:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    2b0a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    2b0c:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    2b0e:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    2b10:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    2b12:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    2b14:	08 95       	ret

00002b16 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2b16:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    2b18:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    2b1a:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    2b1c:	00 1c       	adc	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    2b1e:	0b be       	out	0x3b, r0	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    2b20:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    2b22:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    2b24:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2b26:	09 94       	ijmp

00002b28 <__adddi3_s8>:
__adddi3_s8():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2064
    2b28:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2065
    2b2a:	a7 fd       	sbrc	r26, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2066
    2b2c:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2067
    2b2e:	2a 0f       	add	r18, r26
    2b30:	30 1d       	adc	r19, r0
    2b32:	40 1d       	adc	r20, r0
    2b34:	50 1d       	adc	r21, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2068
    2b36:	60 1d       	adc	r22, r0
    2b38:	70 1d       	adc	r23, r0
    2b3a:	80 1d       	adc	r24, r0
    2b3c:	90 1d       	adc	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2069
    2b3e:	08 95       	ret

00002b40 <malloc>:
malloc():
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	82 30       	cpi	r24, 0x02	; 2
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	10 f4       	brcc	.+4      	; 0x2b52 <malloc+0x12>
    2b4e:	82 e0       	ldi	r24, 0x02	; 2
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	e0 91 45 04 	lds	r30, 0x0445	; 0x800445 <__flp>
    2b56:	f0 91 46 04 	lds	r31, 0x0446	; 0x800446 <__flp+0x1>
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	b0 e0       	ldi	r27, 0x00	; 0
    2b60:	a0 e0       	ldi	r26, 0x00	; 0
    2b62:	30 97       	sbiw	r30, 0x00	; 0
    2b64:	99 f4       	brne	.+38     	; 0x2b8c <malloc+0x4c>
    2b66:	21 15       	cp	r18, r1
    2b68:	31 05       	cpc	r19, r1
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <malloc+0x2e>
    2b6c:	4a c0       	rjmp	.+148    	; 0x2c02 <malloc+0xc2>
    2b6e:	28 1b       	sub	r18, r24
    2b70:	39 0b       	sbc	r19, r25
    2b72:	24 30       	cpi	r18, 0x04	; 4
    2b74:	31 05       	cpc	r19, r1
    2b76:	d8 f5       	brcc	.+118    	; 0x2bee <malloc+0xae>
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	61 15       	cp	r22, r1
    2b7e:	71 05       	cpc	r23, r1
    2b80:	89 f1       	breq	.+98     	; 0x2be4 <malloc+0xa4>
    2b82:	fb 01       	movw	r30, r22
    2b84:	93 83       	std	Z+3, r25	; 0x03
    2b86:	82 83       	std	Z+2, r24	; 0x02
    2b88:	fe 01       	movw	r30, r28
    2b8a:	11 c0       	rjmp	.+34     	; 0x2bae <malloc+0x6e>
    2b8c:	40 81       	ld	r20, Z
    2b8e:	51 81       	ldd	r21, Z+1	; 0x01
    2b90:	02 81       	ldd	r16, Z+2	; 0x02
    2b92:	13 81       	ldd	r17, Z+3	; 0x03
    2b94:	48 17       	cp	r20, r24
    2b96:	59 07       	cpc	r21, r25
    2b98:	e0 f0       	brcs	.+56     	; 0x2bd2 <malloc+0x92>
    2b9a:	48 17       	cp	r20, r24
    2b9c:	59 07       	cpc	r21, r25
    2b9e:	99 f4       	brne	.+38     	; 0x2bc6 <malloc+0x86>
    2ba0:	10 97       	sbiw	r26, 0x00	; 0
    2ba2:	61 f0       	breq	.+24     	; 0x2bbc <malloc+0x7c>
    2ba4:	12 96       	adiw	r26, 0x02	; 2
    2ba6:	0c 93       	st	X, r16
    2ba8:	12 97       	sbiw	r26, 0x02	; 2
    2baa:	13 96       	adiw	r26, 0x03	; 3
    2bac:	1c 93       	st	X, r17
    2bae:	32 96       	adiw	r30, 0x02	; 2
    2bb0:	cf 01       	movw	r24, r30
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	08 95       	ret
    2bbc:	00 93 45 04 	sts	0x0445, r16	; 0x800445 <__flp>
    2bc0:	10 93 46 04 	sts	0x0446, r17	; 0x800446 <__flp+0x1>
    2bc4:	f4 cf       	rjmp	.-24     	; 0x2bae <malloc+0x6e>
    2bc6:	21 15       	cp	r18, r1
    2bc8:	31 05       	cpc	r19, r1
    2bca:	51 f0       	breq	.+20     	; 0x2be0 <malloc+0xa0>
    2bcc:	42 17       	cp	r20, r18
    2bce:	53 07       	cpc	r21, r19
    2bd0:	38 f0       	brcs	.+14     	; 0x2be0 <malloc+0xa0>
    2bd2:	a9 01       	movw	r20, r18
    2bd4:	db 01       	movw	r26, r22
    2bd6:	9a 01       	movw	r18, r20
    2bd8:	bd 01       	movw	r22, r26
    2bda:	df 01       	movw	r26, r30
    2bdc:	f8 01       	movw	r30, r16
    2bde:	c1 cf       	rjmp	.-126    	; 0x2b62 <malloc+0x22>
    2be0:	ef 01       	movw	r28, r30
    2be2:	f9 cf       	rjmp	.-14     	; 0x2bd6 <malloc+0x96>
    2be4:	90 93 46 04 	sts	0x0446, r25	; 0x800446 <__flp+0x1>
    2be8:	80 93 45 04 	sts	0x0445, r24	; 0x800445 <__flp>
    2bec:	cd cf       	rjmp	.-102    	; 0x2b88 <malloc+0x48>
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e2 0f       	add	r30, r18
    2bf2:	f3 1f       	adc	r31, r19
    2bf4:	81 93       	st	Z+, r24
    2bf6:	91 93       	st	Z+, r25
    2bf8:	22 50       	subi	r18, 0x02	; 2
    2bfa:	31 09       	sbc	r19, r1
    2bfc:	39 83       	std	Y+1, r19	; 0x01
    2bfe:	28 83       	st	Y, r18
    2c00:	d7 cf       	rjmp	.-82     	; 0x2bb0 <malloc+0x70>
    2c02:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    2c06:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    2c0a:	23 2b       	or	r18, r19
    2c0c:	41 f4       	brne	.+16     	; 0x2c1e <malloc+0xde>
    2c0e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2c12:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2c16:	30 93 44 04 	sts	0x0444, r19	; 0x800444 <__brkval+0x1>
    2c1a:	20 93 43 04 	sts	0x0443, r18	; 0x800443 <__brkval>
    2c1e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2c22:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2c26:	21 15       	cp	r18, r1
    2c28:	31 05       	cpc	r19, r1
    2c2a:	41 f4       	brne	.+16     	; 0x2c3c <malloc+0xfc>
    2c2c:	2d b7       	in	r18, 0x3d	; 61
    2c2e:	3e b7       	in	r19, 0x3e	; 62
    2c30:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2c34:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2c38:	24 1b       	sub	r18, r20
    2c3a:	35 0b       	sbc	r19, r21
    2c3c:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <__brkval>
    2c40:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <__brkval+0x1>
    2c44:	e2 17       	cp	r30, r18
    2c46:	f3 07       	cpc	r31, r19
    2c48:	a0 f4       	brcc	.+40     	; 0x2c72 <malloc+0x132>
    2c4a:	2e 1b       	sub	r18, r30
    2c4c:	3f 0b       	sbc	r19, r31
    2c4e:	28 17       	cp	r18, r24
    2c50:	39 07       	cpc	r19, r25
    2c52:	78 f0       	brcs	.+30     	; 0x2c72 <malloc+0x132>
    2c54:	ac 01       	movw	r20, r24
    2c56:	4e 5f       	subi	r20, 0xFE	; 254
    2c58:	5f 4f       	sbci	r21, 0xFF	; 255
    2c5a:	24 17       	cp	r18, r20
    2c5c:	35 07       	cpc	r19, r21
    2c5e:	48 f0       	brcs	.+18     	; 0x2c72 <malloc+0x132>
    2c60:	4e 0f       	add	r20, r30
    2c62:	5f 1f       	adc	r21, r31
    2c64:	50 93 44 04 	sts	0x0444, r21	; 0x800444 <__brkval+0x1>
    2c68:	40 93 43 04 	sts	0x0443, r20	; 0x800443 <__brkval>
    2c6c:	81 93       	st	Z+, r24
    2c6e:	91 93       	st	Z+, r25
    2c70:	9f cf       	rjmp	.-194    	; 0x2bb0 <malloc+0x70>
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	e0 e0       	ldi	r30, 0x00	; 0
    2c76:	9c cf       	rjmp	.-200    	; 0x2bb0 <malloc+0x70>

00002c78 <free>:
free():
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	e9 f0       	breq	.+58     	; 0x2cba <free+0x42>
    2c80:	fc 01       	movw	r30, r24
    2c82:	32 97       	sbiw	r30, 0x02	; 2
    2c84:	13 82       	std	Z+3, r1	; 0x03
    2c86:	12 82       	std	Z+2, r1	; 0x02
    2c88:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <__flp>
    2c8c:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <__flp+0x1>
    2c90:	ed 01       	movw	r28, r26
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	10 97       	sbiw	r26, 0x00	; 0
    2c98:	a1 f4       	brne	.+40     	; 0x2cc2 <free+0x4a>
    2c9a:	20 81       	ld	r18, Z
    2c9c:	31 81       	ldd	r19, Z+1	; 0x01
    2c9e:	82 0f       	add	r24, r18
    2ca0:	93 1f       	adc	r25, r19
    2ca2:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    2ca6:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    2caa:	28 17       	cp	r18, r24
    2cac:	39 07       	cpc	r19, r25
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <free+0x3a>
    2cb0:	61 c0       	rjmp	.+194    	; 0x2d74 <free+0xfc>
    2cb2:	f0 93 44 04 	sts	0x0444, r31	; 0x800444 <__brkval+0x1>
    2cb6:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <__brkval>
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	08 95       	ret
    2cc0:	ea 01       	movw	r28, r20
    2cc2:	ce 17       	cp	r28, r30
    2cc4:	df 07       	cpc	r29, r31
    2cc6:	e8 f5       	brcc	.+122    	; 0x2d42 <free+0xca>
    2cc8:	4a 81       	ldd	r20, Y+2	; 0x02
    2cca:	5b 81       	ldd	r21, Y+3	; 0x03
    2ccc:	9e 01       	movw	r18, r28
    2cce:	41 15       	cp	r20, r1
    2cd0:	51 05       	cpc	r21, r1
    2cd2:	b1 f7       	brne	.-20     	; 0x2cc0 <free+0x48>
    2cd4:	e9 01       	movw	r28, r18
    2cd6:	fb 83       	std	Y+3, r31	; 0x03
    2cd8:	ea 83       	std	Y+2, r30	; 0x02
    2cda:	49 91       	ld	r20, Y+
    2cdc:	59 91       	ld	r21, Y+
    2cde:	c4 0f       	add	r28, r20
    2ce0:	d5 1f       	adc	r29, r21
    2ce2:	ec 17       	cp	r30, r28
    2ce4:	fd 07       	cpc	r31, r29
    2ce6:	61 f4       	brne	.+24     	; 0x2d00 <free+0x88>
    2ce8:	80 81       	ld	r24, Z
    2cea:	91 81       	ldd	r25, Z+1	; 0x01
    2cec:	02 96       	adiw	r24, 0x02	; 2
    2cee:	84 0f       	add	r24, r20
    2cf0:	95 1f       	adc	r25, r21
    2cf2:	e9 01       	movw	r28, r18
    2cf4:	99 83       	std	Y+1, r25	; 0x01
    2cf6:	88 83       	st	Y, r24
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	93 81       	ldd	r25, Z+3	; 0x03
    2cfc:	9b 83       	std	Y+3, r25	; 0x03
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	e0 e0       	ldi	r30, 0x00	; 0
    2d04:	12 96       	adiw	r26, 0x02	; 2
    2d06:	8d 91       	ld	r24, X+
    2d08:	9c 91       	ld	r25, X
    2d0a:	13 97       	sbiw	r26, 0x03	; 3
    2d0c:	00 97       	sbiw	r24, 0x00	; 0
    2d0e:	b9 f5       	brne	.+110    	; 0x2d7e <free+0x106>
    2d10:	2d 91       	ld	r18, X+
    2d12:	3c 91       	ld	r19, X
    2d14:	11 97       	sbiw	r26, 0x01	; 1
    2d16:	cd 01       	movw	r24, r26
    2d18:	02 96       	adiw	r24, 0x02	; 2
    2d1a:	82 0f       	add	r24, r18
    2d1c:	93 1f       	adc	r25, r19
    2d1e:	20 91 43 04 	lds	r18, 0x0443	; 0x800443 <__brkval>
    2d22:	30 91 44 04 	lds	r19, 0x0444	; 0x800444 <__brkval+0x1>
    2d26:	28 17       	cp	r18, r24
    2d28:	39 07       	cpc	r19, r25
    2d2a:	39 f6       	brne	.-114    	; 0x2cba <free+0x42>
    2d2c:	30 97       	sbiw	r30, 0x00	; 0
    2d2e:	51 f5       	brne	.+84     	; 0x2d84 <free+0x10c>
    2d30:	10 92 46 04 	sts	0x0446, r1	; 0x800446 <__flp+0x1>
    2d34:	10 92 45 04 	sts	0x0445, r1	; 0x800445 <__flp>
    2d38:	b0 93 44 04 	sts	0x0444, r27	; 0x800444 <__brkval+0x1>
    2d3c:	a0 93 43 04 	sts	0x0443, r26	; 0x800443 <__brkval>
    2d40:	bc cf       	rjmp	.-136    	; 0x2cba <free+0x42>
    2d42:	d3 83       	std	Z+3, r29	; 0x03
    2d44:	c2 83       	std	Z+2, r28	; 0x02
    2d46:	40 81       	ld	r20, Z
    2d48:	51 81       	ldd	r21, Z+1	; 0x01
    2d4a:	84 0f       	add	r24, r20
    2d4c:	95 1f       	adc	r25, r21
    2d4e:	c8 17       	cp	r28, r24
    2d50:	d9 07       	cpc	r29, r25
    2d52:	61 f4       	brne	.+24     	; 0x2d6c <free+0xf4>
    2d54:	4e 5f       	subi	r20, 0xFE	; 254
    2d56:	5f 4f       	sbci	r21, 0xFF	; 255
    2d58:	88 81       	ld	r24, Y
    2d5a:	99 81       	ldd	r25, Y+1	; 0x01
    2d5c:	48 0f       	add	r20, r24
    2d5e:	59 1f       	adc	r21, r25
    2d60:	51 83       	std	Z+1, r21	; 0x01
    2d62:	40 83       	st	Z, r20
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	93 83       	std	Z+3, r25	; 0x03
    2d6a:	82 83       	std	Z+2, r24	; 0x02
    2d6c:	21 15       	cp	r18, r1
    2d6e:	31 05       	cpc	r19, r1
    2d70:	09 f0       	breq	.+2      	; 0x2d74 <free+0xfc>
    2d72:	b0 cf       	rjmp	.-160    	; 0x2cd4 <free+0x5c>
    2d74:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__flp+0x1>
    2d78:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__flp>
    2d7c:	9e cf       	rjmp	.-196    	; 0x2cba <free+0x42>
    2d7e:	fd 01       	movw	r30, r26
    2d80:	dc 01       	movw	r26, r24
    2d82:	c0 cf       	rjmp	.-128    	; 0x2d04 <free+0x8c>
    2d84:	13 82       	std	Z+3, r1	; 0x03
    2d86:	12 82       	std	Z+2, r1	; 0x02
    2d88:	d7 cf       	rjmp	.-82     	; 0x2d38 <free+0xc0>

00002d8a <realloc>:
realloc():
    2d8a:	4f 92       	push	r4
    2d8c:	5f 92       	push	r5
    2d8e:	6f 92       	push	r6
    2d90:	7f 92       	push	r7
    2d92:	8f 92       	push	r8
    2d94:	9f 92       	push	r9
    2d96:	af 92       	push	r10
    2d98:	bf 92       	push	r11
    2d9a:	cf 92       	push	r12
    2d9c:	df 92       	push	r13
    2d9e:	ef 92       	push	r14
    2da0:	ff 92       	push	r15
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	8c 01       	movw	r16, r24
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	99 f4       	brne	.+38     	; 0x2dd6 <realloc+0x4c>
    2db0:	cb 01       	movw	r24, r22
    2db2:	df 91       	pop	r29
    2db4:	cf 91       	pop	r28
    2db6:	1f 91       	pop	r17
    2db8:	0f 91       	pop	r16
    2dba:	ff 90       	pop	r15
    2dbc:	ef 90       	pop	r14
    2dbe:	df 90       	pop	r13
    2dc0:	cf 90       	pop	r12
    2dc2:	bf 90       	pop	r11
    2dc4:	af 90       	pop	r10
    2dc6:	9f 90       	pop	r9
    2dc8:	8f 90       	pop	r8
    2dca:	7f 90       	pop	r7
    2dcc:	6f 90       	pop	r6
    2dce:	5f 90       	pop	r5
    2dd0:	4f 90       	pop	r4
    2dd2:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <malloc>
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	e6 0f       	add	r30, r22
    2dda:	f7 1f       	adc	r31, r23
    2ddc:	9c 01       	movw	r18, r24
    2dde:	22 50       	subi	r18, 0x02	; 2
    2de0:	31 09       	sbc	r19, r1
    2de2:	e2 17       	cp	r30, r18
    2de4:	f3 07       	cpc	r31, r19
    2de6:	08 f4       	brcc	.+2      	; 0x2dea <realloc+0x60>
    2de8:	ae c0       	rjmp	.+348    	; 0x2f46 <realloc+0x1bc>
    2dea:	d9 01       	movw	r26, r18
    2dec:	cd 91       	ld	r28, X+
    2dee:	dc 91       	ld	r29, X
    2df0:	11 97       	sbiw	r26, 0x01	; 1
    2df2:	c6 17       	cp	r28, r22
    2df4:	d7 07       	cpc	r29, r23
    2df6:	20 f1       	brcs	.+72     	; 0x2e40 <realloc+0xb6>
    2df8:	c5 30       	cpi	r28, 0x05	; 5
    2dfa:	d1 05       	cpc	r29, r1
    2dfc:	78 f0       	brcs	.+30     	; 0x2e1c <realloc+0x92>
    2dfe:	ce 01       	movw	r24, r28
    2e00:	04 97       	sbiw	r24, 0x04	; 4
    2e02:	86 17       	cp	r24, r22
    2e04:	97 07       	cpc	r25, r23
    2e06:	50 f0       	brcs	.+20     	; 0x2e1c <realloc+0x92>
    2e08:	c6 1b       	sub	r28, r22
    2e0a:	d7 0b       	sbc	r29, r23
    2e0c:	22 97       	sbiw	r28, 0x02	; 2
    2e0e:	c1 93       	st	Z+, r28
    2e10:	d1 93       	st	Z+, r29
    2e12:	6d 93       	st	X+, r22
    2e14:	7c 93       	st	X, r23
    2e16:	cf 01       	movw	r24, r30
    2e18:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <free>
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	ff 90       	pop	r15
    2e28:	ef 90       	pop	r14
    2e2a:	df 90       	pop	r13
    2e2c:	cf 90       	pop	r12
    2e2e:	bf 90       	pop	r11
    2e30:	af 90       	pop	r10
    2e32:	9f 90       	pop	r9
    2e34:	8f 90       	pop	r8
    2e36:	7f 90       	pop	r7
    2e38:	6f 90       	pop	r6
    2e3a:	5f 90       	pop	r5
    2e3c:	4f 90       	pop	r4
    2e3e:	08 95       	ret
    2e40:	5b 01       	movw	r10, r22
    2e42:	ac 1a       	sub	r10, r28
    2e44:	bd 0a       	sbc	r11, r29
    2e46:	4c 01       	movw	r8, r24
    2e48:	8c 0e       	add	r8, r28
    2e4a:	9d 1e       	adc	r9, r29
    2e4c:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <__flp>
    2e50:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <__flp+0x1>
    2e54:	51 2c       	mov	r5, r1
    2e56:	41 2c       	mov	r4, r1
    2e58:	f1 2c       	mov	r15, r1
    2e5a:	e1 2c       	mov	r14, r1
    2e5c:	10 97       	sbiw	r26, 0x00	; 0
    2e5e:	31 f5       	brne	.+76     	; 0x2eac <realloc+0x122>
    2e60:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <__brkval>
    2e64:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <__brkval+0x1>
    2e68:	88 15       	cp	r24, r8
    2e6a:	99 05       	cpc	r25, r9
    2e6c:	09 f0       	breq	.+2      	; 0x2e70 <realloc+0xe6>
    2e6e:	5c c0       	rjmp	.+184    	; 0x2f28 <realloc+0x19e>
    2e70:	46 16       	cp	r4, r22
    2e72:	57 06       	cpc	r5, r23
    2e74:	08 f0       	brcs	.+2      	; 0x2e78 <realloc+0xee>
    2e76:	58 c0       	rjmp	.+176    	; 0x2f28 <realloc+0x19e>
    2e78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2e7c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	41 f4       	brne	.+16     	; 0x2e94 <realloc+0x10a>
    2e84:	8d b7       	in	r24, 0x3d	; 61
    2e86:	9e b7       	in	r25, 0x3e	; 62
    2e88:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2e8c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2e90:	84 1b       	sub	r24, r20
    2e92:	95 0b       	sbc	r25, r21
    2e94:	e8 17       	cp	r30, r24
    2e96:	f9 07       	cpc	r31, r25
    2e98:	08 f0       	brcs	.+2      	; 0x2e9c <realloc+0x112>
    2e9a:	55 c0       	rjmp	.+170    	; 0x2f46 <realloc+0x1bc>
    2e9c:	f0 93 44 04 	sts	0x0444, r31	; 0x800444 <__brkval+0x1>
    2ea0:	e0 93 43 04 	sts	0x0443, r30	; 0x800443 <__brkval>
    2ea4:	f9 01       	movw	r30, r18
    2ea6:	71 83       	std	Z+1, r23	; 0x01
    2ea8:	60 83       	st	Z, r22
    2eaa:	b8 cf       	rjmp	.-144    	; 0x2e1c <realloc+0x92>
    2eac:	8d 91       	ld	r24, X+
    2eae:	9c 91       	ld	r25, X
    2eb0:	11 97       	sbiw	r26, 0x01	; 1
    2eb2:	12 96       	adiw	r26, 0x02	; 2
    2eb4:	6c 90       	ld	r6, X
    2eb6:	12 97       	sbiw	r26, 0x02	; 2
    2eb8:	13 96       	adiw	r26, 0x03	; 3
    2eba:	7c 90       	ld	r7, X
    2ebc:	13 97       	sbiw	r26, 0x03	; 3
    2ebe:	a8 15       	cp	r26, r8
    2ec0:	b9 05       	cpc	r27, r9
    2ec2:	59 f5       	brne	.+86     	; 0x2f1a <realloc+0x190>
    2ec4:	6c 01       	movw	r12, r24
    2ec6:	42 e0       	ldi	r20, 0x02	; 2
    2ec8:	c4 0e       	add	r12, r20
    2eca:	d1 1c       	adc	r13, r1
    2ecc:	ca 14       	cp	r12, r10
    2ece:	db 04       	cpc	r13, r11
    2ed0:	20 f1       	brcs	.+72     	; 0x2f1a <realloc+0x190>
    2ed2:	ac 01       	movw	r20, r24
    2ed4:	4a 19       	sub	r20, r10
    2ed6:	5b 09       	sbc	r21, r11
    2ed8:	da 01       	movw	r26, r20
    2eda:	12 96       	adiw	r26, 0x02	; 2
    2edc:	15 97       	sbiw	r26, 0x05	; 5
    2ede:	80 f0       	brcs	.+32     	; 0x2f00 <realloc+0x176>
    2ee0:	62 82       	std	Z+2, r6	; 0x02
    2ee2:	73 82       	std	Z+3, r7	; 0x03
    2ee4:	51 83       	std	Z+1, r21	; 0x01
    2ee6:	40 83       	st	Z, r20
    2ee8:	d9 01       	movw	r26, r18
    2eea:	6d 93       	st	X+, r22
    2eec:	7c 93       	st	X, r23
    2eee:	e1 14       	cp	r14, r1
    2ef0:	f1 04       	cpc	r15, r1
    2ef2:	71 f0       	breq	.+28     	; 0x2f10 <realloc+0x186>
    2ef4:	d7 01       	movw	r26, r14
    2ef6:	13 96       	adiw	r26, 0x03	; 3
    2ef8:	fc 93       	st	X, r31
    2efa:	ee 93       	st	-X, r30
    2efc:	12 97       	sbiw	r26, 0x02	; 2
    2efe:	8e cf       	rjmp	.-228    	; 0x2e1c <realloc+0x92>
    2f00:	22 96       	adiw	r28, 0x02	; 2
    2f02:	8c 0f       	add	r24, r28
    2f04:	9d 1f       	adc	r25, r29
    2f06:	f9 01       	movw	r30, r18
    2f08:	91 83       	std	Z+1, r25	; 0x01
    2f0a:	80 83       	st	Z, r24
    2f0c:	f3 01       	movw	r30, r6
    2f0e:	ef cf       	rjmp	.-34     	; 0x2eee <realloc+0x164>
    2f10:	f0 93 46 04 	sts	0x0446, r31	; 0x800446 <__flp+0x1>
    2f14:	e0 93 45 04 	sts	0x0445, r30	; 0x800445 <__flp>
    2f18:	81 cf       	rjmp	.-254    	; 0x2e1c <realloc+0x92>
    2f1a:	48 16       	cp	r4, r24
    2f1c:	59 06       	cpc	r5, r25
    2f1e:	08 f4       	brcc	.+2      	; 0x2f22 <realloc+0x198>
    2f20:	2c 01       	movw	r4, r24
    2f22:	7d 01       	movw	r14, r26
    2f24:	d3 01       	movw	r26, r6
    2f26:	9a cf       	rjmp	.-204    	; 0x2e5c <realloc+0xd2>
    2f28:	cb 01       	movw	r24, r22
    2f2a:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <malloc>
    2f2e:	7c 01       	movw	r14, r24
    2f30:	00 97       	sbiw	r24, 0x00	; 0
    2f32:	49 f0       	breq	.+18     	; 0x2f46 <realloc+0x1bc>
    2f34:	ae 01       	movw	r20, r28
    2f36:	b8 01       	movw	r22, r16
    2f38:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <memcpy>
    2f3c:	c8 01       	movw	r24, r16
    2f3e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <free>
    2f42:	87 01       	movw	r16, r14
    2f44:	6b cf       	rjmp	.-298    	; 0x2e1c <realloc+0x92>
    2f46:	10 e0       	ldi	r17, 0x00	; 0
    2f48:	00 e0       	ldi	r16, 0x00	; 0
    2f4a:	68 cf       	rjmp	.-304    	; 0x2e1c <realloc+0x92>

00002f4c <memcpy>:
memcpy():
    2f4c:	fb 01       	movw	r30, r22
    2f4e:	dc 01       	movw	r26, r24
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <memcpy+0xa>
    2f52:	01 90       	ld	r0, Z+
    2f54:	0d 92       	st	X+, r0
    2f56:	41 50       	subi	r20, 0x01	; 1
    2f58:	50 40       	sbci	r21, 0x00	; 0
    2f5a:	d8 f7       	brcc	.-10     	; 0x2f52 <memcpy+0x6>
    2f5c:	08 95       	ret

00002f5e <strcpy>:
strcpy():
    2f5e:	fb 01       	movw	r30, r22
    2f60:	dc 01       	movw	r26, r24
    2f62:	01 90       	ld	r0, Z+
    2f64:	0d 92       	st	X+, r0
    2f66:	00 20       	and	r0, r0
    2f68:	e1 f7       	brne	.-8      	; 0x2f62 <strcpy+0x4>
    2f6a:	08 95       	ret

00002f6c <utoa>:
utoa():
    2f6c:	45 32       	cpi	r20, 0x25	; 37
    2f6e:	51 05       	cpc	r21, r1
    2f70:	20 f4       	brcc	.+8      	; 0x2f7a <utoa+0xe>
    2f72:	42 30       	cpi	r20, 0x02	; 2
    2f74:	10 f0       	brcs	.+4      	; 0x2f7a <utoa+0xe>
    2f76:	0c 94 c1 17 	jmp	0x2f82	; 0x2f82 <__utoa_ncheck>
    2f7a:	fb 01       	movw	r30, r22
    2f7c:	10 82       	st	Z, r1
    2f7e:	cb 01       	movw	r24, r22
    2f80:	08 95       	ret

00002f82 <__utoa_ncheck>:
__utoa_ncheck():
    2f82:	bb 27       	eor	r27, r27

00002f84 <__utoa_common>:
    2f84:	fb 01       	movw	r30, r22
    2f86:	55 27       	eor	r21, r21
    2f88:	aa 27       	eor	r26, r26
    2f8a:	88 0f       	add	r24, r24
    2f8c:	99 1f       	adc	r25, r25
    2f8e:	aa 1f       	adc	r26, r26
    2f90:	a4 17       	cp	r26, r20
    2f92:	10 f0       	brcs	.+4      	; 0x2f98 <__utoa_common+0x14>
    2f94:	a4 1b       	sub	r26, r20
    2f96:	83 95       	inc	r24
    2f98:	50 51       	subi	r21, 0x10	; 16
    2f9a:	b9 f7       	brne	.-18     	; 0x2f8a <__utoa_common+0x6>
    2f9c:	a0 5d       	subi	r26, 0xD0	; 208
    2f9e:	aa 33       	cpi	r26, 0x3A	; 58
    2fa0:	08 f0       	brcs	.+2      	; 0x2fa4 <__utoa_common+0x20>
    2fa2:	a9 5d       	subi	r26, 0xD9	; 217
    2fa4:	a1 93       	st	Z+, r26
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	79 f7       	brne	.-34     	; 0x2f88 <__utoa_common+0x4>
    2faa:	b1 11       	cpse	r27, r1
    2fac:	b1 93       	st	Z+, r27
    2fae:	11 92       	st	Z+, r1
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	0c 94 db 17 	jmp	0x2fb6	; 0x2fb6 <strrev>

00002fb6 <strrev>:
strrev():
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	fc 01       	movw	r30, r24
    2fba:	67 2f       	mov	r22, r23
    2fbc:	71 91       	ld	r23, Z+
    2fbe:	77 23       	and	r23, r23
    2fc0:	e1 f7       	brne	.-8      	; 0x2fba <strrev+0x4>
    2fc2:	32 97       	sbiw	r30, 0x02	; 2
    2fc4:	04 c0       	rjmp	.+8      	; 0x2fce <strrev+0x18>
    2fc6:	7c 91       	ld	r23, X
    2fc8:	6d 93       	st	X+, r22
    2fca:	70 83       	st	Z, r23
    2fcc:	62 91       	ld	r22, -Z
    2fce:	ae 17       	cp	r26, r30
    2fd0:	bf 07       	cpc	r27, r31
    2fd2:	c8 f3       	brcs	.-14     	; 0x2fc6 <strrev+0x10>
    2fd4:	08 95       	ret

00002fd6 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    2fd6:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    2fd8:	c3 e8       	ldi	r28, 0x83	; 131
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    2fda:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    2fdc:	04 c0       	rjmp	.+8      	; 0x2fe6 <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    2fde:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    2fe0:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    2fe4:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    2fe6:	c4 38       	cpi	r28, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    2fe8:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    2fea:	c9 f7       	brne	.-14     	; 0x2fde <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    2fec:	f8 94       	cli

00002fee <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2fee:	ff cf       	rjmp	.-2      	; 0x2fee <__stop_program>
