
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/build/LABDOS512_SD.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 8e 00 	jmp	0x11c	; 0x11c <__dtors_end>
       4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       8:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
       c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      10:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      14:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      18:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      1c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      20:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      24:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      28:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      2c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      30:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      34:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      38:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      3c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      40:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      44:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      48:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__vector_18>
      4c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      50:	0c 94 29 1c 	jmp	0x3852	; 0x3852 <__vector_20>
      54:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__vector_21>
      58:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      5c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      60:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      64:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      68:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_26>
      6c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      70:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      74:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      78:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      7c:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      80:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      84:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>
      88:	0c 94 b8 00 	jmp	0x170	; 0x170 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	7c 3c       	cpi	r23, 0xCC	; 204
      8e:	3e 5e       	subi	r19, 0xEE	; 238
      90:	2b 3d       	cpi	r18, 0xDB	; 219
      92:	3f 2f       	mov	r19, r31
      94:	5b 5d       	subi	r21, 0xDB	; 219
      96:	3b 2c       	mov	r3, r11
      98:	2a 22       	and	r2, r26
      9a:	5c 00       	.word	0x005c	; ????

0000009c <digital_pin_to_timer_PGM>:
      9c:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000bc <digital_pin_to_bit_mask_PGM>:
      bc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      cc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000dc <digital_pin_to_port_PGM>:
      dc:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      ec:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000fc <port_to_output_PGM>:
      fc:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000106 <port_to_mode_PGM>:
     106:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000110 <__ctors_start>:
__ctors_start():
     110:	ca 00       	.word	0x00ca	; ????
     112:	c5 06       	cpc	r12, r21
     114:	be 0b       	sbc	r27, r30
     116:	d8 0e       	add	r13, r24
     118:	93 1c       	adc	r9, r3

0000011a <__ctors_end>:
__dtors_start():
     11a:	d6 00       	.word	0x00d6	; ????

0000011c <__dtors_end>:
__dtors_end():
     11c:	11 24       	eor	r1, r1
     11e:	1f be       	out	0x3f, r1	; 63
     120:	cf ef       	ldi	r28, 0xFF	; 255
     122:	d0 e4       	ldi	r29, 0x40	; 64
     124:	de bf       	out	0x3e, r29	; 62
     126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     128:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     12a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     12c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     12e:	e4 ee       	ldi	r30, 0xE4	; 228
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     130:	f6 e4       	ldi	r31, 0x46	; 70
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     132:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     134:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     136:	02 c0       	rjmp	.+4      	; 0x13c <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     138:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     13a:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     13c:	ac 39       	cpi	r26, 0x9C	; 156
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     13e:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     140:	d9 f7       	brne	.-10     	; 0x138 <__do_copy_data+0x10>

00000142 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     142:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     144:	ac e9       	ldi	r26, 0x9C	; 156
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     146:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     148:	01 c0       	rjmp	.+2      	; 0x14c <.do_clear_bss_start>

0000014a <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     14a:	1d 92       	st	X+, r1

0000014c <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     14c:	ab 35       	cpi	r26, 0x5B	; 91
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     14e:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     150:	e1 f7       	brne	.-8      	; 0x14a <.do_clear_bss_loop>

00000152 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     152:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     154:	cd e8       	ldi	r28, 0x8D	; 141
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     156:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     158:	04 c0       	rjmp	.+8      	; 0x162 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     15a:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     15c:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     15e:	0e 94 a3 20 	call	0x4146	; 0x4146 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     162:	c8 38       	cpi	r28, 0x88	; 136
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     164:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     166:	c9 f7       	brne	.-14     	; 0x15a <__do_global_ctors+0x8>
     168:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <main>
     16c:	0c 94 65 23 	jmp	0x46ca	; 0x46ca <__do_global_dtors>

00000170 <__bad_interrupt>:
__vector_22():
     170:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000174 <TwoWire::write(int)>:
_ZN7TwoWire5writeEi():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.h:86
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     174:	dc 01       	movw	r26, r24
     176:	ed 91       	ld	r30, X+
     178:	fc 91       	ld	r31, X
     17a:	01 90       	ld	r0, Z+
     17c:	f0 81       	ld	r31, Z
     17e:	e0 2d       	mov	r30, r0
     180:	09 94       	ijmp

00000182 <bcdToDec(unsigned char)>:
_Z8bcdToDech():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:119
#define PIN 0
uint8_t analog_reference = INTERNAL2V56; // DEFAULT, INTERNAL, INTERNAL1V1, INTERNAL2V56, or EXTERNAL

uint8_t bcdToDec(uint8_t b)
{
  return ( ((b >> 4)*10) + (b%16) );
     182:	98 2f       	mov	r25, r24
     184:	92 95       	swap	r25
     186:	9f 70       	andi	r25, 0x0F	; 15
     188:	8f 70       	andi	r24, 0x0F	; 15
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:120
}
     18a:	2a e0       	ldi	r18, 0x0A	; 10
     18c:	92 9f       	mul	r25, r18
     18e:	80 0d       	add	r24, r0
     190:	11 24       	eor	r1, r1
     192:	08 95       	ret

00000194 <_GLOBAL__sub_I_githash>:
_GLOBAL__sub_I_githash():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:1
String githash = "aaaaaaa";
     194:	6d e0       	ldi	r22, 0x0D	; 13
     196:	71 e0       	ldi	r23, 0x01	; 1
     198:	80 eb       	ldi	r24, 0xB0	; 176
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <String::String(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:2
String FWversion = "B512_01"; // 16 MHz crystal
     1a0:	65 e1       	ldi	r22, 0x15	; 21
     1a2:	71 e0       	ldi	r23, 0x01	; 1
     1a4:	8a ea       	ldi	r24, 0xAA	; 170
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <String::String(char const*)>

000001ac <_GLOBAL__sub_D_githash>:
_GLOBAL__sub_D_githash():
     1ac:	8a ea       	ldi	r24, 0xAA	; 170
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:1
String githash = "aaaaaaa";
     1b4:	80 eb       	ldi	r24, 0xB0	; 176
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <String::~String()>

000001bc <readRTC()>:
_Z7readRTCv():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:123
{
  return ( ((b >> 4)*10) + (b%16) );
}

void readRTC()
{
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:124
  Wire.beginTransmission(0x51);
     1c0:	61 e5       	ldi	r22, 0x51	; 81
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	86 eb       	ldi	r24, 0xB6	; 182
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	0e 94 44 06 	call	0xc88	; 0xc88 <TwoWire::beginTransmission(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:125
  Wire.write(0);
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	86 eb       	ldi	r24, 0xB6	; 182
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 ba 00 	call	0x174	; 0x174 <TwoWire::write(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:126
  Wire.endTransmission();
     1d8:	86 eb       	ldi	r24, 0xB6	; 182
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 c2 06 	call	0xd84	; 0xd84 <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:128
  
  Wire.requestFrom(0x51, 6);
     1e0:	46 e0       	ldi	r20, 0x06	; 6
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	61 e5       	ldi	r22, 0x51	; 81
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	86 eb       	ldi	r24, 0xB6	; 182
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 bf 06 	call	0xd7e	; 0xd7e <TwoWire::requestFrom(int, int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:129
  Wire.read();
     1f0:	86 eb       	ldi	r24, 0xB6	; 182
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TwoWire::read()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:131
  //tm_s100 = bcdToDec(Wire.read());
  uint8_t tm_sec = bcdToDec(Wire.read() & 0x7f);
     1f8:	86 eb       	ldi	r24, 0xB6	; 182
     1fa:	91 e0       	ldi	r25, 0x01	; 1
     1fc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TwoWire::read()>
     200:	8f 77       	andi	r24, 0x7F	; 127
     202:	0e 94 c1 00 	call	0x182	; 0x182 <bcdToDec(unsigned char)>
     206:	d8 2f       	mov	r29, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:132
  uint8_t tm_min = bcdToDec(Wire.read() & 0x7f);
     208:	86 eb       	ldi	r24, 0xB6	; 182
     20a:	91 e0       	ldi	r25, 0x01	; 1
     20c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TwoWire::read()>
     210:	8f 77       	andi	r24, 0x7F	; 127
     212:	0e 94 c1 00 	call	0x182	; 0x182 <bcdToDec(unsigned char)>
     216:	c8 2f       	mov	r28, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:133
  tm = bcdToDec(Wire.read());
     218:	86 eb       	ldi	r24, 0xB6	; 182
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TwoWire::read()>
     220:	0e 94 c1 00 	call	0x182	; 0x182 <bcdToDec(unsigned char)>
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	b0 e0       	ldi	r27, 0x00	; 0
     228:	a0 e0       	ldi	r26, 0x00	; 0
     22a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
     22e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x1>
     232:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <__data_end+0x2>
     236:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <__data_end+0x3>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:134
  tm += bcdToDec(Wire.read()) * 100;
     23a:	86 eb       	ldi	r24, 0xB6	; 182
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TwoWire::read()>
     242:	0e 94 c1 00 	call	0x182	; 0x182 <bcdToDec(unsigned char)>
     246:	24 e6       	ldi	r18, 0x64	; 100
     248:	82 9f       	mul	r24, r18
     24a:	c0 01       	movw	r24, r0
     24c:	11 24       	eor	r1, r1
     24e:	09 2e       	mov	r0, r25
     250:	00 0c       	add	r0, r0
     252:	aa 0b       	sbc	r26, r26
     254:	bb 0b       	sbc	r27, r27
     256:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <__data_end>
     25a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <__data_end+0x1>
     25e:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x2>
     262:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x3>
     266:	84 0f       	add	r24, r20
     268:	95 1f       	adc	r25, r21
     26a:	a6 1f       	adc	r26, r22
     26c:	b7 1f       	adc	r27, r23
     26e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
     272:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x1>
     276:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <__data_end+0x2>
     27a:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <__data_end+0x3>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:135
  tm += bcdToDec(Wire.read()) * 10000;
     27e:	86 eb       	ldi	r24, 0xB6	; 182
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TwoWire::read()>
     286:	0e 94 c1 00 	call	0x182	; 0x182 <bcdToDec(unsigned char)>
     28a:	40 e1       	ldi	r20, 0x10	; 16
     28c:	57 e2       	ldi	r21, 0x27	; 39
     28e:	84 9f       	mul	r24, r20
     290:	90 01       	movw	r18, r0
     292:	85 9f       	mul	r24, r21
     294:	30 0d       	add	r19, r0
     296:	11 24       	eor	r1, r1
     298:	03 2e       	mov	r0, r19
     29a:	00 0c       	add	r0, r0
     29c:	44 0b       	sbc	r20, r20
     29e:	55 0b       	sbc	r21, r21
     2a0:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
     2a4:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <__data_end+0x1>
     2a8:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <__data_end+0x2>
     2ac:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <__data_end+0x3>
     2b0:	28 0f       	add	r18, r24
     2b2:	39 1f       	adc	r19, r25
     2b4:	4a 1f       	adc	r20, r26
     2b6:	5b 1f       	adc	r21, r27
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:136
  tm = tm * 60 * 60 + tm_min * 60 + tm_sec;
     2b8:	a0 e1       	ldi	r26, 0x10	; 16
     2ba:	be e0       	ldi	r27, 0x0E	; 14
     2bc:	0e 94 ac 20 	call	0x4158	; 0x4158 <__muluhisi3>
     2c0:	ab 01       	movw	r20, r22
     2c2:	bc 01       	movw	r22, r24
     2c4:	2c e3       	ldi	r18, 0x3C	; 60
     2c6:	c2 9f       	mul	r28, r18
     2c8:	c0 01       	movw	r24, r0
     2ca:	11 24       	eor	r1, r1
     2cc:	09 2e       	mov	r0, r25
     2ce:	00 0c       	add	r0, r0
     2d0:	aa 0b       	sbc	r26, r26
     2d2:	bb 0b       	sbc	r27, r27
     2d4:	8d 0f       	add	r24, r29
     2d6:	91 1d       	adc	r25, r1
     2d8:	a1 1d       	adc	r26, r1
     2da:	b1 1d       	adc	r27, r1
     2dc:	84 0f       	add	r24, r20
     2de:	95 1f       	adc	r25, r21
     2e0:	a6 1f       	adc	r26, r22
     2e2:	b7 1f       	adc	r27, r23
     2e4:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <__data_end>
     2e8:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <__data_end+0x1>
     2ec:	a0 93 9e 01 	sts	0x019E, r26	; 0x80019e <__data_end+0x2>
     2f0:	b0 93 9f 01 	sts	0x019F, r27	; 0x80019f <__data_end+0x3>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:137
}
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	08 95       	ret

000002fa <loop>:
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:298
  delay(100);  
}


void loop()
{
     2fa:	8f 92       	push	r8
     2fc:	9f 92       	push	r9
     2fe:	af 92       	push	r10
     300:	bf 92       	push	r11
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	c1 52       	subi	r28, 0x21	; 33
     318:	d8 40       	sbci	r29, 0x08	; 8
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	fe 01       	movw	r30, r28
     326:	31 96       	adiw	r30, 0x01	; 1
     328:	8e 01       	movw	r16, r28
     32a:	0f 5f       	subi	r16, 0xFF	; 255
     32c:	17 4f       	sbci	r17, 0xF7	; 247
     32e:	7f 01       	movw	r14, r30
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:302 (discriminator 2)
  uint16_t histogram[CHANNELS];
  for(int n=0; n<CHANNELS; n++)
  {
    histogram[n]=0;
     330:	11 92       	st	Z+, r1
     332:	11 92       	st	Z+, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:300 (discriminator 2)


void loop()
{
  uint16_t histogram[CHANNELS];
  for(int n=0; n<CHANNELS; n++)
     334:	e0 17       	cp	r30, r16
     336:	f1 07       	cpc	r31, r17
     338:	d9 f7       	brne	.-10     	; 0x330 <loop+0x36>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:306
  {
    histogram[n]=0;
  }

  // dummy conversion
  ADMUX = (analog_reference << 6) | 0b10000; // Select +A0,-A1 for measurement
     33a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     33e:	20 e4       	ldi	r18, 0x40	; 64
     340:	82 9f       	mul	r24, r18
     342:	c0 01       	movw	r24, r0
     344:	11 24       	eor	r1, r1
     346:	80 61       	ori	r24, 0x10	; 16
     348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:307
  ADCSRB = 0;               // Switching ADC to Free Running mode
     34c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:308
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     350:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     354:	80 62       	ori	r24, 0x20	; 32
     356:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:309
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
     35a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     35e:	80 64       	ori	r24, 0x40	; 64
     360:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:310
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
     364:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     368:	84 60       	ori	r24, 0x04	; 4
     36a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:311
  sbi(ADCSRA, 1);        
     36e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     372:	82 60       	ori	r24, 0x02	; 2
     374:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:312
  sbi(ADCSRA, 0);        
     378:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     37c:	81 60       	ori	r24, 0x01	; 1
     37e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:314
  
  PORTB = 1;                          // Set reset output for peak detector to H
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	85 b9       	out	0x05, r24	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:315
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     386:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     38a:	80 61       	ori	r24, 0x10	; 16
     38c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:316
  while (bit_is_clear(ADCSRA, ADIF)); // wait for the first dummy conversion 
     390:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     394:	84 ff       	sbrs	r24, 4
     396:	fc cf       	rjmp	.-8      	; 0x390 <loop+0x96>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:317
  DDRB = 0b10011111;                  // Reset peak detector
     398:	8f e9       	ldi	r24, 0x9F	; 159
     39a:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:318
  delayMicroseconds(100);             // guaranteed reset
     39c:	84 e6       	ldi	r24, 0x64	; 100
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:319
  DDRB = 0b10011110;
     3a4:	8e e9       	ldi	r24, 0x9E	; 158
     3a6:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:321

  sbi(ADCSRA, ADIF);        // reset interrupt flag from ADC
     3a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3ac:	80 61       	ori	r24, 0x10	; 16
     3ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:325

  uint16_t suppress = 0;      
    
  while (bit_is_clear(ADCSRA, ADIF)); // wait for dummy conversion 
     3b2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3b6:	84 ff       	sbrs	r24, 4
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <loop+0xb8>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:326
  DDRB = 0b10011111;                  // Reset peak detector
     3ba:	8f e9       	ldi	r24, 0x9F	; 159
     3bc:	84 b9       	out	0x04, r24	; 4
	...
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:331
  asm("NOP");                         // cca 6 us for 2k2 resistor and 1k capacitor in peak detector
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
     3c6:	00 00       	nop
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:332
  DDRB = 0b10011110;
     3c8:	8e e9       	ldi	r24, 0x9E	; 158
     3ca:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:333
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     3cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3d0:	80 61       	ori	r24, 0x10	; 16
     3d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3d6:	60 eb       	ldi	r22, 0xB0	; 176
     3d8:	c6 2e       	mov	r12, r22
     3da:	63 eb       	ldi	r22, 0xB3	; 179
     3dc:	d6 2e       	mov	r13, r22
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:341
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
    delayMicroseconds(13);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
    
    DDRB = 0b10011111;                  // Reset peak detector
     3de:	7f e9       	ldi	r23, 0x9F	; 159
     3e0:	b7 2e       	mov	r11, r23
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:343
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
    DDRB = 0b10011110;
     3e2:	ee e9       	ldi	r30, 0x9E	; 158
     3e4:	ae 2e       	mov	r10, r30
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:338
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
  
  // dosimeter integration
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
     3e6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     3ea:	84 ff       	sbrs	r24, 4
     3ec:	fc cf       	rjmp	.-8      	; 0x3e6 <loop+0xec>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:339
    delayMicroseconds(13);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
     3ee:	8d e0       	ldi	r24, 0x0D	; 13
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:341
    
    DDRB = 0b10011111;                  // Reset peak detector
     3f6:	b4 b8       	out	0x04, r11	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:342
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
     3f8:	87 e0       	ldi	r24, 0x07	; 7
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:343
    DDRB = 0b10011110;
     400:	a4 b8       	out	0x04, r10	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:344
    sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     402:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     406:	80 61       	ori	r24, 0x10	; 16
     408:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:350

    // we have to read ADCL first; doing so locks both ADCL
    // and ADCH until ADCH is read.  reading ADCL second would
    // cause the results of each conversion to be discarded,
    // as ADCL and ADCH would be locked when it completed.
    lo = ADCL;
     40c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     410:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:351
    hi = ADCH;
     414:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     418:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:354

    // combine the two bytes
    u_sensor = (hi << 8) | (lo);
     41c:	89 27       	eor	r24, r25
     41e:	98 27       	eor	r25, r24
     420:	89 27       	eor	r24, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:357

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     422:	81 15       	cp	r24, r1
     424:	e2 e0       	ldi	r30, 0x02	; 2
     426:	9e 07       	cpc	r25, r30
     428:	98 f5       	brcc	.+102    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:357 (discriminator 1)
     42a:	9e 5f       	subi	r25, 0xFE	; 254
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:357 (discriminator 2)
     42c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <u_sensor+0x1>
     430:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:359 (discriminator 2)
              
    histogram[u_sensor]++;
     434:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <u_sensor>
     438:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <u_sensor+0x1>
     43c:	ee 0f       	add	r30, r30
     43e:	ff 1f       	adc	r31, r31
     440:	ee 0d       	add	r30, r14
     442:	ff 1d       	adc	r31, r15
     444:	80 81       	ld	r24, Z
     446:	91 81       	ldd	r25, Z+1	; 0x01
     448:	01 96       	adiw	r24, 0x01	; 1
     44a:	91 83       	std	Z+1, r25	; 0x01
     44c:	80 83       	st	Z, r24
     44e:	f1 e0       	ldi	r31, 0x01	; 1
     450:	cf 1a       	sub	r12, r31
     452:	d1 08       	sbc	r13, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:336 (discriminator 2)
  asm("NOP");                         
  DDRB = 0b10011110;
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
  
  // dosimeter integration
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
     454:	41 f6       	brne	.-112    	; 0x3e6 <loop+0xec>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:376
*/
  }  
  
  // Data out
  {
    readRTC();
     456:	0e 94 de 00 	call	0x1bc	; 0x1bc <readRTC()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:378

    uint16_t noise = base_offset+3;
     45a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <base_offset>
     45e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <base_offset+0x1>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:382
    uint32_t dose=0;
    #define RANGE 500

    for(int n=noise; n<(base_offset+RANGE); n++)  
     462:	c9 01       	movw	r24, r18
     464:	03 96       	adiw	r24, 0x03	; 3
     466:	fc 01       	movw	r30, r24
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	ee 0d       	add	r30, r14
     46e:	ff 1d       	adc	r31, r15
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:379
  // Data out
  {
    readRTC();

    uint16_t noise = base_offset+3;
    uint32_t dose=0;
     470:	81 2c       	mov	r8, r1
     472:	91 2c       	mov	r9, r1
     474:	54 01       	movw	r10, r8
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:382
    #define RANGE 500

    for(int n=noise; n<(base_offset+RANGE); n++)  
     476:	2c 50       	subi	r18, 0x0C	; 12
     478:	3e 4f       	sbci	r19, 0xFE	; 254
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:382 (discriminator 3)
     47a:	82 17       	cp	r24, r18
     47c:	93 07       	cpc	r25, r19
     47e:	50 f4       	brcc	.+20     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:384 (discriminator 2)
    {
      dose += histogram[n]; 
     480:	41 91       	ld	r20, Z+
     482:	51 91       	ld	r21, Z+
     484:	84 0e       	add	r8, r20
     486:	95 1e       	adc	r9, r21
     488:	a1 1c       	adc	r10, r1
     48a:	b1 1c       	adc	r11, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:382 (discriminator 2)

    uint16_t noise = base_offset+3;
    uint32_t dose=0;
    #define RANGE 500

    for(int n=noise; n<(base_offset+RANGE); n++)  
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	f5 cf       	rjmp	.-22     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:357 (discriminator 2)

    // combine the two bytes
    u_sensor = (hi << 8) | (lo);

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     490:	92 50       	subi	r25, 0x02	; 2
     492:	cc cf       	rjmp	.-104    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:387
    for(int n=noise; n<(base_offset+RANGE); n++)  
    {
      dose += histogram[n]; 
    }

    digitalWrite(LED3, HIGH); 
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	87 e1       	ldi	r24, 0x17	; 23
     498:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:390

    // make a string for assembling the data to log:
    String dataString = "";
     49c:	6a e9       	ldi	r22, 0x9A	; 154
     49e:	71 e0       	ldi	r23, 0x01	; 1
     4a0:	ce 01       	movw	r24, r28
     4a2:	84 5e       	subi	r24, 0xE4	; 228
     4a4:	97 4f       	sbci	r25, 0xF7	; 247
     4a6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <String::String(char const*)>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     4aa:	6d e1       	ldi	r22, 0x1D	; 29
     4ac:	71 e0       	ldi	r23, 0x01	; 1
     4ae:	ce 01       	movw	r24, r28
     4b0:	84 5e       	subi	r24, 0xE4	; 228
     4b2:	97 4f       	sbci	r25, 0xF7	; 247
     4b4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:394
    
    // make a string for assembling the data to log:
    dataString += "$HIST,";
    dataString += String(count); 
     4b8:	60 91 a8 01 	lds	r22, 0x01A8	; 0x8001a8 <count>
     4bc:	70 91 a9 01 	lds	r23, 0x01A9	; 0x8001a9 <count+0x1>
     4c0:	4a e0       	ldi	r20, 0x0A	; 10
     4c2:	c8 01       	movw	r24, r16
     4c4:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     4c8:	b8 01       	movw	r22, r16
     4ca:	ce 01       	movw	r24, r28
     4cc:	84 5e       	subi	r24, 0xE4	; 228
     4ce:	97 4f       	sbci	r25, 0xF7	; 247
     4d0:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:394
     4d4:	c8 01       	movw	r24, r16
     4d6:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     4da:	60 e5       	ldi	r22, 0x50	; 80
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	ce 01       	movw	r24, r28
     4e0:	84 5e       	subi	r24, 0xE4	; 228
     4e2:	97 4f       	sbci	r25, 0xF7	; 247
     4e4:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:396
    dataString += ",";  
    dataString += String(tm); 
     4e8:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <__data_end>
     4ec:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <__data_end+0x1>
     4f0:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <__data_end+0x2>
     4f4:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <__data_end+0x3>
     4f8:	2a e0       	ldi	r18, 0x0A	; 10
     4fa:	c8 01       	movw	r24, r16
     4fc:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <String::String(unsigned long, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     500:	b8 01       	movw	r22, r16
     502:	ce 01       	movw	r24, r28
     504:	84 5e       	subi	r24, 0xE4	; 228
     506:	97 4f       	sbci	r25, 0xF7	; 247
     508:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:396
     50c:	c8 01       	movw	r24, r16
     50e:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     512:	60 e5       	ldi	r22, 0x50	; 80
     514:	71 e0       	ldi	r23, 0x01	; 1
     516:	ce 01       	movw	r24, r28
     518:	84 5e       	subi	r24, 0xE4	; 228
     51a:	97 4f       	sbci	r25, 0xF7	; 247
     51c:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:398
    dataString += ",";
    dataString += String(suppress);
     520:	4a e0       	ldi	r20, 0x0A	; 10
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	c8 01       	movw	r24, r16
     528:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     52c:	b8 01       	movw	r22, r16
     52e:	ce 01       	movw	r24, r28
     530:	84 5e       	subi	r24, 0xE4	; 228
     532:	97 4f       	sbci	r25, 0xF7	; 247
     534:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:398
     538:	c8 01       	movw	r24, r16
     53a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     53e:	60 e5       	ldi	r22, 0x50	; 80
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	ce 01       	movw	r24, r28
     544:	84 5e       	subi	r24, 0xE4	; 228
     546:	97 4f       	sbci	r25, 0xF7	; 247
     548:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:400
    dataString += ",";
    dataString += String(dose);
     54c:	2a e0       	ldi	r18, 0x0A	; 10
     54e:	b5 01       	movw	r22, r10
     550:	a4 01       	movw	r20, r8
     552:	c8 01       	movw	r24, r16
     554:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <String::String(unsigned long, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     558:	b8 01       	movw	r22, r16
     55a:	ce 01       	movw	r24, r28
     55c:	84 5e       	subi	r24, 0xE4	; 228
     55e:	97 4f       	sbci	r25, 0xF7	; 247
     560:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:400
     564:	c8 01       	movw	r24, r16
     566:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:402
    
    for(int n=base_offset-1; n<(base_offset-1+RANGE); n++)  
     56a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <base_offset>
     56e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <base_offset+0x1>
     572:	6c 01       	movw	r12, r24
     574:	21 e0       	ldi	r18, 0x01	; 1
     576:	c2 1a       	sub	r12, r18
     578:	d1 08       	sbc	r13, r1
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	90 48       	sbci	r25, 0x80	; 128
     57e:	88 0f       	add	r24, r24
     580:	99 1f       	adc	r25, r25
     582:	e8 0e       	add	r14, r24
     584:	f9 1e       	adc	r15, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:402 (discriminator 3)
     586:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <base_offset>
     58a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <base_offset+0x1>
     58e:	8d 50       	subi	r24, 0x0D	; 13
     590:	9e 4f       	sbci	r25, 0xFE	; 254
     592:	c8 16       	cp	r12, r24
     594:	d9 06       	cpc	r13, r25
     596:	e0 f4       	brcc	.+56     	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     598:	60 e5       	ldi	r22, 0x50	; 80
     59a:	71 e0       	ldi	r23, 0x01	; 1
     59c:	ce 01       	movw	r24, r28
     59e:	84 5e       	subi	r24, 0xE4	; 228
     5a0:	97 4f       	sbci	r25, 0xF7	; 247
     5a2:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:405
    {
      dataString += ",";
      dataString += String(histogram[n]); 
     5a6:	f7 01       	movw	r30, r14
     5a8:	61 91       	ld	r22, Z+
     5aa:	71 91       	ld	r23, Z+
     5ac:	7f 01       	movw	r14, r30
     5ae:	4a e0       	ldi	r20, 0x0A	; 10
     5b0:	c8 01       	movw	r24, r16
     5b2:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     5b6:	b8 01       	movw	r22, r16
     5b8:	ce 01       	movw	r24, r28
     5ba:	84 5e       	subi	r24, 0xE4	; 228
     5bc:	97 4f       	sbci	r25, 0xF7	; 247
     5be:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:405
     5c2:	c8 01       	movw	r24, r16
     5c4:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:402
    dataString += ",";
    dataString += String(suppress);
    dataString += ",";
    dataString += String(dose);
    
    for(int n=base_offset-1; n<(base_offset-1+RANGE); n++)  
     5c8:	ff ef       	ldi	r31, 0xFF	; 255
     5ca:	cf 1a       	sub	r12, r31
     5cc:	df 0a       	sbc	r13, r31
     5ce:	db cf       	rjmp	.-74     	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:425
    dataString += String(int(maxch-noise+3)); 
    dataString += ",";
    dataString += String(maxener); 
    */
    
    count++;
     5d0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <count>
     5d4:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <count+0x1>
     5d8:	01 96       	adiw	r24, 0x01	; 1
     5da:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <count+0x1>
     5de:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <count>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:427

    DDRB = 0b10111110;
     5e2:	8e eb       	ldi	r24, 0xBE	; 190
     5e4:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:428
    PORTB = 0b00001111;  // SDcard Power ON
     5e6:	8f e0       	ldi	r24, 0x0F	; 15
     5e8:	85 b9       	out	0x05, r24	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:429
    if (SD.begin(SS)) 
     5ea:	64 e0       	ldi	r22, 0x04	; 4
     5ec:	88 e5       	ldi	r24, 0x58	; 88
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	0e 94 13 0a 	call	0x1426	; 0x1426 <SDLib::SDClass::begin(unsigned char)>
     5f4:	88 23       	and	r24, r24
     5f6:	b1 f0       	breq	.+44     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:433
    {
      // open the file. note that only one file can be open at a time,
      // so you have to close this one before opening another.
      File dataFile = SD.open("DATALOG.TXT", FILE_WRITE);
     5f8:	23 e1       	ldi	r18, 0x13	; 19
     5fa:	44 e2       	ldi	r20, 0x24	; 36
     5fc:	51 e0       	ldi	r21, 0x01	; 1
     5fe:	68 e5       	ldi	r22, 0x58	; 88
     600:	72 e0       	ldi	r23, 0x02	; 2
     602:	c8 01       	movw	r24, r16
     604:	0e 94 33 0b 	call	0x1666	; 0x1666 <SDLib::SDClass::open(char const*, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:435
      // if the file is available, write to it:
      if (dataFile) 
     608:	c8 01       	movw	r24, r16
     60a:	0e 94 07 0a 	call	0x140e	; 0x140e <SDLib::File::operator bool()>
     60e:	88 23       	and	r24, r24
     610:	49 f0       	breq	.+18     	; 0x624 <__LOCK_REGION_LENGTH__+0x224>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:437
      {
        dataFile.println(dataString);  // write to SDcard (800 ms) 
     612:	be 01       	movw	r22, r28
     614:	64 5e       	subi	r22, 0xE4	; 228
     616:	77 4f       	sbci	r23, 0xF7	; 247
     618:	c8 01       	movw	r24, r16
     61a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:438
        dataFile.close();
     61e:	c8 01       	movw	r24, r16
     620:	0e 94 f5 09 	call	0x13ea	; 0x13ea <SDLib::File::close()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:443
      }  
    }  

    {
      Serial.println(dataString);  // print to terminal (additional 700 ms in DEBUG mode)
     624:	be 01       	movw	r22, r28
     626:	64 5e       	subi	r22, 0xE4	; 228
     628:	77 4f       	sbci	r23, 0xF7	; 247
     62a:	81 eb       	ldi	r24, 0xB1	; 177
     62c:	94 e0       	ldi	r25, 0x04	; 4
     62e:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:444
      digitalWrite(LED3, LOW); 
     632:	60 e0       	ldi	r22, 0x00	; 0
     634:	87 e1       	ldi	r24, 0x17	; 23
     636:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:390
    }

    digitalWrite(LED3, HIGH); 

    // make a string for assembling the data to log:
    String dataString = "";
     63a:	ce 01       	movw	r24, r28
     63c:	84 5e       	subi	r24, 0xE4	; 228
     63e:	97 4f       	sbci	r25, 0xF7	; 247
     640:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:447
    {
      Serial.println(dataString);  // print to terminal (additional 700 ms in DEBUG mode)
      digitalWrite(LED3, LOW); 
    }          
  }    
}
     644:	cf 5d       	subi	r28, 0xDF	; 223
     646:	d7 4f       	sbci	r29, 0xF7	; 247
     648:	0f b6       	in	r0, 0x3f	; 63
     64a:	f8 94       	cli
     64c:	de bf       	out	0x3e, r29	; 62
     64e:	0f be       	out	0x3f, r0	; 63
     650:	cd bf       	out	0x3d, r28	; 61
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	af 90       	pop	r10
     666:	9f 90       	pop	r9
     668:	8f 90       	pop	r8
     66a:	08 95       	ret

0000066c <setup>:
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:141
  tm = tm * 60 * 60 + tm_min * 60 + tm_sec;
}


void setup()
{
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	a7 97       	sbiw	r28, 0x27	; 39
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:142
  pinMode(LED1, OUTPUT); 
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	85 e1       	ldi	r24, 0x15	; 21
     68a:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:143
  digitalWrite(LED1, HIGH); 
     68e:	61 e0       	ldi	r22, 0x01	; 1
     690:	85 e1       	ldi	r24, 0x15	; 21
     692:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:144
  delay(100);  
     696:	64 e6       	ldi	r22, 0x64	; 100
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
_ZN14HardwareSerial5beginEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     6a2:	26 e0       	ldi	r18, 0x06	; 6
     6a4:	40 e0       	ldi	r20, 0x00	; 0
     6a6:	52 ec       	ldi	r21, 0xC2	; 194
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	81 eb       	ldi	r24, 0xB1	; 177
     6ae:	94 e0       	ldi	r25, 0x04	; 4
     6b0:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:149

  // Open serial communications and wait for port to open:
  Serial.begin(115200);

  Serial.println("#Cvak...");
     6b4:	60 e3       	ldi	r22, 0x30	; 48
     6b6:	71 e0       	ldi	r23, 0x01	; 1
     6b8:	81 eb       	ldi	r24, 0xB1	; 177
     6ba:	94 e0       	ldi	r25, 0x04	; 4
     6bc:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:151
  
  ADMUX = (analog_reference << 6) | ((PIN | 0x10) & 0x1F);
     6c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     6c4:	20 e4       	ldi	r18, 0x40	; 64
     6c6:	82 9f       	mul	r24, r18
     6c8:	c0 01       	movw	r24, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	80 61       	ori	r24, 0x10	; 16
     6ce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:152
  ADCSRB = 0;               // Switching ADC to Free Running mode
     6d2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:153
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     6d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6da:	80 62       	ori	r24, 0x20	; 32
     6dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:154
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
     6e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6e4:	80 64       	ori	r24, 0x40	; 64
     6e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:155
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128, 125 kHz, 112 us for 14 cycles of one AD conversion, 12 us for 1.5 cycle for sample-hold
     6ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6ee:	84 60       	ori	r24, 0x04	; 4
     6f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:156
  sbi(ADCSRA, 1);        
     6f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:157
  sbi(ADCSRA, 0);        
     6fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     702:	81 60       	ori	r24, 0x01	; 1
     704:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:159

  pinMode(RESET, OUTPUT);   // reset for peak detetor
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:169
  //pinMode(SS, OUTPUT);     
  //pinMode(MOSI, INPUT);     
  //pinMode(MISO, INPUT);     
  //pinMode(SCK, OUTPUT);  

  DDRB = 0b10011110;
     710:	8e e9       	ldi	r24, 0x9E	; 158
     712:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:170
  PORTB = 0b00000000;  // SDcard Power OFF
     714:	15 b8       	out	0x05, r1	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:172

  DDRA = 0b11111100;
     716:	8c ef       	ldi	r24, 0xFC	; 252
     718:	81 b9       	out	0x01, r24	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:173
  PORTA = 0b00000000;  // SDcard Power OFF
     71a:	12 b8       	out	0x02, r1	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:174
  DDRC = 0b11101100;
     71c:	9c ee       	ldi	r25, 0xEC	; 236
     71e:	97 b9       	out	0x07, r25	; 7
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:175
  PORTC = 0b00000000;  // SDcard Power OFF
     720:	18 b8       	out	0x08, r1	; 8
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:176
  DDRD = 0b11111100;
     722:	8a b9       	out	0x0a, r24	; 10
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:177
  PORTD = 0b10000000;  // SDcard Power OFF
     724:	80 e8       	ldi	r24, 0x80	; 128
     726:	8b b9       	out	0x0b, r24	; 11
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:179

  Wire.setClock(100000);
     728:	40 ea       	ldi	r20, 0xA0	; 160
     72a:	56 e8       	ldi	r21, 0x86	; 134
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	86 eb       	ldi	r24, 0xB6	; 182
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 36 06 	call	0xc6c	; 0xc6c <TwoWire::setClock(unsigned long)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:182

  // Initiation of RTC
  Wire.beginTransmission(0x51); // init clock
     738:	61 e5       	ldi	r22, 0x51	; 81
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	86 eb       	ldi	r24, 0xB6	; 182
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	0e 94 44 06 	call	0xc88	; 0xc88 <TwoWire::beginTransmission(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:183
  Wire.write((uint8_t)0x23); // Start register
     744:	63 e2       	ldi	r22, 0x23	; 35
     746:	86 eb       	ldi	r24, 0xB6	; 182
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:184
  Wire.write((uint8_t)0x00); // 0x23
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	86 eb       	ldi	r24, 0xB6	; 182
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:185
  Wire.write((uint8_t)0x00); // 0x24 Two's complement offset value
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	86 eb       	ldi	r24, 0xB6	; 182
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:186
  Wire.write((uint8_t)0b00000101); // 0x25 Normal offset correction, disable low-jitter mode, set load caps to 6 pF
     762:	65 e0       	ldi	r22, 0x05	; 5
     764:	86 eb       	ldi	r24, 0xB6	; 182
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:187
  Wire.write((uint8_t)0x00); // 0x26 Battery switch reg, same as after a reset
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	86 eb       	ldi	r24, 0xB6	; 182
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:188
  Wire.write((uint8_t)0x00); // 0x27 Enable CLK pin, using bits set in reg 0x28
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	86 eb       	ldi	r24, 0xB6	; 182
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:189
  Wire.write((uint8_t)0x97); // 0x28 stop watch mode, no periodic interrupts, CLK pin off
     780:	67 e9       	ldi	r22, 0x97	; 151
     782:	86 eb       	ldi	r24, 0xB6	; 182
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:190
  Wire.write((uint8_t)0x00); // 0x29
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	86 eb       	ldi	r24, 0xB6	; 182
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:191
  Wire.write((uint8_t)0x00); // 0x2a
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	86 eb       	ldi	r24, 0xB6	; 182
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:192
  Wire.endTransmission();
     79e:	86 eb       	ldi	r24, 0xB6	; 182
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 c2 06 	call	0xd84	; 0xd84 <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:193
  Wire.beginTransmission(0x51); // reset clock
     7a6:	61 e5       	ldi	r22, 0x51	; 81
     7a8:	70 e0       	ldi	r23, 0x00	; 0
     7aa:	86 eb       	ldi	r24, 0xB6	; 182
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 44 06 	call	0xc88	; 0xc88 <TwoWire::beginTransmission(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:194
  Wire.write(0x2f); 
     7b2:	6f e2       	ldi	r22, 0x2F	; 47
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	86 eb       	ldi	r24, 0xB6	; 182
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 ba 00 	call	0x174	; 0x174 <TwoWire::write(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:195
  Wire.write(0x2c);
     7be:	6c e2       	ldi	r22, 0x2C	; 44
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	86 eb       	ldi	r24, 0xB6	; 182
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 ba 00 	call	0x174	; 0x174 <TwoWire::write(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:196
  Wire.endTransmission();
     7ca:	86 eb       	ldi	r24, 0xB6	; 182
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 c2 06 	call	0xd84	; 0xd84 <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:197
  Wire.beginTransmission(0x51); // start stop-watch
     7d2:	61 e5       	ldi	r22, 0x51	; 81
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	86 eb       	ldi	r24, 0xB6	; 182
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 44 06 	call	0xc88	; 0xc88 <TwoWire::beginTransmission(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:198
  Wire.write(0x28); 
     7de:	68 e2       	ldi	r22, 0x28	; 40
     7e0:	70 e0       	ldi	r23, 0x00	; 0
     7e2:	86 eb       	ldi	r24, 0xB6	; 182
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	0e 94 ba 00 	call	0x174	; 0x174 <TwoWire::write(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:199
  Wire.write(0x97);
     7ea:	67 e9       	ldi	r22, 0x97	; 151
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	86 eb       	ldi	r24, 0xB6	; 182
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 ba 00 	call	0x174	; 0x174 <TwoWire::write(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:200
  Wire.endTransmission();
     7f6:	86 eb       	ldi	r24, 0xB6	; 182
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 c2 06 	call	0xd84	; 0xd84 <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:201
  Wire.beginTransmission(0x51); // reset stop-watch
     7fe:	61 e5       	ldi	r22, 0x51	; 81
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	86 eb       	ldi	r24, 0xB6	; 182
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 44 06 	call	0xc88	; 0xc88 <TwoWire::beginTransmission(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:202
  Wire.write((uint8_t)0x00); // Start register
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	86 eb       	ldi	r24, 0xB6	; 182
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:203
  Wire.write((uint8_t)0x00); // 0x00
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	86 eb       	ldi	r24, 0xB6	; 182
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:204
  Wire.write((uint8_t)0x00); // 0x01 
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	86 eb       	ldi	r24, 0xB6	; 182
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:205
  Wire.write((uint8_t)0x00); // 0x02 
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	86 eb       	ldi	r24, 0xB6	; 182
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:206
  Wire.write((uint8_t)0x00); // 0x03
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	86 eb       	ldi	r24, 0xB6	; 182
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:207
  Wire.write((uint8_t)0x00); // 0x04
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	86 eb       	ldi	r24, 0xB6	; 182
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:208
  Wire.write((uint8_t)0x00); // 0x05
     846:	60 e0       	ldi	r22, 0x00	; 0
     848:	86 eb       	ldi	r24, 0xB6	; 182
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:209
  Wire.endTransmission();
     850:	86 eb       	ldi	r24, 0xB6	; 182
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 c2 06 	call	0xd84	; 0xd84 <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:211
  
  pinMode(LED1, OUTPUT); 
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	85 e1       	ldi	r24, 0x15	; 21
     85c:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:212
  digitalWrite(LED1, HIGH); 
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	85 e1       	ldi	r24, 0x15	; 21
     864:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:213
  delay(100);  
     868:	64 e6       	ldi	r22, 0x64	; 100
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:214
  Serial.println("#Hmmm...");
     874:	69 e3       	ldi	r22, 0x39	; 57
     876:	71 e0       	ldi	r23, 0x01	; 1
     878:	81 eb       	ldi	r24, 0xB1	; 177
     87a:	94 e0       	ldi	r25, 0x04	; 4
     87c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:215
  pinMode(LED2, OUTPUT); 
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	86 e1       	ldi	r24, 0x16	; 22
     884:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:216
  digitalWrite(LED2, HIGH); 
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	86 e1       	ldi	r24, 0x16	; 22
     88c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:217
  delay(100);  
     890:	64 e6       	ldi	r22, 0x64	; 100
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
     89c:	98 e0       	ldi	r25, 0x08	; 8
     89e:	f9 2e       	mov	r15, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:224
  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
    { 
      // measurement of ADC offset
      ADMUX = (analog_reference << 6) | 0b10001; // Select +A1,-A1 for offset correction
     8a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     8a4:	20 e4       	ldi	r18, 0x40	; 64
     8a6:	82 9f       	mul	r24, r18
     8a8:	c0 01       	movw	r24, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	81 61       	ori	r24, 0x11	; 17
     8ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:225
      delay(50);
     8b2:	62 e3       	ldi	r22, 0x32	; 50
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:226
      ADCSRB = 0;               // Switching ADC to Free Running mode
     8be:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:227
      sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     8c2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8c6:	80 62       	ori	r24, 0x20	; 32
     8c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:228
      sbi(ADCSRA, ADSC);        // ADC start the first conversions
     8cc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8d0:	80 64       	ori	r24, 0x40	; 64
     8d2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:229
      sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
     8d6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8da:	84 60       	ori	r24, 0x04	; 4
     8dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:230
      sbi(ADCSRA, 1);        
     8e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8e4:	82 60       	ori	r24, 0x02	; 2
     8e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:231
      sbi(ADCSRA, 0);        
     8ea:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8ee:	81 60       	ori	r24, 0x01	; 1
     8f0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:232
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     8f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8f8:	80 61       	ori	r24, 0x10	; 16
     8fa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:233
      while (bit_is_clear(ADCSRA, ADIF)); // wait for the first conversion 
     8fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     902:	84 ff       	sbrs	r24, 4
     904:	fc cf       	rjmp	.-8      	; 0x8fe <setup+0x292>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:234
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     906:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     90a:	80 61       	ori	r24, 0x10	; 16
     90c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:235
      lo = ADCL;
     910:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     914:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:236
      hi = ADCH;
     918:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     91c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:238
      // combine the two bytes
      u_sensor = (hi << 8) | (lo);
     920:	89 27       	eor	r24, r25
     922:	98 27       	eor	r25, r24
     924:	89 27       	eor	r24, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:240
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     926:	81 15       	cp	r24, r1
     928:	22 e0       	ldi	r18, 0x02	; 2
     92a:	92 07       	cpc	r25, r18
     92c:	08 f0       	brcs	.+2      	; 0x930 <setup+0x2c4>
     92e:	13 c1       	rjmp	.+550    	; 0xb56 <setup+0x4ea>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:240 (discriminator 1)
     930:	9e 5f       	subi	r25, 0xFE	; 254
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:240 (discriminator 2)
     932:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <u_sensor+0x1>
     936:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:241 (discriminator 2)
      DCoffset += u_sensor;
     93a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <u_sensor>
     93e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <u_sensor+0x1>
     942:	08 0f       	add	r16, r24
     944:	19 1f       	adc	r17, r25
     946:	fa 94       	dec	r15
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:221 (discriminator 2)
  digitalWrite(LED2, HIGH); 
  delay(100);  

  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
     948:	f1 10       	cpse	r15, r1
     94a:	aa cf       	rjmp	.-172    	; 0x8a0 <setup+0x234>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:243
      u_sensor = (hi << 8) | (lo);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
      DCoffset += u_sensor;
    }
    base_offset = DCoffset >> 3; // Calculate mean of 8 measurements
     94c:	83 e0       	ldi	r24, 0x03	; 3
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	8a 95       	dec	r24
     954:	e1 f7       	brne	.-8      	; 0x94e <setup+0x2e2>
     956:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <base_offset+0x1>
     95a:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <base_offset>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:246
  }

  pinMode(LED3, OUTPUT); 
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	87 e1       	ldi	r24, 0x17	; 23
     962:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:247
  digitalWrite(LED3, HIGH); 
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	87 e1       	ldi	r24, 0x17	; 23
     96a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:248
  delay(100);  
     96e:	64 e6       	ldi	r22, 0x64	; 100
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:251
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
     97a:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <base_offset>
     97e:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <base_offset+0x1>
     982:	4a e0       	ldi	r20, 0x0A	; 10
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <String::String(unsigned int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     98c:	62 e4       	ldi	r22, 0x42	; 66
     98e:	71 e0       	ldi	r23, 0x01	; 1
     990:	ce 01       	movw	r24, r28
     992:	4c 96       	adiw	r24, 0x1c	; 28
     994:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <String::String(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:251
     998:	6a ea       	ldi	r22, 0xAA	; 170
     99a:	71 e0       	ldi	r23, 0x01	; 1
     99c:	ce 01       	movw	r24, r28
     99e:	4c 96       	adiw	r24, 0x1c	; 28
     9a0:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <operator+(StringSumHelper const&, String const&)>
     9a4:	60 e5       	ldi	r22, 0x50	; 80
     9a6:	71 e0       	ldi	r23, 0x01	; 1
     9a8:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <operator+(StringSumHelper const&, char const*)>
     9ac:	be 01       	movw	r22, r28
     9ae:	6f 5f       	subi	r22, 0xFF	; 255
     9b0:	7f 4f       	sbci	r23, 0xFF	; 255
     9b2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <operator+(StringSumHelper const&, String const&)>
     9b6:	60 e5       	ldi	r22, 0x50	; 80
     9b8:	71 e0       	ldi	r23, 0x01	; 1
     9ba:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <operator+(StringSumHelper const&, char const*)>
     9be:	60 eb       	ldi	r22, 0xB0	; 176
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <operator+(StringSumHelper const&, String const&)>
     9c6:	60 e5       	ldi	r22, 0x50	; 80
     9c8:	71 e0       	ldi	r23, 0x01	; 1
     9ca:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <operator+(StringSumHelper const&, char const*)>
     9ce:	bc 01       	movw	r22, r24
     9d0:	ce 01       	movw	r24, r28
     9d2:	82 96       	adiw	r24, 0x22	; 34
     9d4:	0e 94 65 1e 	call	0x3cca	; 0x3cca <String::String(String const&)>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     9d8:	ce 01       	movw	r24, r28
     9da:	4c 96       	adiw	r24, 0x1c	; 28
     9dc:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:253
  
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
     9e8:	68 e5       	ldi	r22, 0x58	; 88
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	86 eb       	ldi	r24, 0xB6	; 182
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	0e 94 44 06 	call	0xc88	; 0xc88 <TwoWire::beginTransmission(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:254
  Wire.write((int)0x08); // MSB
     9f4:	68 e0       	ldi	r22, 0x08	; 8
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	86 eb       	ldi	r24, 0xB6	; 182
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 ba 00 	call	0x174	; 0x174 <TwoWire::write(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:255
  Wire.write((int)0x00); // LSB
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	86 eb       	ldi	r24, 0xB6	; 182
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 ba 00 	call	0x174	; 0x174 <TwoWire::write(int)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:256
  Wire.endTransmission();
     a0c:	86 eb       	ldi	r24, 0xB6	; 182
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	0e 94 c2 06 	call	0xd84	; 0xd84 <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:257
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
     a14:	40 e1       	ldi	r20, 0x10	; 16
     a16:	68 e5       	ldi	r22, 0x58	; 88
     a18:	86 eb       	ldi	r24, 0xB6	; 182
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 bc 06 	call	0xd78	; 0xd78 <TwoWire::requestFrom(unsigned char, unsigned char)>
     a20:	10 e1       	ldi	r17, 0x10	; 16
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:260
  for (int8_t reg=0; reg<16; reg++)
  { 
    uint8_t serialbyte = Wire.read(); // receive a byte
     a22:	86 eb       	ldi	r24, 0xB6	; 182
     a24:	91 e0       	ldi	r25, 0x01	; 1
     a26:	0e 94 b7 05 	call	0xb6e	; 0xb6e <TwoWire::read()>
     a2a:	08 2f       	mov	r16, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:261
    if (serialbyte<0x10) dataString += "0";
     a2c:	80 31       	cpi	r24, 0x10	; 16
     a2e:	30 f4       	brcc	.+12     	; 0xa3c <setup+0x3d0>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     a30:	62 e5       	ldi	r22, 0x52	; 82
     a32:	71 e0       	ldi	r23, 0x01	; 1
     a34:	ce 01       	movw	r24, r28
     a36:	82 96       	adiw	r24, 0x22	; 34
     a38:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <String::concat(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:262 (discriminator 2)
    dataString += String(serialbyte,HEX);    
     a3c:	40 e1       	ldi	r20, 0x10	; 16
     a3e:	60 2f       	mov	r22, r16
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <String::String(unsigned char, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113 (discriminator 2)
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     a48:	be 01       	movw	r22, r28
     a4a:	6f 5f       	subi	r22, 0xFF	; 255
     a4c:	7f 4f       	sbci	r23, 0xFF	; 255
     a4e:	ce 01       	movw	r24, r28
     a50:	82 96       	adiw	r24, 0x22	; 34
     a52:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <String::concat(String const&)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:262 (discriminator 2)
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:263 (discriminator 2)
    serialhash += serialbyte;
     a5e:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <serialhash>
     a62:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <serialhash+0x1>
     a66:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <serialhash+0x2>
     a6a:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <serialhash+0x3>
     a6e:	80 0f       	add	r24, r16
     a70:	91 1d       	adc	r25, r1
     a72:	a1 1d       	adc	r26, r1
     a74:	b1 1d       	adc	r27, r1
     a76:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <serialhash>
     a7a:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <serialhash+0x1>
     a7e:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <serialhash+0x2>
     a82:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <serialhash+0x3>
     a86:	11 50       	subi	r17, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:258 (discriminator 2)
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
  Wire.write((int)0x08); // MSB
  Wire.write((int)0x00); // LSB
  Wire.endTransmission();
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
  for (int8_t reg=0; reg<16; reg++)
     a88:	61 f6       	brne	.-104    	; 0xa22 <setup+0x3b6>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:267
    dataString += String(serialbyte,HEX);    
    serialhash += serialbyte;
  }

  {
    DDRB = 0b10111110;
     a8a:	8e eb       	ldi	r24, 0xBE	; 190
     a8c:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:268
    PORTB = 0b00001111;  // SDcard Power ON
     a8e:	8f e0       	ldi	r24, 0x0F	; 15
     a90:	85 b9       	out	0x05, r24	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:269
    if (SD.begin(SS)) 
     a92:	64 e0       	ldi	r22, 0x04	; 4
     a94:	88 e5       	ldi	r24, 0x58	; 88
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	0e 94 13 0a 	call	0x1426	; 0x1426 <SDLib::SDClass::begin(unsigned char)>
     a9c:	88 23       	and	r24, r24
     a9e:	d1 f0       	breq	.+52     	; 0xad4 <setup+0x468>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:273
    {
      // open the file. note that only one file can be open at a time,
      // so you have to close this one before opening another.
      File dataFile = SD.open("DATALOG.TXT", FILE_WRITE);
     aa0:	23 e1       	ldi	r18, 0x13	; 19
     aa2:	44 e2       	ldi	r20, 0x24	; 36
     aa4:	51 e0       	ldi	r21, 0x01	; 1
     aa6:	68 e5       	ldi	r22, 0x58	; 88
     aa8:	72 e0       	ldi	r23, 0x02	; 2
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	0e 94 33 0b 	call	0x1666	; 0x1666 <SDLib::SDClass::open(char const*, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:275
      // if the file is available, write to it:
      if (dataFile) 
     ab2:	ce 01       	movw	r24, r28
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	0e 94 07 0a 	call	0x140e	; 0x140e <SDLib::File::operator bool()>
     aba:	88 23       	and	r24, r24
     abc:	59 f0       	breq	.+22     	; 0xad4 <setup+0x468>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:277
      {
        dataFile.println(dataString);  // write to SDcard (800 ms) 
     abe:	be 01       	movw	r22, r28
     ac0:	6e 5d       	subi	r22, 0xDE	; 222
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	ce 01       	movw	r24, r28
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:278
        dataFile.close();
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <SDLib::File::close()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:281
      }  
    }  
    Serial.println(dataString);  // print SN to terminal 
     ad4:	be 01       	movw	r22, r28
     ad6:	6e 5d       	subi	r22, 0xDE	; 222
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	81 eb       	ldi	r24, 0xB1	; 177
     adc:	94 e0       	ldi	r25, 0x04	; 4
     ade:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:285
  }    

  
  pinMode(LED1, OUTPUT); 
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	85 e1       	ldi	r24, 0x15	; 21
     ae6:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:286
  digitalWrite(LED1, LOW); 
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	85 e1       	ldi	r24, 0x15	; 21
     aee:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:287
  delay(100);  
     af2:	64 e6       	ldi	r22, 0x64	; 100
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:288
  pinMode(LED2, OUTPUT); 
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	86 e1       	ldi	r24, 0x16	; 22
     b02:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:289
  digitalWrite(LED2, LOW); 
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	86 e1       	ldi	r24, 0x16	; 22
     b0a:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:290
  delay(100);  
     b0e:	64 e6       	ldi	r22, 0x64	; 100
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:291
  pinMode(LED3, OUTPUT); 
     b1a:	61 e0       	ldi	r22, 0x01	; 1
     b1c:	87 e1       	ldi	r24, 0x17	; 23
     b1e:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:292
  digitalWrite(LED3, LOW); 
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	87 e1       	ldi	r24, 0x17	; 23
     b26:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:293
  delay(100);  
     b2a:	64 e6       	ldi	r22, 0x64	; 100
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:251
  pinMode(LED3, OUTPUT); 
  digitalWrite(LED3, HIGH); 
  delay(100);  
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
     b36:	ce 01       	movw	r24, r28
     b38:	82 96       	adiw	r24, 0x22	; 34
     b3a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:294
  digitalWrite(LED2, LOW); 
  delay(100);  
  pinMode(LED3, OUTPUT); 
  digitalWrite(LED3, LOW); 
  delay(100);  
}
     b3e:	a7 96       	adiw	r28, 0x27	; 39
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	ff 90       	pop	r15
     b54:	08 95       	ret
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512_SD/LABDOS512_SD.ino:240 (discriminator 2)
      lo = ADCL;
      hi = ADCH;
      // combine the two bytes
      u_sensor = (hi << 8) | (lo);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     b56:	92 50       	subi	r25, 0x02	; 2
     b58:	ec ce       	rjmp	.-552    	; 0x932 <setup+0x2c6>

00000b5a <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:378

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	08 95       	ret

00000b60 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
     b60:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <TwoWire::rxBufferLength>
     b64:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <TwoWire::rxBufferIndex>
     b68:	89 1b       	sub	r24, r25
     b6a:	99 0b       	sbc	r25, r25
     b6c:	08 95       	ret

00000b6e <TwoWire::read()>:
_ZN7TwoWire4readEv():
     b6e:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <TwoWire::rxBufferIndex>
     b72:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <TwoWire::rxBufferLength>
     b76:	2f ef       	ldi	r18, 0xFF	; 255
     b78:	3f ef       	ldi	r19, 0xFF	; 255
     b7a:	98 17       	cp	r25, r24
     b7c:	48 f4       	brcc	.+18     	; 0xb90 <TwoWire::read()+0x22>
     b7e:	e9 2f       	mov	r30, r25
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	e8 51       	subi	r30, 0x18	; 24
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	20 81       	ld	r18, Z
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	9f 5f       	subi	r25, 0xFF	; 255
     b8c:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <TwoWire::rxBufferIndex>
     b90:	c9 01       	movw	r24, r18
     b92:	08 95       	ret

00000b94 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
     b94:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <TwoWire::rxBufferIndex>
     b98:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <TwoWire::rxBufferLength>
     b9c:	e8 17       	cp	r30, r24
     b9e:	30 f4       	brcc	.+12     	; 0xbac <TwoWire::peek()+0x18>
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	e8 51       	subi	r30, 0x18	; 24
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	80 81       	ld	r24, Z
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	08 95       	ret
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	9f ef       	ldi	r25, 0xFF	; 255
     bb0:	08 95       	ret

00000bb2 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
     bb2:	08 95       	ret

00000bb4 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	1f 92       	push	r1
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	69 83       	std	Y+1, r22	; 0x01
     bc0:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <TwoWire::transmitting>
     bc4:	22 23       	and	r18, r18
     bc6:	f9 f0       	breq	.+62     	; 0xc06 <TwoWire::write(unsigned char)+0x52>
     bc8:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <TwoWire::txBufferLength>
     bcc:	20 32       	cpi	r18, 0x20	; 32
     bce:	58 f0       	brcs	.+22     	; 0xbe6 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
     bd0:	21 e0       	ldi	r18, 0x01	; 1
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	fc 01       	movw	r30, r24
     bd6:	33 83       	std	Z+3, r19	; 0x03
     bd8:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	0f 90       	pop	r0
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	08 95       	ret
     be6:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <TwoWire::txBufferIndex>
     bea:	e8 2f       	mov	r30, r24
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	eb 53       	subi	r30, 0x3B	; 59
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	99 81       	ldd	r25, Y+1	; 0x01
     bf4:	90 83       	st	Z, r25
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <TwoWire::txBufferIndex>
     bfc:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <TwoWire::txBufferLength>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	ec cf       	rjmp	.-40     	; 0xbde <TwoWire::write(unsigned char)+0x2a>
     c06:	61 e0       	ldi	r22, 0x01	; 1
     c08:	ce 01       	movw	r24, r28
     c0a:	01 96       	adiw	r24, 0x01	; 1
     c0c:	0e 94 79 07 	call	0xef2	; 0xef2 <twi_transmit>
     c10:	f7 cf       	rjmp	.-18     	; 0xc00 <TwoWire::write(unsigned char)+0x4c>

00000c12 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
     c12:	cf 92       	push	r12
     c14:	df 92       	push	r13
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	7c 01       	movw	r14, r24
     c24:	cb 01       	movw	r24, r22
     c26:	8a 01       	movw	r16, r20
     c28:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <TwoWire::transmitting>
     c2c:	22 23       	and	r18, r18
     c2e:	89 f0       	breq	.+34     	; 0xc52 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     c30:	eb 01       	movw	r28, r22
     c32:	6b 01       	movw	r12, r22
     c34:	c4 0e       	add	r12, r20
     c36:	d5 1e       	adc	r13, r21
     c38:	cc 15       	cp	r28, r12
     c3a:	dd 05       	cpc	r29, r13
     c3c:	69 f0       	breq	.+26     	; 0xc58 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
     c3e:	69 91       	ld	r22, Y+
     c40:	d7 01       	movw	r26, r14
     c42:	ed 91       	ld	r30, X+
     c44:	fc 91       	ld	r31, X
     c46:	01 90       	ld	r0, Z+
     c48:	f0 81       	ld	r31, Z
     c4a:	e0 2d       	mov	r30, r0
     c4c:	c7 01       	movw	r24, r14
     c4e:	09 95       	icall
     c50:	f3 cf       	rjmp	.-26     	; 0xc38 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
     c52:	64 2f       	mov	r22, r20
     c54:	0e 94 79 07 	call	0xef2	; 0xef2 <twi_transmit>
     c58:	c8 01       	movw	r24, r16
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	08 95       	ret

00000c6c <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
     c6c:	cb 01       	movw	r24, r22
     c6e:	ba 01       	movw	r22, r20
     c70:	0c 94 d6 06 	jmp	0xdac	; 0xdac <twi_setFrequency>

00000c74 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <TwoWire::transmitting>
     c7a:	60 93 e5 01 	sts	0x01E5, r22	; 0x8001e5 <TwoWire::txAddress>
     c7e:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <TwoWire::txBufferIndex>
     c82:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <TwoWire::txBufferLength>
     c86:	08 95       	ret

00000c88 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
     c88:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <TwoWire::beginTransmission(unsigned char)>

00000c8c <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
     c8c:	0f 93       	push	r16
     c8e:	06 2f       	mov	r16, r22
     c90:	21 e0       	ldi	r18, 0x01	; 1
     c92:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <TwoWire::txBufferLength>
     c96:	65 ec       	ldi	r22, 0xC5	; 197
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <TwoWire::txAddress>
     c9e:	0e 94 29 07 	call	0xe52	; 0xe52 <twi_writeTo>
     ca2:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <TwoWire::txBufferIndex>
     ca6:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <TwoWire::txBufferLength>
     caa:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <TwoWire::transmitting>
     cae:	0f 91       	pop	r16
     cb0:	08 95       	ret

00000cb2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
     cb2:	4f 92       	push	r4
     cb4:	5f 92       	push	r5
     cb6:	6f 92       	push	r6
     cb8:	7f 92       	push	r7
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	cf 92       	push	r12
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	5c 01       	movw	r10, r24
     cce:	f6 2e       	mov	r15, r22
     cd0:	d4 2f       	mov	r29, r20
     cd2:	28 01       	movw	r4, r16
     cd4:	39 01       	movw	r6, r18
     cd6:	ee 20       	and	r14, r14
     cd8:	19 f1       	breq	.+70     	; 0xd20 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
     cda:	0e 94 3a 06 	call	0xc74	; 0xc74 <TwoWire::beginTransmission(unsigned char)>
     cde:	ce 2d       	mov	r28, r14
     ce0:	c4 30       	cpi	r28, 0x04	; 4
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
     ce4:	c3 e0       	ldi	r28, 0x03	; 3
     ce6:	c1 50       	subi	r28, 0x01	; 1
     ce8:	b8 f0       	brcs	.+46     	; 0xd18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
     cea:	28 e0       	ldi	r18, 0x08	; 8
     cec:	c2 9f       	mul	r28, r18
     cee:	c0 01       	movw	r24, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	a3 01       	movw	r20, r6
     cf4:	92 01       	movw	r18, r4
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
     cf8:	56 95       	lsr	r21
     cfa:	47 95       	ror	r20
     cfc:	37 95       	ror	r19
     cfe:	27 95       	ror	r18
     d00:	8a 95       	dec	r24
     d02:	d2 f7       	brpl	.-12     	; 0xcf8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
     d04:	b9 01       	movw	r22, r18
     d06:	d5 01       	movw	r26, r10
     d08:	ed 91       	ld	r30, X+
     d0a:	fc 91       	ld	r31, X
     d0c:	01 90       	ld	r0, Z+
     d0e:	f0 81       	ld	r31, Z
     d10:	e0 2d       	mov	r30, r0
     d12:	c5 01       	movw	r24, r10
     d14:	09 95       	icall
     d16:	e7 cf       	rjmp	.-50     	; 0xce6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	c5 01       	movw	r24, r10
     d1c:	0e 94 46 06 	call	0xc8c	; 0xc8c <TwoWire::endTransmission(unsigned char)>
     d20:	4d 2f       	mov	r20, r29
     d22:	d1 32       	cpi	r29, 0x21	; 33
     d24:	08 f0       	brcs	.+2      	; 0xd28 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
     d26:	40 e2       	ldi	r20, 0x20	; 32
     d28:	2c 2d       	mov	r18, r12
     d2a:	68 ee       	ldi	r22, 0xE8	; 232
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	8f 2d       	mov	r24, r15
     d30:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <twi_readFrom>
     d34:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <TwoWire::rxBufferIndex>
     d38:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <TwoWire::rxBufferLength>
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	cf 90       	pop	r12
     d4a:	bf 90       	pop	r11
     d4c:	af 90       	pop	r10
     d4e:	7f 90       	pop	r7
     d50:	6f 90       	pop	r6
     d52:	5f 90       	pop	r5
     d54:	4f 90       	pop	r4
     d56:	08 95       	ret

00000d58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
     d58:	cf 92       	push	r12
     d5a:	ef 92       	push	r14
     d5c:	0f 93       	push	r16
     d5e:	1f 93       	push	r17
     d60:	c2 2e       	mov	r12, r18
     d62:	e1 2c       	mov	r14, r1
     d64:	00 e0       	ldi	r16, 0x00	; 0
     d66:	10 e0       	ldi	r17, 0x00	; 0
     d68:	98 01       	movw	r18, r16
     d6a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ef 90       	pop	r14
     d74:	cf 90       	pop	r12
     d76:	08 95       	ret

00000d78 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
     d78:	21 e0       	ldi	r18, 0x01	; 1
     d7a:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00000d7e <TwoWire::requestFrom(int, int)>:
_ZN7TwoWire11requestFromEii():
     d7e:	21 e0       	ldi	r18, 0x01	; 1
     d80:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00000d84 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
     d84:	61 e0       	ldi	r22, 0x01	; 1
     d86:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <TwoWire::endTransmission(unsigned char)>

00000d8a <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d8a:	e6 eb       	ldi	r30, 0xB6	; 182
     d8c:	f1 e0       	ldi	r31, 0x01	; 1
     d8e:	13 82       	std	Z+3, r1	; 0x03
     d90:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     d92:	88 ee       	ldi	r24, 0xE8	; 232
     d94:	93 e0       	ldi	r25, 0x03	; 3
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	84 83       	std	Z+4, r24	; 0x04
     d9c:	95 83       	std	Z+5, r25	; 0x05
     d9e:	a6 83       	std	Z+6, r26	; 0x06
     da0:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:53
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     da2:	88 e5       	ldi	r24, 0x58	; 88
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:382
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     daa:	08 95       	ret

00000dac <twi_setFrequency>:
twi_setFrequency():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:531
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	72 e1       	ldi	r23, 0x12	; 18
     db4:	8a e7       	ldi	r24, 0x7A	; 122
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
     dbc:	20 51       	subi	r18, 0x10	; 16
     dbe:	31 09       	sbc	r19, r1
     dc0:	41 09       	sbc	r20, r1
     dc2:	51 09       	sbc	r21, r1
     dc4:	56 95       	lsr	r21
     dc6:	47 95       	ror	r20
     dc8:	37 95       	ror	r19
     dca:	27 95       	ror	r18
     dcc:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     dd0:	08 95       	ret

00000dd2 <twi_readFrom>:
twi_readFrom():
     dd2:	41 32       	cpi	r20, 0x21	; 33
     dd4:	e0 f5       	brcc	.+120    	; 0xe4e <twi_readFrom+0x7c>
     dd6:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <twi_state>
     dda:	91 11       	cpse	r25, r1
     ddc:	fc cf       	rjmp	.-8      	; 0xdd6 <twi_readFrom+0x4>
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <twi_state>
     de4:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <twi_sendStop>
     de8:	2f ef       	ldi	r18, 0xFF	; 255
     dea:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <twi_error>
     dee:	70 93 4f 02 	sts	0x024F, r23	; 0x80024f <twi_masterBuffer+0x1>
     df2:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <twi_masterBuffer>
     df6:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_masterBufferIndex>
     dfa:	24 0f       	add	r18, r20
     dfc:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <twi_masterBufferLength>
     e00:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <twi_slarw>
     e04:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <twi_slarw>
     e08:	88 0f       	add	r24, r24
     e0a:	89 2b       	or	r24, r25
     e0c:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <twi_slarw>
     e10:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <twi_inRepStart>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	c9 f4       	brne	.+50     	; 0xe4a <twi_readFrom+0x78>
     e18:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <twi_inRepStart>
     e1c:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi_slarw>
     e20:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     e24:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e28:	83 fd       	sbrc	r24, 3
     e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <twi_readFrom+0x4a>
     e2c:	85 ec       	ldi	r24, 0xC5	; 197
     e2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e32:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi_state>
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	e1 f3       	breq	.-8      	; 0xe32 <twi_readFrom+0x60>
     e3a:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <twi_masterBufferIndex>
     e3e:	84 17       	cp	r24, r20
     e40:	10 f4       	brcc	.+4      	; 0xe46 <twi_readFrom+0x74>
     e42:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <twi_masterBufferIndex>
     e46:	84 2f       	mov	r24, r20
     e48:	08 95       	ret
     e4a:	85 ee       	ldi	r24, 0xE5	; 229
     e4c:	f0 cf       	rjmp	.-32     	; 0xe2e <twi_readFrom+0x5c>
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	fa cf       	rjmp	.-12     	; 0xe46 <twi_readFrom+0x74>

00000e52 <twi_writeTo>:
twi_writeTo():
     e52:	0f 93       	push	r16
     e54:	41 32       	cpi	r20, 0x21	; 33
     e56:	08 f0       	brcs	.+2      	; 0xe5a <twi_writeTo+0x8>
     e58:	44 c0       	rjmp	.+136    	; 0xee2 <twi_writeTo+0x90>
     e5a:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <twi_state>
     e5e:	91 11       	cpse	r25, r1
     e60:	fc cf       	rjmp	.-8      	; 0xe5a <twi_writeTo+0x8>
     e62:	92 e0       	ldi	r25, 0x02	; 2
     e64:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <twi_state>
     e68:	00 93 55 02 	sts	0x0255, r16	; 0x800255 <twi_sendStop>
     e6c:	9f ef       	ldi	r25, 0xFF	; 255
     e6e:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <twi_error>
     e72:	70 93 4f 02 	sts	0x024F, r23	; 0x80024f <twi_masterBuffer+0x1>
     e76:	60 93 4e 02 	sts	0x024E, r22	; 0x80024e <twi_masterBuffer>
     e7a:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <twi_masterBufferIndex>
     e7e:	40 93 4c 02 	sts	0x024C, r20	; 0x80024c <twi_masterBufferLength>
     e82:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <twi_slarw>
     e86:	90 91 56 02 	lds	r25, 0x0256	; 0x800256 <twi_slarw>
     e8a:	88 0f       	add	r24, r24
     e8c:	89 2b       	or	r24, r25
     e8e:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <twi_slarw>
     e92:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <twi_inRepStart>
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	11 f5       	brne	.+68     	; 0xede <twi_writeTo+0x8c>
     e9a:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <twi_inRepStart>
     e9e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi_slarw>
     ea2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     ea6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     eaa:	83 fd       	sbrc	r24, 3
     eac:	f8 cf       	rjmp	.-16     	; 0xe9e <twi_writeTo+0x4c>
     eae:	85 ec       	ldi	r24, 0xC5	; 197
     eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     eb4:	22 23       	and	r18, r18
     eb6:	21 f0       	breq	.+8      	; 0xec0 <twi_writeTo+0x6e>
     eb8:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <twi_state>
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	d1 f3       	breq	.-12     	; 0xeb4 <twi_writeTo+0x62>
     ec0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <twi_error>
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	79 f0       	breq	.+30     	; 0xee6 <twi_writeTo+0x94>
     ec8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <twi_error>
     ecc:	80 32       	cpi	r24, 0x20	; 32
     ece:	69 f0       	breq	.+26     	; 0xeea <twi_writeTo+0x98>
     ed0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <twi_error>
     ed4:	80 33       	cpi	r24, 0x30	; 48
     ed6:	59 f0       	breq	.+22     	; 0xeee <twi_writeTo+0x9c>
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret
     ede:	85 ee       	ldi	r24, 0xE5	; 229
     ee0:	e7 cf       	rjmp	.-50     	; 0xeb0 <twi_writeTo+0x5e>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	fa cf       	rjmp	.-12     	; 0xeda <twi_writeTo+0x88>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	f8 cf       	rjmp	.-16     	; 0xeda <twi_writeTo+0x88>
     eea:	82 e0       	ldi	r24, 0x02	; 2
     eec:	f6 cf       	rjmp	.-20     	; 0xeda <twi_writeTo+0x88>
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	f4 cf       	rjmp	.-24     	; 0xeda <twi_writeTo+0x88>

00000ef2 <twi_transmit>:
twi_transmit():
     ef2:	20 91 2a 02 	lds	r18, 0x022A	; 0x80022a <twi_txBufferLength>
     ef6:	26 0f       	add	r18, r22
     ef8:	33 27       	eor	r19, r19
     efa:	33 1f       	adc	r19, r19
     efc:	21 32       	cpi	r18, 0x21	; 33
     efe:	31 05       	cpc	r19, r1
     f00:	ec f4       	brge	.+58     	; 0xf3c <twi_transmit+0x4a>
     f02:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <twi_state>
     f06:	fc 01       	movw	r30, r24
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	24 30       	cpi	r18, 0x04	; 4
     f0e:	69 f0       	breq	.+26     	; 0xf2a <twi_transmit+0x38>
     f10:	82 e0       	ldi	r24, 0x02	; 2
     f12:	08 95       	ret
     f14:	a0 91 2a 02 	lds	r26, 0x022A	; 0x80022a <twi_txBufferLength>
     f18:	21 91       	ld	r18, Z+
     f1a:	ac 01       	movw	r20, r24
     f1c:	44 5d       	subi	r20, 0xD4	; 212
     f1e:	5d 4f       	sbci	r21, 0xFD	; 253
     f20:	a4 0f       	add	r26, r20
     f22:	b5 2f       	mov	r27, r21
     f24:	b1 1d       	adc	r27, r1
     f26:	2c 93       	st	X, r18
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	86 17       	cp	r24, r22
     f2c:	98 f3       	brcs	.-26     	; 0xf14 <twi_transmit+0x22>
     f2e:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_txBufferLength>
     f32:	68 0f       	add	r22, r24
     f34:	60 93 2a 02 	sts	0x022A, r22	; 0x80022a <twi_txBufferLength>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	08 95       	ret
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	08 95       	ret

00000f40 <twi_stop>:
twi_stop():
     f40:	85 ed       	ldi	r24, 0xD5	; 213
     f42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f4a:	84 fd       	sbrc	r24, 4
     f4c:	fc cf       	rjmp	.-8      	; 0xf46 <twi_stop+0x6>
     f4e:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi_state>
     f52:	08 95       	ret

00000f54 <twi_releaseBus>:
twi_releaseBus():
     f54:	85 ec       	ldi	r24, 0xC5	; 197
     f56:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f5a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi_state>
     f5e:	08 95       	ret

00000f60 <__vector_26>:
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:534

ISR(TWI_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	0b b6       	in	r0, 0x3b	; 59
     f6c:	0f 92       	push	r0
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
     f86:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     f8a:	88 7f       	andi	r24, 0xF8	; 248
     f8c:	80 36       	cpi	r24, 0x60	; 96
     f8e:	09 f4       	brne	.+2      	; 0xf92 <__vector_26+0x32>
     f90:	4e c0       	rjmp	.+156    	; 0x102e <__vector_26+0xce>
     f92:	08 f0       	brcs	.+2      	; 0xf96 <__vector_26+0x36>
     f94:	41 c0       	rjmp	.+130    	; 0x1018 <__vector_26+0xb8>
     f96:	88 32       	cpi	r24, 0x28	; 40
     f98:	09 f4       	brne	.+2      	; 0xf9c <__vector_26+0x3c>
     f9a:	aa c0       	rjmp	.+340    	; 0x10f0 <__vector_26+0x190>
     f9c:	28 f5       	brcc	.+74     	; 0xfe8 <__vector_26+0x88>
     f9e:	80 31       	cpi	r24, 0x10	; 16
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__vector_26+0x44>
     fa2:	9e c0       	rjmp	.+316    	; 0x10e0 <__vector_26+0x180>
     fa4:	c8 f4       	brcc	.+50     	; 0xfd8 <__vector_26+0x78>
     fa6:	88 23       	and	r24, r24
     fa8:	09 f4       	brne	.+2      	; 0xfac <__vector_26+0x4c>
     faa:	07 c1       	rjmp	.+526    	; 0x11ba <__vector_26+0x25a>
     fac:	88 30       	cpi	r24, 0x08	; 8
     fae:	09 f4       	brne	.+2      	; 0xfb2 <__vector_26+0x52>
     fb0:	97 c0       	rjmp	.+302    	; 0x10e0 <__vector_26+0x180>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     fb2:	ff 91       	pop	r31
     fb4:	ef 91       	pop	r30
     fb6:	bf 91       	pop	r27
     fb8:	af 91       	pop	r26
     fba:	9f 91       	pop	r25
     fbc:	8f 91       	pop	r24
     fbe:	7f 91       	pop	r23
     fc0:	6f 91       	pop	r22
     fc2:	5f 91       	pop	r21
     fc4:	4f 91       	pop	r20
     fc6:	3f 91       	pop	r19
     fc8:	2f 91       	pop	r18
     fca:	0f 90       	pop	r0
     fcc:	0b be       	out	0x3b, r0	; 59
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     fd8:	88 31       	cpi	r24, 0x18	; 24
     fda:	09 f4       	brne	.+2      	; 0xfde <__vector_26+0x7e>
     fdc:	89 c0       	rjmp	.+274    	; 0x10f0 <__vector_26+0x190>
     fde:	80 32       	cpi	r24, 0x20	; 32
     fe0:	41 f7       	brne	.-48     	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     fe2:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <twi_error>
     fe6:	15 c0       	rjmp	.+42     	; 0x1012 <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     fe8:	80 34       	cpi	r24, 0x40	; 64
     fea:	09 f4       	brne	.+2      	; 0xfee <__vector_26+0x8e>
     fec:	a6 c0       	rjmp	.+332    	; 0x113a <__vector_26+0x1da>
     fee:	48 f4       	brcc	.+18     	; 0x1002 <__vector_26+0xa2>
     ff0:	80 33       	cpi	r24, 0x30	; 48
     ff2:	b9 f3       	breq	.-18     	; 0xfe2 <__vector_26+0x82>
     ff4:	88 33       	cpi	r24, 0x38	; 56
     ff6:	e9 f6       	brne	.-70     	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     ff8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <twi_error>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:575
      twi_releaseBus();
     ffc:	0e 94 aa 07 	call	0xf54	; 0xf54 <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:576
      break;
    1000:	d8 cf       	rjmp	.-80     	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1002:	80 35       	cpi	r24, 0x50	; 80
    1004:	09 f4       	brne	.+2      	; 0x1008 <__vector_26+0xa8>
    1006:	89 c0       	rjmp	.+274    	; 0x111a <__vector_26+0x1ba>
    1008:	88 35       	cpi	r24, 0x58	; 88
    100a:	09 f4       	brne	.+2      	; 0x100e <__vector_26+0xae>
    100c:	9e c0       	rjmp	.+316    	; 0x114a <__vector_26+0x1ea>
    100e:	88 34       	cpi	r24, 0x48	; 72
    1010:	81 f6       	brne	.-96     	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1012:	0e 94 a0 07 	call	0xf40	; 0xf40 <twi_stop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
      break;
  }
}
    1016:	cd cf       	rjmp	.-102    	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1018:	88 39       	cpi	r24, 0x98	; 152
    101a:	09 f4       	brne	.+2      	; 0x101e <__vector_26+0xbe>
    101c:	94 c0       	rjmp	.+296    	; 0x1146 <__vector_26+0x1e6>
    101e:	38 f5       	brcc	.+78     	; 0x106e <__vector_26+0x10e>
    1020:	88 37       	cpi	r24, 0x78	; 120
    1022:	29 f0       	breq	.+10     	; 0x102e <__vector_26+0xce>
    1024:	50 f4       	brcc	.+20     	; 0x103a <__vector_26+0xda>
    1026:	88 36       	cpi	r24, 0x68	; 104
    1028:	11 f0       	breq	.+4      	; 0x102e <__vector_26+0xce>
    102a:	80 37       	cpi	r24, 0x70	; 112
    102c:	11 f6       	brne	.-124    	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1034:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <twi_rxBufferIndex>
    1038:	57 c0       	rjmp	.+174    	; 0x10e8 <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    103a:	88 38       	cpi	r24, 0x88	; 136
    103c:	09 f4       	brne	.+2      	; 0x1040 <__vector_26+0xe0>
    103e:	83 c0       	rjmp	.+262    	; 0x1146 <__vector_26+0x1e6>
    1040:	80 39       	cpi	r24, 0x90	; 144
    1042:	19 f0       	breq	.+6      	; 0x104a <__vector_26+0xea>
    1044:	80 38       	cpi	r24, 0x80	; 128
    1046:	09 f0       	breq	.+2      	; 0x104a <__vector_26+0xea>
    1048:	b4 cf       	rjmp	.-152    	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    104a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <twi_rxBufferIndex>
    104e:	80 32       	cpi	r24, 0x20	; 32
    1050:	08 f0       	brcs	.+2      	; 0x1054 <__vector_26+0xf4>
    1052:	79 c0       	rjmp	.+242    	; 0x1146 <__vector_26+0x1e6>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1054:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <twi_rxBufferIndex>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	8e 0f       	add	r24, r30
    105c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <twi_rxBufferIndex>
    1060:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	e6 5f       	subi	r30, 0xF6	; 246
    1068:	fd 4f       	sbci	r31, 0xFD	; 253
    106a:	80 83       	st	Z, r24
    106c:	3d c0       	rjmp	.+122    	; 0x10e8 <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    106e:	80 3b       	cpi	r24, 0xB0	; 176
    1070:	39 f0       	breq	.+14     	; 0x1080 <__vector_26+0x120>
    1072:	e0 f4       	brcc	.+56     	; 0x10ac <__vector_26+0x14c>
    1074:	80 3a       	cpi	r24, 0xA0	; 160
    1076:	09 f4       	brne	.+2      	; 0x107a <__vector_26+0x11a>
    1078:	85 c0       	rjmp	.+266    	; 0x1184 <__vector_26+0x224>
    107a:	88 3a       	cpi	r24, 0xA8	; 168
    107c:	09 f0       	breq	.+2      	; 0x1080 <__vector_26+0x120>
    107e:	99 cf       	rjmp	.-206    	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1080:	84 e0       	ldi	r24, 0x04	; 4
    1082:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1086:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <twi_txBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    108a:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    108e:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <twi_onSlaveTransmit>
    1092:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <twi_onSlaveTransmit+0x1>
    1096:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1098:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_txBufferLength>
    109c:	81 11       	cpse	r24, r1
    109e:	0f c0       	rjmp	.+30     	; 0x10be <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    10a6:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <twi_txBuffer>
    10aa:	09 c0       	rjmp	.+18     	; 0x10be <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    10ac:	80 3c       	cpi	r24, 0xC0	; 192
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <__vector_26+0x152>
    10b0:	82 c0       	rjmp	.+260    	; 0x11b6 <__vector_26+0x256>
    10b2:	88 3c       	cpi	r24, 0xC8	; 200
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <__vector_26+0x158>
    10b6:	7f c0       	rjmp	.+254    	; 0x11b6 <__vector_26+0x256>
    10b8:	88 3b       	cpi	r24, 0xB8	; 184
    10ba:	09 f0       	breq	.+2      	; 0x10be <__vector_26+0x15e>
    10bc:	7a cf       	rjmp	.-268    	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    10be:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <twi_txBufferIndex>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	8e 0f       	add	r24, r30
    10c6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <twi_txBufferIndex>
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	e4 5d       	subi	r30, 0xD4	; 212
    10ce:	fd 4f       	sbci	r31, 0xFD	; 253
    10d0:	80 81       	ld	r24, Z
    10d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    10d6:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <twi_txBufferIndex>
    10da:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <twi_txBufferLength>
    10de:	31 c0       	rjmp	.+98     	; 0x1142 <__vector_26+0x1e2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    10e0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <twi_slarw>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    10e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    10e8:	85 ec       	ldi	r24, 0xC5	; 197
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    10ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    10ee:	61 cf       	rjmp	.-318    	; 0xfb2 <__vector_26+0x52>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    10f0:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <twi_masterBufferIndex>
    10f4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <twi_masterBufferLength>
    10f8:	98 17       	cp	r25, r24
    10fa:	b8 f5       	brcc	.+110    	; 0x116a <__vector_26+0x20a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    10fc:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <twi_masterBuffer>
    1100:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <twi_masterBuffer+0x1>
    1104:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <twi_masterBufferIndex>
    1108:	21 e0       	ldi	r18, 0x01	; 1
    110a:	2e 0f       	add	r18, r30
    110c:	20 93 4d 02 	sts	0x024D, r18	; 0x80024d <twi_masterBufferIndex>
    1110:	e8 0f       	add	r30, r24
    1112:	f9 2f       	mov	r31, r25
    1114:	f1 1d       	adc	r31, r1
    1116:	80 81       	ld	r24, Z
    1118:	e5 cf       	rjmp	.-54     	; 0x10e4 <__vector_26+0x184>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    111a:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <twi_masterBuffer>
    111e:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <twi_masterBuffer+0x1>
    1122:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <twi_masterBufferIndex>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	8e 0f       	add	r24, r30
    112a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <twi_masterBufferIndex>
    112e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1132:	e2 0f       	add	r30, r18
    1134:	f3 2f       	mov	r31, r19
    1136:	f1 1d       	adc	r31, r1
    1138:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    113a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <twi_masterBufferIndex>
    113e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <twi_masterBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1142:	98 17       	cp	r25, r24
    1144:	88 f2       	brcs	.-94     	; 0x10e8 <__vector_26+0x188>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1146:	85 e8       	ldi	r24, 0x85	; 133
    1148:	d0 cf       	rjmp	.-96     	; 0x10ea <__vector_26+0x18a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    114a:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <twi_masterBuffer>
    114e:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <twi_masterBuffer+0x1>
    1152:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <twi_masterBufferIndex>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	8e 0f       	add	r24, r30
    115a:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <twi_masterBufferIndex>
    115e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1162:	e2 0f       	add	r30, r18
    1164:	f3 2f       	mov	r31, r19
    1166:	f1 1d       	adc	r31, r1
    1168:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    116a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <twi_sendStop>
    116e:	81 11       	cpse	r24, r1
    1170:	50 cf       	rjmp	.-352    	; 0x1012 <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <twi_inRepStart>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1178:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    117a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    117e:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:686
      break;
    1182:	17 cf       	rjmp	.-466    	; 0xfb2 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    1184:	0e 94 aa 07 	call	0xf54	; 0xf54 <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1188:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <twi_rxBufferIndex>
    118c:	80 32       	cpi	r24, 0x20	; 32
    118e:	30 f4       	brcc	.+12     	; 0x119c <__vector_26+0x23c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1190:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <twi_rxBufferIndex>
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	e6 5f       	subi	r30, 0xF6	; 246
    1198:	fd 4f       	sbci	r31, 0xFD	; 253
    119a:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    119c:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <twi_rxBufferIndex>
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	e0 91 50 02 	lds	r30, 0x0250	; 0x800250 <twi_onSlaveReceive>
    11a6:	f0 91 51 02 	lds	r31, 0x0251	; 0x800251 <twi_onSlaveReceive+0x1>
    11aa:	8a e0       	ldi	r24, 0x0A	; 10
    11ac:	92 e0       	ldi	r25, 0x02	; 2
    11ae:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    11b0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <twi_rxBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:644
      break;
    11b4:	fe ce       	rjmp	.-516    	; 0xfb2 <__vector_26+0x52>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    11b6:	85 ec       	ldi	r24, 0xC5	; 197
    11b8:	e0 cf       	rjmp	.-64     	; 0x117a <__vector_26+0x21a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    11ba:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <twi_error>
    11be:	29 cf       	rjmp	.-430    	; 0x1012 <__vector_26+0xb2>

000011c0 <SDLib::File::write(unsigned char)>:
_ZN5SDLib4File5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:115

boolean File::seek(uint32_t pos) {
  if (! _file) return false;

  return _file->seekSet(pos);
}
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	1f 92       	push	r1
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	69 83       	std	Y+1, r22	; 0x01
    11cc:	dc 01       	movw	r26, r24
    11ce:	ed 91       	ld	r30, X+
    11d0:	fc 91       	ld	r31, X
    11d2:	02 80       	ldd	r0, Z+2	; 0x02
    11d4:	f3 81       	ldd	r31, Z+3	; 0x03
    11d6:	e0 2d       	mov	r30, r0
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	be 01       	movw	r22, r28
    11de:	6f 5f       	subi	r22, 0xFF	; 255
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	09 95       	icall
    11e4:	0f 90       	pop	r0
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	08 95       	ret

000011ec <SDLib::File::write(unsigned char const*, unsigned int)>:
_ZN5SDLib4File5writeEPKhj():
    11ec:	cf 93       	push	r28
    11ee:	df 93       	push	r29
    11f0:	ec 01       	movw	r28, r24
    11f2:	e9 8d       	ldd	r30, Y+25	; 0x19
    11f4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    11f6:	30 97       	sbiw	r30, 0x00	; 0
    11f8:	49 f4       	brne	.+18     	; 0x120c <SDLib::File::write(unsigned char const*, unsigned int)+0x20>
_ZN5Print13setWriteErrorEi():
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	9b 83       	std	Y+3, r25	; 0x03
    1200:	8a 83       	std	Y+2, r24	; 0x02
_ZN5SDLib4File5writeEPKhj():
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret
_ZN5Print13setWriteErrorEi():
    120c:	13 82       	std	Z+3, r1	; 0x03
    120e:	12 82       	std	Z+2, r1	; 0x02
_ZN5SDLib4File5writeEPKhj():
    1210:	89 8d       	ldd	r24, Y+25	; 0x19
    1212:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1214:	0e 94 60 14 	call	0x28c0	; 0x28c0 <SdFile::write(void const*, unsigned int)>
    1218:	e9 8d       	ldd	r30, Y+25	; 0x19
    121a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    121c:	22 81       	ldd	r18, Z+2	; 0x02
    121e:	33 81       	ldd	r19, Z+3	; 0x03
    1220:	23 2b       	or	r18, r19
    1222:	59 f7       	brne	.-42     	; 0x11fa <SDLib::File::write(unsigned char const*, unsigned int)+0xe>
    1224:	f0 cf       	rjmp	.-32     	; 0x1206 <SDLib::File::write(unsigned char const*, unsigned int)+0x1a>

00001226 <SDLib::File::flush()>:
_ZN5SDLib4File5flushEv():
    1226:	fc 01       	movw	r30, r24
    1228:	81 8d       	ldd	r24, Z+25	; 0x19
    122a:	92 8d       	ldd	r25, Z+26	; 0x1a
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	11 f0       	breq	.+4      	; 0x1234 <SDLib::File::flush()+0xe>
    1230:	0c 94 ef 11 	jmp	0x23de	; 0x23de <SdFile::sync()>
    1234:	08 95       	ret

00001236 <SdFile::read()>:
_ZN6SdFile4readEv():
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	1f 92       	push	r1
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	50 e0       	ldi	r21, 0x00	; 0
    1244:	be 01       	movw	r22, r28
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	0e 94 13 10 	call	0x2026	; 0x2026 <SdFile::read(void*, unsigned int)>
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	31 f4       	brne	.+12     	; 0x125e <SdFile::read()+0x28>
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret
    125e:	8f ef       	ldi	r24, 0xFF	; 255
    1260:	9f ef       	ldi	r25, 0xFF	; 255
    1262:	f9 cf       	rjmp	.-14     	; 0x1256 <SdFile::read()+0x20>

00001264 <SDLib::File::read()>:
_ZN5SDLib4File4readEv():
    1264:	fc 01       	movw	r30, r24
    1266:	81 8d       	ldd	r24, Z+25	; 0x19
    1268:	92 8d       	ldd	r25, Z+26	; 0x1a
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	11 f0       	breq	.+4      	; 0x1272 <SDLib::File::read()+0xe>
    126e:	0c 94 1b 09 	jmp	0x1236	; 0x1236 <SdFile::read()>
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	9f ef       	ldi	r25, 0xFF	; 255
    1276:	08 95       	ret

00001278 <SDLib::File::peek()>:
_ZN5SDLib4File4peekEv():
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
    1282:	89 8d       	ldd	r24, Y+25	; 0x19
    1284:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1286:	10 e0       	ldi	r17, 0x00	; 0
    1288:	00 e0       	ldi	r16, 0x00	; 0
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	99 f0       	breq	.+38     	; 0x12b4 <SDLib::File::peek()+0x3c>
    128e:	0e 94 1b 09 	call	0x1236	; 0x1236 <SdFile::read()>
    1292:	8c 01       	movw	r16, r24
    1294:	0f 3f       	cpi	r16, 0xFF	; 255
    1296:	10 07       	cpc	r17, r16
    1298:	69 f0       	breq	.+26     	; 0x12b4 <SDLib::File::peek()+0x3c>
    129a:	89 8d       	ldd	r24, Y+25	; 0x19
    129c:	9a 8d       	ldd	r25, Y+26	; 0x1a
_ZN6SdFile7seekCurEm():
    129e:	fc 01       	movw	r30, r24
    12a0:	42 85       	ldd	r20, Z+10	; 0x0a
    12a2:	53 85       	ldd	r21, Z+11	; 0x0b
    12a4:	64 85       	ldd	r22, Z+12	; 0x0c
    12a6:	75 85       	ldd	r23, Z+13	; 0x0d
    12a8:	41 50       	subi	r20, 0x01	; 1
    12aa:	51 09       	sbc	r21, r1
    12ac:	61 09       	sbc	r22, r1
    12ae:	71 09       	sbc	r23, r1
    12b0:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <SdFile::seekSet(unsigned long)>
_ZN5SDLib4File4peekEv():
    12b4:	c8 01       	movw	r24, r16
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	08 95       	ret

000012c0 <SDLib::File::File(SdFile, char const*)>:
_ZN5SDLib4FileC2E6SdFilePKc():
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	ec 01       	movw	r28, r24
    12ce:	7b 01       	movw	r14, r22
    12d0:	8a 01       	movw	r16, r20
_ZN5PrintC4Ev():
    12d2:	1b 82       	std	Y+3, r1	; 0x03
    12d4:	1a 82       	std	Y+2, r1	; 0x02
_ZN6StreamC4Ev():
    12d6:	88 ee       	ldi	r24, 0xE8	; 232
    12d8:	93 e0       	ldi	r25, 0x03	; 3
    12da:	a0 e0       	ldi	r26, 0x00	; 0
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	8c 83       	std	Y+4, r24	; 0x04
    12e0:	9d 83       	std	Y+5, r25	; 0x05
    12e2:	ae 83       	std	Y+6, r26	; 0x06
    12e4:	bf 83       	std	Y+7, r27	; 0x07
_ZN5SDLib4FileC2E6SdFilePKc():
    12e6:	8a e6       	ldi	r24, 0x6A	; 106
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	99 83       	std	Y+1, r25	; 0x01
    12ec:	88 83       	st	Y, r24
    12ee:	8d e1       	ldi	r24, 0x1D	; 29
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 c6 20 	call	0x418c	; 0x418c <malloc>
    12f6:	9a 8f       	std	Y+26, r25	; 0x1a
    12f8:	89 8f       	std	Y+25, r24	; 0x19
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	79 f0       	breq	.+30     	; 0x131c <SDLib::File::File(SdFile, char const*)+0x5c>
    12fe:	2d e1       	ldi	r18, 0x1D	; 29
    1300:	f7 01       	movw	r30, r14
    1302:	dc 01       	movw	r26, r24
    1304:	01 90       	ld	r0, Z+
    1306:	0d 92       	st	X+, r0
    1308:	2a 95       	dec	r18
    130a:	e1 f7       	brne	.-8      	; 0x1304 <SDLib::File::File(SdFile, char const*)+0x44>
    130c:	4c e0       	ldi	r20, 0x0C	; 12
    130e:	50 e0       	ldi	r21, 0x00	; 0
    1310:	b8 01       	movw	r22, r16
    1312:	ce 01       	movw	r24, r28
    1314:	0c 96       	adiw	r24, 0x0c	; 12
    1316:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <strncpy>
    131a:	18 8e       	std	Y+24, r1	; 0x18
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	08 95       	ret

0000132a <SDLib::File::File()>:
_ZN5SDLib4FileC2Ev():
    132a:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    132c:	13 82       	std	Z+3, r1	; 0x03
    132e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
    1330:	88 ee       	ldi	r24, 0xE8	; 232
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	84 83       	std	Z+4, r24	; 0x04
    133a:	95 83       	std	Z+5, r25	; 0x05
    133c:	a6 83       	std	Z+6, r26	; 0x06
    133e:	b7 83       	std	Z+7, r27	; 0x07
_ZN5SDLib4FileC2Ev():
    1340:	8a e6       	ldi	r24, 0x6A	; 106
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	80 83       	st	Z, r24
    1348:	12 8e       	std	Z+26, r1	; 0x1a
    134a:	11 8e       	std	Z+25, r1	; 0x19
    134c:	14 86       	std	Z+12, r1	; 0x0c
    134e:	08 95       	ret

00001350 <SDLib::File::position()>:
_ZN5SDLib4File8positionEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:118

uint32_t File::position() {
  if (! _file) return -1;
    1350:	dc 01       	movw	r26, r24
    1352:	59 96       	adiw	r26, 0x19	; 25
    1354:	ed 91       	ld	r30, X+
    1356:	fc 91       	ld	r31, X
    1358:	30 97       	sbiw	r30, 0x00	; 0
    135a:	29 f0       	breq	.+10     	; 0x1366 <SDLib::File::position()+0x16>
_ZNK6SdFile11curPositionEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:161
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
    135c:	62 85       	ldd	r22, Z+10	; 0x0a
    135e:	73 85       	ldd	r23, Z+11	; 0x0b
    1360:	84 85       	ldd	r24, Z+12	; 0x0c
    1362:	95 85       	ldd	r25, Z+13	; 0x0d
_ZN5SDLib4File8positionEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:119
  return _file->curPosition();
    1364:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:118

  return _file->seekSet(pos);
}

uint32_t File::position() {
  if (! _file) return -1;
    1366:	6f ef       	ldi	r22, 0xFF	; 255
    1368:	7f ef       	ldi	r23, 0xFF	; 255
    136a:	cb 01       	movw	r24, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:120
  return _file->curPosition();
}
    136c:	08 95       	ret

0000136e <SDLib::File::size()>:
_ZN5SDLib4File4sizeEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:123

uint32_t File::size() {
  if (! _file) return 0;
    136e:	dc 01       	movw	r26, r24
    1370:	59 96       	adiw	r26, 0x19	; 25
    1372:	ed 91       	ld	r30, X+
    1374:	fc 91       	ld	r31, X
    1376:	30 97       	sbiw	r30, 0x00	; 0
    1378:	29 f0       	breq	.+10     	; 0x1384 <SDLib::File::size()+0x16>
_ZNK6SdFile8fileSizeEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:208
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
    137a:	63 89       	ldd	r22, Z+19	; 0x13
    137c:	74 89       	ldd	r23, Z+20	; 0x14
    137e:	85 89       	ldd	r24, Z+21	; 0x15
    1380:	96 89       	ldd	r25, Z+22	; 0x16
_ZN5SDLib4File4sizeEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:124
  return _file->fileSize();
    1382:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:123
  if (! _file) return -1;
  return _file->curPosition();
}

uint32_t File::size() {
  if (! _file) return 0;
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	cb 01       	movw	r24, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:125
  return _file->fileSize();
}
    138a:	08 95       	ret

0000138c <SDLib::File::available()>:
_ZN5SDLib4File9availableEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:98
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:99
  if (! _file) return 0;
    1398:	fc 01       	movw	r30, r24
    139a:	21 8d       	ldd	r18, Z+25	; 0x19
    139c:	32 8d       	ldd	r19, Z+26	; 0x1a
    139e:	23 2b       	or	r18, r19
    13a0:	09 f1       	breq	.+66     	; 0x13e4 <SDLib::File::available()+0x58>
    13a2:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:101

  uint32_t n = size() - position();
    13a4:	0e 94 b7 09 	call	0x136e	; 0x136e <SDLib::File::size()>
    13a8:	6b 01       	movw	r12, r22
    13aa:	7c 01       	movw	r14, r24
    13ac:	ce 01       	movw	r24, r28
    13ae:	0e 94 a8 09 	call	0x1350	; 0x1350 <SDLib::File::position()>
    13b2:	a7 01       	movw	r20, r14
    13b4:	96 01       	movw	r18, r12
    13b6:	26 1b       	sub	r18, r22
    13b8:	37 0b       	sbc	r19, r23
    13ba:	48 0b       	sbc	r20, r24
    13bc:	59 0b       	sbc	r21, r25
    13be:	da 01       	movw	r26, r20
    13c0:	c9 01       	movw	r24, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:103

  return n > 0X7FFF ? 0X7FFF : n;
    13c2:	81 15       	cp	r24, r1
    13c4:	30 e8       	ldi	r19, 0x80	; 128
    13c6:	93 07       	cpc	r25, r19
    13c8:	a1 05       	cpc	r26, r1
    13ca:	b1 05       	cpc	r27, r1
    13cc:	20 f0       	brcs	.+8      	; 0x13d6 <SDLib::File::available()+0x4a>
    13ce:	8f ef       	ldi	r24, 0xFF	; 255
    13d0:	9f e7       	ldi	r25, 0x7F	; 127
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:104
}
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:99
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
  if (! _file) return 0;
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	f6 cf       	rjmp	.-20     	; 0x13d6 <SDLib::File::available()+0x4a>

000013ea <SDLib::File::close()>:
_ZN5SDLib4File5closeEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:127
uint32_t File::size() {
  if (! _file) return 0;
  return _file->fileSize();
}

void File::close() {
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:128
  if (_file) {
    13f0:	89 8d       	ldd	r24, Y+25	; 0x19
    13f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	41 f0       	breq	.+16     	; 0x1408 <SDLib::File::close()+0x1e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:129
    _file->close();
    13f8:	0e 94 38 12 	call	0x2470	; 0x2470 <SdFile::close()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:130
    free(_file); 
    13fc:	89 8d       	ldd	r24, Y+25	; 0x19
    13fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1400:	0e 94 62 21 	call	0x42c4	; 0x42c4 <free>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:131
    _file = 0;
    1404:	1a 8e       	std	Y+26, r1	; 0x1a
    1406:	19 8e       	std	Y+25, r1	; 0x19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:139
    nfilecount--;
    Serial.print("Deleted ");
    Serial.println(nfilecount, DEC);
    */
  }
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	08 95       	ret

0000140e <SDLib::File::operator bool()>:
_ZN5SDLib4FilecvbEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:142

File::operator bool() {
  if (_file) 
    140e:	dc 01       	movw	r26, r24
    1410:	59 96       	adiw	r26, 0x19	; 25
    1412:	ed 91       	ld	r30, X+
    1414:	fc 91       	ld	r31, X
    1416:	30 97       	sbiw	r30, 0x00	; 0
    1418:	21 f0       	breq	.+8      	; 0x1422 <SDLib::File::operator bool()+0x14>
_ZNK6SdFile6isOpenEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:216
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	95 81       	ldd	r25, Z+5	; 0x05
    141e:	91 11       	cpse	r25, r1
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <SDLib::File::operator bool()+0x16>
_ZN5SDLib4FilecvbEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:144
    return  _file->isOpen();
  return false;
    1422:	80 e0       	ldi	r24, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/File.cpp:145
}
    1424:	08 95       	ret

00001426 <SDLib::SDClass::begin(unsigned char)>:
_ZN5SDLib7SDClass5beginEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/SD.cpp:620
}

void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	ec 01       	movw	r28, r24
    1430:	16 2f       	mov	r17, r22
    1432:	8f a5       	ldd	r24, Y+47	; 0x2f
    1434:	88 23       	and	r24, r24
    1436:	21 f0       	breq	.+8      	; 0x1440 <SDLib::SDClass::begin(unsigned char)+0x1a>
    1438:	ce 01       	movw	r24, r28
    143a:	8a 96       	adiw	r24, 0x2a	; 42
    143c:	0e 94 38 12 	call	0x2470	; 0x2470 <SdFile::close()>
    1440:	41 2f       	mov	r20, r17
    1442:	61 e0       	ldi	r22, 0x01	; 1
    1444:	ce 01       	movw	r24, r28
    1446:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <Sd2Card::init(unsigned char, unsigned char)>
    144a:	81 11       	cpse	r24, r1
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <SDLib::SDClass::begin(unsigned char)+0x2c>
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	12 c0       	rjmp	.+36     	; 0x1476 <SDLib::SDClass::begin(unsigned char)+0x50>
    1452:	8e 01       	movw	r16, r28
    1454:	04 5f       	subi	r16, 0xF4	; 244
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
_ZN8SdVolume4initEP7Sd2Card():
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	be 01       	movw	r22, r28
    145c:	c8 01       	movw	r24, r16
    145e:	0e 94 9a 19 	call	0x3334	; 0x3334 <SdVolume::init(Sd2Card*, unsigned char)>
    1462:	88 23       	and	r24, r24
    1464:	71 f0       	breq	.+28     	; 0x1482 <SDLib::SDClass::begin(unsigned char)+0x5c>
_ZN6SdFile8openRootER8SdVolume():
    1466:	b8 01       	movw	r22, r16
    1468:	ce 01       	movw	r24, r28
    146a:	8a 96       	adiw	r24, 0x2a	; 42
    146c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <SdFile::openRoot(SdVolume*)>
_ZN5SDLib7SDClass5beginEh():
    1470:	91 e0       	ldi	r25, 0x01	; 1
    1472:	88 23       	and	r24, r24
    1474:	61 f3       	breq	.-40     	; 0x144e <SDLib::SDClass::begin(unsigned char)+0x28>
    1476:	89 2f       	mov	r24, r25
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret
_ZN8SdVolume4initEP7Sd2Card():
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	be 01       	movw	r22, r28
    1486:	c8 01       	movw	r24, r16
    1488:	0e 94 9a 19 	call	0x3334	; 0x3334 <SdVolume::init(Sd2Card*, unsigned char)>
_ZN5SDLib7SDClass5beginEh():
    148c:	88 23       	and	r24, r24
    148e:	f9 f2       	breq	.-66     	; 0x144e <SDLib::SDClass::begin(unsigned char)+0x28>
    1490:	ea cf       	rjmp	.-44     	; 0x1466 <SDLib::SDClass::begin(unsigned char)+0x40>

00001492 <SdFile::SdFile(SdFile const&)>:
_ZN6SdFileC2ERKS_():
    1492:	fc 01       	movw	r30, r24
    1494:	db 01       	movw	r26, r22
_ZN5PrintC4ERKS_():
    1496:	12 96       	adiw	r26, 0x02	; 2
    1498:	8d 91       	ld	r24, X+
    149a:	9c 91       	ld	r25, X
    149c:	13 97       	sbiw	r26, 0x03	; 3
    149e:	93 83       	std	Z+3, r25	; 0x03
    14a0:	82 83       	std	Z+2, r24	; 0x02
_ZN6SdFileC2ERKS_():
    14a2:	8e e7       	ldi	r24, 0x7E	; 126
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
    14aa:	14 96       	adiw	r26, 0x04	; 4
    14ac:	8c 91       	ld	r24, X
    14ae:	14 97       	sbiw	r26, 0x04	; 4
    14b0:	84 83       	std	Z+4, r24	; 0x04
    14b2:	15 96       	adiw	r26, 0x05	; 5
    14b4:	8c 91       	ld	r24, X
    14b6:	15 97       	sbiw	r26, 0x05	; 5
    14b8:	85 83       	std	Z+5, r24	; 0x05
    14ba:	16 96       	adiw	r26, 0x06	; 6
    14bc:	4d 91       	ld	r20, X+
    14be:	5d 91       	ld	r21, X+
    14c0:	6d 91       	ld	r22, X+
    14c2:	7c 91       	ld	r23, X
    14c4:	19 97       	sbiw	r26, 0x09	; 9
    14c6:	46 83       	std	Z+6, r20	; 0x06
    14c8:	57 83       	std	Z+7, r21	; 0x07
    14ca:	60 87       	std	Z+8, r22	; 0x08
    14cc:	71 87       	std	Z+9, r23	; 0x09
    14ce:	1a 96       	adiw	r26, 0x0a	; 10
    14d0:	4d 91       	ld	r20, X+
    14d2:	5d 91       	ld	r21, X+
    14d4:	6d 91       	ld	r22, X+
    14d6:	7c 91       	ld	r23, X
    14d8:	1d 97       	sbiw	r26, 0x0d	; 13
    14da:	42 87       	std	Z+10, r20	; 0x0a
    14dc:	53 87       	std	Z+11, r21	; 0x0b
    14de:	64 87       	std	Z+12, r22	; 0x0c
    14e0:	75 87       	std	Z+13, r23	; 0x0d
    14e2:	1e 96       	adiw	r26, 0x0e	; 14
    14e4:	4d 91       	ld	r20, X+
    14e6:	5d 91       	ld	r21, X+
    14e8:	6d 91       	ld	r22, X+
    14ea:	7c 91       	ld	r23, X
    14ec:	51 97       	sbiw	r26, 0x11	; 17
    14ee:	46 87       	std	Z+14, r20	; 0x0e
    14f0:	57 87       	std	Z+15, r21	; 0x0f
    14f2:	60 8b       	std	Z+16, r22	; 0x10
    14f4:	71 8b       	std	Z+17, r23	; 0x11
    14f6:	52 96       	adiw	r26, 0x12	; 18
    14f8:	8c 91       	ld	r24, X
    14fa:	52 97       	sbiw	r26, 0x12	; 18
    14fc:	82 8b       	std	Z+18, r24	; 0x12
    14fe:	53 96       	adiw	r26, 0x13	; 19
    1500:	4d 91       	ld	r20, X+
    1502:	5d 91       	ld	r21, X+
    1504:	6d 91       	ld	r22, X+
    1506:	7c 91       	ld	r23, X
    1508:	56 97       	sbiw	r26, 0x16	; 22
    150a:	43 8b       	std	Z+19, r20	; 0x13
    150c:	54 8b       	std	Z+20, r21	; 0x14
    150e:	65 8b       	std	Z+21, r22	; 0x15
    1510:	76 8b       	std	Z+22, r23	; 0x16
    1512:	57 96       	adiw	r26, 0x17	; 23
    1514:	4d 91       	ld	r20, X+
    1516:	5d 91       	ld	r21, X+
    1518:	6d 91       	ld	r22, X+
    151a:	7c 91       	ld	r23, X
    151c:	5a 97       	sbiw	r26, 0x1a	; 26
    151e:	47 8b       	std	Z+23, r20	; 0x17
    1520:	50 8f       	std	Z+24, r21	; 0x18
    1522:	61 8f       	std	Z+25, r22	; 0x19
    1524:	72 8f       	std	Z+26, r23	; 0x1a
    1526:	5b 96       	adiw	r26, 0x1b	; 27
    1528:	8d 91       	ld	r24, X+
    152a:	9c 91       	ld	r25, X
    152c:	94 8f       	std	Z+28, r25	; 0x1c
    152e:	83 8f       	std	Z+27, r24	; 0x1b
    1530:	08 95       	ret

00001532 <SDLib::SDClass::getParentDir(char const*, int*)>:
_ZN5SDLib7SDClass12getParentDirEPKcPi():
    1532:	4f 92       	push	r4
    1534:	5f 92       	push	r5
    1536:	6f 92       	push	r6
    1538:	7f 92       	push	r7
    153a:	8f 92       	push	r8
    153c:	9f 92       	push	r9
    153e:	af 92       	push	r10
    1540:	bf 92       	push	r11
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	c7 54       	subi	r28, 0x47	; 71
    1558:	d1 09       	sbc	r29, r1
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	5c 01       	movw	r10, r24
    1566:	4a 01       	movw	r8, r20
    1568:	39 01       	movw	r6, r18
    156a:	66 5d       	subi	r22, 0xD6	; 214
    156c:	7f 4f       	sbci	r23, 0xFF	; 255
    156e:	7e 01       	movw	r14, r28
    1570:	8e e1       	ldi	r24, 0x1E	; 30
    1572:	e8 0e       	add	r14, r24
    1574:	f1 1c       	adc	r15, r1
    1576:	c7 01       	movw	r24, r14
    1578:	0e 94 49 0a 	call	0x1492	; 0x1492 <SdFile::SdFile(SdFile const&)>
_ZN5PrintC4Ev():
    157c:	1c 82       	std	Y+4, r1	; 0x04
    157e:	1b 82       	std	Y+3, r1	; 0x03
_ZN6SdFileC4Ev():
    1580:	8e e7       	ldi	r24, 0x7E	; 126
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	1e 82       	std	Y+6, r1	; 0x06
    158a:	84 01       	movw	r16, r8
_ZN5SDLib7SDClass12getParentDirEPKcPi():
    158c:	fe 01       	movw	r30, r28
    158e:	31 96       	adiw	r30, 0x01	; 1
    1590:	6f 01       	movw	r12, r30
    1592:	5e 2c       	mov	r5, r14
    1594:	4f 2c       	mov	r4, r15
    1596:	6f e2       	ldi	r22, 0x2F	; 47
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	c8 01       	movw	r24, r16
    159c:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <strchr>
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <SDLib::SDClass::getParentDir(char const*, int*)+0x74>
    15a4:	55 c0       	rjmp	.+170    	; 0x1650 <SDLib::SDClass::getParentDir(char const*, int*)+0x11e>
    15a6:	f8 01       	movw	r30, r16
    15a8:	20 81       	ld	r18, Z
    15aa:	2f 32       	cpi	r18, 0x2F	; 47
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <SDLib::SDClass::getParentDir(char const*, int*)+0x82>
    15ae:	0f 5f       	subi	r16, 0xFF	; 255
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	f1 cf       	rjmp	.-30     	; 0x1596 <SDLib::SDClass::getParentDir(char const*, int*)+0x64>
    15b4:	80 1b       	sub	r24, r16
    15b6:	8d 30       	cpi	r24, 0x0D	; 13
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <SDLib::SDClass::getParentDir(char const*, int*)+0x8a>
    15ba:	8c e0       	ldi	r24, 0x0C	; 12
    15bc:	e8 2e       	mov	r14, r24
    15be:	f1 2c       	mov	r15, r1
    15c0:	a7 01       	movw	r20, r14
    15c2:	b8 01       	movw	r22, r16
    15c4:	ce 01       	movw	r24, r28
    15c6:	cb 96       	adiw	r24, 0x3b	; 59
    15c8:	0e 94 f4 22 	call	0x45e8	; 0x45e8 <strncpy>
    15cc:	eb e3       	ldi	r30, 0x3B	; 59
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	ec 0f       	add	r30, r28
    15d2:	fd 1f       	adc	r31, r29
    15d4:	ee 0d       	add	r30, r14
    15d6:	ff 1d       	adc	r31, r15
    15d8:	10 82       	st	Z, r1
    15da:	c6 01       	movw	r24, r12
    15dc:	0e 94 38 12 	call	0x2470	; 0x2470 <SdFile::close()>
    15e0:	21 e0       	ldi	r18, 0x01	; 1
    15e2:	ae 01       	movw	r20, r28
    15e4:	45 5c       	subi	r20, 0xC5	; 197
    15e6:	5f 4f       	sbci	r21, 0xFF	; 255
    15e8:	65 2d       	mov	r22, r5
    15ea:	74 2d       	mov	r23, r4
    15ec:	c6 01       	movw	r24, r12
    15ee:	0e 94 73 13 	call	0x26e6	; 0x26e6 <SdFile::open(SdFile*, char const*, unsigned char)>
    15f2:	81 11       	cpse	r24, r1
    15f4:	21 c0       	rjmp	.+66     	; 0x1638 <SDLib::SDClass::getParentDir(char const*, int*)+0x106>
_ZN5PrintC4Ev():
    15f6:	f5 01       	movw	r30, r10
    15f8:	13 82       	std	Z+3, r1	; 0x03
    15fa:	12 82       	std	Z+2, r1	; 0x02
_ZN6SdFileC4Ev():
    15fc:	8e e7       	ldi	r24, 0x7E	; 126
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	91 83       	std	Z+1, r25	; 0x01
    1602:	80 83       	st	Z, r24
    1604:	15 82       	std	Z+5, r1	; 0x05
_ZN5SDLib7SDClass12getParentDirEPKcPi():
    1606:	c5 01       	movw	r24, r10
    1608:	c9 5b       	subi	r28, 0xB9	; 185
    160a:	df 4f       	sbci	r29, 0xFF	; 255
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	cf 90       	pop	r12
    1626:	bf 90       	pop	r11
    1628:	af 90       	pop	r10
    162a:	9f 90       	pop	r9
    162c:	8f 90       	pop	r8
    162e:	7f 90       	pop	r7
    1630:	6f 90       	pop	r6
    1632:	5f 90       	pop	r5
    1634:	4f 90       	pop	r4
    1636:	08 95       	ret
    1638:	0e 0d       	add	r16, r14
    163a:	1f 1d       	adc	r17, r15
    163c:	85 2d       	mov	r24, r5
    163e:	94 2d       	mov	r25, r4
    1640:	0e 94 38 12 	call	0x2470	; 0x2470 <SdFile::close()>
    1644:	c2 01       	movw	r24, r4
    1646:	5c 2c       	mov	r5, r12
    1648:	4d 2c       	mov	r4, r13
    164a:	c9 2e       	mov	r12, r25
    164c:	d8 2e       	mov	r13, r24
    164e:	a3 cf       	rjmp	.-186    	; 0x1596 <SDLib::SDClass::getParentDir(char const*, int*)+0x64>
    1650:	08 19       	sub	r16, r8
    1652:	19 09       	sbc	r17, r9
    1654:	f3 01       	movw	r30, r6
    1656:	11 83       	std	Z+1, r17	; 0x01
    1658:	00 83       	st	Z, r16
    165a:	65 2d       	mov	r22, r5
    165c:	74 2d       	mov	r23, r4
    165e:	c5 01       	movw	r24, r10
    1660:	0e 94 49 0a 	call	0x1492	; 0x1492 <SdFile::SdFile(SdFile const&)>
    1664:	d0 cf       	rjmp	.-96     	; 0x1606 <SDLib::SDClass::getParentDir(char const*, int*)+0xd4>

00001666 <SDLib::SDClass::open(char const*, unsigned char)>:
_ZN5SDLib7SDClass4openEPKch():
    1666:	af 92       	push	r10
    1668:	bf 92       	push	r11
    166a:	cf 92       	push	r12
    166c:	df 92       	push	r13
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	c9 55       	subi	r28, 0x59	; 89
    167e:	d1 09       	sbc	r29, r1
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	6c 01       	movw	r12, r24
    168c:	5b 01       	movw	r10, r22
    168e:	8a 01       	movw	r16, r20
    1690:	f2 2e       	mov	r15, r18
    1692:	9e 01       	movw	r18, r28
    1694:	28 5a       	subi	r18, 0xA8	; 168
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	ce 01       	movw	r24, r28
    169a:	cb 96       	adiw	r24, 0x3b	; 59
    169c:	0e 94 99 0a 	call	0x1532	; 0x1532 <SDLib::SDClass::getParentDir(char const*, int*)>
    16a0:	6a 96       	adiw	r28, 0x1a	; 26
    16a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    16a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    16a6:	6a 97       	sbiw	r28, 0x1a	; 26
    16a8:	08 0f       	add	r16, r24
    16aa:	19 1f       	adc	r17, r25
    16ac:	f8 01       	movw	r30, r16
    16ae:	80 81       	ld	r24, Z
    16b0:	81 11       	cpse	r24, r1
    16b2:	10 c0       	rjmp	.+32     	; 0x16d4 <SDLib::SDClass::open(char const*, unsigned char)+0x6e>
    16b4:	be 01       	movw	r22, r28
    16b6:	65 5c       	subi	r22, 0xC5	; 197
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	ce 01       	movw	r24, r28
    16bc:	01 96       	adiw	r24, 0x01	; 1
    16be:	0e 94 49 0a 	call	0x1492	; 0x1492 <SdFile::SdFile(SdFile const&)>
    16c2:	48 e7       	ldi	r20, 0x78	; 120
    16c4:	51 e0       	ldi	r21, 0x01	; 1
    16c6:	be 01       	movw	r22, r28
    16c8:	6f 5f       	subi	r22, 0xFF	; 255
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255
    16cc:	c6 01       	movw	r24, r12
    16ce:	0e 94 60 09 	call	0x12c0	; 0x12c0 <SDLib::File::File(SdFile, char const*)>
    16d2:	0f c0       	rjmp	.+30     	; 0x16f2 <SDLib::SDClass::open(char const*, unsigned char)+0x8c>
_ZN5PrintC4Ev():
    16d4:	19 a2       	std	Y+33, r1	; 0x21
    16d6:	18 a2       	std	Y+32, r1	; 0x20
_ZN6SdFileC4Ev():
    16d8:	8e e7       	ldi	r24, 0x7E	; 126
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	9f 8f       	std	Y+31, r25	; 0x1f
    16de:	8e 8f       	std	Y+30, r24	; 0x1e
    16e0:	1b a2       	std	Y+35, r1	; 0x23
    16e2:	21 96       	adiw	r28, 0x01	; 1
    16e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    16e6:	21 97       	sbiw	r28, 0x01	; 1
_ZN5SDLib7SDClass4openEPKch():
    16e8:	81 11       	cpse	r24, r1
    16ea:	15 c0       	rjmp	.+42     	; 0x1716 <SDLib::SDClass::open(char const*, unsigned char)+0xb0>
    16ec:	c6 01       	movw	r24, r12
    16ee:	0e 94 95 09 	call	0x132a	; 0x132a <SDLib::File::File()>
    16f2:	c6 01       	movw	r24, r12
    16f4:	c7 5a       	subi	r28, 0xA7	; 167
    16f6:	df 4f       	sbci	r29, 0xFF	; 255
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	08 95       	ret
_ZNK6SdFile6isRootEv():
    1716:	82 50       	subi	r24, 0x02	; 2
_ZN5SDLib7SDClass4openEPKch():
    1718:	82 30       	cpi	r24, 0x02	; 2
    171a:	f8 f4       	brcc	.+62     	; 0x175a <SDLib::SDClass::open(char const*, unsigned char)+0xf4>
    171c:	b5 01       	movw	r22, r10
    171e:	66 5d       	subi	r22, 0xD6	; 214
    1720:	7f 4f       	sbci	r23, 0xFF	; 255
_ZN6SdFile4openERS_PKch():
    1722:	2f 2d       	mov	r18, r15
    1724:	a8 01       	movw	r20, r16
    1726:	ce 01       	movw	r24, r28
    1728:	4e 96       	adiw	r24, 0x1e	; 30
    172a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <SdFile::open(SdFile*, char const*, unsigned char)>
_ZN5SDLib7SDClass4openEPKch():
    172e:	88 23       	and	r24, r24
    1730:	e9 f2       	breq	.-70     	; 0x16ec <SDLib::SDClass::open(char const*, unsigned char)+0x86>
    1732:	8f 2d       	mov	r24, r15
    1734:	86 70       	andi	r24, 0x06	; 6
    1736:	41 f0       	breq	.+16     	; 0x1748 <SDLib::SDClass::open(char const*, unsigned char)+0xe2>
    1738:	49 a9       	ldd	r20, Y+49	; 0x31
    173a:	5a a9       	ldd	r21, Y+50	; 0x32
    173c:	6b a9       	ldd	r22, Y+51	; 0x33
    173e:	7c a9       	ldd	r23, Y+52	; 0x34
    1740:	ce 01       	movw	r24, r28
    1742:	4e 96       	adiw	r24, 0x1e	; 30
    1744:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <SdFile::seekSet(unsigned long)>
    1748:	be 01       	movw	r22, r28
    174a:	62 5e       	subi	r22, 0xE2	; 226
    174c:	7f 4f       	sbci	r23, 0xFF	; 255
    174e:	ce 01       	movw	r24, r28
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	0e 94 49 0a 	call	0x1492	; 0x1492 <SdFile::SdFile(SdFile const&)>
    1756:	a8 01       	movw	r20, r16
    1758:	b6 cf       	rjmp	.-148    	; 0x16c6 <SDLib::SDClass::open(char const*, unsigned char)+0x60>
_ZN6SdFile4openERS_PKch():
    175a:	2f 2d       	mov	r18, r15
    175c:	a8 01       	movw	r20, r16
    175e:	be 01       	movw	r22, r28
    1760:	65 5c       	subi	r22, 0xC5	; 197
    1762:	7f 4f       	sbci	r23, 0xFF	; 255
    1764:	ce 01       	movw	r24, r28
    1766:	4e 96       	adiw	r24, 0x1e	; 30
    1768:	0e 94 73 13 	call	0x26e6	; 0x26e6 <SdFile::open(SdFile*, char const*, unsigned char)>
_ZN5SDLib7SDClass4openEPKch():
    176c:	88 23       	and	r24, r24
    176e:	09 f4       	brne	.+2      	; 0x1772 <SDLib::SDClass::open(char const*, unsigned char)+0x10c>
    1770:	bd cf       	rjmp	.-134    	; 0x16ec <SDLib::SDClass::open(char const*, unsigned char)+0x86>
    1772:	ce 01       	movw	r24, r28
    1774:	cb 96       	adiw	r24, 0x3b	; 59
    1776:	0e 94 38 12 	call	0x2470	; 0x2470 <SdFile::close()>
    177a:	db cf       	rjmp	.-74     	; 0x1732 <SDLib::SDClass::open(char const*, unsigned char)+0xcc>

0000177c <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
_ZN7Sd2CardC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/Sd2Card.h:169
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    177c:	e8 e5       	ldi	r30, 0x58	; 88
    177e:	f2 e0       	ldi	r31, 0x02	; 2
    1780:	15 82       	std	Z+5, r1	; 0x05
    1782:	16 82       	std	Z+6, r1	; 0x06
    1784:	11 86       	std	Z+9, r1	; 0x09
    1786:	13 86       	std	Z+11, r1	; 0x0b
_ZN8SdVolumeC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:434
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	a0 e0       	ldi	r26, 0x00	; 0
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	84 87       	std	Z+12, r24	; 0x0c
    1792:	95 87       	std	Z+13, r25	; 0x0d
    1794:	a6 87       	std	Z+14, r26	; 0x0e
    1796:	b7 87       	std	Z+15, r27	; 0x0f
    1798:	13 a2       	std	Z+35, r1	; 0x23
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    179a:	15 a6       	std	Z+45, r1	; 0x2d
    179c:	14 a6       	std	Z+44, r1	; 0x2c
_ZN6SdFileC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:140
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    179e:	8e e7       	ldi	r24, 0x7E	; 126
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	93 a7       	std	Z+43, r25	; 0x2b
    17a4:	82 a7       	std	Z+42, r24	; 0x2a
    17a6:	17 a6       	std	Z+47, r1	; 0x2f
_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/SD.cpp:624

SDClass SD;

};
    17a8:	08 95       	ret

000017aa <SPIClass::endTransaction() [clone .part.3]>:
_ZN8SPIClass14endTransactionEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/Sd2Card.cpp:704
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  return false;
    17aa:	9f b7       	in	r25, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	20 91 af 04 	lds	r18, 0x04AF	; 0x8004af <SPIClass::interruptMode>
    17b2:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <SPIClass::interruptSave>
    17b6:	21 30       	cpi	r18, 0x01	; 1
    17b8:	19 f4       	brne	.+6      	; 0x17c0 <SPIClass::endTransaction() [clone .part.3]+0x16>
    17ba:	8d bb       	out	0x1d, r24	; 29
    17bc:	9f bf       	out	0x3f, r25	; 63
    17be:	08 95       	ret
    17c0:	8f bf       	out	0x3f, r24	; 63
    17c2:	08 95       	ret

000017c4 <SPIClass::beginTransaction(SPISettings)>:
_ZN8SPIClass16beginTransactionE11SPISettings():
    17c4:	20 91 af 04 	lds	r18, 0x04AF	; 0x8004af <SPIClass::interruptMode>
    17c8:	22 23       	and	r18, r18
    17ca:	81 f0       	breq	.+32     	; 0x17ec <SPIClass::beginTransaction(SPISettings)+0x28>
    17cc:	3f b7       	in	r19, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	20 91 af 04 	lds	r18, 0x04AF	; 0x8004af <SPIClass::interruptMode>
    17d4:	21 30       	cpi	r18, 0x01	; 1
    17d6:	69 f4       	brne	.+26     	; 0x17f2 <SPIClass::beginTransaction(SPISettings)+0x2e>
    17d8:	2d b3       	in	r18, 0x1d	; 29
    17da:	20 93 ad 04 	sts	0x04AD, r18	; 0x8004ad <SPIClass::interruptSave>
    17de:	4d b3       	in	r20, 0x1d	; 29
    17e0:	20 91 ae 04 	lds	r18, 0x04AE	; 0x8004ae <SPIClass::interruptMask>
    17e4:	20 95       	com	r18
    17e6:	24 23       	and	r18, r20
    17e8:	2d bb       	out	0x1d, r18	; 29
    17ea:	3f bf       	out	0x3f, r19	; 63
    17ec:	8c bd       	out	0x2c, r24	; 44
    17ee:	9d bd       	out	0x2d, r25	; 45
    17f0:	08 95       	ret
    17f2:	30 93 ad 04 	sts	0x04AD, r19	; 0x8004ad <SPIClass::interruptSave>
    17f6:	fa cf       	rjmp	.-12     	; 0x17ec <SPIClass::beginTransaction(SPISettings)+0x28>

000017f8 <SPIClass::transfer(unsigned char)>:
_ZN8SPIClass8transferEh():
    17f8:	8e bd       	out	0x2e, r24	; 46
    17fa:	00 00       	nop
    17fc:	0d b4       	in	r0, 0x2d	; 45
    17fe:	07 fe       	sbrs	r0, 7
    1800:	fd cf       	rjmp	.-6      	; 0x17fc <SPIClass::transfer(unsigned char)+0x4>
    1802:	8e b5       	in	r24, 0x2e	; 46
    1804:	08 95       	ret

00001806 <spiRec()>:
_ZL6spiRecv():
    1806:	8f ef       	ldi	r24, 0xFF	; 255
    1808:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>

0000180c <Sd2Card::chipSelectHigh()>:
_ZN7Sd2Card14chipSelectHighEv():
    180c:	61 e0       	ldi	r22, 0x01	; 1
    180e:	fc 01       	movw	r30, r24
    1810:	84 81       	ldd	r24, Z+4	; 0x04
    1812:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
    1816:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <chip_select_asserted>
    181a:	88 23       	and	r24, r24
    181c:	39 f0       	breq	.+14     	; 0x182c <Sd2Card::chipSelectHigh()+0x20>
    181e:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <chip_select_asserted>
_ZN8SPIClass14endTransactionEv():
    1822:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <SPIClass::interruptMode>
    1826:	81 11       	cpse	r24, r1
    1828:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <SPIClass::endTransaction() [clone .part.3]>
_ZN7Sd2Card14chipSelectHighEv():
    182c:	08 95       	ret

0000182e <Sd2Card::chipSelectLow()>:
_ZN7Sd2Card13chipSelectLowEv():
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	ec 01       	movw	r28, r24
    1834:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <chip_select_asserted>
    1838:	81 11       	cpse	r24, r1
    183a:	09 c0       	rjmp	.+18     	; 0x184e <Sd2Card::chipSelectLow()+0x20>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <chip_select_asserted>
    1842:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <settings>
    1846:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <settings+0x1>
    184a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <SPIClass::beginTransaction(SPISettings)>
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <digitalWrite>

0000185a <Sd2Card::readEnd()>:
_ZN7Sd2Card7readEndEv():
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
    1860:	8e 81       	ldd	r24, Y+6	; 0x06
    1862:	88 23       	and	r24, r24
    1864:	89 f0       	breq	.+34     	; 0x1888 <Sd2Card::readEnd()+0x2e>
    1866:	8f 81       	ldd	r24, Y+7	; 0x07
    1868:	98 85       	ldd	r25, Y+8	; 0x08
    186a:	9c 01       	movw	r18, r24
    186c:	2f 5f       	subi	r18, 0xFF	; 255
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	38 87       	std	Y+8, r19	; 0x08
    1872:	2f 83       	std	Y+7, r18	; 0x07
    1874:	82 30       	cpi	r24, 0x02	; 2
    1876:	92 40       	sbci	r25, 0x02	; 2
    1878:	18 f4       	brcc	.+6      	; 0x1880 <Sd2Card::readEnd()+0x26>
    187a:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    187e:	f3 cf       	rjmp	.-26     	; 0x1866 <Sd2Card::readEnd()+0xc>
    1880:	ce 01       	movw	r24, r28
    1882:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1886:	1e 82       	std	Y+6, r1	; 0x06
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	08 95       	ret

0000188e <Sd2Card::setSckRate(unsigned char)>:
_ZN7Sd2Card10setSckRateEh():
    188e:	67 30       	cpi	r22, 0x07	; 7
    1890:	28 f0       	brcs	.+10     	; 0x189c <Sd2Card::setSckRate(unsigned char)+0xe>
_ZN7Sd2Card5errorEh():
    1892:	26 e1       	ldi	r18, 0x16	; 22
    1894:	fc 01       	movw	r30, r24
    1896:	25 83       	std	Z+5, r18	; 0x05
_ZN7Sd2Card10setSckRateEh():
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	08 95       	ret
    189c:	62 30       	cpi	r22, 0x02	; 2
    189e:	79 f0       	breq	.+30     	; 0x18be <Sd2Card::setSckRate(unsigned char)+0x30>
    18a0:	38 f0       	brcs	.+14     	; 0x18b0 <Sd2Card::setSckRate(unsigned char)+0x22>
    18a2:	64 30       	cpi	r22, 0x04	; 4
    18a4:	a9 f0       	breq	.+42     	; 0x18d0 <Sd2Card::setSckRate(unsigned char)+0x42>
    18a6:	90 f0       	brcs	.+36     	; 0x18cc <Sd2Card::setSckRate(unsigned char)+0x3e>
    18a8:	65 30       	cpi	r22, 0x05	; 5
    18aa:	a1 f0       	breq	.+40     	; 0x18d4 <Sd2Card::setSckRate(unsigned char)+0x46>
    18ac:	82 e5       	ldi	r24, 0x52	; 82
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <Sd2Card::setSckRate(unsigned char)+0x32>
    18b0:	80 e5       	ldi	r24, 0x50	; 80
    18b2:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <settings>
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <settings+0x1>
    18bc:	08 95       	ret
    18be:	80 e5       	ldi	r24, 0x50	; 80
    18c0:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <settings>
    18c4:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <settings+0x1>
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	08 95       	ret
    18cc:	81 e5       	ldi	r24, 0x51	; 81
    18ce:	f1 cf       	rjmp	.-30     	; 0x18b2 <Sd2Card::setSckRate(unsigned char)+0x24>
    18d0:	81 e5       	ldi	r24, 0x51	; 81
    18d2:	f6 cf       	rjmp	.-20     	; 0x18c0 <Sd2Card::setSckRate(unsigned char)+0x32>
    18d4:	82 e5       	ldi	r24, 0x52	; 82
    18d6:	ed cf       	rjmp	.-38     	; 0x18b2 <Sd2Card::setSckRate(unsigned char)+0x24>

000018d8 <Sd2Card::waitNotBusy(unsigned int)>:
_ZN7Sd2Card11waitNotBusyEj():
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	eb 01       	movw	r28, r22
    18e2:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    18e6:	8b 01       	movw	r16, r22
    18e8:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    18ec:	8f 3f       	cpi	r24, 0xFF	; 255
    18ee:	69 f0       	breq	.+26     	; 0x190a <Sd2Card::waitNotBusy(unsigned int)+0x32>
    18f0:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    18f4:	60 1b       	sub	r22, r16
    18f6:	71 0b       	sbc	r23, r17
    18f8:	6c 17       	cp	r22, r28
    18fa:	7d 07       	cpc	r23, r29
    18fc:	a8 f3       	brcs	.-22     	; 0x18e8 <Sd2Card::waitNotBusy(unsigned int)+0x10>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	f9 cf       	rjmp	.-14     	; 0x1900 <Sd2Card::waitNotBusy(unsigned int)+0x28>

0000190e <Sd2Card::cardCommand(unsigned char, unsigned long)>:
_ZN7Sd2Card11cardCommandEhm():
    190e:	8f 92       	push	r8
    1910:	9f 92       	push	r9
    1912:	af 92       	push	r10
    1914:	bf 92       	push	r11
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ec 01       	movw	r28, r24
    1922:	f6 2e       	mov	r15, r22
    1924:	49 01       	movw	r8, r18
    1926:	5a 01       	movw	r10, r20
    1928:	0e 94 2d 0c 	call	0x185a	; 0x185a <Sd2Card::readEnd()>
    192c:	ce 01       	movw	r24, r28
    192e:	0e 94 17 0c 	call	0x182e	; 0x182e <Sd2Card::chipSelectLow()>
    1932:	6c e2       	ldi	r22, 0x2C	; 44
    1934:	71 e0       	ldi	r23, 0x01	; 1
    1936:	ce 01       	movw	r24, r28
    1938:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <Sd2Card::waitNotBusy(unsigned int)>
spiSend():
    193c:	8f 2d       	mov	r24, r15
    193e:	80 64       	ori	r24, 0x40	; 64
    1940:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
    1944:	08 e1       	ldi	r16, 0x18	; 24
    1946:	10 e0       	ldi	r17, 0x00	; 0
_ZN7Sd2Card11cardCommandEhm():
    1948:	d5 01       	movw	r26, r10
    194a:	c4 01       	movw	r24, r8
    194c:	00 2e       	mov	r0, r16
    194e:	04 c0       	rjmp	.+8      	; 0x1958 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x4a>
    1950:	b6 95       	lsr	r27
    1952:	a7 95       	ror	r26
    1954:	97 95       	ror	r25
    1956:	87 95       	ror	r24
    1958:	0a 94       	dec	r0
    195a:	d2 f7       	brpl	.-12     	; 0x1950 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x42>
spiSend():
    195c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
    1960:	08 50       	subi	r16, 0x08	; 8
    1962:	11 09       	sbc	r17, r1
_ZN7Sd2Card11cardCommandEhm():
    1964:	08 3f       	cpi	r16, 0xF8	; 248
    1966:	8f ef       	ldi	r24, 0xFF	; 255
    1968:	18 07       	cpc	r17, r24
    196a:	71 f7       	brne	.-36     	; 0x1948 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x3a>
    196c:	85 e9       	ldi	r24, 0x95	; 149
    196e:	ff 20       	and	r15, r15
    1970:	21 f0       	breq	.+8      	; 0x197a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x6c>
    1972:	88 e0       	ldi	r24, 0x08	; 8
    1974:	f8 12       	cpse	r15, r24
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x84>
    1978:	87 e8       	ldi	r24, 0x87	; 135
spiSend():
    197a:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
_ZN7Sd2Card11cardCommandEhm():
    197e:	10 e0       	ldi	r17, 0x00	; 0
    1980:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1984:	8a 87       	std	Y+10, r24	; 0x0a
    1986:	87 ff       	sbrs	r24, 7
    1988:	06 c0       	rjmp	.+12     	; 0x1996 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x88>
    198a:	1f 3f       	cpi	r17, 0xFF	; 255
    198c:	21 f0       	breq	.+8      	; 0x1996 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x88>
    198e:	1f 5f       	subi	r17, 0xFF	; 255
    1990:	f7 cf       	rjmp	.-18     	; 0x1980 <Sd2Card::cardCommand(unsigned char, unsigned long)+0x72>
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	f2 cf       	rjmp	.-28     	; 0x197a <Sd2Card::cardCommand(unsigned char, unsigned long)+0x6c>
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	bf 90       	pop	r11
    19a2:	af 90       	pop	r10
    19a4:	9f 90       	pop	r9
    19a6:	8f 90       	pop	r8
    19a8:	08 95       	ret

000019aa <Sd2Card::init(unsigned char, unsigned char)>:
_ZN7Sd2Card4initEhh():
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	ec 01       	movw	r28, r24
    19c0:	e6 2e       	mov	r14, r22
    19c2:	1b 86       	std	Y+11, r1	; 0x0b
    19c4:	19 86       	std	Y+9, r1	; 0x09
    19c6:	1e 82       	std	Y+6, r1	; 0x06
    19c8:	1d 82       	std	Y+5, r1	; 0x05
    19ca:	4c 83       	std	Y+4, r20	; 0x04
    19cc:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    19d0:	8b 01       	movw	r16, r22
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	8c 81       	ldd	r24, Y+4	; 0x04
    19d6:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	8c 81       	ldd	r24, Y+4	; 0x04
    19de:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
    19e2:	0e 94 ba 1a 	call	0x3574	; 0x3574 <SPIClass::begin()>
    19e6:	82 e5       	ldi	r24, 0x52	; 82
    19e8:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <settings>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 a3 02 	sts	0x02A3, r24	; 0x8002a3 <settings+0x1>
    19f2:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <settings>
    19f6:	90 91 a3 02 	lds	r25, 0x02A3	; 0x8002a3 <settings+0x1>
    19fa:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <SPIClass::beginTransaction(SPISettings)>
    19fe:	2a e0       	ldi	r18, 0x0A	; 10
    1a00:	f2 2e       	mov	r15, r18
spiSend():
    1a02:	8f ef       	ldi	r24, 0xFF	; 255
    1a04:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
    1a08:	fa 94       	dec	r15
_ZN7Sd2Card4initEhh():
    1a0a:	f1 10       	cpse	r15, r1
    1a0c:	fa cf       	rjmp	.-12     	; 0x1a02 <Sd2Card::init(unsigned char, unsigned char)+0x58>
_ZN8SPIClass14endTransactionEv():
    1a0e:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <SPIClass::interruptMode>
    1a12:	81 11       	cpse	r24, r1
    1a14:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <SPIClass::endTransaction() [clone .part.3]>
_ZN7Sd2Card4initEhh():
    1a18:	ce 01       	movw	r24, r28
    1a1a:	0e 94 17 0c 	call	0x182e	; 0x182e <Sd2Card::chipSelectLow()>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	a9 01       	movw	r20, r18
    1a24:	60 e0       	ldi	r22, 0x00	; 0
    1a26:	ce 01       	movw	r24, r28
    1a28:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1a2c:	f8 2e       	mov	r15, r24
    1a2e:	8a 87       	std	Y+10, r24	; 0x0a
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	f8 16       	cp	r15, r24
    1a34:	c1 f0       	breq	.+48     	; 0x1a66 <Sd2Card::init(unsigned char, unsigned char)+0xbc>
    1a36:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    1a3a:	60 1b       	sub	r22, r16
    1a3c:	71 0b       	sbc	r23, r17
    1a3e:	61 3d       	cpi	r22, 0xD1	; 209
    1a40:	77 40       	sbci	r23, 0x07	; 7
    1a42:	68 f3       	brcs	.-38     	; 0x1a1e <Sd2Card::init(unsigned char, unsigned char)+0x74>
_ZN7Sd2Card5errorEh():
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	8d 83       	std	Y+5, r24	; 0x05
_ZN7Sd2Card4initEhh():
    1a48:	ce 01       	movw	r24, r28
    1a4a:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	df 91       	pop	r29
    1a52:	cf 91       	pop	r28
    1a54:	1f 91       	pop	r17
    1a56:	0f 91       	pop	r16
    1a58:	ff 90       	pop	r15
    1a5a:	ef 90       	pop	r14
    1a5c:	bf 90       	pop	r11
    1a5e:	af 90       	pop	r10
    1a60:	9f 90       	pop	r9
    1a62:	8f 90       	pop	r8
    1a64:	08 95       	ret
    1a66:	2a ea       	ldi	r18, 0xAA	; 170
    1a68:	31 e0       	ldi	r19, 0x01	; 1
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
    1a6c:	50 e0       	ldi	r21, 0x00	; 0
    1a6e:	68 e0       	ldi	r22, 0x08	; 8
    1a70:	ce 01       	movw	r24, r28
    1a72:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1a76:	82 ff       	sbrs	r24, 2
    1a78:	25 c0       	rjmp	.+74     	; 0x1ac4 <Sd2Card::init(unsigned char, unsigned char)+0x11a>
_ZN7Sd2Card4typeEh():
    1a7a:	fb 86       	std	Y+11, r15	; 0x0b
_ZN7Sd2Card4initEhh():
    1a7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a7e:	81 2c       	mov	r8, r1
    1a80:	91 2c       	mov	r9, r1
    1a82:	54 01       	movw	r10, r8
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <Sd2Card::init(unsigned char, unsigned char)+0xe8>
    1a88:	81 2c       	mov	r8, r1
    1a8a:	91 2c       	mov	r9, r1
    1a8c:	a1 2c       	mov	r10, r1
    1a8e:	80 e4       	ldi	r24, 0x40	; 64
    1a90:	b8 2e       	mov	r11, r24
_ZN7Sd2Card8cardAcmdEhm():
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	a9 01       	movw	r20, r18
    1a98:	67 e3       	ldi	r22, 0x37	; 55
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1aa0:	a5 01       	movw	r20, r10
    1aa2:	94 01       	movw	r18, r8
    1aa4:	69 e2       	ldi	r22, 0x29	; 41
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
_ZN7Sd2Card4initEhh():
    1aac:	8a 87       	std	Y+10, r24	; 0x0a
    1aae:	88 23       	and	r24, r24
    1ab0:	c1 f0       	breq	.+48     	; 0x1ae2 <Sd2Card::init(unsigned char, unsigned char)+0x138>
    1ab2:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    1ab6:	60 1b       	sub	r22, r16
    1ab8:	71 0b       	sbc	r23, r17
    1aba:	61 3d       	cpi	r22, 0xD1	; 209
    1abc:	77 40       	sbci	r23, 0x07	; 7
    1abe:	48 f3       	brcs	.-46     	; 0x1a92 <Sd2Card::init(unsigned char, unsigned char)+0xe8>
_ZN7Sd2Card5errorEh():
    1ac0:	88 e0       	ldi	r24, 0x08	; 8
    1ac2:	c1 cf       	rjmp	.-126    	; 0x1a46 <Sd2Card::init(unsigned char, unsigned char)+0x9c>
_ZN7Sd2Card4initEhh():
    1ac4:	94 e0       	ldi	r25, 0x04	; 4
    1ac6:	f9 2e       	mov	r15, r25
    1ac8:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1acc:	8a 87       	std	Y+10, r24	; 0x0a
    1ace:	fa 94       	dec	r15
    1ad0:	f1 10       	cpse	r15, r1
    1ad2:	fa cf       	rjmp	.-12     	; 0x1ac8 <Sd2Card::init(unsigned char, unsigned char)+0x11e>
    1ad4:	8a 3a       	cpi	r24, 0xAA	; 170
    1ad6:	11 f0       	breq	.+4      	; 0x1adc <Sd2Card::init(unsigned char, unsigned char)+0x132>
_ZN7Sd2Card5errorEh():
    1ad8:	82 e0       	ldi	r24, 0x02	; 2
    1ada:	b5 cf       	rjmp	.-150    	; 0x1a46 <Sd2Card::init(unsigned char, unsigned char)+0x9c>
_ZN7Sd2Card4typeEh():
    1adc:	82 e0       	ldi	r24, 0x02	; 2
    1ade:	8b 87       	std	Y+11, r24	; 0x0b
    1ae0:	cd cf       	rjmp	.-102    	; 0x1a7c <Sd2Card::init(unsigned char, unsigned char)+0xd2>
_ZN7Sd2Card4initEhh():
    1ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ae4:	82 30       	cpi	r24, 0x02	; 2
    1ae6:	c1 f4       	brne	.+48     	; 0x1b18 <Sd2Card::init(unsigned char, unsigned char)+0x16e>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	a9 01       	movw	r20, r18
    1aee:	6a e3       	ldi	r22, 0x3A	; 58
    1af0:	ce 01       	movw	r24, r28
    1af2:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1af6:	88 23       	and	r24, r24
    1af8:	11 f0       	breq	.+4      	; 0x1afe <Sd2Card::init(unsigned char, unsigned char)+0x154>
_ZN7Sd2Card5errorEh():
    1afa:	86 e0       	ldi	r24, 0x06	; 6
    1afc:	a4 cf       	rjmp	.-184    	; 0x1a46 <Sd2Card::init(unsigned char, unsigned char)+0x9c>
_ZN7Sd2Card4initEhh():
    1afe:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1b02:	80 7c       	andi	r24, 0xC0	; 192
    1b04:	80 3c       	cpi	r24, 0xC0	; 192
    1b06:	11 f4       	brne	.+4      	; 0x1b0c <Sd2Card::init(unsigned char, unsigned char)+0x162>
_ZN7Sd2Card4typeEh():
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	8b 87       	std	Y+11, r24	; 0x0b
_ZN7Sd2Card4initEhh():
    1b0c:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1b10:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1b14:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1b1e:	6e 2d       	mov	r22, r14
    1b20:	ce 01       	movw	r24, r28
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	ef 90       	pop	r14
    1b2e:	bf 90       	pop	r11
    1b30:	af 90       	pop	r10
    1b32:	9f 90       	pop	r9
    1b34:	8f 90       	pop	r8
    1b36:	0c 94 47 0c 	jmp	0x188e	; 0x188e <Sd2Card::setSckRate(unsigned char)>

00001b3a <Sd2Card::waitStartBlock()>:
_ZN7Sd2Card14waitStartBlockEv():
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	ec 01       	movw	r28, r24
    1b44:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    1b48:	8b 01       	movw	r16, r22
    1b4a:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1b4e:	8a 87       	std	Y+10, r24	; 0x0a
    1b50:	8f 3f       	cpi	r24, 0xFF	; 255
    1b52:	91 f4       	brne	.+36     	; 0x1b78 <Sd2Card::waitStartBlock()+0x3e>
    1b54:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <millis>
    1b58:	60 1b       	sub	r22, r16
    1b5a:	71 0b       	sbc	r23, r17
    1b5c:	6d 32       	cpi	r22, 0x2D	; 45
    1b5e:	71 40       	sbci	r23, 0x01	; 1
    1b60:	a0 f3       	brcs	.-24     	; 0x1b4a <Sd2Card::waitStartBlock()+0x10>
_ZN7Sd2Card5errorEh():
    1b62:	8f e0       	ldi	r24, 0x0F	; 15
    1b64:	8d 83       	std	Y+5, r24	; 0x05
_ZN7Sd2Card14waitStartBlockEv():
    1b66:	ce 01       	movw	r24, r28
    1b68:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	df 91       	pop	r29
    1b70:	cf 91       	pop	r28
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	08 95       	ret
    1b78:	8e 3f       	cpi	r24, 0xFE	; 254
    1b7a:	11 f0       	breq	.+4      	; 0x1b80 <Sd2Card::waitStartBlock()+0x46>
_ZN7Sd2Card5errorEh():
    1b7c:	8d e0       	ldi	r24, 0x0D	; 13
    1b7e:	f2 cf       	rjmp	.-28     	; 0x1b64 <Sd2Card::waitStartBlock()+0x2a>
_ZN7Sd2Card14waitStartBlockEv():
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	f5 cf       	rjmp	.-22     	; 0x1b6e <Sd2Card::waitStartBlock()+0x34>

00001b84 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]>:
_ZN7Sd2Card8readDataEmjjPh():
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
    1b96:	69 01       	movw	r12, r18
    1b98:	c8 01       	movw	r24, r16
    1b9a:	82 0f       	add	r24, r18
    1b9c:	93 1f       	adc	r25, r19
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	92 40       	sbci	r25, 0x02	; 2
    1ba2:	48 f5       	brcc	.+82     	; 0x1bf6 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x72>
    1ba4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba6:	88 23       	and	r24, r24
    1ba8:	71 f0       	breq	.+28     	; 0x1bc6 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x42>
    1baa:	88 81       	ld	r24, Y
    1bac:	99 81       	ldd	r25, Y+1	; 0x01
    1bae:	aa 81       	ldd	r26, Y+2	; 0x02
    1bb0:	bb 81       	ldd	r27, Y+3	; 0x03
    1bb2:	84 17       	cp	r24, r20
    1bb4:	95 07       	cpc	r25, r21
    1bb6:	a6 07       	cpc	r26, r22
    1bb8:	b7 07       	cpc	r27, r23
    1bba:	29 f4       	brne	.+10     	; 0x1bc6 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x42>
    1bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bbe:	98 85       	ldd	r25, Y+8	; 0x08
    1bc0:	c8 16       	cp	r12, r24
    1bc2:	d9 06       	cpc	r13, r25
    1bc4:	70 f5       	brcc	.+92     	; 0x1c22 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x9e>
    1bc6:	48 83       	st	Y, r20
    1bc8:	59 83       	std	Y+1, r21	; 0x01
    1bca:	6a 83       	std	Y+2, r22	; 0x02
    1bcc:	7b 83       	std	Y+3, r23	; 0x03
    1bce:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bd0:	83 30       	cpi	r24, 0x03	; 3
    1bd2:	39 f0       	breq	.+14     	; 0x1be2 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x5e>
    1bd4:	89 e0       	ldi	r24, 0x09	; 9
    1bd6:	44 0f       	add	r20, r20
    1bd8:	55 1f       	adc	r21, r21
    1bda:	66 1f       	adc	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	8a 95       	dec	r24
    1be0:	d1 f7       	brne	.-12     	; 0x1bd6 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x52>
    1be2:	9a 01       	movw	r18, r20
    1be4:	ab 01       	movw	r20, r22
    1be6:	61 e1       	ldi	r22, 0x11	; 17
    1be8:	ce 01       	movw	r24, r28
    1bea:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1bee:	88 23       	and	r24, r24
    1bf0:	79 f0       	breq	.+30     	; 0x1c10 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x8c>
_ZN7Sd2Card5errorEh():
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	8d 83       	std	Y+5, r24	; 0x05
_ZN7Sd2Card8readDataEmjjPh():
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	1f 91       	pop	r17
    1c04:	0f 91       	pop	r16
    1c06:	ff 90       	pop	r15
    1c08:	ef 90       	pop	r14
    1c0a:	df 90       	pop	r13
    1c0c:	cf 90       	pop	r12
    1c0e:	08 95       	ret
    1c10:	ce 01       	movw	r24, r28
    1c12:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <Sd2Card::waitStartBlock()>
    1c16:	88 23       	and	r24, r24
    1c18:	71 f3       	breq	.-36     	; 0x1bf6 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x72>
    1c1a:	18 86       	std	Y+8, r1	; 0x08
    1c1c:	1f 82       	std	Y+7, r1	; 0x07
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	8e 83       	std	Y+6, r24	; 0x06
    1c22:	8f 81       	ldd	r24, Y+7	; 0x07
    1c24:	98 85       	ldd	r25, Y+8	; 0x08
    1c26:	8c 15       	cp	r24, r12
    1c28:	9d 05       	cpc	r25, r13
    1c2a:	60 f0       	brcs	.+24     	; 0x1c44 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0xc0>
    1c2c:	67 01       	movw	r12, r14
    1c2e:	e0 0e       	add	r14, r16
    1c30:	f1 1e       	adc	r15, r17
    1c32:	ec 14       	cp	r14, r12
    1c34:	fd 04       	cpc	r15, r13
    1c36:	71 f0       	breq	.+28     	; 0x1c54 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0xd0>
    1c38:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1c3c:	f6 01       	movw	r30, r12
    1c3e:	81 93       	st	Z+, r24
    1c40:	6f 01       	movw	r12, r30
    1c42:	f7 cf       	rjmp	.-18     	; 0x1c32 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0xae>
    1c44:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1c48:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4a:	98 85       	ldd	r25, Y+8	; 0x08
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	98 87       	std	Y+8, r25	; 0x08
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	e7 cf       	rjmp	.-50     	; 0x1c22 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x9e>
    1c54:	8f 81       	ldd	r24, Y+7	; 0x07
    1c56:	98 85       	ldd	r25, Y+8	; 0x08
    1c58:	08 0f       	add	r16, r24
    1c5a:	19 1f       	adc	r17, r25
    1c5c:	18 87       	std	Y+8, r17	; 0x08
    1c5e:	0f 83       	std	Y+7, r16	; 0x07
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	88 23       	and	r24, r24
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0xe8>
    1c66:	01 15       	cp	r16, r1
    1c68:	12 40       	sbci	r17, 0x02	; 2
    1c6a:	18 f0       	brcs	.+6      	; 0x1c72 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0xee>
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	0e 94 2d 0c 	call	0x185a	; 0x185a <Sd2Card::readEnd()>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	c4 cf       	rjmp	.-120    	; 0x1bfe <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]+0x7a>

00001c76 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*)>:
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	01 15       	cp	r16, r1
    1c80:	11 05       	cpc	r17, r1
    1c82:	39 f0       	breq	.+14     	; 0x1c92 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*)+0x1c>
    1c84:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]>
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	08 95       	ret
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	f9 cf       	rjmp	.-14     	; 0x1c88 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*)+0x12>

00001c96 <Sd2Card::readBlock(unsigned long, unsigned char*)>:
_ZN7Sd2Card9readBlockEmPh():
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
_ZN7Sd2Card8readDataEmjjPh():
    1c9e:	79 01       	movw	r14, r18
    1ca0:	00 e0       	ldi	r16, 0x00	; 0
    1ca2:	12 e0       	ldi	r17, 0x02	; 2
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*) [clone .part.6]>
_ZN7Sd2Card9readBlockEmPh():
    1cac:	1f 91       	pop	r17
    1cae:	0f 91       	pop	r16
    1cb0:	ff 90       	pop	r15
    1cb2:	ef 90       	pop	r14
    1cb4:	08 95       	ret

00001cb6 <Sd2Card::writeData(unsigned char, unsigned char const*)>:
_ZN7Sd2Card9writeDataEhPKh():
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	df 93       	push	r29
    1cc2:	8c 01       	movw	r16, r24
    1cc4:	86 2f       	mov	r24, r22
    1cc6:	7a 01       	movw	r14, r20
spiSend():
    1cc8:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
    1ccc:	e7 01       	movw	r28, r14
    1cce:	8e ef       	ldi	r24, 0xFE	; 254
    1cd0:	f8 1a       	sub	r15, r24
    1cd2:	89 91       	ld	r24, Y+
    1cd4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
_ZN7Sd2Card9writeDataEhPKh():
    1cd8:	ce 15       	cp	r28, r14
    1cda:	df 05       	cpc	r29, r15
    1cdc:	d1 f7       	brne	.-12     	; 0x1cd2 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x1c>
spiSend():
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
    1ce4:	8f ef       	ldi	r24, 0xFF	; 255
    1ce6:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <SPIClass::transfer(unsigned char)>
_ZN7Sd2Card9writeDataEhPKh():
    1cea:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1cee:	f8 01       	movw	r30, r16
    1cf0:	82 87       	std	Z+10, r24	; 0x0a
    1cf2:	8f 71       	andi	r24, 0x1F	; 31
    1cf4:	85 30       	cpi	r24, 0x05	; 5
    1cf6:	69 f0       	breq	.+26     	; 0x1d12 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x5c>
_ZN7Sd2Card5errorEh():
    1cf8:	81 e1       	ldi	r24, 0x11	; 17
    1cfa:	85 83       	std	Z+5, r24	; 0x05
_ZN7Sd2Card9writeDataEhPKh():
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	08 95       	ret
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	f7 cf       	rjmp	.-18     	; 0x1d04 <Sd2Card::writeData(unsigned char, unsigned char const*)+0x4e>

00001d16 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>:
_ZN7Sd2Card10writeBlockEmPKh():
    1d16:	0f 93       	push	r16
    1d18:	1f 93       	push	r17
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	ec 01       	movw	r28, r24
    1d20:	89 01       	movw	r16, r18
_ZN7Sd2Card5errorEh():
    1d22:	82 e1       	ldi	r24, 0x12	; 18
_ZN7Sd2Card10writeBlockEmPKh():
    1d24:	41 15       	cp	r20, r1
    1d26:	51 05       	cpc	r21, r1
    1d28:	61 05       	cpc	r22, r1
    1d2a:	71 05       	cpc	r23, r1
    1d2c:	99 f0       	breq	.+38     	; 0x1d54 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x3e>
    1d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d30:	83 30       	cpi	r24, 0x03	; 3
    1d32:	39 f0       	breq	.+14     	; 0x1d42 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x2c>
    1d34:	89 e0       	ldi	r24, 0x09	; 9
    1d36:	44 0f       	add	r20, r20
    1d38:	55 1f       	adc	r21, r21
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	8a 95       	dec	r24
    1d40:	d1 f7       	brne	.-12     	; 0x1d36 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x20>
    1d42:	9a 01       	movw	r18, r20
    1d44:	ab 01       	movw	r20, r22
    1d46:	68 e1       	ldi	r22, 0x18	; 24
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1d4e:	88 23       	and	r24, r24
    1d50:	39 f0       	breq	.+14     	; 0x1d60 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x4a>
_ZN7Sd2Card5errorEh():
    1d52:	84 e0       	ldi	r24, 0x04	; 4
    1d54:	8d 83       	std	Y+5, r24	; 0x05
_ZN7Sd2Card10writeBlockEmPKh():
    1d56:	ce 01       	movw	r24, r28
    1d58:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	23 c0       	rjmp	.+70     	; 0x1da6 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x90>
    1d60:	a8 01       	movw	r20, r16
    1d62:	6e ef       	ldi	r22, 0xFE	; 254
    1d64:	ce 01       	movw	r24, r28
    1d66:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <Sd2Card::writeData(unsigned char, unsigned char const*)>
    1d6a:	88 23       	and	r24, r24
    1d6c:	a1 f3       	breq	.-24     	; 0x1d56 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x40>
    1d6e:	68 e5       	ldi	r22, 0x58	; 88
    1d70:	72 e0       	ldi	r23, 0x02	; 2
    1d72:	ce 01       	movw	r24, r28
    1d74:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <Sd2Card::waitNotBusy(unsigned int)>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x6a>
_ZN7Sd2Card5errorEh():
    1d7c:	85 e1       	ldi	r24, 0x15	; 21
    1d7e:	ea cf       	rjmp	.-44     	; 0x1d54 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x3e>
_ZN7Sd2Card10writeBlockEmPKh():
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	a9 01       	movw	r20, r18
    1d86:	6d e0       	ldi	r22, 0x0D	; 13
    1d88:	ce 01       	movw	r24, r28
    1d8a:	0e 94 87 0c 	call	0x190e	; 0x190e <Sd2Card::cardCommand(unsigned char, unsigned long)>
    1d8e:	88 23       	and	r24, r24
    1d90:	11 f0       	breq	.+4      	; 0x1d96 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x80>
_ZN7Sd2Card5errorEh():
    1d92:	84 e1       	ldi	r24, 0x14	; 20
    1d94:	df cf       	rjmp	.-66     	; 0x1d54 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x3e>
_ZN7Sd2Card10writeBlockEmPKh():
    1d96:	0e 94 03 0c 	call	0x1806	; 0x1806 <spiRec()>
    1d9a:	81 11       	cpse	r24, r1
    1d9c:	fa cf       	rjmp	.-12     	; 0x1d92 <Sd2Card::writeBlock(unsigned long, unsigned char const*)+0x7c>
    1d9e:	ce 01       	movw	r24, r28
    1da0:	0e 94 06 0c 	call	0x180c	; 0x180c <Sd2Card::chipSelectHigh()>
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm>:
_ZN11SPISettings17init_AlwaysInlineEmhh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:149

    // Invert the SPI2X bit
    clockDiv ^= 0x1;

    // Pack into the SPISettings class
    spcr = _BV(SPE) | _BV(MSTR) | ((bitOrder == LSBFIRST) ? _BV(DORD) : 0) |
    1db0:	e2 ea       	ldi	r30, 0xA2	; 162
    1db2:	f2 e0       	ldi	r31, 0x02	; 2
    1db4:	80 e5       	ldi	r24, 0x50	; 80
    1db6:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.h:151
      (dataMode & SPI_MODE_MASK) | ((clockDiv >> 1) & SPI_CLOCK_MASK);
    spsr = clockDiv & SPI_2XCLOCK_MASK;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	81 83       	std	Z+1, r24	; 0x01
_GLOBAL__sub_I__ZN7Sd2Card11cardCommandEhm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/Sd2Card.cpp:705
}
    1dbc:	08 95       	ret

00001dbe <Print::flush()>:
_ZN5Print5flushEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:912
    if (curPosition_ != (32u*(index + 1))) {
      if (!seekSet(32u*(index + 1))) return false;
    }
  }
  // don't try to delete root
  if (isRoot()) return true;
    1dbe:	08 95       	ret

00001dc0 <SdFile::addCluster()>:
_ZN6SdFile10addClusterEv():
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	ec 01       	movw	r28, r24
    1dc6:	9c 01       	movw	r18, r24
    1dc8:	2a 5f       	subi	r18, 0xFA	; 250
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	41 e0       	ldi	r20, 0x01	; 1
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd8:	0e 94 39 18 	call	0x3072	; 0x3072 <SdVolume::allocContiguous(unsigned long, unsigned long*)>
    1ddc:	88 23       	and	r24, r24
    1dde:	a1 f0       	breq	.+40     	; 0x1e08 <SdFile::addCluster()+0x48>
    1de0:	8f 89       	ldd	r24, Y+23	; 0x17
    1de2:	98 8d       	ldd	r25, Y+24	; 0x18
    1de4:	a9 8d       	ldd	r26, Y+25	; 0x19
    1de6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1de8:	89 2b       	or	r24, r25
    1dea:	8a 2b       	or	r24, r26
    1dec:	8b 2b       	or	r24, r27
    1dee:	59 f4       	brne	.+22     	; 0x1e06 <SdFile::addCluster()+0x46>
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	9f 81       	ldd	r25, Y+7	; 0x07
    1df4:	a8 85       	ldd	r26, Y+8	; 0x08
    1df6:	b9 85       	ldd	r27, Y+9	; 0x09
    1df8:	8f 8b       	std	Y+23, r24	; 0x17
    1dfa:	98 8f       	std	Y+24, r25	; 0x18
    1dfc:	a9 8f       	std	Y+25, r26	; 0x19
    1dfe:	ba 8f       	std	Y+26, r27	; 0x1a
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	80 68       	ori	r24, 0x80	; 128
    1e04:	8c 83       	std	Y+4, r24	; 0x04
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	df 91       	pop	r29
    1e0a:	cf 91       	pop	r28
    1e0c:	08 95       	ret

00001e0e <SdFile::addDirCluster()>:
_ZN6SdFile13addDirClusterEv():
    1e0e:	8f 92       	push	r8
    1e10:	9f 92       	push	r9
    1e12:	af 92       	push	r10
    1e14:	bf 92       	push	r11
    1e16:	cf 92       	push	r12
    1e18:	df 92       	push	r13
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	ec 01       	movw	r28, r24
    1e24:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <SdFile::addCluster()>
    1e28:	81 11       	cpse	r24, r1
    1e2a:	0c c0       	rjmp	.+24     	; 0x1e44 <SdFile::addDirCluster()+0x36>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	ff 90       	pop	r15
    1e34:	ef 90       	pop	r14
    1e36:	df 90       	pop	r13
    1e38:	cf 90       	pop	r12
    1e3a:	bf 90       	pop	r11
    1e3c:	af 90       	pop	r10
    1e3e:	9f 90       	pop	r9
    1e40:	8f 90       	pop	r8
    1e42:	08 95       	ret
    1e44:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1e46:	fc 8d       	ldd	r31, Y+28	; 0x1c
_ZNK8SdVolume17clusterStartBlockEm():
    1e48:	ce 80       	ldd	r12, Y+6	; 0x06
    1e4a:	df 80       	ldd	r13, Y+7	; 0x07
    1e4c:	e8 84       	ldd	r14, Y+8	; 0x08
    1e4e:	f9 84       	ldd	r15, Y+9	; 0x09
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	c8 1a       	sub	r12, r24
    1e54:	d1 08       	sbc	r13, r1
    1e56:	e1 08       	sbc	r14, r1
    1e58:	f1 08       	sbc	r15, r1
    1e5a:	85 85       	ldd	r24, Z+13	; 0x0d
    1e5c:	04 c0       	rjmp	.+8      	; 0x1e66 <SdFile::addDirCluster()+0x58>
    1e5e:	cc 0c       	add	r12, r12
    1e60:	dd 1c       	adc	r13, r13
    1e62:	ee 1c       	adc	r14, r14
    1e64:	ff 1c       	adc	r15, r15
    1e66:	8a 95       	dec	r24
    1e68:	d2 f7       	brpl	.-12     	; 0x1e5e <SdFile::addDirCluster()+0x50>
    1e6a:	86 85       	ldd	r24, Z+14	; 0x0e
    1e6c:	97 85       	ldd	r25, Z+15	; 0x0f
    1e6e:	a0 89       	ldd	r26, Z+16	; 0x10
    1e70:	b1 89       	ldd	r27, Z+17	; 0x11
    1e72:	c8 0e       	add	r12, r24
    1e74:	d9 1e       	adc	r13, r25
    1e76:	ea 1e       	adc	r14, r26
    1e78:	fb 1e       	adc	r15, r27
    1e7a:	84 81       	ldd	r24, Z+4	; 0x04
    1e7c:	46 01       	movw	r8, r12
    1e7e:	57 01       	movw	r10, r14
    1e80:	88 0e       	add	r8, r24
    1e82:	91 1c       	adc	r9, r1
    1e84:	a1 1c       	adc	r10, r1
    1e86:	b1 1c       	adc	r11, r1
_ZN6SdFile13addDirClusterEv():
    1e88:	8c 14       	cp	r8, r12
    1e8a:	9d 04       	cpc	r9, r13
    1e8c:	ae 04       	cpc	r10, r14
    1e8e:	bf 04       	cpc	r11, r15
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <SdFile::addDirCluster()+0x9c>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	88 1a       	sub	r8, r24
    1e96:	91 08       	sbc	r9, r1
    1e98:	a1 08       	sbc	r10, r1
    1e9a:	b1 08       	sbc	r11, r1
    1e9c:	c5 01       	movw	r24, r10
    1e9e:	b4 01       	movw	r22, r8
    1ea0:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <SdVolume::cacheZeroBlock(unsigned long)>
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	f0 cf       	rjmp	.-32     	; 0x1e88 <SdFile::addDirCluster()+0x7a>
    1ea8:	c1 cf       	rjmp	.-126    	; 0x1e2c <SdFile::addDirCluster()+0x1e>
    1eaa:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1eac:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1eae:	25 85       	ldd	r18, Z+13	; 0x0d
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	92 e0       	ldi	r25, 0x02	; 2
    1eb4:	a0 e0       	ldi	r26, 0x00	; 0
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	04 c0       	rjmp	.+8      	; 0x1ec2 <SdFile::addDirCluster()+0xb4>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	aa 1f       	adc	r26, r26
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	2a 95       	dec	r18
    1ec4:	d2 f7       	brpl	.-12     	; 0x1eba <SdFile::addDirCluster()+0xac>
    1ec6:	4b 89       	ldd	r20, Y+19	; 0x13
    1ec8:	5c 89       	ldd	r21, Y+20	; 0x14
    1eca:	6d 89       	ldd	r22, Y+21	; 0x15
    1ecc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ece:	84 0f       	add	r24, r20
    1ed0:	95 1f       	adc	r25, r21
    1ed2:	a6 1f       	adc	r26, r22
    1ed4:	b7 1f       	adc	r27, r23
    1ed6:	8b 8b       	std	Y+19, r24	; 0x13
    1ed8:	9c 8b       	std	Y+20, r25	; 0x14
    1eda:	ad 8b       	std	Y+21, r26	; 0x15
    1edc:	be 8b       	std	Y+22, r27	; 0x16
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	a6 cf       	rjmp	.-180    	; 0x1e2e <SdFile::addDirCluster()+0x20>

00001ee2 <SdFile::cacheDirEntry(unsigned char)>:
_ZN6SdFile13cacheDirEntryEh():
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
    1ee6:	ec 01       	movw	r28, r24
    1ee8:	46 2f       	mov	r20, r22
    1eea:	6e 85       	ldd	r22, Y+14	; 0x0e
    1eec:	7f 85       	ldd	r23, Y+15	; 0x0f
    1eee:	88 89       	ldd	r24, Y+16	; 0x10
    1ef0:	99 89       	ldd	r25, Y+17	; 0x11
    1ef2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    1ef6:	88 23       	and	r24, r24
    1ef8:	51 f0       	breq	.+20     	; 0x1f0e <SdFile::cacheDirEntry(unsigned char)+0x2c>
    1efa:	8a 89       	ldd	r24, Y+18	; 0x12
    1efc:	20 e2       	ldi	r18, 0x20	; 32
    1efe:	82 9f       	mul	r24, r18
    1f00:	c0 01       	movw	r24, r0
    1f02:	11 24       	eor	r1, r1
    1f04:	83 55       	subi	r24, 0x53	; 83
    1f06:	9d 4f       	sbci	r25, 0xFD	; 253
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	08 95       	ret
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	fa cf       	rjmp	.-12     	; 0x1f08 <SdFile::cacheDirEntry(unsigned char)+0x26>

00001f14 <SdFile::make83Name(char const*, unsigned char*)>:
_ZN6SdFile10make83NameEPKcPh():
    1f14:	fb 01       	movw	r30, r22
    1f16:	9b 01       	movw	r18, r22
    1f18:	25 5f       	subi	r18, 0xF5	; 245
    1f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	41 93       	st	Z+, r20
    1f20:	2e 17       	cp	r18, r30
    1f22:	3f 07       	cpc	r19, r31
    1f24:	e1 f7       	brne	.-8      	; 0x1f1e <SdFile::make83Name(char const*, unsigned char*)+0xa>
    1f26:	dc 01       	movw	r26, r24
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	37 e0       	ldi	r19, 0x07	; 7
    1f2c:	9d 91       	ld	r25, X+
    1f2e:	49 2f       	mov	r20, r25
    1f30:	99 23       	and	r25, r25
    1f32:	19 f1       	breq	.+70     	; 0x1f7a <SdFile::make83Name(char const*, unsigned char*)+0x66>
    1f34:	9e 32       	cpi	r25, 0x2E	; 46
    1f36:	29 f4       	brne	.+10     	; 0x1f42 <SdFile::make83Name(char const*, unsigned char*)+0x2e>
    1f38:	3a 30       	cpi	r19, 0x0A	; 10
    1f3a:	59 f0       	breq	.+22     	; 0x1f52 <SdFile::make83Name(char const*, unsigned char*)+0x3e>
    1f3c:	28 e0       	ldi	r18, 0x08	; 8
    1f3e:	3a e0       	ldi	r19, 0x0A	; 10
    1f40:	f5 cf       	rjmp	.-22     	; 0x1f2c <SdFile::make83Name(char const*, unsigned char*)+0x18>
    1f42:	ec e8       	ldi	r30, 0x8C	; 140
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	84 91       	lpm	r24, Z
    1f48:	88 23       	and	r24, r24
    1f4a:	29 f0       	breq	.+10     	; 0x1f56 <SdFile::make83Name(char const*, unsigned char*)+0x42>
    1f4c:	31 96       	adiw	r30, 0x01	; 1
    1f4e:	98 13       	cpse	r25, r24
    1f50:	fa cf       	rjmp	.-12     	; 0x1f46 <SdFile::make83Name(char const*, unsigned char*)+0x32>
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	17 c0       	rjmp	.+46     	; 0x1f84 <SdFile::make83Name(char const*, unsigned char*)+0x70>
    1f56:	32 17       	cp	r19, r18
    1f58:	a8 f0       	brcs	.+42     	; 0x1f84 <SdFile::make83Name(char const*, unsigned char*)+0x70>
    1f5a:	5f ed       	ldi	r21, 0xDF	; 223
    1f5c:	59 0f       	add	r21, r25
    1f5e:	5e 35       	cpi	r21, 0x5E	; 94
    1f60:	88 f4       	brcc	.+34     	; 0x1f84 <SdFile::make83Name(char const*, unsigned char*)+0x70>
    1f62:	8f e9       	ldi	r24, 0x9F	; 159
    1f64:	89 0f       	add	r24, r25
    1f66:	8a 31       	cpi	r24, 0x1A	; 26
    1f68:	10 f4       	brcc	.+4      	; 0x1f6e <SdFile::make83Name(char const*, unsigned char*)+0x5a>
    1f6a:	40 ee       	ldi	r20, 0xE0	; 224
    1f6c:	49 0f       	add	r20, r25
    1f6e:	fb 01       	movw	r30, r22
    1f70:	e2 0f       	add	r30, r18
    1f72:	f1 1d       	adc	r31, r1
    1f74:	40 83       	st	Z, r20
    1f76:	2f 5f       	subi	r18, 0xFF	; 255
    1f78:	d9 cf       	rjmp	.-78     	; 0x1f2c <SdFile::make83Name(char const*, unsigned char*)+0x18>
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	fb 01       	movw	r30, r22
    1f7e:	90 81       	ld	r25, Z
    1f80:	90 32       	cpi	r25, 0x20	; 32
    1f82:	39 f3       	breq	.-50     	; 0x1f52 <SdFile::make83Name(char const*, unsigned char*)+0x3e>
    1f84:	08 95       	ret

00001f86 <SdFile::openRoot(SdVolume*)>:
_ZN6SdFile8openRootEP8SdVolume():
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	fc 01       	movw	r30, r24
    1f90:	25 81       	ldd	r18, Z+5	; 0x05
    1f92:	22 23       	and	r18, r18
    1f94:	31 f0       	breq	.+12     	; 0x1fa2 <SdFile::openRoot(SdVolume*)+0x1c>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	1f 91       	pop	r17
    1f9e:	0f 91       	pop	r16
    1fa0:	08 95       	ret
    1fa2:	8b 01       	movw	r16, r22
    1fa4:	ec 01       	movw	r28, r24
    1fa6:	fb 01       	movw	r30, r22
    1fa8:	87 89       	ldd	r24, Z+23	; 0x17
    1faa:	80 31       	cpi	r24, 0x10	; 16
    1fac:	39 f5       	brne	.+78     	; 0x1ffc <SdFile::openRoot(SdVolume*)+0x76>
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
    1fb2:	1f 8a       	std	Y+23, r1	; 0x17
    1fb4:	18 8e       	std	Y+24, r1	; 0x18
    1fb6:	19 8e       	std	Y+25, r1	; 0x19
    1fb8:	1a 8e       	std	Y+26, r1	; 0x1a
    1fba:	80 8d       	ldd	r24, Z+24	; 0x18
    1fbc:	91 8d       	ldd	r25, Z+25	; 0x19
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	a0 e0       	ldi	r26, 0x00	; 0
    1fc2:	25 e0       	ldi	r18, 0x05	; 5
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	aa 1f       	adc	r26, r26
    1fca:	bb 1f       	adc	r27, r27
    1fcc:	2a 95       	dec	r18
    1fce:	d1 f7       	brne	.-12     	; 0x1fc4 <SdFile::openRoot(SdVolume*)+0x3e>
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	ad 8b       	std	Y+21, r26	; 0x15
    1fd6:	be 8b       	std	Y+22, r27	; 0x16
    1fd8:	1c 8f       	std	Y+28, r17	; 0x1c
    1fda:	0b 8f       	std	Y+27, r16	; 0x1b
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	8c 83       	std	Y+4, r24	; 0x04
    1fe0:	1e 82       	std	Y+6, r1	; 0x06
    1fe2:	1f 82       	std	Y+7, r1	; 0x07
    1fe4:	18 86       	std	Y+8, r1	; 0x08
    1fe6:	19 86       	std	Y+9, r1	; 0x09
    1fe8:	1a 86       	std	Y+10, r1	; 0x0a
    1fea:	1b 86       	std	Y+11, r1	; 0x0b
    1fec:	1c 86       	std	Y+12, r1	; 0x0c
    1fee:	1d 86       	std	Y+13, r1	; 0x0d
    1ff0:	1e 86       	std	Y+14, r1	; 0x0e
    1ff2:	1f 86       	std	Y+15, r1	; 0x0f
    1ff4:	18 8a       	std	Y+16, r1	; 0x10
    1ff6:	19 8a       	std	Y+17, r1	; 0x11
    1ff8:	1a 8a       	std	Y+18, r1	; 0x12
    1ffa:	ce cf       	rjmp	.-100    	; 0x1f98 <SdFile::openRoot(SdVolume*)+0x12>
    1ffc:	80 32       	cpi	r24, 0x20	; 32
    1ffe:	59 f6       	brne	.-106    	; 0x1f96 <SdFile::openRoot(SdVolume*)+0x10>
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	8d 83       	std	Y+5, r24	; 0x05
_ZNK8SdVolume12rootDirStartEv():
    2004:	42 8d       	ldd	r20, Z+26	; 0x1a
    2006:	53 8d       	ldd	r21, Z+27	; 0x1b
    2008:	64 8d       	ldd	r22, Z+28	; 0x1c
    200a:	75 8d       	ldd	r23, Z+29	; 0x1d
_ZN6SdFile8openRootEP8SdVolume():
    200c:	4f 8b       	std	Y+23, r20	; 0x17
    200e:	58 8f       	std	Y+24, r21	; 0x18
    2010:	69 8f       	std	Y+25, r22	; 0x19
    2012:	7a 8f       	std	Y+26, r23	; 0x1a
    2014:	9e 01       	movw	r18, r28
    2016:	2d 5e       	subi	r18, 0xED	; 237
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	c8 01       	movw	r24, r16
    201c:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    2020:	81 11       	cpse	r24, r1
    2022:	da cf       	rjmp	.-76     	; 0x1fd8 <SdFile::openRoot(SdVolume*)+0x52>
    2024:	b8 cf       	rjmp	.-144    	; 0x1f96 <SdFile::openRoot(SdVolume*)+0x10>

00002026 <SdFile::read(void*, unsigned int)>:
_ZN6SdFile4readEPvj():
    2026:	2f 92       	push	r2
    2028:	3f 92       	push	r3
    202a:	4f 92       	push	r4
    202c:	5f 92       	push	r5
    202e:	6f 92       	push	r6
    2030:	7f 92       	push	r7
    2032:	8f 92       	push	r8
    2034:	9f 92       	push	r9
    2036:	af 92       	push	r10
    2038:	bf 92       	push	r11
    203a:	cf 92       	push	r12
    203c:	df 92       	push	r13
    203e:	ef 92       	push	r14
    2040:	ff 92       	push	r15
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	ec 01       	movw	r28, r24
    204c:	5b 01       	movw	r10, r22
    204e:	2a 01       	movw	r4, r20
    2050:	8d 81       	ldd	r24, Y+5	; 0x05
    2052:	81 11       	cpse	r24, r1
    2054:	15 c0       	rjmp	.+42     	; 0x2080 <SdFile::read(void*, unsigned int)+0x5a>
    2056:	8f ef       	ldi	r24, 0xFF	; 255
    2058:	9f ef       	ldi	r25, 0xFF	; 255
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	bf 90       	pop	r11
    206c:	af 90       	pop	r10
    206e:	9f 90       	pop	r9
    2070:	8f 90       	pop	r8
    2072:	7f 90       	pop	r7
    2074:	6f 90       	pop	r6
    2076:	5f 90       	pop	r5
    2078:	4f 90       	pop	r4
    207a:	3f 90       	pop	r3
    207c:	2f 90       	pop	r2
    207e:	08 95       	ret
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	80 ff       	sbrs	r24, 0
    2084:	e8 cf       	rjmp	.-48     	; 0x2056 <SdFile::read(void*, unsigned int)+0x30>
    2086:	0b 89       	ldd	r16, Y+19	; 0x13
    2088:	1c 89       	ldd	r17, Y+20	; 0x14
    208a:	2d 89       	ldd	r18, Y+21	; 0x15
    208c:	3e 89       	ldd	r19, Y+22	; 0x16
    208e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2090:	5b 85       	ldd	r21, Y+11	; 0x0b
    2092:	6c 85       	ldd	r22, Y+12	; 0x0c
    2094:	7d 85       	ldd	r23, Y+13	; 0x0d
    2096:	c2 01       	movw	r24, r4
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	a0 e0       	ldi	r26, 0x00	; 0
    209c:	68 01       	movw	r12, r16
    209e:	79 01       	movw	r14, r18
    20a0:	c4 1a       	sub	r12, r20
    20a2:	d5 0a       	sbc	r13, r21
    20a4:	e6 0a       	sbc	r14, r22
    20a6:	f7 0a       	sbc	r15, r23
    20a8:	c8 16       	cp	r12, r24
    20aa:	d9 06       	cpc	r13, r25
    20ac:	ea 06       	cpc	r14, r26
    20ae:	fb 06       	cpc	r15, r27
    20b0:	18 f4       	brcc	.+6      	; 0x20b8 <SdFile::read(void*, unsigned int)+0x92>
    20b2:	28 01       	movw	r4, r16
    20b4:	44 1a       	sub	r4, r20
    20b6:	55 0a       	sbc	r5, r21
    20b8:	42 01       	movw	r8, r4
    20ba:	1e 01       	movw	r2, r28
    20bc:	26 e0       	ldi	r18, 0x06	; 6
    20be:	22 0e       	add	r2, r18
    20c0:	31 1c       	adc	r3, r1
    20c2:	81 14       	cp	r8, r1
    20c4:	91 04       	cpc	r9, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <SdFile::read(void*, unsigned int)+0xa4>
    20c8:	b3 c0       	rjmp	.+358    	; 0x2230 <SdFile::read(void*, unsigned int)+0x20a>
    20ca:	4a 85       	ldd	r20, Y+10	; 0x0a
    20cc:	5b 85       	ldd	r21, Y+11	; 0x0b
    20ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    20d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    20d2:	6a 01       	movw	r12, r20
    20d4:	81 e0       	ldi	r24, 0x01	; 1
    20d6:	d8 22       	and	r13, r24
    20d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20dc:	8a 01       	movw	r16, r20
    20de:	9b 01       	movw	r18, r22
    20e0:	e9 e0       	ldi	r30, 0x09	; 9
    20e2:	36 95       	lsr	r19
    20e4:	27 95       	ror	r18
    20e6:	17 95       	ror	r17
    20e8:	07 95       	ror	r16
    20ea:	ea 95       	dec	r30
    20ec:	d1 f7       	brne	.-12     	; 0x20e2 <SdFile::read(void*, unsigned int)+0xbc>
    20ee:	ed 81       	ldd	r30, Y+5	; 0x05
    20f0:	e2 30       	cpi	r30, 0x02	; 2
    20f2:	e1 f5       	brne	.+120    	; 0x216c <SdFile::read(void*, unsigned int)+0x146>
    20f4:	fc 01       	movw	r30, r24
    20f6:	62 8d       	ldd	r22, Z+26	; 0x1a
    20f8:	73 8d       	ldd	r23, Z+27	; 0x1b
    20fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    20fc:	95 8d       	ldd	r25, Z+29	; 0x1d
    20fe:	60 0f       	add	r22, r16
    2100:	71 1f       	adc	r23, r17
    2102:	82 1f       	adc	r24, r18
    2104:	93 1f       	adc	r25, r19
    2106:	61 2c       	mov	r6, r1
    2108:	22 e0       	ldi	r18, 0x02	; 2
    210a:	72 2e       	mov	r7, r18
    210c:	6c 18       	sub	r6, r12
    210e:	7d 08       	sbc	r7, r13
    2110:	86 14       	cp	r8, r6
    2112:	97 04       	cpc	r9, r7
    2114:	08 f4       	brcc	.+2      	; 0x2118 <SdFile::read(void*, unsigned int)+0xf2>
    2116:	34 01       	movw	r6, r8
_ZNK6SdFile14unbufferedReadEv():
    2118:	2c 81       	ldd	r18, Y+4	; 0x04
_ZN6SdFile4readEPvj():
    211a:	26 fd       	sbrc	r18, 6
    211c:	04 c0       	rjmp	.+8      	; 0x2126 <SdFile::read(void*, unsigned int)+0x100>
    211e:	61 14       	cp	r6, r1
    2120:	f2 e0       	ldi	r31, 0x02	; 2
    2122:	7f 06       	cpc	r7, r31
    2124:	71 f4       	brne	.+28     	; 0x2142 <SdFile::read(void*, unsigned int)+0x11c>
    2126:	00 91 09 01 	lds	r16, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    212a:	10 91 0a 01 	lds	r17, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    212e:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2132:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    2136:	06 17       	cp	r16, r22
    2138:	17 07       	cpc	r17, r23
    213a:	28 07       	cpc	r18, r24
    213c:	39 07       	cpc	r19, r25
    213e:	09 f0       	breq	.+2      	; 0x2142 <SdFile::read(void*, unsigned int)+0x11c>
    2140:	53 c0       	rjmp	.+166    	; 0x21e8 <SdFile::read(void*, unsigned int)+0x1c2>
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2148:	88 23       	and	r24, r24
    214a:	09 f4       	brne	.+2      	; 0x214e <SdFile::read(void*, unsigned int)+0x128>
    214c:	84 cf       	rjmp	.-248    	; 0x2056 <SdFile::read(void*, unsigned int)+0x30>
    214e:	c6 01       	movw	r24, r12
    2150:	83 55       	subi	r24, 0x53	; 83
    2152:	9d 4f       	sbci	r25, 0xFD	; 253
    2154:	d5 01       	movw	r26, r10
    2156:	9c 01       	movw	r18, r24
    2158:	26 0d       	add	r18, r6
    215a:	37 1d       	adc	r19, r7
    215c:	fc 01       	movw	r30, r24
    215e:	2e 17       	cp	r18, r30
    2160:	3f 07       	cpc	r19, r31
    2162:	09 f4       	brne	.+2      	; 0x2166 <SdFile::read(void*, unsigned int)+0x140>
    2164:	60 c0       	rjmp	.+192    	; 0x2226 <SdFile::read(void*, unsigned int)+0x200>
    2166:	41 91       	ld	r20, Z+
    2168:	4d 93       	st	X+, r20
    216a:	f9 cf       	rjmp	.-14     	; 0x215e <SdFile::read(void*, unsigned int)+0x138>
_ZNK8SdVolume14blockOfClusterEm():
    216c:	fc 01       	movw	r30, r24
    216e:	74 80       	ldd	r7, Z+4	; 0x04
    2170:	7a 94       	dec	r7
    2172:	70 22       	and	r7, r16
_ZN6SdFile4readEPvj():
    2174:	c1 14       	cp	r12, r1
    2176:	d1 04       	cpc	r13, r1
    2178:	71 f4       	brne	.+28     	; 0x2196 <SdFile::read(void*, unsigned int)+0x170>
    217a:	71 10       	cpse	r7, r1
    217c:	0c c0       	rjmp	.+24     	; 0x2196 <SdFile::read(void*, unsigned int)+0x170>
    217e:	45 2b       	or	r20, r21
    2180:	46 2b       	or	r20, r22
    2182:	47 2b       	or	r20, r23
    2184:	39 f5       	brne	.+78     	; 0x21d4 <SdFile::read(void*, unsigned int)+0x1ae>
    2186:	8f 89       	ldd	r24, Y+23	; 0x17
    2188:	98 8d       	ldd	r25, Y+24	; 0x18
    218a:	a9 8d       	ldd	r26, Y+25	; 0x19
    218c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	9f 83       	std	Y+7, r25	; 0x07
    2192:	a8 87       	std	Y+8, r26	; 0x08
    2194:	b9 87       	std	Y+9, r27	; 0x09
    2196:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2198:	fc 8d       	ldd	r31, Y+28	; 0x1c
_ZNK8SdVolume17clusterStartBlockEm():
    219a:	6e 81       	ldd	r22, Y+6	; 0x06
    219c:	7f 81       	ldd	r23, Y+7	; 0x07
    219e:	88 85       	ldd	r24, Y+8	; 0x08
    21a0:	99 85       	ldd	r25, Y+9	; 0x09
    21a2:	62 50       	subi	r22, 0x02	; 2
    21a4:	71 09       	sbc	r23, r1
    21a6:	81 09       	sbc	r24, r1
    21a8:	91 09       	sbc	r25, r1
    21aa:	25 85       	ldd	r18, Z+13	; 0x0d
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <SdFile::read(void*, unsigned int)+0x190>
    21ae:	66 0f       	add	r22, r22
    21b0:	77 1f       	adc	r23, r23
    21b2:	88 1f       	adc	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	2a 95       	dec	r18
    21b8:	d2 f7       	brpl	.-12     	; 0x21ae <SdFile::read(void*, unsigned int)+0x188>
    21ba:	06 85       	ldd	r16, Z+14	; 0x0e
    21bc:	17 85       	ldd	r17, Z+15	; 0x0f
    21be:	20 89       	ldd	r18, Z+16	; 0x10
    21c0:	31 89       	ldd	r19, Z+17	; 0x11
    21c2:	60 0f       	add	r22, r16
    21c4:	71 1f       	adc	r23, r17
    21c6:	82 1f       	adc	r24, r18
    21c8:	93 1f       	adc	r25, r19
_ZN6SdFile4readEPvj():
    21ca:	67 0d       	add	r22, r7
    21cc:	71 1d       	adc	r23, r1
    21ce:	81 1d       	adc	r24, r1
    21d0:	91 1d       	adc	r25, r1
    21d2:	99 cf       	rjmp	.-206    	; 0x2106 <SdFile::read(void*, unsigned int)+0xe0>
    21d4:	4e 81       	ldd	r20, Y+6	; 0x06
    21d6:	5f 81       	ldd	r21, Y+7	; 0x07
    21d8:	68 85       	ldd	r22, Y+8	; 0x08
    21da:	79 85       	ldd	r23, Y+9	; 0x09
    21dc:	91 01       	movw	r18, r2
    21de:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    21e2:	81 11       	cpse	r24, r1
    21e4:	d8 cf       	rjmp	.-80     	; 0x2196 <SdFile::read(void*, unsigned int)+0x170>
    21e6:	37 cf       	rjmp	.-402    	; 0x2056 <SdFile::read(void*, unsigned int)+0x30>
_ZN8SdVolume8readDataEmjjPh():
    21e8:	75 01       	movw	r14, r10
    21ea:	83 01       	movw	r16, r6
    21ec:	96 01       	movw	r18, r12
    21ee:	ab 01       	movw	r20, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SdVolume::sdCard_>
    21f6:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <SdVolume::sdCard_+0x1>
    21fa:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <Sd2Card::readData(unsigned long, unsigned int, unsigned int, unsigned char*)>
_ZN6SdFile4readEPvj():
    21fe:	88 23       	and	r24, r24
    2200:	09 f4       	brne	.+2      	; 0x2204 <SdFile::read(void*, unsigned int)+0x1de>
    2202:	29 cf       	rjmp	.-430    	; 0x2056 <SdFile::read(void*, unsigned int)+0x30>
    2204:	a6 0c       	add	r10, r6
    2206:	b7 1c       	adc	r11, r7
    2208:	8a 85       	ldd	r24, Y+10	; 0x0a
    220a:	9b 85       	ldd	r25, Y+11	; 0x0b
    220c:	ac 85       	ldd	r26, Y+12	; 0x0c
    220e:	bd 85       	ldd	r27, Y+13	; 0x0d
    2210:	86 0d       	add	r24, r6
    2212:	97 1d       	adc	r25, r7
    2214:	a1 1d       	adc	r26, r1
    2216:	b1 1d       	adc	r27, r1
    2218:	8a 87       	std	Y+10, r24	; 0x0a
    221a:	9b 87       	std	Y+11, r25	; 0x0b
    221c:	ac 87       	std	Y+12, r26	; 0x0c
    221e:	bd 87       	std	Y+13, r27	; 0x0d
    2220:	86 18       	sub	r8, r6
    2222:	97 08       	sbc	r9, r7
    2224:	4e cf       	rjmp	.-356    	; 0x20c2 <SdFile::read(void*, unsigned int)+0x9c>
    2226:	28 1b       	sub	r18, r24
    2228:	39 0b       	sbc	r19, r25
    222a:	a2 0e       	add	r10, r18
    222c:	b3 1e       	adc	r11, r19
    222e:	ec cf       	rjmp	.-40     	; 0x2208 <SdFile::read(void*, unsigned int)+0x1e2>
    2230:	c2 01       	movw	r24, r4
    2232:	13 cf       	rjmp	.-474    	; 0x205a <SdFile::read(void*, unsigned int)+0x34>

00002234 <SdFile::readDirCache()>:
_ZN6SdFile12readDirCacheEv():
    2234:	ff 92       	push	r15
    2236:	0f 93       	push	r16
    2238:	1f 93       	push	r17
    223a:	cf 93       	push	r28
    223c:	df 93       	push	r29
    223e:	1f 92       	push	r1
    2240:	cd b7       	in	r28, 0x3d	; 61
    2242:	de b7       	in	r29, 0x3e	; 62
    2244:	fc 01       	movw	r30, r24
    2246:	25 81       	ldd	r18, Z+5	; 0x05
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	c8 f0       	brcs	.+50     	; 0x227e <SdFile::readDirCache()+0x4a>
    224c:	8c 01       	movw	r16, r24
    224e:	42 85       	ldd	r20, Z+10	; 0x0a
    2250:	53 85       	ldd	r21, Z+11	; 0x0b
    2252:	64 85       	ldd	r22, Z+12	; 0x0c
    2254:	75 85       	ldd	r23, Z+13	; 0x0d
    2256:	85 e0       	ldi	r24, 0x05	; 5
    2258:	76 95       	lsr	r23
    225a:	67 95       	ror	r22
    225c:	57 95       	ror	r21
    225e:	47 95       	ror	r20
    2260:	8a 95       	dec	r24
    2262:	d1 f7       	brne	.-12     	; 0x2258 <SdFile::readDirCache()+0x24>
    2264:	f4 2f       	mov	r31, r20
    2266:	ff 70       	andi	r31, 0x0F	; 15
    2268:	ff 2e       	mov	r15, r31
_ZN6SdFile4readEv():
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	be 01       	movw	r22, r28
    2270:	6f 5f       	subi	r22, 0xFF	; 255
    2272:	7f 4f       	sbci	r23, 0xFF	; 255
    2274:	c8 01       	movw	r24, r16
    2276:	0e 94 13 10 	call	0x2026	; 0x2026 <SdFile::read(void*, unsigned int)>
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	19 f0       	breq	.+6      	; 0x2284 <SdFile::readDirCache()+0x50>
_ZN6SdFile12readDirCacheEv():
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	12 c0       	rjmp	.+36     	; 0x22a8 <SdFile::readDirCache()+0x74>
    2284:	f8 01       	movw	r30, r16
    2286:	82 85       	ldd	r24, Z+10	; 0x0a
    2288:	93 85       	ldd	r25, Z+11	; 0x0b
    228a:	a4 85       	ldd	r26, Z+12	; 0x0c
    228c:	b5 85       	ldd	r27, Z+13	; 0x0d
    228e:	4f 96       	adiw	r24, 0x1f	; 31
    2290:	a1 1d       	adc	r26, r1
    2292:	b1 1d       	adc	r27, r1
    2294:	82 87       	std	Z+10, r24	; 0x0a
    2296:	93 87       	std	Z+11, r25	; 0x0b
    2298:	a4 87       	std	Z+12, r26	; 0x0c
    229a:	b5 87       	std	Z+13, r27	; 0x0d
    229c:	f0 e2       	ldi	r31, 0x20	; 32
    229e:	ff 9e       	mul	r15, r31
    22a0:	c0 01       	movw	r24, r0
    22a2:	11 24       	eor	r1, r1
    22a4:	83 55       	subi	r24, 0x53	; 83
    22a6:	9d 4f       	sbci	r25, 0xFD	; 253
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	ff 90       	pop	r15
    22b4:	08 95       	ret

000022b6 <SdFile::seekSet(unsigned long)>:
_ZN6SdFile7seekSetEm():
    22b6:	8f 92       	push	r8
    22b8:	9f 92       	push	r9
    22ba:	af 92       	push	r10
    22bc:	bf 92       	push	r11
    22be:	cf 92       	push	r12
    22c0:	df 92       	push	r13
    22c2:	ef 92       	push	r14
    22c4:	ff 92       	push	r15
    22c6:	0f 93       	push	r16
    22c8:	1f 93       	push	r17
    22ca:	cf 93       	push	r28
    22cc:	df 93       	push	r29
    22ce:	ec 01       	movw	r28, r24
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	81 11       	cpse	r24, r1
    22d4:	0e c0       	rjmp	.+28     	; 0x22f2 <SdFile::seekSet(unsigned long)+0x3c>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	df 90       	pop	r13
    22e6:	cf 90       	pop	r12
    22e8:	bf 90       	pop	r11
    22ea:	af 90       	pop	r10
    22ec:	9f 90       	pop	r9
    22ee:	8f 90       	pop	r8
    22f0:	08 95       	ret
    22f2:	0b 89       	ldd	r16, Y+19	; 0x13
    22f4:	1c 89       	ldd	r17, Y+20	; 0x14
    22f6:	2d 89       	ldd	r18, Y+21	; 0x15
    22f8:	3e 89       	ldd	r19, Y+22	; 0x16
    22fa:	04 17       	cp	r16, r20
    22fc:	15 07       	cpc	r17, r21
    22fe:	26 07       	cpc	r18, r22
    2300:	37 07       	cpc	r19, r23
    2302:	48 f3       	brcs	.-46     	; 0x22d6 <SdFile::seekSet(unsigned long)+0x20>
    2304:	4a 01       	movw	r8, r20
    2306:	5b 01       	movw	r10, r22
    2308:	82 30       	cpi	r24, 0x02	; 2
    230a:	31 f4       	brne	.+12     	; 0x2318 <SdFile::seekSet(unsigned long)+0x62>
    230c:	8a 86       	std	Y+10, r8	; 0x0a
    230e:	9b 86       	std	Y+11, r9	; 0x0b
    2310:	ac 86       	std	Y+12, r10	; 0x0c
    2312:	bd 86       	std	Y+13, r11	; 0x0d
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	e0 cf       	rjmp	.-64     	; 0x22d8 <SdFile::seekSet(unsigned long)+0x22>
    2318:	81 14       	cp	r8, r1
    231a:	91 04       	cpc	r9, r1
    231c:	a1 04       	cpc	r10, r1
    231e:	b1 04       	cpc	r11, r1
    2320:	49 f4       	brne	.+18     	; 0x2334 <SdFile::seekSet(unsigned long)+0x7e>
    2322:	1e 82       	std	Y+6, r1	; 0x06
    2324:	1f 82       	std	Y+7, r1	; 0x07
    2326:	18 86       	std	Y+8, r1	; 0x08
    2328:	19 86       	std	Y+9, r1	; 0x09
    232a:	1a 86       	std	Y+10, r1	; 0x0a
    232c:	1b 86       	std	Y+11, r1	; 0x0b
    232e:	1c 86       	std	Y+12, r1	; 0x0c
    2330:	1d 86       	std	Y+13, r1	; 0x0d
    2332:	f0 cf       	rjmp	.-32     	; 0x2314 <SdFile::seekSet(unsigned long)+0x5e>
    2334:	0a 85       	ldd	r16, Y+10	; 0x0a
    2336:	1b 85       	ldd	r17, Y+11	; 0x0b
    2338:	2c 85       	ldd	r18, Y+12	; 0x0c
    233a:	3d 85       	ldd	r19, Y+13	; 0x0d
    233c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    233e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2340:	85 85       	ldd	r24, Z+13	; 0x0d
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	09 96       	adiw	r24, 0x09	; 9
    2346:	b9 01       	movw	r22, r18
    2348:	a8 01       	movw	r20, r16
    234a:	41 50       	subi	r20, 0x01	; 1
    234c:	51 09       	sbc	r21, r1
    234e:	61 09       	sbc	r22, r1
    2350:	71 09       	sbc	r23, r1
    2352:	08 2e       	mov	r0, r24
    2354:	04 c0       	rjmp	.+8      	; 0x235e <SdFile::seekSet(unsigned long)+0xa8>
    2356:	76 95       	lsr	r23
    2358:	67 95       	ror	r22
    235a:	57 95       	ror	r21
    235c:	47 95       	ror	r20
    235e:	0a 94       	dec	r0
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <SdFile::seekSet(unsigned long)+0xa0>
    2362:	75 01       	movw	r14, r10
    2364:	64 01       	movw	r12, r8
    2366:	e1 e0       	ldi	r30, 0x01	; 1
    2368:	ce 1a       	sub	r12, r30
    236a:	d1 08       	sbc	r13, r1
    236c:	e1 08       	sbc	r14, r1
    236e:	f1 08       	sbc	r15, r1
    2370:	04 c0       	rjmp	.+8      	; 0x237a <SdFile::seekSet(unsigned long)+0xc4>
    2372:	f6 94       	lsr	r15
    2374:	e7 94       	ror	r14
    2376:	d7 94       	ror	r13
    2378:	c7 94       	ror	r12
    237a:	8a 95       	dec	r24
    237c:	d2 f7       	brpl	.-12     	; 0x2372 <SdFile::seekSet(unsigned long)+0xbc>
    237e:	c4 16       	cp	r12, r20
    2380:	d5 06       	cpc	r13, r21
    2382:	e6 06       	cpc	r14, r22
    2384:	f7 06       	cpc	r15, r23
    2386:	20 f0       	brcs	.+8      	; 0x2390 <SdFile::seekSet(unsigned long)+0xda>
    2388:	01 2b       	or	r16, r17
    238a:	02 2b       	or	r16, r18
    238c:	03 2b       	or	r16, r19
    238e:	11 f5       	brne	.+68     	; 0x23d4 <SdFile::seekSet(unsigned long)+0x11e>
    2390:	8f 89       	ldd	r24, Y+23	; 0x17
    2392:	98 8d       	ldd	r25, Y+24	; 0x18
    2394:	a9 8d       	ldd	r26, Y+25	; 0x19
    2396:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2398:	8e 83       	std	Y+6, r24	; 0x06
    239a:	9f 83       	std	Y+7, r25	; 0x07
    239c:	a8 87       	std	Y+8, r26	; 0x08
    239e:	b9 87       	std	Y+9, r27	; 0x09
    23a0:	8e 01       	movw	r16, r28
    23a2:	0a 5f       	subi	r16, 0xFA	; 250
    23a4:	1f 4f       	sbci	r17, 0xFF	; 255
    23a6:	c1 14       	cp	r12, r1
    23a8:	d1 04       	cpc	r13, r1
    23aa:	e1 04       	cpc	r14, r1
    23ac:	f1 04       	cpc	r15, r1
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <SdFile::seekSet(unsigned long)+0xfc>
    23b0:	ad cf       	rjmp	.-166    	; 0x230c <SdFile::seekSet(unsigned long)+0x56>
    23b2:	4e 81       	ldd	r20, Y+6	; 0x06
    23b4:	5f 81       	ldd	r21, Y+7	; 0x07
    23b6:	68 85       	ldd	r22, Y+8	; 0x08
    23b8:	79 85       	ldd	r23, Y+9	; 0x09
    23ba:	98 01       	movw	r18, r16
    23bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	c9 1a       	sub	r12, r25
    23c8:	d1 08       	sbc	r13, r1
    23ca:	e1 08       	sbc	r14, r1
    23cc:	f1 08       	sbc	r15, r1
    23ce:	81 11       	cpse	r24, r1
    23d0:	ea cf       	rjmp	.-44     	; 0x23a6 <SdFile::seekSet(unsigned long)+0xf0>
    23d2:	81 cf       	rjmp	.-254    	; 0x22d6 <SdFile::seekSet(unsigned long)+0x20>
    23d4:	c4 1a       	sub	r12, r20
    23d6:	d5 0a       	sbc	r13, r21
    23d8:	e6 0a       	sbc	r14, r22
    23da:	f7 0a       	sbc	r15, r23
    23dc:	e1 cf       	rjmp	.-62     	; 0x23a0 <SdFile::seekSet(unsigned long)+0xea>

000023de <SdFile::sync()>:
_ZN6SdFile4syncEv():
    23de:	0f 93       	push	r16
    23e0:	1f 93       	push	r17
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	ec 01       	movw	r28, r24
    23e8:	8d 81       	ldd	r24, Y+5	; 0x05
    23ea:	88 23       	and	r24, r24
    23ec:	d9 f1       	breq	.+118    	; 0x2464 <SdFile::sync()+0x86>
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	87 ff       	sbrs	r24, 7
    23f2:	32 c0       	rjmp	.+100    	; 0x2458 <SdFile::sync()+0x7a>
    23f4:	61 e0       	ldi	r22, 0x01	; 1
    23f6:	ce 01       	movw	r24, r28
    23f8:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <SdFile::cacheDirEntry(unsigned char)>
    23fc:	8c 01       	movw	r16, r24
    23fe:	89 2b       	or	r24, r25
    2400:	89 f1       	breq	.+98     	; 0x2464 <SdFile::sync()+0x86>
    2402:	8d 81       	ldd	r24, Y+5	; 0x05
    2404:	82 30       	cpi	r24, 0x02	; 2
    2406:	48 f4       	brcc	.+18     	; 0x241a <SdFile::sync()+0x3c>
    2408:	8b 89       	ldd	r24, Y+19	; 0x13
    240a:	9c 89       	ldd	r25, Y+20	; 0x14
    240c:	ad 89       	ldd	r26, Y+21	; 0x15
    240e:	be 89       	ldd	r27, Y+22	; 0x16
    2410:	f8 01       	movw	r30, r16
    2412:	84 8f       	std	Z+28, r24	; 0x1c
    2414:	95 8f       	std	Z+29, r25	; 0x1d
    2416:	a6 8f       	std	Z+30, r26	; 0x1e
    2418:	b7 8f       	std	Z+31, r27	; 0x1f
    241a:	8f 89       	ldd	r24, Y+23	; 0x17
    241c:	98 8d       	ldd	r25, Y+24	; 0x18
    241e:	f8 01       	movw	r30, r16
    2420:	93 8f       	std	Z+27, r25	; 0x1b
    2422:	82 8f       	std	Z+26, r24	; 0x1a
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	a9 8d       	ldd	r26, Y+25	; 0x19
    242a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    242c:	b5 8b       	std	Z+21, r27	; 0x15
    242e:	a4 8b       	std	Z+20, r26	; 0x14
    2430:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <SdFile::dateTime_>
    2434:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <SdFile::dateTime_+0x1>
    2438:	30 97       	sbiw	r30, 0x00	; 0
    243a:	59 f0       	breq	.+22     	; 0x2452 <SdFile::sync()+0x74>
    243c:	b8 01       	movw	r22, r16
    243e:	6a 5e       	subi	r22, 0xEA	; 234
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	c8 01       	movw	r24, r16
    2444:	48 96       	adiw	r24, 0x18	; 24
    2446:	09 95       	icall
    2448:	f8 01       	movw	r30, r16
    244a:	80 8d       	ldd	r24, Z+24	; 0x18
    244c:	91 8d       	ldd	r25, Z+25	; 0x19
    244e:	93 8b       	std	Z+19, r25	; 0x13
    2450:	82 8b       	std	Z+18, r24	; 0x12
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	8f 77       	andi	r24, 0x7F	; 127
    2456:	8c 83       	std	Y+4, r24	; 0x04
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <SdVolume::cacheFlush()>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	08 95       	ret

00002470 <SdFile::close()>:
_ZN6SdFile5closeEv():
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	ec 01       	movw	r28, r24
    2476:	0e 94 ef 11 	call	0x23de	; 0x23de <SdFile::sync()>
    247a:	88 23       	and	r24, r24
    247c:	11 f0       	breq	.+4      	; 0x2482 <SdFile::close()+0x12>
    247e:	1d 82       	std	Y+5, r1	; 0x05
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	df 91       	pop	r29
    2484:	cf 91       	pop	r28
    2486:	08 95       	ret

00002488 <SdFile::truncate(unsigned long)>:
_ZN6SdFile8truncateEm():
    2488:	4f 92       	push	r4
    248a:	5f 92       	push	r5
    248c:	6f 92       	push	r6
    248e:	7f 92       	push	r7
    2490:	8f 92       	push	r8
    2492:	9f 92       	push	r9
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	ef 92       	push	r14
    249a:	ff 92       	push	r15
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
    24a0:	cf 93       	push	r28
    24a2:	df 93       	push	r29
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <SdFile::truncate(unsigned long)+0x1e>
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <SdFile::truncate(unsigned long)+0x20>
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	fc 01       	movw	r30, r24
    24ae:	85 81       	ldd	r24, Z+5	; 0x05
    24b0:	81 30       	cpi	r24, 0x01	; 1
    24b2:	a1 f0       	breq	.+40     	; 0x24dc <SdFile::truncate(unsigned long)+0x54>
    24b4:	80 e0       	ldi	r24, 0x00	; 0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	0f 91       	pop	r16
    24c6:	ff 90       	pop	r15
    24c8:	ef 90       	pop	r14
    24ca:	bf 90       	pop	r11
    24cc:	af 90       	pop	r10
    24ce:	9f 90       	pop	r9
    24d0:	8f 90       	pop	r8
    24d2:	7f 90       	pop	r7
    24d4:	6f 90       	pop	r6
    24d6:	5f 90       	pop	r5
    24d8:	4f 90       	pop	r4
    24da:	08 95       	ret
    24dc:	84 81       	ldd	r24, Z+4	; 0x04
    24de:	81 ff       	sbrs	r24, 1
    24e0:	e9 cf       	rjmp	.-46     	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
    24e2:	83 89       	ldd	r24, Z+19	; 0x13
    24e4:	94 89       	ldd	r25, Z+20	; 0x14
    24e6:	a5 89       	ldd	r26, Z+21	; 0x15
    24e8:	b6 89       	ldd	r27, Z+22	; 0x16
    24ea:	84 17       	cp	r24, r20
    24ec:	95 07       	cpc	r25, r21
    24ee:	a6 07       	cpc	r26, r22
    24f0:	b7 07       	cpc	r27, r23
    24f2:	00 f3       	brcs	.-64     	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
    24f4:	89 2b       	or	r24, r25
    24f6:	8a 2b       	or	r24, r26
    24f8:	8b 2b       	or	r24, r27
    24fa:	09 f4       	brne	.+2      	; 0x24fe <SdFile::truncate(unsigned long)+0x76>
    24fc:	77 c0       	rjmp	.+238    	; 0x25ec <SdFile::truncate(unsigned long)+0x164>
    24fe:	4a 01       	movw	r8, r20
    2500:	5b 01       	movw	r10, r22
    2502:	7f 01       	movw	r14, r30
    2504:	42 84       	ldd	r4, Z+10	; 0x0a
    2506:	53 84       	ldd	r5, Z+11	; 0x0b
    2508:	64 84       	ldd	r6, Z+12	; 0x0c
    250a:	75 84       	ldd	r7, Z+13	; 0x0d
    250c:	cf 01       	movw	r24, r30
    250e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <SdFile::seekSet(unsigned long)>
    2512:	88 23       	and	r24, r24
    2514:	79 f2       	breq	.-98     	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
    2516:	f7 01       	movw	r30, r14
    2518:	83 8d       	ldd	r24, Z+27	; 0x1b
    251a:	94 8d       	ldd	r25, Z+28	; 0x1c
    251c:	81 14       	cp	r8, r1
    251e:	91 04       	cpc	r9, r1
    2520:	a1 04       	cpc	r10, r1
    2522:	b1 04       	cpc	r11, r1
    2524:	49 f5       	brne	.+82     	; 0x2578 <SdFile::truncate(unsigned long)+0xf0>
    2526:	47 89       	ldd	r20, Z+23	; 0x17
    2528:	50 8d       	ldd	r21, Z+24	; 0x18
    252a:	61 8d       	ldd	r22, Z+25	; 0x19
    252c:	72 8d       	ldd	r23, Z+26	; 0x1a
    252e:	0e 94 44 19 	call	0x3288	; 0x3288 <SdVolume::freeChain(unsigned long)>
    2532:	88 23       	and	r24, r24
    2534:	09 f4       	brne	.+2      	; 0x2538 <SdFile::truncate(unsigned long)+0xb0>
    2536:	be cf       	rjmp	.-132    	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
    2538:	f7 01       	movw	r30, r14
    253a:	17 8a       	std	Z+23, r1	; 0x17
    253c:	10 8e       	std	Z+24, r1	; 0x18
    253e:	11 8e       	std	Z+25, r1	; 0x19
    2540:	12 8e       	std	Z+26, r1	; 0x1a
    2542:	f7 01       	movw	r30, r14
    2544:	83 8a       	std	Z+19, r8	; 0x13
    2546:	94 8a       	std	Z+20, r9	; 0x14
    2548:	a5 8a       	std	Z+21, r10	; 0x15
    254a:	b6 8a       	std	Z+22, r11	; 0x16
    254c:	84 81       	ldd	r24, Z+4	; 0x04
    254e:	80 68       	ori	r24, 0x80	; 128
    2550:	84 83       	std	Z+4, r24	; 0x04
    2552:	c7 01       	movw	r24, r14
    2554:	0e 94 ef 11 	call	0x23de	; 0x23de <SdFile::sync()>
    2558:	88 23       	and	r24, r24
    255a:	09 f4       	brne	.+2      	; 0x255e <SdFile::truncate(unsigned long)+0xd6>
    255c:	ab cf       	rjmp	.-170    	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
    255e:	b5 01       	movw	r22, r10
    2560:	a4 01       	movw	r20, r8
    2562:	44 16       	cp	r4, r20
    2564:	55 06       	cpc	r5, r21
    2566:	66 06       	cpc	r6, r22
    2568:	77 06       	cpc	r7, r23
    256a:	10 f4       	brcc	.+4      	; 0x2570 <SdFile::truncate(unsigned long)+0xe8>
    256c:	b3 01       	movw	r22, r6
    256e:	a2 01       	movw	r20, r4
    2570:	c7 01       	movw	r24, r14
    2572:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <SdFile::seekSet(unsigned long)>
    2576:	9f cf       	rjmp	.-194    	; 0x24b6 <SdFile::truncate(unsigned long)+0x2e>
    2578:	46 81       	ldd	r20, Z+6	; 0x06
    257a:	57 81       	ldd	r21, Z+7	; 0x07
    257c:	60 85       	ldd	r22, Z+8	; 0x08
    257e:	71 85       	ldd	r23, Z+9	; 0x09
    2580:	9e 01       	movw	r18, r28
    2582:	2f 5f       	subi	r18, 0xFF	; 255
    2584:	3f 4f       	sbci	r19, 0xFF	; 255
    2586:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    258a:	88 23       	and	r24, r24
    258c:	09 f4       	brne	.+2      	; 0x2590 <SdFile::truncate(unsigned long)+0x108>
    258e:	92 cf       	rjmp	.-220    	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
    2590:	f7 01       	movw	r30, r14
    2592:	83 8d       	ldd	r24, Z+27	; 0x1b
    2594:	94 8d       	ldd	r25, Z+28	; 0x1c
    2596:	49 81       	ldd	r20, Y+1	; 0x01
    2598:	5a 81       	ldd	r21, Y+2	; 0x02
    259a:	6b 81       	ldd	r22, Y+3	; 0x03
    259c:	7c 81       	ldd	r23, Y+4	; 0x04
_ZNK8SdVolume5isEOCEm():
    259e:	fc 01       	movw	r30, r24
    25a0:	27 89       	ldd	r18, Z+23	; 0x17
    25a2:	20 31       	cpi	r18, 0x10	; 16
    25a4:	f1 f4       	brne	.+60     	; 0x25e2 <SdFile::truncate(unsigned long)+0x15a>
    25a6:	08 ef       	ldi	r16, 0xF8	; 248
    25a8:	1f ef       	ldi	r17, 0xFF	; 255
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
_ZN6SdFile8truncateEm():
    25ae:	40 17       	cp	r20, r16
    25b0:	51 07       	cpc	r21, r17
    25b2:	62 07       	cpc	r22, r18
    25b4:	73 07       	cpc	r23, r19
    25b6:	28 f6       	brcc	.-118    	; 0x2542 <SdFile::truncate(unsigned long)+0xba>
    25b8:	0e 94 44 19 	call	0x3288	; 0x3288 <SdVolume::freeChain(unsigned long)>
    25bc:	88 23       	and	r24, r24
    25be:	09 f4       	brne	.+2      	; 0x25c2 <SdFile::truncate(unsigned long)+0x13a>
    25c0:	79 cf       	rjmp	.-270    	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
_ZN8SdVolume9fatPutEOCEm():
    25c2:	f7 01       	movw	r30, r14
    25c4:	46 81       	ldd	r20, Z+6	; 0x06
    25c6:	57 81       	ldd	r21, Z+7	; 0x07
    25c8:	60 85       	ldd	r22, Z+8	; 0x08
    25ca:	71 85       	ldd	r23, Z+9	; 0x09
    25cc:	0f ef       	ldi	r16, 0xFF	; 255
    25ce:	1f ef       	ldi	r17, 0xFF	; 255
    25d0:	2f ef       	ldi	r18, 0xFF	; 255
    25d2:	3f e0       	ldi	r19, 0x0F	; 15
    25d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    25d6:	94 8d       	ldd	r25, Z+28	; 0x1c
    25d8:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <SdVolume::fatPut(unsigned long, unsigned long)>
_ZN6SdFile8truncateEm():
    25dc:	81 11       	cpse	r24, r1
    25de:	b1 cf       	rjmp	.-158    	; 0x2542 <SdFile::truncate(unsigned long)+0xba>
    25e0:	69 cf       	rjmp	.-302    	; 0x24b4 <SdFile::truncate(unsigned long)+0x2c>
_ZNK8SdVolume5isEOCEm():
    25e2:	08 ef       	ldi	r16, 0xF8	; 248
    25e4:	1f ef       	ldi	r17, 0xFF	; 255
    25e6:	2f ef       	ldi	r18, 0xFF	; 255
    25e8:	3f e0       	ldi	r19, 0x0F	; 15
    25ea:	e1 cf       	rjmp	.-62     	; 0x25ae <SdFile::truncate(unsigned long)+0x126>
_ZN6SdFile8truncateEm():
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	63 cf       	rjmp	.-314    	; 0x24b6 <SdFile::truncate(unsigned long)+0x2e>

000025f0 <SdFile::openCachedEntry(unsigned char, unsigned char)>:
_ZN6SdFile15openCachedEntryEhh():
    25f0:	cf 92       	push	r12
    25f2:	df 92       	push	r13
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	ec 01       	movw	r28, r24
    2600:	80 e2       	ldi	r24, 0x20	; 32
    2602:	68 9f       	mul	r22, r24
    2604:	f0 01       	movw	r30, r0
    2606:	11 24       	eor	r1, r1
    2608:	e3 55       	subi	r30, 0x53	; 83
    260a:	fd 4f       	sbci	r31, 0xFD	; 253
    260c:	93 85       	ldd	r25, Z+11	; 0x0b
    260e:	91 71       	andi	r25, 0x11	; 17
    2610:	61 f0       	breq	.+24     	; 0x262a <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3a>
    2612:	84 2f       	mov	r24, r20
    2614:	82 74       	andi	r24, 0x42	; 66
    2616:	49 f0       	breq	.+18     	; 0x262a <SdFile::openCachedEntry(unsigned char, unsigned char)+0x3a>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	08 95       	ret
    262a:	14 2f       	mov	r17, r20
    262c:	6a 8b       	std	Y+18, r22	; 0x12
    262e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    2632:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2636:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    263a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    263e:	8e 87       	std	Y+14, r24	; 0x0e
    2640:	9f 87       	std	Y+15, r25	; 0x0f
    2642:	a8 8b       	std	Y+16, r26	; 0x10
    2644:	b9 8b       	std	Y+17, r27	; 0x11
    2646:	c4 88       	ldd	r12, Z+20	; 0x14
    2648:	d5 88       	ldd	r13, Z+21	; 0x15
    264a:	f1 2c       	mov	r15, r1
    264c:	e1 2c       	mov	r14, r1
    264e:	76 01       	movw	r14, r12
    2650:	dd 24       	eor	r13, r13
    2652:	cc 24       	eor	r12, r12
    2654:	cf 8a       	std	Y+23, r12	; 0x17
    2656:	d8 8e       	std	Y+24, r13	; 0x18
    2658:	e9 8e       	std	Y+25, r14	; 0x19
    265a:	fa 8e       	std	Y+26, r15	; 0x1a
    265c:	82 8d       	ldd	r24, Z+26	; 0x1a
    265e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	a0 e0       	ldi	r26, 0x00	; 0
    2664:	ac 01       	movw	r20, r24
    2666:	bd 01       	movw	r22, r26
    2668:	4c 29       	or	r20, r12
    266a:	5d 29       	or	r21, r13
    266c:	6e 29       	or	r22, r14
    266e:	7f 29       	or	r23, r15
    2670:	4f 8b       	std	Y+23, r20	; 0x17
    2672:	58 8f       	std	Y+24, r21	; 0x18
    2674:	69 8f       	std	Y+25, r22	; 0x19
    2676:	7a 8f       	std	Y+26, r23	; 0x1a
    2678:	83 85       	ldd	r24, Z+11	; 0x0b
    267a:	88 71       	andi	r24, 0x18	; 24
    267c:	29 f5       	brne	.+74     	; 0x26c8 <SdFile::openCachedEntry(unsigned char, unsigned char)+0xd8>
    267e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2680:	95 8d       	ldd	r25, Z+29	; 0x1d
    2682:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2684:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2686:	8b 8b       	std	Y+19, r24	; 0x13
    2688:	9c 8b       	std	Y+20, r25	; 0x14
    268a:	ad 8b       	std	Y+21, r26	; 0x15
    268c:	be 8b       	std	Y+22, r27	; 0x16
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	8d 83       	std	Y+5, r24	; 0x05
    2692:	81 2f       	mov	r24, r17
    2694:	8f 70       	andi	r24, 0x0F	; 15
    2696:	8c 83       	std	Y+4, r24	; 0x04
    2698:	1e 82       	std	Y+6, r1	; 0x06
    269a:	1f 82       	std	Y+7, r1	; 0x07
    269c:	18 86       	std	Y+8, r1	; 0x08
    269e:	19 86       	std	Y+9, r1	; 0x09
    26a0:	1a 86       	std	Y+10, r1	; 0x0a
    26a2:	1b 86       	std	Y+11, r1	; 0x0b
    26a4:	1c 86       	std	Y+12, r1	; 0x0c
    26a6:	1d 86       	std	Y+13, r1	; 0x0d
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	16 ff       	sbrs	r17, 6
    26ac:	b6 cf       	rjmp	.-148    	; 0x261a <SdFile::openCachedEntry(unsigned char, unsigned char)+0x2a>
    26ae:	40 e0       	ldi	r20, 0x00	; 0
    26b0:	50 e0       	ldi	r21, 0x00	; 0
    26b2:	ba 01       	movw	r22, r20
    26b4:	ce 01       	movw	r24, r28
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	ff 90       	pop	r15
    26be:	ef 90       	pop	r14
    26c0:	df 90       	pop	r13
    26c2:	cf 90       	pop	r12
    26c4:	0c 94 44 12 	jmp	0x2488	; 0x2488 <SdFile::truncate(unsigned long)>
    26c8:	80 31       	cpi	r24, 0x10	; 16
    26ca:	09 f0       	breq	.+2      	; 0x26ce <SdFile::openCachedEntry(unsigned char, unsigned char)+0xde>
    26cc:	a5 cf       	rjmp	.-182    	; 0x2618 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x28>
    26ce:	9e 01       	movw	r18, r28
    26d0:	2d 5e       	subi	r18, 0xED	; 237
    26d2:	3f 4f       	sbci	r19, 0xFF	; 255
    26d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d8:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <SdVolume::chainSize(unsigned long, unsigned long*) const>
    26dc:	88 23       	and	r24, r24
    26de:	09 f4       	brne	.+2      	; 0x26e2 <SdFile::openCachedEntry(unsigned char, unsigned char)+0xf2>
    26e0:	9b cf       	rjmp	.-202    	; 0x2618 <SdFile::openCachedEntry(unsigned char, unsigned char)+0x28>
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	d5 cf       	rjmp	.-86     	; 0x2690 <SdFile::openCachedEntry(unsigned char, unsigned char)+0xa0>

000026e6 <SdFile::open(SdFile*, char const*, unsigned char)>:
_ZN6SdFile4openEPS_PKch():
    26e6:	bf 92       	push	r11
    26e8:	cf 92       	push	r12
    26ea:	df 92       	push	r13
    26ec:	ef 92       	push	r14
    26ee:	ff 92       	push	r15
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
    26fc:	2b 97       	sbiw	r28, 0x0b	; 11
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	de bf       	out	0x3e, r29	; 62
    2704:	0f be       	out	0x3f, r0	; 63
    2706:	cd bf       	out	0x3d, r28	; 61
    2708:	fc 01       	movw	r30, r24
    270a:	35 81       	ldd	r19, Z+5	; 0x05
    270c:	31 11       	cpse	r19, r1
    270e:	0b c0       	rjmp	.+22     	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    2710:	c2 2e       	mov	r12, r18
    2712:	8b 01       	movw	r16, r22
    2714:	7c 01       	movw	r14, r24
    2716:	be 01       	movw	r22, r28
    2718:	6f 5f       	subi	r22, 0xFF	; 255
    271a:	7f 4f       	sbci	r23, 0xFF	; 255
    271c:	ca 01       	movw	r24, r20
    271e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <SdFile::make83Name(char const*, unsigned char*)>
    2722:	81 11       	cpse	r24, r1
    2724:	02 c0       	rjmp	.+4      	; 0x272a <SdFile::open(SdFile*, char const*, unsigned char)+0x44>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	a1 c0       	rjmp	.+322    	; 0x286c <SdFile::open(SdFile*, char const*, unsigned char)+0x186>
    272a:	f8 01       	movw	r30, r16
    272c:	83 8d       	ldd	r24, Z+27	; 0x1b
    272e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2730:	f7 01       	movw	r30, r14
    2732:	94 8f       	std	Z+28, r25	; 0x1c
    2734:	83 8f       	std	Z+27, r24	; 0x1b
_ZN6SdFile6rewindEv():
    2736:	f8 01       	movw	r30, r16
    2738:	16 82       	std	Z+6, r1	; 0x06
    273a:	17 82       	std	Z+7, r1	; 0x07
    273c:	10 86       	std	Z+8, r1	; 0x08
    273e:	11 86       	std	Z+9, r1	; 0x09
    2740:	12 86       	std	Z+10, r1	; 0x0a
    2742:	13 86       	std	Z+11, r1	; 0x0b
    2744:	14 86       	std	Z+12, r1	; 0x0c
    2746:	15 86       	std	Z+13, r1	; 0x0d
_ZN6SdFile4openEPS_PKch():
    2748:	b1 2c       	mov	r11, r1
    274a:	f8 01       	movw	r30, r16
    274c:	82 85       	ldd	r24, Z+10	; 0x0a
    274e:	93 85       	ldd	r25, Z+11	; 0x0b
    2750:	a4 85       	ldd	r26, Z+12	; 0x0c
    2752:	b5 85       	ldd	r27, Z+13	; 0x0d
    2754:	43 89       	ldd	r20, Z+19	; 0x13
    2756:	54 89       	ldd	r21, Z+20	; 0x14
    2758:	65 89       	ldd	r22, Z+21	; 0x15
    275a:	76 89       	ldd	r23, Z+22	; 0x16
    275c:	84 17       	cp	r24, r20
    275e:	95 07       	cpc	r25, r21
    2760:	a6 07       	cpc	r26, r22
    2762:	b7 07       	cpc	r27, r23
    2764:	88 f5       	brcc	.+98     	; 0x27c8 <SdFile::open(SdFile*, char const*, unsigned char)+0xe2>
    2766:	25 e0       	ldi	r18, 0x05	; 5
    2768:	b6 95       	lsr	r27
    276a:	a7 95       	ror	r26
    276c:	97 95       	ror	r25
    276e:	87 95       	ror	r24
    2770:	2a 95       	dec	r18
    2772:	d1 f7       	brne	.-12     	; 0x2768 <SdFile::open(SdFile*, char const*, unsigned char)+0x82>
    2774:	f8 2f       	mov	r31, r24
    2776:	ff 70       	andi	r31, 0x0F	; 15
    2778:	df 2e       	mov	r13, r31
    277a:	c8 01       	movw	r24, r16
    277c:	0e 94 1a 11 	call	0x2234	; 0x2234 <SdFile::readDirCache()>
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	89 f2       	breq	.-94     	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    2784:	fc 01       	movw	r30, r24
    2786:	20 81       	ld	r18, Z
    2788:	22 23       	and	r18, r18
    278a:	41 f0       	breq	.+16     	; 0x279c <SdFile::open(SdFile*, char const*, unsigned char)+0xb6>
    278c:	25 3e       	cpi	r18, 0xE5	; 229
    278e:	09 f0       	breq	.+2      	; 0x2792 <SdFile::open(SdFile*, char const*, unsigned char)+0xac>
    2790:	59 c0       	rjmp	.+178    	; 0x2844 <SdFile::open(SdFile*, char const*, unsigned char)+0x15e>
    2792:	bb 20       	and	r11, r11
    2794:	29 f0       	breq	.+10     	; 0x27a0 <SdFile::open(SdFile*, char const*, unsigned char)+0xba>
    2796:	bb 24       	eor	r11, r11
    2798:	b3 94       	inc	r11
    279a:	d7 cf       	rjmp	.-82     	; 0x274a <SdFile::open(SdFile*, char const*, unsigned char)+0x64>
    279c:	b1 10       	cpse	r11, r1
    279e:	0e c0       	rjmp	.+28     	; 0x27bc <SdFile::open(SdFile*, char const*, unsigned char)+0xd6>
    27a0:	f7 01       	movw	r30, r14
    27a2:	d2 8a       	std	Z+18, r13	; 0x12
    27a4:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    27a8:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    27ac:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    27b0:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    27b4:	46 87       	std	Z+14, r20	; 0x0e
    27b6:	57 87       	std	Z+15, r21	; 0x0f
    27b8:	60 8b       	std	Z+16, r22	; 0x10
    27ba:	71 8b       	std	Z+17, r23	; 0x11
    27bc:	fc 01       	movw	r30, r24
    27be:	80 81       	ld	r24, Z
    27c0:	81 11       	cpse	r24, r1
    27c2:	e9 cf       	rjmp	.-46     	; 0x2796 <SdFile::open(SdFile*, char const*, unsigned char)+0xb0>
    27c4:	bb 24       	eor	r11, r11
    27c6:	b3 94       	inc	r11
    27c8:	8c 2d       	mov	r24, r12
    27ca:	82 71       	andi	r24, 0x12	; 18
    27cc:	82 31       	cpi	r24, 0x12	; 18
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <SdFile::open(SdFile*, char const*, unsigned char)+0xec>
    27d0:	aa cf       	rjmp	.-172    	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    27d2:	bb 20       	and	r11, r11
    27d4:	09 f4       	brne	.+2      	; 0x27d8 <SdFile::open(SdFile*, char const*, unsigned char)+0xf2>
    27d6:	5a c0       	rjmp	.+180    	; 0x288c <SdFile::open(SdFile*, char const*, unsigned char)+0x1a6>
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	c7 01       	movw	r24, r14
    27dc:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <SdFile::cacheDirEntry(unsigned char)>
    27e0:	8c 01       	movw	r16, r24
    27e2:	89 2b       	or	r24, r25
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <SdFile::open(SdFile*, char const*, unsigned char)+0x102>
    27e6:	9f cf       	rjmp	.-194    	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    27e8:	80 e2       	ldi	r24, 0x20	; 32
    27ea:	f8 01       	movw	r30, r16
    27ec:	11 92       	st	Z+, r1
    27ee:	8a 95       	dec	r24
    27f0:	e9 f7       	brne	.-6      	; 0x27ec <SdFile::open(SdFile*, char const*, unsigned char)+0x106>
    27f2:	8b e0       	ldi	r24, 0x0B	; 11
    27f4:	fe 01       	movw	r30, r28
    27f6:	31 96       	adiw	r30, 0x01	; 1
    27f8:	d8 01       	movw	r26, r16
    27fa:	01 90       	ld	r0, Z+
    27fc:	0d 92       	st	X+, r0
    27fe:	8a 95       	dec	r24
    2800:	e1 f7       	brne	.-8      	; 0x27fa <SdFile::open(SdFile*, char const*, unsigned char)+0x114>
    2802:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <SdFile::dateTime_>
    2806:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <SdFile::dateTime_+0x1>
    280a:	30 97       	sbiw	r30, 0x00	; 0
    280c:	09 f4       	brne	.+2      	; 0x2810 <SdFile::open(SdFile*, char const*, unsigned char)+0x12a>
    280e:	4e c0       	rjmp	.+156    	; 0x28ac <SdFile::open(SdFile*, char const*, unsigned char)+0x1c6>
    2810:	b8 01       	movw	r22, r16
    2812:	62 5f       	subi	r22, 0xF2	; 242
    2814:	7f 4f       	sbci	r23, 0xFF	; 255
    2816:	c8 01       	movw	r24, r16
    2818:	40 96       	adiw	r24, 0x10	; 16
    281a:	09 95       	icall
    281c:	f8 01       	movw	r30, r16
    281e:	80 89       	ldd	r24, Z+16	; 0x10
    2820:	91 89       	ldd	r25, Z+17	; 0x11
    2822:	93 8b       	std	Z+19, r25	; 0x13
    2824:	82 8b       	std	Z+18, r24	; 0x12
    2826:	91 8f       	std	Z+25, r25	; 0x19
    2828:	80 8f       	std	Z+24, r24	; 0x18
    282a:	86 85       	ldd	r24, Z+14	; 0x0e
    282c:	97 85       	ldd	r25, Z+15	; 0x0f
    282e:	97 8b       	std	Z+23, r25	; 0x17
    2830:	86 8b       	std	Z+22, r24	; 0x16
    2832:	0e 94 11 16 	call	0x2c22	; 0x2c22 <SdVolume::cacheFlush()>
    2836:	88 23       	and	r24, r24
    2838:	09 f4       	brne	.+2      	; 0x283c <SdFile::open(SdFile*, char const*, unsigned char)+0x156>
    283a:	75 cf       	rjmp	.-278    	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    283c:	4c 2d       	mov	r20, r12
    283e:	f7 01       	movw	r30, r14
    2840:	62 89       	ldd	r22, Z+18	; 0x12
    2842:	11 c0       	rjmp	.+34     	; 0x2866 <SdFile::open(SdFile*, char const*, unsigned char)+0x180>
    2844:	4b e0       	ldi	r20, 0x0B	; 11
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	bc 01       	movw	r22, r24
    284a:	ce 01       	movw	r24, r28
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	0e 94 cc 22 	call	0x4598	; 0x4598 <memcmp>
    2852:	89 2b       	or	r24, r25
    2854:	09 f0       	breq	.+2      	; 0x2858 <SdFile::open(SdFile*, char const*, unsigned char)+0x172>
    2856:	79 cf       	rjmp	.-270    	; 0x274a <SdFile::open(SdFile*, char const*, unsigned char)+0x64>
    2858:	8c 2d       	mov	r24, r12
    285a:	80 73       	andi	r24, 0x30	; 48
    285c:	4c 2d       	mov	r20, r12
    285e:	6d 2d       	mov	r22, r13
    2860:	80 33       	cpi	r24, 0x30	; 48
    2862:	09 f4       	brne	.+2      	; 0x2866 <SdFile::open(SdFile*, char const*, unsigned char)+0x180>
    2864:	60 cf       	rjmp	.-320    	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    2866:	c7 01       	movw	r24, r14
    2868:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <SdFile::openCachedEntry(unsigned char, unsigned char)>
    286c:	2b 96       	adiw	r28, 0x0b	; 11
    286e:	0f b6       	in	r0, 0x3f	; 63
    2870:	f8 94       	cli
    2872:	de bf       	out	0x3e, r29	; 62
    2874:	0f be       	out	0x3f, r0	; 63
    2876:	cd bf       	out	0x3d, r28	; 61
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	ff 90       	pop	r15
    2882:	ef 90       	pop	r14
    2884:	df 90       	pop	r13
    2886:	cf 90       	pop	r12
    2888:	bf 90       	pop	r11
    288a:	08 95       	ret
    288c:	f8 01       	movw	r30, r16
    288e:	85 81       	ldd	r24, Z+5	; 0x05
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	09 f4       	brne	.+2      	; 0x2896 <SdFile::open(SdFile*, char const*, unsigned char)+0x1b0>
    2894:	48 cf       	rjmp	.-368    	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    2896:	c8 01       	movw	r24, r16
    2898:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <SdFile::addDirCluster()>
    289c:	88 23       	and	r24, r24
    289e:	09 f4       	brne	.+2      	; 0x28a2 <SdFile::open(SdFile*, char const*, unsigned char)+0x1bc>
    28a0:	42 cf       	rjmp	.-380    	; 0x2726 <SdFile::open(SdFile*, char const*, unsigned char)+0x40>
    28a2:	f7 01       	movw	r30, r14
    28a4:	12 8a       	std	Z+18, r1	; 0x12
    28a6:	0d ea       	ldi	r16, 0xAD	; 173
    28a8:	12 e0       	ldi	r17, 0x02	; 2
    28aa:	9e cf       	rjmp	.-196    	; 0x27e8 <SdFile::open(SdFile*, char const*, unsigned char)+0x102>
    28ac:	81 e2       	ldi	r24, 0x21	; 33
    28ae:	98 e2       	ldi	r25, 0x28	; 40
    28b0:	f8 01       	movw	r30, r16
    28b2:	91 8b       	std	Z+17, r25	; 0x11
    28b4:	80 8b       	std	Z+16, r24	; 0x10
    28b6:	80 e0       	ldi	r24, 0x00	; 0
    28b8:	98 e0       	ldi	r25, 0x08	; 8
    28ba:	97 87       	std	Z+15, r25	; 0x0f
    28bc:	86 87       	std	Z+14, r24	; 0x0e
    28be:	ae cf       	rjmp	.-164    	; 0x281c <SdFile::open(SdFile*, char const*, unsigned char)+0x136>

000028c0 <SdFile::write(void const*, unsigned int)>:
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1132
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    28c0:	2f 92       	push	r2
    28c2:	3f 92       	push	r3
    28c4:	4f 92       	push	r4
    28c6:	5f 92       	push	r5
    28c8:	6f 92       	push	r6
    28ca:	7f 92       	push	r7
    28cc:	8f 92       	push	r8
    28ce:	9f 92       	push	r9
    28d0:	af 92       	push	r10
    28d2:	bf 92       	push	r11
    28d4:	cf 92       	push	r12
    28d6:	df 92       	push	r13
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <SdFile::write(void const*, unsigned int)+0x26>
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <SdFile::write(void const*, unsigned int)+0x28>
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	8c 01       	movw	r16, r24
    28ee:	6b 01       	movw	r12, r22
    28f0:	1a 01       	movw	r2, r20
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1140

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    28f2:	dc 01       	movw	r26, r24
    28f4:	15 96       	adiw	r26, 0x05	; 5
    28f6:	8c 91       	ld	r24, X
    28f8:	15 97       	sbiw	r26, 0x05	; 5
    28fa:	81 30       	cpi	r24, 0x01	; 1
    28fc:	09 f0       	breq	.+2      	; 0x2900 <SdFile::write(void const*, unsigned int)+0x40>
    28fe:	c8 c0       	rjmp	.+400    	; 0x2a90 <SdFile::write(void const*, unsigned int)+0x1d0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1140 (discriminator 2)
    2900:	14 96       	adiw	r26, 0x04	; 4
    2902:	8c 91       	ld	r24, X
    2904:	81 ff       	sbrs	r24, 1
    2906:	c4 c0       	rjmp	.+392    	; 0x2a90 <SdFile::write(void const*, unsigned int)+0x1d0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1143

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2908:	82 fd       	sbrc	r24, 2
    290a:	ae c0       	rjmp	.+348    	; 0x2a68 <SdFile::write(void const*, unsigned int)+0x1a8>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1132
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    290c:	41 01       	movw	r8, r2
    290e:	d8 01       	movw	r26, r16
    2910:	1a 96       	adiw	r26, 0x0a	; 10
    2912:	4d 91       	ld	r20, X+
    2914:	5d 91       	ld	r21, X+
    2916:	6d 91       	ld	r22, X+
    2918:	7c 91       	ld	r23, X
    291a:	1d 97       	sbiw	r26, 0x0d	; 13
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1147
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    291c:	81 14       	cp	r8, r1
    291e:	91 04       	cpc	r9, r1
    2920:	09 f4       	brne	.+2      	; 0x2924 <SdFile::write(void const*, unsigned int)+0x64>
    2922:	29 c1       	rjmp	.+594    	; 0x2b76 <SdFile::write(void const*, unsigned int)+0x2b6>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1148
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    2924:	5b 96       	adiw	r26, 0x1b	; 27
    2926:	8d 91       	ld	r24, X+
    2928:	9c 91       	ld	r25, X
    292a:	5c 97       	sbiw	r26, 0x1c	; 28
_ZNK8SdVolume14blockOfClusterEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:522
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    292c:	fc 01       	movw	r30, r24
    292e:	74 80       	ldd	r7, Z+4	; 0x04
    2930:	2f ef       	ldi	r18, 0xFF	; 255
    2932:	27 0d       	add	r18, r7
    2934:	2a 01       	movw	r4, r20
    2936:	3b 01       	movw	r6, r22
    2938:	39 e0       	ldi	r19, 0x09	; 9
    293a:	76 94       	lsr	r7
    293c:	67 94       	ror	r6
    293e:	57 94       	ror	r5
    2940:	47 94       	ror	r4
    2942:	3a 95       	dec	r19
    2944:	d1 f7       	brne	.-12     	; 0x293a <SdFile::write(void const*, unsigned int)+0x7a>
    2946:	72 2e       	mov	r7, r18
    2948:	74 20       	and	r7, r4
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1149
    uint16_t blockOffset = curPosition_ & 0X1FF;
    294a:	7a 01       	movw	r14, r20
    294c:	f1 e0       	ldi	r31, 0x01	; 1
    294e:	ff 22       	and	r15, r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1150
    if (blockOfCluster == 0 && blockOffset == 0) {
    2950:	71 10       	cpse	r7, r1
    2952:	20 c0       	rjmp	.+64     	; 0x2994 <SdFile::write(void const*, unsigned int)+0xd4>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1150 (discriminator 1)
    2954:	e1 14       	cp	r14, r1
    2956:	f1 04       	cpc	r15, r1
    2958:	e9 f4       	brne	.+58     	; 0x2994 <SdFile::write(void const*, unsigned int)+0xd4>
    295a:	16 96       	adiw	r26, 0x06	; 6
    295c:	4d 91       	ld	r20, X+
    295e:	5d 91       	ld	r21, X+
    2960:	6d 91       	ld	r22, X+
    2962:	7c 91       	ld	r23, X
    2964:	19 97       	sbiw	r26, 0x09	; 9
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1152
      // start of new cluster
      if (curCluster_ == 0) {
    2966:	41 15       	cp	r20, r1
    2968:	51 05       	cpc	r21, r1
    296a:	61 05       	cpc	r22, r1
    296c:	71 05       	cpc	r23, r1
    296e:	09 f0       	breq	.+2      	; 0x2972 <SdFile::write(void const*, unsigned int)+0xb2>
    2970:	98 c0       	rjmp	.+304    	; 0x2aa2 <SdFile::write(void const*, unsigned int)+0x1e2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1153
        if (firstCluster_ == 0) {
    2972:	57 96       	adiw	r26, 0x17	; 23
    2974:	8d 91       	ld	r24, X+
    2976:	9d 91       	ld	r25, X+
    2978:	0d 90       	ld	r0, X+
    297a:	bc 91       	ld	r27, X
    297c:	a0 2d       	mov	r26, r0
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	a1 05       	cpc	r26, r1
    2982:	b1 05       	cpc	r27, r1
    2984:	09 f0       	breq	.+2      	; 0x2988 <SdFile::write(void const*, unsigned int)+0xc8>
    2986:	af c0       	rjmp	.+350    	; 0x2ae6 <SdFile::write(void const*, unsigned int)+0x226>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1164
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2988:	c8 01       	movw	r24, r16
    298a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <SdFile::addCluster()>
    298e:	88 23       	and	r24, r24
    2990:	09 f4       	brne	.+2      	; 0x2994 <SdFile::write(void const*, unsigned int)+0xd4>
    2992:	7e c0       	rjmp	.+252    	; 0x2a90 <SdFile::write(void const*, unsigned int)+0x1d0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1171
          curCluster_ = next;
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	92 e0       	ldi	r25, 0x02	; 2
    2998:	8e 19       	sub	r24, r14
    299a:	9f 09       	sbc	r25, r15
    299c:	54 01       	movw	r10, r8
    299e:	88 15       	cp	r24, r8
    29a0:	99 05       	cpc	r25, r9
    29a2:	08 f4       	brcc	.+2      	; 0x29a6 <SdFile::write(void const*, unsigned int)+0xe6>
    29a4:	5c 01       	movw	r10, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1177

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    29a6:	d8 01       	movw	r26, r16
    29a8:	5b 96       	adiw	r26, 0x1b	; 27
    29aa:	4d 91       	ld	r20, X+
    29ac:	5c 91       	ld	r21, X
    29ae:	5c 97       	sbiw	r26, 0x1c	; 28
_ZNK8SdVolume17clusterStartBlockEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:524
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    29b0:	16 96       	adiw	r26, 0x06	; 6
    29b2:	8d 91       	ld	r24, X+
    29b4:	9d 91       	ld	r25, X+
    29b6:	0d 90       	ld	r0, X+
    29b8:	bc 91       	ld	r27, X
    29ba:	a0 2d       	mov	r26, r0
    29bc:	02 97       	sbiw	r24, 0x02	; 2
    29be:	a1 09       	sbc	r26, r1
    29c0:	b1 09       	sbc	r27, r1
    29c2:	fa 01       	movw	r30, r20
    29c4:	25 85       	ldd	r18, Z+13	; 0x0d
    29c6:	04 c0       	rjmp	.+8      	; 0x29d0 <SdFile::write(void const*, unsigned int)+0x110>
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	aa 1f       	adc	r26, r26
    29ce:	bb 1f       	adc	r27, r27
    29d0:	2a 95       	dec	r18
    29d2:	d2 f7       	brpl	.-12     	; 0x29c8 <SdFile::write(void const*, unsigned int)+0x108>
    29d4:	46 85       	ldd	r20, Z+14	; 0x0e
    29d6:	57 85       	ldd	r21, Z+15	; 0x0f
    29d8:	60 89       	ldd	r22, Z+16	; 0x10
    29da:	71 89       	ldd	r23, Z+17	; 0x11
    29dc:	84 0f       	add	r24, r20
    29de:	95 1f       	adc	r25, r21
    29e0:	a6 1f       	adc	r26, r22
    29e2:	b7 1f       	adc	r27, r23
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1177
    29e4:	9c 01       	movw	r18, r24
    29e6:	ad 01       	movw	r20, r26
    29e8:	27 0d       	add	r18, r7
    29ea:	31 1d       	adc	r19, r1
    29ec:	41 1d       	adc	r20, r1
    29ee:	51 1d       	adc	r21, r1
    29f0:	29 01       	movw	r4, r18
    29f2:	3a 01       	movw	r6, r20
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1178
    if (n == 512) {
    29f4:	a1 14       	cp	r10, r1
    29f6:	32 e0       	ldi	r19, 0x02	; 2
    29f8:	b3 06       	cpc	r11, r19
    29fa:	09 f0       	breq	.+2      	; 0x29fe <SdFile::write(void const*, unsigned int)+0x13e>
    29fc:	7a c0       	rjmp	.+244    	; 0x2af2 <SdFile::write(void const*, unsigned int)+0x232>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1181
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    29fe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    2a02:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2a06:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2a0a:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    2a0e:	84 15       	cp	r24, r4
    2a10:	95 05       	cpc	r25, r5
    2a12:	a6 05       	cpc	r26, r6
    2a14:	b7 05       	cpc	r27, r7
    2a16:	59 f4       	brne	.+22     	; 0x2a2e <SdFile::write(void const*, unsigned int)+0x16e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1182
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	9f ef       	ldi	r25, 0xFF	; 255
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <SdVolume::cacheBlockNumber_>
    2a22:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2a26:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2a2a:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
_ZN8SdVolume10writeBlockEmPKh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:548
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2a2e:	96 01       	movw	r18, r12
    2a30:	b3 01       	movw	r22, r6
    2a32:	a2 01       	movw	r20, r4
    2a34:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SdVolume::sdCard_>
    2a38:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <SdVolume::sdCard_+0x1>
    2a3c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1184
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2a40:	88 23       	and	r24, r24
    2a42:	31 f1       	breq	.+76     	; 0x2a90 <SdFile::write(void const*, unsigned int)+0x1d0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1185
      src += 512;
    2a44:	9e ef       	ldi	r25, 0xFE	; 254
    2a46:	d9 1a       	sub	r13, r25
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1202
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    2a48:	8a 18       	sub	r8, r10
    2a4a:	9b 08       	sbc	r9, r11
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1203
    curPosition_ += n;
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	82 85       	ldd	r24, Z+10	; 0x0a
    2a50:	93 85       	ldd	r25, Z+11	; 0x0b
    2a52:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a54:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a56:	8a 0d       	add	r24, r10
    2a58:	9b 1d       	adc	r25, r11
    2a5a:	a1 1d       	adc	r26, r1
    2a5c:	b1 1d       	adc	r27, r1
    2a5e:	82 87       	std	Z+10, r24	; 0x0a
    2a60:	93 87       	std	Z+11, r25	; 0x0b
    2a62:	a4 87       	std	Z+12, r26	; 0x0c
    2a64:	b5 87       	std	Z+13, r27	; 0x0d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1147
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2a66:	53 cf       	rjmp	.-346    	; 0x290e <SdFile::write(void const*, unsigned int)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1143 (discriminator 1)

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2a68:	f8 01       	movw	r30, r16
    2a6a:	43 89       	ldd	r20, Z+19	; 0x13
    2a6c:	54 89       	ldd	r21, Z+20	; 0x14
    2a6e:	65 89       	ldd	r22, Z+21	; 0x15
    2a70:	76 89       	ldd	r23, Z+22	; 0x16
    2a72:	82 85       	ldd	r24, Z+10	; 0x0a
    2a74:	93 85       	ldd	r25, Z+11	; 0x0b
    2a76:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a78:	b5 85       	ldd	r27, Z+13	; 0x0d
    2a7a:	48 17       	cp	r20, r24
    2a7c:	59 07       	cpc	r21, r25
    2a7e:	6a 07       	cpc	r22, r26
    2a80:	7b 07       	cpc	r23, r27
    2a82:	09 f4       	brne	.+2      	; 0x2a86 <SdFile::write(void const*, unsigned int)+0x1c6>
    2a84:	43 cf       	rjmp	.-378    	; 0x290c <SdFile::write(void const*, unsigned int)+0x4c>
_ZN6SdFile7seekEndEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:261
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    2a86:	c8 01       	movw	r24, r16
    2a88:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <SdFile::seekSet(unsigned long)>
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1144
    if (!seekEnd()) goto writeErrorReturn;
    2a8c:	81 11       	cpse	r24, r1
    2a8e:	3e cf       	rjmp	.-388    	; 0x290c <SdFile::write(void const*, unsigned int)+0x4c>
_ZN5Print13setWriteErrorEi():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:44
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	d8 01       	movw	r26, r16
    2a96:	13 96       	adiw	r26, 0x03	; 3
    2a98:	9c 93       	st	X, r25
    2a9a:	8e 93       	st	-X, r24
    2a9c:	12 97       	sbiw	r26, 0x02	; 2
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1223

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <SdFile::write(void const*, unsigned int)+0x1f0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1161
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2aa2:	9e 01       	movw	r18, r28
    2aa4:	2f 5f       	subi	r18, 0xFF	; 255
    2aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2aac:	81 11       	cpse	r24, r1
    2aae:	02 c0       	rjmp	.+4      	; 0x2ab4 <SdFile::write(void const*, unsigned int)+0x1f4>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1223

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	7b c0       	rjmp	.+246    	; 0x2baa <SdFile::write(void const*, unsigned int)+0x2ea>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1162
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
    2ab4:	89 81       	ldd	r24, Y+1	; 0x01
    2ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab8:	ab 81       	ldd	r26, Y+3	; 0x03
    2aba:	bc 81       	ldd	r27, Y+4	; 0x04
_ZNK8SdVolume5isEOCEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:539
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2abc:	f8 01       	movw	r30, r16
    2abe:	23 8d       	ldd	r18, Z+27	; 0x1b
    2ac0:	34 8d       	ldd	r19, Z+28	; 0x1c
    2ac2:	f9 01       	movw	r30, r18
    2ac4:	27 89       	ldd	r18, Z+23	; 0x17
    2ac6:	48 ef       	ldi	r20, 0xF8	; 248
    2ac8:	5f ef       	ldi	r21, 0xFF	; 255
    2aca:	60 e0       	ldi	r22, 0x00	; 0
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	20 31       	cpi	r18, 0x10	; 16
    2ad0:	21 f0       	breq	.+8      	; 0x2ada <SdFile::write(void const*, unsigned int)+0x21a>
    2ad2:	48 ef       	ldi	r20, 0xF8	; 248
    2ad4:	5f ef       	ldi	r21, 0xFF	; 255
    2ad6:	6f ef       	ldi	r22, 0xFF	; 255
    2ad8:	7f e0       	ldi	r23, 0x0F	; 15
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1162
    2ada:	84 17       	cp	r24, r20
    2adc:	95 07       	cpc	r25, r21
    2ade:	a6 07       	cpc	r26, r22
    2ae0:	b7 07       	cpc	r27, r23
    2ae2:	08 f0       	brcs	.+2      	; 0x2ae6 <SdFile::write(void const*, unsigned int)+0x226>
    2ae4:	51 cf       	rjmp	.-350    	; 0x2988 <SdFile::write(void const*, unsigned int)+0xc8>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1166
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = next;
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	86 83       	std	Z+6, r24	; 0x06
    2aea:	97 83       	std	Z+7, r25	; 0x07
    2aec:	a0 87       	std	Z+8, r26	; 0x08
    2aee:	b1 87       	std	Z+9, r27	; 0x09
    2af0:	51 cf       	rjmp	.-350    	; 0x2994 <SdFile::write(void const*, unsigned int)+0xd4>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1187
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
      src += 512;
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2af2:	e1 14       	cp	r14, r1
    2af4:	f1 04       	cpc	r15, r1
    2af6:	91 f5       	brne	.+100    	; 0x2b5c <SdFile::write(void const*, unsigned int)+0x29c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1187 (discriminator 1)
    2af8:	d8 01       	movw	r26, r16
    2afa:	1a 96       	adiw	r26, 0x0a	; 10
    2afc:	4d 91       	ld	r20, X+
    2afe:	5d 91       	ld	r21, X+
    2b00:	6d 91       	ld	r22, X+
    2b02:	7c 91       	ld	r23, X
    2b04:	1d 97       	sbiw	r26, 0x0d	; 13
    2b06:	53 96       	adiw	r26, 0x13	; 19
    2b08:	8d 91       	ld	r24, X+
    2b0a:	9d 91       	ld	r25, X+
    2b0c:	0d 90       	ld	r0, X+
    2b0e:	bc 91       	ld	r27, X
    2b10:	a0 2d       	mov	r26, r0
    2b12:	48 17       	cp	r20, r24
    2b14:	59 07       	cpc	r21, r25
    2b16:	6a 07       	cpc	r22, r26
    2b18:	7b 07       	cpc	r23, r27
    2b1a:	00 f1       	brcs	.+64     	; 0x2b5c <SdFile::write(void const*, unsigned int)+0x29c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1189
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    2b1c:	0e 94 11 16 	call	0x2c22	; 0x2c22 <SdVolume::cacheFlush()>
    2b20:	88 23       	and	r24, r24
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <SdFile::write(void const*, unsigned int)+0x266>
    2b24:	b5 cf       	rjmp	.-150    	; 0x2a90 <SdFile::write(void const*, unsigned int)+0x1d0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1190
        SdVolume::cacheBlockNumber_ = block;
    2b26:	40 92 09 01 	sts	0x0109, r4	; 0x800109 <SdVolume::cacheBlockNumber_>
    2b2a:	50 92 0a 01 	sts	0x010A, r5	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2b2e:	60 92 0b 01 	sts	0x010B, r6	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2b32:	70 92 0c 01 	sts	0x010C, r7	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
_ZN8SdVolume13cacheSetDirtyEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:529
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2b36:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <SdVolume::cacheDirty_>
    2b3a:	81 60       	ori	r24, 0x01	; 1
    2b3c:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <SdVolume::cacheDirty_>
_ZN6SdFile5writeEPKvj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1198
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    2b40:	97 01       	movw	r18, r14
    2b42:	23 55       	subi	r18, 0x53	; 83
    2b44:	3d 4f       	sbci	r19, 0xFD	; 253
    2b46:	d6 01       	movw	r26, r12
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1199
      uint8_t* end = dst + n;
    2b48:	c9 01       	movw	r24, r18
    2b4a:	8a 0d       	add	r24, r10
    2b4c:	9b 1d       	adc	r25, r11
    2b4e:	f9 01       	movw	r30, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1200 (discriminator 2)
      while (dst != end) *dst++ = *src++;
    2b50:	8e 17       	cp	r24, r30
    2b52:	9f 07       	cpc	r25, r31
    2b54:	59 f0       	breq	.+22     	; 0x2b6c <SdFile::write(void const*, unsigned int)+0x2ac>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1200 (discriminator 1)
    2b56:	4d 91       	ld	r20, X+
    2b58:	41 93       	st	Z+, r20
    2b5a:	fa cf       	rjmp	.-12     	; 0x2b50 <SdFile::write(void const*, unsigned int)+0x290>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1194
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
        SdVolume::cacheBlockNumber_ = block;
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    2b5c:	41 e0       	ldi	r20, 0x01	; 1
    2b5e:	c3 01       	movw	r24, r6
    2b60:	b2 01       	movw	r22, r4
    2b62:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2b66:	81 11       	cpse	r24, r1
    2b68:	eb cf       	rjmp	.-42     	; 0x2b40 <SdFile::write(void const*, unsigned int)+0x280>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1219
  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
  }
  return nbyte;

 writeErrorReturn:
    2b6a:	92 cf       	rjmp	.-220    	; 0x2a90 <SdFile::write(void const*, unsigned int)+0x1d0>
    2b6c:	82 1b       	sub	r24, r18
    2b6e:	93 0b       	sbc	r25, r19
    2b70:	c8 0e       	add	r12, r24
    2b72:	d9 1e       	adc	r13, r25
    2b74:	69 cf       	rjmp	.-302    	; 0x2a48 <SdFile::write(void const*, unsigned int)+0x188>
    2b76:	14 96       	adiw	r26, 0x04	; 4
    2b78:	8c 91       	ld	r24, X
    2b7a:	14 97       	sbiw	r26, 0x04	; 4
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1205
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2b7c:	53 96       	adiw	r26, 0x13	; 19
    2b7e:	cd 90       	ld	r12, X+
    2b80:	dd 90       	ld	r13, X+
    2b82:	ed 90       	ld	r14, X+
    2b84:	fc 90       	ld	r15, X
    2b86:	56 97       	sbiw	r26, 0x16	; 22
    2b88:	c4 16       	cp	r12, r20
    2b8a:	d5 06       	cpc	r13, r21
    2b8c:	e6 06       	cpc	r14, r22
    2b8e:	f7 06       	cpc	r15, r23
    2b90:	18 f5       	brcc	.+70     	; 0x2bd8 <SdFile::write(void const*, unsigned int)+0x318>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1207
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2b92:	f8 01       	movw	r30, r16
    2b94:	43 8b       	std	Z+19, r20	; 0x13
    2b96:	54 8b       	std	Z+20, r21	; 0x14
    2b98:	65 8b       	std	Z+21, r22	; 0x15
    2b9a:	76 8b       	std	Z+22, r23	; 0x16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1208
    flags_ |= F_FILE_DIR_DIRTY;
    2b9c:	80 68       	ori	r24, 0x80	; 128
    2b9e:	84 83       	std	Z+4, r24	; 0x04
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1214
  } else if (dateTime_ && nbyte) {
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
  }

  if (flags_ & O_SYNC) {
    2ba0:	f8 01       	movw	r30, r16
    2ba2:	84 81       	ldd	r24, Z+4	; 0x04
    2ba4:	83 fd       	sbrc	r24, 3
    2ba6:	25 c0       	rjmp	.+74     	; 0x2bf2 <SdFile::write(void const*, unsigned int)+0x332>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1161
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2ba8:	c1 01       	movw	r24, r2
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1224
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
    2bc2:	bf 90       	pop	r11
    2bc4:	af 90       	pop	r10
    2bc6:	9f 90       	pop	r9
    2bc8:	8f 90       	pop	r8
    2bca:	7f 90       	pop	r7
    2bcc:	6f 90       	pop	r6
    2bce:	5f 90       	pop	r5
    2bd0:	4f 90       	pop	r4
    2bd2:	3f 90       	pop	r3
    2bd4:	2f 90       	pop	r2
    2bd6:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1209
  }
  if (curPosition_ > fileSize_) {
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    flags_ |= F_FILE_DIR_DIRTY;
  } else if (dateTime_ && nbyte) {
    2bd8:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <SdFile::dateTime_>
    2bdc:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <SdFile::dateTime_+0x1>
    2be0:	23 2b       	or	r18, r19
    2be2:	f1 f2       	breq	.-68     	; 0x2ba0 <SdFile::write(void const*, unsigned int)+0x2e0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1209 (discriminator 1)
    2be4:	21 14       	cp	r2, r1
    2be6:	31 04       	cpc	r3, r1
    2be8:	d9 f2       	breq	.-74     	; 0x2ba0 <SdFile::write(void const*, unsigned int)+0x2e0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1211
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2bea:	80 68       	ori	r24, 0x80	; 128
    2bec:	14 96       	adiw	r26, 0x04	; 4
    2bee:	8c 93       	st	X, r24
    2bf0:	d7 cf       	rjmp	.-82     	; 0x2ba0 <SdFile::write(void const*, unsigned int)+0x2e0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1215
  }

  if (flags_ & O_SYNC) {
    if (!sync()) goto writeErrorReturn;
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	0e 94 ef 11 	call	0x23de	; 0x23de <SdFile::sync()>
    2bf8:	88 23       	and	r24, r24
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <SdFile::write(void const*, unsigned int)+0x33e>
    2bfc:	49 cf       	rjmp	.-366    	; 0x2a90 <SdFile::write(void const*, unsigned int)+0x1d0>
    2bfe:	d4 cf       	rjmp	.-88     	; 0x2ba8 <SdFile::write(void const*, unsigned int)+0x2e8>

00002c00 <SdFile::write(unsigned char)>:
_ZN6SdFile5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1231
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	1f 92       	push	r1
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	69 83       	std	Y+1, r22	; 0x01
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1232
  return write(&b, 1);
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	50 e0       	ldi	r21, 0x00	; 0
    2c10:	be 01       	movw	r22, r28
    2c12:	6f 5f       	subi	r22, 0xFF	; 255
    2c14:	7f 4f       	sbci	r23, 0xFF	; 255
    2c16:	0e 94 60 14 	call	0x28c0	; 0x28c0 <SdFile::write(void const*, unsigned int)>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFile.cpp:1233
}
    2c1a:	0f 90       	pop	r0
    2c1c:	df 91       	pop	r29
    2c1e:	cf 91       	pop	r28
    2c20:	08 95       	ret

00002c22 <SdVolume::cacheFlush()>:
_ZN8SdVolume10cacheFlushEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:100

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2c22:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <SdVolume::cacheDirty_>
    2c26:	88 23       	and	r24, r24
    2c28:	a9 f1       	breq	.+106    	; 0x2c94 <SdVolume::cacheFlush()+0x72>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:101
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2c2a:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    2c2e:	50 91 0a 01 	lds	r21, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2c32:	60 91 0b 01 	lds	r22, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2c36:	70 91 0c 01 	lds	r23, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    2c3a:	2d ea       	ldi	r18, 0xAD	; 173
    2c3c:	32 e0       	ldi	r19, 0x02	; 2
    2c3e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SdVolume::sdCard_>
    2c42:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <SdVolume::sdCard_+0x1>
    2c46:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    2c4a:	81 11       	cpse	r24, r1
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <SdVolume::cacheFlush()+0x30>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:102
      return false;
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:105
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2c52:	40 91 a6 02 	lds	r20, 0x02A6	; 0x8002a6 <SdVolume::cacheMirrorBlock_>
    2c56:	50 91 a7 02 	lds	r21, 0x02A7	; 0x8002a7 <SdVolume::cacheMirrorBlock_+0x1>
    2c5a:	60 91 a8 02 	lds	r22, 0x02A8	; 0x8002a8 <SdVolume::cacheMirrorBlock_+0x2>
    2c5e:	70 91 a9 02 	lds	r23, 0x02A9	; 0x8002a9 <SdVolume::cacheMirrorBlock_+0x3>
    2c62:	41 15       	cp	r20, r1
    2c64:	51 05       	cpc	r21, r1
    2c66:	61 05       	cpc	r22, r1
    2c68:	71 05       	cpc	r23, r1
    2c6a:	91 f0       	breq	.+36     	; 0x2c90 <SdVolume::cacheFlush()+0x6e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:106
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2c6c:	2d ea       	ldi	r18, 0xAD	; 173
    2c6e:	32 e0       	ldi	r19, 0x02	; 2
    2c70:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SdVolume::sdCard_>
    2c74:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <SdVolume::sdCard_+0x1>
    2c78:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <Sd2Card::writeBlock(unsigned long, unsigned char const*)>
    2c7c:	88 23       	and	r24, r24
    2c7e:	39 f3       	breq	.-50     	; 0x2c4e <SdVolume::cacheFlush()+0x2c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:109
        return false;
      }
      cacheMirrorBlock_ = 0;
    2c80:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <SdVolume::cacheMirrorBlock_>
    2c84:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <SdVolume::cacheMirrorBlock_+0x1>
    2c88:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <SdVolume::cacheMirrorBlock_+0x2>
    2c8c:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <SdVolume::cacheMirrorBlock_+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:111
    }
    cacheDirty_ = 0;
    2c90:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <SdVolume::cacheDirty_>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:113
  }
  return true;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:114
}
    2c96:	08 95       	ret

00002c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>:
_ZN8SdVolume13cacheRawBlockEmh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:116
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2c98:	cf 92       	push	r12
    2c9a:	df 92       	push	r13
    2c9c:	ef 92       	push	r14
    2c9e:	ff 92       	push	r15
    2ca0:	cf 93       	push	r28
    2ca2:	6b 01       	movw	r12, r22
    2ca4:	7c 01       	movw	r14, r24
    2ca6:	c4 2f       	mov	r28, r20
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:117
  if (cacheBlockNumber_ != blockNumber) {
    2ca8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    2cac:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2cb0:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2cb4:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    2cb8:	8c 15       	cp	r24, r12
    2cba:	9d 05       	cpc	r25, r13
    2cbc:	ae 05       	cpc	r26, r14
    2cbe:	bf 05       	cpc	r27, r15
    2cc0:	f9 f0       	breq	.+62     	; 0x2d00 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x68>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:118
    if (!cacheFlush()) return false;
    2cc2:	0e 94 11 16 	call	0x2c22	; 0x2c22 <SdVolume::cacheFlush()>
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	07 c0       	rjmp	.+14     	; 0x2cd8 <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x40>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:124
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
  return true;
}
    2ccc:	cf 91       	pop	r28
    2cce:	ff 90       	pop	r15
    2cd0:	ef 90       	pop	r14
    2cd2:	df 90       	pop	r13
    2cd4:	cf 90       	pop	r12
    2cd6:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:119
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2cd8:	2d ea       	ldi	r18, 0xAD	; 173
    2cda:	32 e0       	ldi	r19, 0x02	; 2
    2cdc:	b7 01       	movw	r22, r14
    2cde:	a6 01       	movw	r20, r12
    2ce0:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <SdVolume::sdCard_>
    2ce4:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <SdVolume::sdCard_+0x1>
    2ce8:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Sd2Card::readBlock(unsigned long, unsigned char*)>
    2cec:	88 23       	and	r24, r24
    2cee:	69 f3       	breq	.-38     	; 0x2cca <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x32>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:120
    cacheBlockNumber_ = blockNumber;
    2cf0:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <SdVolume::cacheBlockNumber_>
    2cf4:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2cf8:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2cfc:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:122
  }
  cacheDirty_ |= action;
    2d00:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <SdVolume::cacheDirty_>
    2d04:	4c 2b       	or	r20, r28
    2d06:	40 93 aa 02 	sts	0x02AA, r20	; 0x8002aa <SdVolume::cacheDirty_>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:123
  return true;
    2d0a:	81 e0       	ldi	r24, 0x01	; 1
    2d0c:	df cf       	rjmp	.-66     	; 0x2ccc <SdVolume::cacheRawBlock(unsigned long, unsigned char)+0x34>

00002d0e <SdVolume::cacheZeroBlock(unsigned long)>:
_ZN8SdVolume14cacheZeroBlockEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:127
}
//------------------------------------------------------------------------------
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
    2d0e:	cf 92       	push	r12
    2d10:	df 92       	push	r13
    2d12:	ef 92       	push	r14
    2d14:	ff 92       	push	r15
    2d16:	6b 01       	movw	r12, r22
    2d18:	7c 01       	movw	r14, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:128
  if (!cacheFlush()) return false;
    2d1a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <SdVolume::cacheFlush()>
    2d1e:	88 23       	and	r24, r24
    2d20:	a9 f0       	breq	.+42     	; 0x2d4c <SdVolume::cacheZeroBlock(unsigned long)+0x3e>
    2d22:	ed ea       	ldi	r30, 0xAD	; 173
    2d24:	f2 e0       	ldi	r31, 0x02	; 2
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:132 (discriminator 2)

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    cacheBuffer_.data[i] = 0;
    2d26:	11 92       	st	Z+, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:131 (discriminator 2)
// cache a zero block for blockNumber
uint8_t SdVolume::cacheZeroBlock(uint32_t blockNumber) {
  if (!cacheFlush()) return false;

  // loop take less flash than memset(cacheBuffer_.data, 0, 512);
  for (uint16_t i = 0; i < 512; i++) {
    2d28:	84 e0       	ldi	r24, 0x04	; 4
    2d2a:	ed 3a       	cpi	r30, 0xAD	; 173
    2d2c:	f8 07       	cpc	r31, r24
    2d2e:	d9 f7       	brne	.-10     	; 0x2d26 <SdVolume::cacheZeroBlock(unsigned long)+0x18>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:134
    cacheBuffer_.data[i] = 0;
  }
  cacheBlockNumber_ = blockNumber;
    2d30:	c0 92 09 01 	sts	0x0109, r12	; 0x800109 <SdVolume::cacheBlockNumber_>
    2d34:	d0 92 0a 01 	sts	0x010A, r13	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2d38:	e0 92 0b 01 	sts	0x010B, r14	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2d3c:	f0 92 0c 01 	sts	0x010C, r15	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
_ZN8SdVolume13cacheSetDirtyEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:529
    2d40:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <SdVolume::cacheDirty_>
    2d44:	81 60       	ori	r24, 0x01	; 1
    2d46:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <SdVolume::cacheDirty_>
_ZN8SdVolume14cacheZeroBlockEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:136
  cacheSetDirty();
  return true;
    2d4a:	81 e0       	ldi	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:137
}
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	08 95       	ret

00002d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>:
_ZNK8SdVolume6fatGetEmPm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:151
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2d56:	8f 92       	push	r8
    2d58:	9f 92       	push	r9
    2d5a:	af 92       	push	r10
    2d5c:	bf 92       	push	r11
    2d5e:	cf 92       	push	r12
    2d60:	df 92       	push	r13
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:152
  if (cluster > (clusterCount_ + 1)) return false;
    2d70:	81 85       	ldd	r24, Z+9	; 0x09
    2d72:	92 85       	ldd	r25, Z+10	; 0x0a
    2d74:	a3 85       	ldd	r26, Z+11	; 0x0b
    2d76:	b4 85       	ldd	r27, Z+12	; 0x0c
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	a1 1d       	adc	r26, r1
    2d7c:	b1 1d       	adc	r27, r1
    2d7e:	84 17       	cp	r24, r20
    2d80:	95 07       	cpc	r25, r21
    2d82:	a6 07       	cpc	r26, r22
    2d84:	b7 07       	cpc	r27, r23
    2d86:	70 f4       	brcc	.+28     	; 0x2da4 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x4e>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:164
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    2d8a:	df 91       	pop	r29
    2d8c:	cf 91       	pop	r28
    2d8e:	1f 91       	pop	r17
    2d90:	0f 91       	pop	r16
    2d92:	ff 90       	pop	r15
    2d94:	ef 90       	pop	r14
    2d96:	df 90       	pop	r13
    2d98:	cf 90       	pop	r12
    2d9a:	bf 90       	pop	r11
    2d9c:	af 90       	pop	r10
    2d9e:	9f 90       	pop	r9
    2da0:	8f 90       	pop	r8
    2da2:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:153
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
    2da4:	83 88       	ldd	r8, Z+19	; 0x13
    2da6:	94 88       	ldd	r9, Z+20	; 0x14
    2da8:	a5 88       	ldd	r10, Z+21	; 0x15
    2daa:	b6 88       	ldd	r11, Z+22	; 0x16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:154
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2dac:	87 89       	ldd	r24, Z+23	; 0x17
    2dae:	80 31       	cpi	r24, 0x10	; 16
    2db0:	89 f5       	brne	.+98     	; 0x2e14 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xbe>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:154 (discriminator 1)
    2db2:	bb 27       	eor	r27, r27
    2db4:	a7 2f       	mov	r26, r23
    2db6:	96 2f       	mov	r25, r22
    2db8:	85 2f       	mov	r24, r21
    2dba:	e9 01       	movw	r28, r18
    2dbc:	6a 01       	movw	r12, r20
    2dbe:	7b 01       	movw	r14, r22
    2dc0:	8f 01       	movw	r16, r30
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:154 (discriminator 4)
    2dc2:	bc 01       	movw	r22, r24
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	68 0d       	add	r22, r8
    2dc8:	79 1d       	adc	r23, r9
    2dca:	8a 1d       	adc	r24, r10
    2dcc:	9b 1d       	adc	r25, r11
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:155 (discriminator 4)
  if (lba != cacheBlockNumber_) {
    2dce:	80 90 09 01 	lds	r8, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    2dd2:	90 90 0a 01 	lds	r9, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2dd6:	a0 90 0b 01 	lds	r10, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2dda:	b0 90 0c 01 	lds	r11, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    2dde:	86 16       	cp	r8, r22
    2de0:	97 06       	cpc	r9, r23
    2de2:	a8 06       	cpc	r10, r24
    2de4:	b9 06       	cpc	r11, r25
    2de6:	01 f5       	brne	.+64     	; 0x2e28 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xd2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:158
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  if (fatType_ == 16) {
    2de8:	f8 01       	movw	r30, r16
    2dea:	87 89       	ldd	r24, Z+23	; 0x17
    2dec:	80 31       	cpi	r24, 0x10	; 16
    2dee:	11 f5       	brne	.+68     	; 0x2e34 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xde>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:159
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2df0:	dd 24       	eor	r13, r13
    2df2:	ee 24       	eor	r14, r14
    2df4:	ff 24       	eor	r15, r15
    2df6:	f6 01       	movw	r30, r12
    2df8:	ee 0f       	add	r30, r30
    2dfa:	ff 1f       	adc	r31, r31
    2dfc:	e3 55       	subi	r30, 0x53	; 83
    2dfe:	fd 4f       	sbci	r31, 0xFD	; 253
    2e00:	80 81       	ld	r24, Z
    2e02:	91 81       	ldd	r25, Z+1	; 0x01
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	a0 e0       	ldi	r26, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:161
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2e08:	88 83       	st	Y, r24
    2e0a:	99 83       	std	Y+1, r25	; 0x01
    2e0c:	aa 83       	std	Y+2, r26	; 0x02
    2e0e:	bb 83       	std	Y+3, r27	; 0x03
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	bb cf       	rjmp	.-138    	; 0x2d8a <SdVolume::fatGet(unsigned long, unsigned long*) const+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:154 (discriminator 2)
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2e14:	db 01       	movw	r26, r22
    2e16:	ca 01       	movw	r24, r20
    2e18:	c7 e0       	ldi	r28, 0x07	; 7
    2e1a:	b6 95       	lsr	r27
    2e1c:	a7 95       	ror	r26
    2e1e:	97 95       	ror	r25
    2e20:	87 95       	ror	r24
    2e22:	ca 95       	dec	r28
    2e24:	d1 f7       	brne	.-12     	; 0x2e1a <SdVolume::fatGet(unsigned long, unsigned long*) const+0xc4>
    2e26:	c9 cf       	rjmp	.-110    	; 0x2dba <SdVolume::fatGet(unsigned long, unsigned long*) const+0x64>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:156
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    2e2e:	81 11       	cpse	r24, r1
    2e30:	db cf       	rjmp	.-74     	; 0x2de8 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x92>
    2e32:	aa cf       	rjmp	.-172    	; 0x2d88 <SdVolume::fatGet(unsigned long, unsigned long*) const+0x32>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:161
  }
  if (fatType_ == 16) {
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2e34:	e8 94       	clt
    2e36:	c7 f8       	bld	r12, 7
    2e38:	dd 24       	eor	r13, r13
    2e3a:	ee 24       	eor	r14, r14
    2e3c:	ff 24       	eor	r15, r15
    2e3e:	f6 01       	movw	r30, r12
    2e40:	ee 0f       	add	r30, r30
    2e42:	ff 1f       	adc	r31, r31
    2e44:	ee 0f       	add	r30, r30
    2e46:	ff 1f       	adc	r31, r31
    2e48:	e3 55       	subi	r30, 0x53	; 83
    2e4a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e4c:	80 81       	ld	r24, Z
    2e4e:	91 81       	ldd	r25, Z+1	; 0x01
    2e50:	a2 81       	ldd	r26, Z+2	; 0x02
    2e52:	b3 81       	ldd	r27, Z+3	; 0x03
    2e54:	bf 70       	andi	r27, 0x0F	; 15
    2e56:	d8 cf       	rjmp	.-80     	; 0x2e08 <SdVolume::fatGet(unsigned long, unsigned long*) const+0xb2>

00002e58 <SdVolume::chainSize(unsigned long, unsigned long*) const>:
_ZNK8SdVolume9chainSizeEmPm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:140
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2e58:	4f 92       	push	r4
    2e5a:	5f 92       	push	r5
    2e5c:	6f 92       	push	r6
    2e5e:	7f 92       	push	r7
    2e60:	af 92       	push	r10
    2e62:	bf 92       	push	r11
    2e64:	cf 92       	push	r12
    2e66:	df 92       	push	r13
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	0f 93       	push	r16
    2e6e:	1f 93       	push	r17
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	00 d0       	rcall	.+0      	; 0x2e76 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x1e>
    2e76:	00 d0       	rcall	.+0      	; 0x2e78 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x20>
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	8c 01       	movw	r16, r24
    2e7e:	49 83       	std	Y+1, r20	; 0x01
    2e80:	5a 83       	std	Y+2, r21	; 0x02
    2e82:	6b 83       	std	Y+3, r22	; 0x03
    2e84:	7c 83       	std	Y+4, r23	; 0x04
    2e86:	59 01       	movw	r10, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:141
  uint32_t s = 0;
    2e88:	c1 2c       	mov	r12, r1
    2e8a:	d1 2c       	mov	r13, r1
    2e8c:	76 01       	movw	r14, r12
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:144
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2e8e:	41 2c       	mov	r4, r1
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	58 2e       	mov	r5, r24
    2e94:	61 2c       	mov	r6, r1
    2e96:	71 2c       	mov	r7, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:143
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2e98:	49 81       	ldd	r20, Y+1	; 0x01
    2e9a:	5a 81       	ldd	r21, Y+2	; 0x02
    2e9c:	6b 81       	ldd	r22, Y+3	; 0x03
    2e9e:	7c 81       	ldd	r23, Y+4	; 0x04
    2ea0:	9e 01       	movw	r18, r28
    2ea2:	2f 5f       	subi	r18, 0xFF	; 255
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    2eac:	88 23       	and	r24, r24
    2eae:	39 f1       	breq	.+78     	; 0x2efe <SdVolume::chainSize(unsigned long, unsigned long*) const+0xa6>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:144
    s += 512UL << clusterSizeShift_;
    2eb0:	f8 01       	movw	r30, r16
    2eb2:	85 85       	ldd	r24, Z+13	; 0x0d
    2eb4:	a3 01       	movw	r20, r6
    2eb6:	92 01       	movw	r18, r4
    2eb8:	04 c0       	rjmp	.+8      	; 0x2ec2 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x6a>
    2eba:	22 0f       	add	r18, r18
    2ebc:	33 1f       	adc	r19, r19
    2ebe:	44 1f       	adc	r20, r20
    2ec0:	55 1f       	adc	r21, r21
    2ec2:	8a 95       	dec	r24
    2ec4:	d2 f7       	brpl	.-12     	; 0x2eba <SdVolume::chainSize(unsigned long, unsigned long*) const+0x62>
    2ec6:	da 01       	movw	r26, r20
    2ec8:	c9 01       	movw	r24, r18
    2eca:	c8 0e       	add	r12, r24
    2ecc:	d9 1e       	adc	r13, r25
    2ece:	ea 1e       	adc	r14, r26
    2ed0:	fb 1e       	adc	r15, r27
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:145
  } while (!isEOC(cluster));
    2ed2:	49 81       	ldd	r20, Y+1	; 0x01
    2ed4:	5a 81       	ldd	r21, Y+2	; 0x02
    2ed6:	6b 81       	ldd	r22, Y+3	; 0x03
    2ed8:	7c 81       	ldd	r23, Y+4	; 0x04
_ZNK8SdVolume5isEOCEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:539
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2eda:	87 89       	ldd	r24, Z+23	; 0x17
    2edc:	80 31       	cpi	r24, 0x10	; 16
    2ede:	11 f1       	breq	.+68     	; 0x2f24 <SdVolume::chainSize(unsigned long, unsigned long*) const+0xcc>
    2ee0:	88 ef       	ldi	r24, 0xF8	; 248
    2ee2:	9f ef       	ldi	r25, 0xFF	; 255
    2ee4:	af ef       	ldi	r26, 0xFF	; 255
    2ee6:	bf e0       	ldi	r27, 0x0F	; 15
_ZNK8SdVolume9chainSizeEmPm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:145
    2ee8:	48 17       	cp	r20, r24
    2eea:	59 07       	cpc	r21, r25
    2eec:	6a 07       	cpc	r22, r26
    2eee:	7b 07       	cpc	r23, r27
    2ef0:	98 f2       	brcs	.-90     	; 0x2e98 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x40>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:146
  *size = s;
    2ef2:	f5 01       	movw	r30, r10
    2ef4:	c0 82       	st	Z, r12
    2ef6:	d1 82       	std	Z+1, r13	; 0x01
    2ef8:	e2 82       	std	Z+2, r14	; 0x02
    2efa:	f3 82       	std	Z+3, r15	; 0x03
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:147
  return true;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:148
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	df 91       	pop	r29
    2f08:	cf 91       	pop	r28
    2f0a:	1f 91       	pop	r17
    2f0c:	0f 91       	pop	r16
    2f0e:	ff 90       	pop	r15
    2f10:	ef 90       	pop	r14
    2f12:	df 90       	pop	r13
    2f14:	cf 90       	pop	r12
    2f16:	bf 90       	pop	r11
    2f18:	af 90       	pop	r10
    2f1a:	7f 90       	pop	r7
    2f1c:	6f 90       	pop	r6
    2f1e:	5f 90       	pop	r5
    2f20:	4f 90       	pop	r4
    2f22:	08 95       	ret
_ZNK8SdVolume5isEOCEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:539
    2f24:	88 ef       	ldi	r24, 0xF8	; 248
    2f26:	9f ef       	ldi	r25, 0xFF	; 255
    2f28:	a0 e0       	ldi	r26, 0x00	; 0
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	dd cf       	rjmp	.-70     	; 0x2ee8 <SdVolume::chainSize(unsigned long, unsigned long*) const+0x90>

00002f2e <SdVolume::fatPut(unsigned long, unsigned long)>:
_ZN8SdVolume6fatPutEmm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:167
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2f2e:	4f 92       	push	r4
    2f30:	5f 92       	push	r5
    2f32:	6f 92       	push	r6
    2f34:	7f 92       	push	r7
    2f36:	8f 92       	push	r8
    2f38:	9f 92       	push	r9
    2f3a:	af 92       	push	r10
    2f3c:	bf 92       	push	r11
    2f3e:	cf 92       	push	r12
    2f40:	df 92       	push	r13
    2f42:	ef 92       	push	r14
    2f44:	ff 92       	push	r15
    2f46:	0f 93       	push	r16
    2f48:	1f 93       	push	r17
    2f4a:	cf 93       	push	r28
    2f4c:	df 93       	push	r29
    2f4e:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:169
  // error if reserved cluster
  if (cluster < 2) return false;
    2f50:	42 30       	cpi	r20, 0x02	; 2
    2f52:	51 05       	cpc	r21, r1
    2f54:	61 05       	cpc	r22, r1
    2f56:	71 05       	cpc	r23, r1
    2f58:	90 f4       	brcc	.+36     	; 0x2f7e <SdVolume::fatPut(unsigned long, unsigned long)+0x50>
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:192
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    2f5c:	df 91       	pop	r29
    2f5e:	cf 91       	pop	r28
    2f60:	1f 91       	pop	r17
    2f62:	0f 91       	pop	r16
    2f64:	ff 90       	pop	r15
    2f66:	ef 90       	pop	r14
    2f68:	df 90       	pop	r13
    2f6a:	cf 90       	pop	r12
    2f6c:	bf 90       	pop	r11
    2f6e:	af 90       	pop	r10
    2f70:	9f 90       	pop	r9
    2f72:	8f 90       	pop	r8
    2f74:	7f 90       	pop	r7
    2f76:	6f 90       	pop	r6
    2f78:	5f 90       	pop	r5
    2f7a:	4f 90       	pop	r4
    2f7c:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:172
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2f7e:	89 85       	ldd	r24, Y+9	; 0x09
    2f80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f82:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f84:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f86:	01 96       	adiw	r24, 0x01	; 1
    2f88:	a1 1d       	adc	r26, r1
    2f8a:	b1 1d       	adc	r27, r1
    2f8c:	84 17       	cp	r24, r20
    2f8e:	95 07       	cpc	r25, r21
    2f90:	a6 07       	cpc	r26, r22
    2f92:	b7 07       	cpc	r27, r23
    2f94:	10 f3       	brcs	.-60     	; 0x2f5a <SdVolume::fatPut(unsigned long, unsigned long)+0x2c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:175

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2f96:	cb 88       	ldd	r12, Y+19	; 0x13
    2f98:	dc 88       	ldd	r13, Y+20	; 0x14
    2f9a:	ed 88       	ldd	r14, Y+21	; 0x15
    2f9c:	fe 88       	ldd	r15, Y+22	; 0x16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:176
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa0:	80 31       	cpi	r24, 0x10	; 16
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <SdVolume::fatPut(unsigned long, unsigned long)+0x78>
    2fa4:	42 c0       	rjmp	.+132    	; 0x302a <SdVolume::fatPut(unsigned long, unsigned long)+0xfc>
    2fa6:	bb 27       	eor	r27, r27
    2fa8:	a7 2f       	mov	r26, r23
    2faa:	96 2f       	mov	r25, r22
    2fac:	85 2f       	mov	r24, r21
    2fae:	48 01       	movw	r8, r16
    2fb0:	59 01       	movw	r10, r18
    2fb2:	2a 01       	movw	r4, r20
    2fb4:	3b 01       	movw	r6, r22
    2fb6:	c8 0e       	add	r12, r24
    2fb8:	d9 1e       	adc	r13, r25
    2fba:	ea 1e       	adc	r14, r26
    2fbc:	fb 1e       	adc	r15, r27
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:178

  if (lba != cacheBlockNumber_) {
    2fbe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <SdVolume::cacheBlockNumber_>
    2fc2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <SdVolume::cacheBlockNumber_+0x1>
    2fc6:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <SdVolume::cacheBlockNumber_+0x2>
    2fca:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <SdVolume::cacheBlockNumber_+0x3>
    2fce:	c8 16       	cp	r12, r24
    2fd0:	d9 06       	cpc	r13, r25
    2fd2:	ea 06       	cpc	r14, r26
    2fd4:	fb 06       	cpc	r15, r27
    2fd6:	99 f5       	brne	.+102    	; 0x303e <SdVolume::fatPut(unsigned long, unsigned long)+0x110>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:182
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
  }
  // store entry
  if (fatType_ == 16) {
    2fd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2fda:	80 31       	cpi	r24, 0x10	; 16
    2fdc:	c1 f5       	brne	.+112    	; 0x304e <SdVolume::fatPut(unsigned long, unsigned long)+0x120>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:183
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2fde:	b3 01       	movw	r22, r6
    2fe0:	a2 01       	movw	r20, r4
    2fe2:	55 27       	eor	r21, r21
    2fe4:	66 27       	eor	r22, r22
    2fe6:	77 27       	eor	r23, r23
    2fe8:	44 0f       	add	r20, r20
    2fea:	55 1f       	adc	r21, r21
    2fec:	43 55       	subi	r20, 0x53	; 83
    2fee:	5d 4f       	sbci	r21, 0xFD	; 253
    2ff0:	fa 01       	movw	r30, r20
    2ff2:	91 82       	std	Z+1, r9	; 0x01
    2ff4:	80 82       	st	Z, r8
_ZN8SdVolume13cacheSetDirtyEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:529
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2ff6:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <SdVolume::cacheDirty_>
    2ffa:	81 60       	ori	r24, 0x01	; 1
    2ffc:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <SdVolume::cacheDirty_>
_ZN8SdVolume6fatPutEmm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:190
    cacheBuffer_.fat32[cluster & 0X7F] = value;
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    3000:	8a 89       	ldd	r24, Y+18	; 0x12
    3002:	82 30       	cpi	r24, 0x02	; 2
    3004:	80 f0       	brcs	.+32     	; 0x3026 <SdVolume::fatPut(unsigned long, unsigned long)+0xf8>
    3006:	8d 81       	ldd	r24, Y+5	; 0x05
    3008:	9e 81       	ldd	r25, Y+6	; 0x06
    300a:	af 81       	ldd	r26, Y+7	; 0x07
    300c:	b8 85       	ldd	r27, Y+8	; 0x08
    300e:	8c 0d       	add	r24, r12
    3010:	9d 1d       	adc	r25, r13
    3012:	ae 1d       	adc	r26, r14
    3014:	bf 1d       	adc	r27, r15
    3016:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <SdVolume::cacheMirrorBlock_>
    301a:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <SdVolume::cacheMirrorBlock_+0x1>
    301e:	a0 93 a8 02 	sts	0x02A8, r26	; 0x8002a8 <SdVolume::cacheMirrorBlock_+0x2>
    3022:	b0 93 a9 02 	sts	0x02A9, r27	; 0x8002a9 <SdVolume::cacheMirrorBlock_+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:191
  return true;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	99 cf       	rjmp	.-206    	; 0x2f5c <SdVolume::fatPut(unsigned long, unsigned long)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:176
  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    302a:	db 01       	movw	r26, r22
    302c:	ca 01       	movw	r24, r20
    302e:	e7 e0       	ldi	r30, 0x07	; 7
    3030:	b6 95       	lsr	r27
    3032:	a7 95       	ror	r26
    3034:	97 95       	ror	r25
    3036:	87 95       	ror	r24
    3038:	ea 95       	dec	r30
    303a:	d1 f7       	brne	.-12     	; 0x3030 <SdVolume::fatPut(unsigned long, unsigned long)+0x102>
    303c:	b8 cf       	rjmp	.-144    	; 0x2fae <SdVolume::fatPut(unsigned long, unsigned long)+0x80>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:179

  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	c7 01       	movw	r24, r14
    3042:	b6 01       	movw	r22, r12
    3044:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    3048:	81 11       	cpse	r24, r1
    304a:	c6 cf       	rjmp	.-116    	; 0x2fd8 <SdVolume::fatPut(unsigned long, unsigned long)+0xaa>
    304c:	86 cf       	rjmp	.-244    	; 0x2f5a <SdVolume::fatPut(unsigned long, unsigned long)+0x2c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:185
  }
  // store entry
  if (fatType_ == 16) {
    cacheBuffer_.fat16[cluster & 0XFF] = value;
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    304e:	b3 01       	movw	r22, r6
    3050:	a2 01       	movw	r20, r4
    3052:	4f 77       	andi	r20, 0x7F	; 127
    3054:	55 27       	eor	r21, r21
    3056:	66 27       	eor	r22, r22
    3058:	77 27       	eor	r23, r23
    305a:	44 0f       	add	r20, r20
    305c:	55 1f       	adc	r21, r21
    305e:	44 0f       	add	r20, r20
    3060:	55 1f       	adc	r21, r21
    3062:	43 55       	subi	r20, 0x53	; 83
    3064:	5d 4f       	sbci	r21, 0xFD	; 253
    3066:	fa 01       	movw	r30, r20
    3068:	80 82       	st	Z, r8
    306a:	91 82       	std	Z+1, r9	; 0x01
    306c:	a2 82       	std	Z+2, r10	; 0x02
    306e:	b3 82       	std	Z+3, r11	; 0x03
    3070:	c2 cf       	rjmp	.-124    	; 0x2ff6 <SdVolume::fatPut(unsigned long, unsigned long)+0xc8>

00003072 <SdVolume::allocContiguous(unsigned long, unsigned long*)>:
_ZN8SdVolume15allocContiguousEmPm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:31
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    3072:	2f 92       	push	r2
    3074:	3f 92       	push	r3
    3076:	4f 92       	push	r4
    3078:	5f 92       	push	r5
    307a:	6f 92       	push	r6
    307c:	7f 92       	push	r7
    307e:	8f 92       	push	r8
    3080:	9f 92       	push	r9
    3082:	af 92       	push	r10
    3084:	bf 92       	push	r11
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
    309a:	2f 97       	sbiw	r28, 0x0f	; 15
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	de bf       	out	0x3e, r29	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	cd bf       	out	0x3d, r28	; 61
    30a6:	3c 01       	movw	r6, r24
    30a8:	48 87       	std	Y+8, r20	; 0x08
    30aa:	59 87       	std	Y+9, r21	; 0x09
    30ac:	6a 87       	std	Y+10, r22	; 0x0a
    30ae:	7b 87       	std	Y+11, r23	; 0x0b
    30b0:	3f 83       	std	Y+7, r19	; 0x07
    30b2:	2e 83       	std	Y+6, r18	; 0x06
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:39

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    30b4:	d9 01       	movw	r26, r18
    30b6:	cd 90       	ld	r12, X+
    30b8:	dd 90       	ld	r13, X+
    30ba:	ed 90       	ld	r14, X+
    30bc:	fc 90       	ld	r15, X
    30be:	c1 14       	cp	r12, r1
    30c0:	d1 04       	cpc	r13, r1
    30c2:	e1 04       	cpc	r14, r1
    30c4:	f1 04       	cpc	r15, r1
    30c6:	39 f0       	breq	.+14     	; 0x30d6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x64>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:41
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    30c8:	bf ef       	ldi	r27, 0xFF	; 255
    30ca:	cb 1a       	sub	r12, r27
    30cc:	db 0a       	sbc	r13, r27
    30ce:	eb 0a       	sbc	r14, r27
    30d0:	fb 0a       	sbc	r15, r27
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:50
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;

    // save next search start if one cluster
    setStart = 1 == count;
    30d2:	1d 82       	std	Y+5, r1	; 0x05
    30d4:	10 c0       	rjmp	.+32     	; 0x30f6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x84>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:47

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    30d6:	fc 01       	movw	r30, r24
    30d8:	c0 80       	ld	r12, Z
    30da:	d1 80       	ldd	r13, Z+1	; 0x01
    30dc:	e2 80       	ldd	r14, Z+2	; 0x02
    30de:	f3 80       	ldd	r15, Z+3	; 0x03
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:50

    // save next search start if one cluster
    setStart = 1 == count;
    30e0:	f1 e0       	ldi	r31, 0x01	; 1
    30e2:	fd 83       	std	Y+5, r31	; 0x05
    30e4:	08 85       	ldd	r16, Y+8	; 0x08
    30e6:	19 85       	ldd	r17, Y+9	; 0x09
    30e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    30ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    30ec:	01 30       	cpi	r16, 0x01	; 1
    30ee:	11 05       	cpc	r17, r1
    30f0:	21 05       	cpc	r18, r1
    30f2:	31 05       	cpc	r19, r1
    30f4:	71 f7       	brne	.-36     	; 0x30d2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x60>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:56
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    30f6:	f3 01       	movw	r30, r6
    30f8:	81 85       	ldd	r24, Z+9	; 0x09
    30fa:	92 85       	ldd	r25, Z+10	; 0x0a
    30fc:	a3 85       	ldd	r26, Z+11	; 0x0b
    30fe:	b4 85       	ldd	r27, Z+12	; 0x0c
    3100:	8c 01       	movw	r16, r24
    3102:	9d 01       	movw	r18, r26
    3104:	0f 5f       	subi	r16, 0xFF	; 255
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	2f 4f       	sbci	r18, 0xFF	; 255
    310a:	3f 4f       	sbci	r19, 0xFF	; 255
    310c:	0c 87       	std	Y+12, r16	; 0x0c
    310e:	1d 87       	std	Y+13, r17	; 0x0d
    3110:	2e 87       	std	Y+14, r18	; 0x0e
    3112:	3f 87       	std	Y+15, r19	; 0x0f
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:53

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    3114:	46 01       	movw	r8, r12
    3116:	57 01       	movw	r10, r14
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:59

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3118:	21 2c       	mov	r2, r1
    311a:	31 2c       	mov	r3, r1
    311c:	21 01       	movw	r4, r2
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:61
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    311e:	f3 01       	movw	r30, r6
    3120:	81 85       	ldd	r24, Z+9	; 0x09
    3122:	92 85       	ldd	r25, Z+10	; 0x0a
    3124:	a3 85       	ldd	r26, Z+11	; 0x0b
    3126:	b4 85       	ldd	r27, Z+12	; 0x0c
    3128:	28 16       	cp	r2, r24
    312a:	39 06       	cpc	r3, r25
    312c:	4a 06       	cpc	r4, r26
    312e:	5b 06       	cpc	r5, r27
    3130:	08 f0       	brcs	.+2      	; 0x3134 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xc2>
    3132:	44 c0       	rjmp	.+136    	; 0x31bc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x14a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:64

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    3134:	0c 85       	ldd	r16, Y+12	; 0x0c
    3136:	1d 85       	ldd	r17, Y+13	; 0x0d
    3138:	2e 85       	ldd	r18, Y+14	; 0x0e
    313a:	3f 85       	ldd	r19, Y+15	; 0x0f
    313c:	08 15       	cp	r16, r8
    313e:	19 05       	cpc	r17, r9
    3140:	2a 05       	cpc	r18, r10
    3142:	3b 05       	cpc	r19, r11
    3144:	50 f4       	brcc	.+20     	; 0x315a <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xe8>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:65
      bgnCluster = endCluster = 2;
    3146:	82 e0       	ldi	r24, 0x02	; 2
    3148:	88 2e       	mov	r8, r24
    314a:	91 2c       	mov	r9, r1
    314c:	a1 2c       	mov	r10, r1
    314e:	b1 2c       	mov	r11, r1
    3150:	92 e0       	ldi	r25, 0x02	; 2
    3152:	c9 2e       	mov	r12, r25
    3154:	d1 2c       	mov	r13, r1
    3156:	e1 2c       	mov	r14, r1
    3158:	f1 2c       	mov	r15, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:68
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    315a:	9e 01       	movw	r18, r28
    315c:	2f 5f       	subi	r18, 0xFF	; 255
    315e:	3f 4f       	sbci	r19, 0xFF	; 255
    3160:	b5 01       	movw	r22, r10
    3162:	a4 01       	movw	r20, r8
    3164:	c3 01       	movw	r24, r6
    3166:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    316a:	88 23       	and	r24, r24
    316c:	39 f1       	breq	.+78     	; 0x31bc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x14a>
    316e:	d5 01       	movw	r26, r10
    3170:	c4 01       	movw	r24, r8
    3172:	01 96       	adiw	r24, 0x01	; 1
    3174:	a1 1d       	adc	r26, r1
    3176:	b1 1d       	adc	r27, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:70

    if (f != 0) {
    3178:	49 81       	ldd	r20, Y+1	; 0x01
    317a:	5a 81       	ldd	r21, Y+2	; 0x02
    317c:	6b 81       	ldd	r22, Y+3	; 0x03
    317e:	7c 81       	ldd	r23, Y+4	; 0x04
    3180:	45 2b       	or	r20, r21
    3182:	46 2b       	or	r20, r22
    3184:	47 2b       	or	r20, r23
    3186:	a9 f5       	brne	.+106    	; 0x31f2 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x180>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:73
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    3188:	ac 01       	movw	r20, r24
    318a:	bd 01       	movw	r22, r26
    318c:	4c 19       	sub	r20, r12
    318e:	5d 09       	sbc	r21, r13
    3190:	6e 09       	sbc	r22, r14
    3192:	7f 09       	sbc	r23, r15
    3194:	08 85       	ldd	r16, Y+8	; 0x08
    3196:	19 85       	ldd	r17, Y+9	; 0x09
    3198:	2a 85       	ldd	r18, Y+10	; 0x0a
    319a:	3b 85       	ldd	r19, Y+11	; 0x0b
    319c:	40 17       	cp	r20, r16
    319e:	51 07       	cpc	r21, r17
    31a0:	62 07       	cpc	r22, r18
    31a2:	73 07       	cpc	r23, r19
    31a4:	41 f5       	brne	.+80     	; 0x31f6 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x184>
_ZN8SdVolume9fatPutEOCEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:535
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    31a6:	0f ef       	ldi	r16, 0xFF	; 255
    31a8:	1f ef       	ldi	r17, 0xFF	; 255
    31aa:	2f ef       	ldi	r18, 0xFF	; 255
    31ac:	3f e0       	ldi	r19, 0x0F	; 15
    31ae:	b5 01       	movw	r22, r10
    31b0:	a4 01       	movw	r20, r8
    31b2:	c3 01       	movw	r24, r6
    31b4:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <SdVolume::fatPut(unsigned long, unsigned long)>
_ZN8SdVolume15allocContiguousEmPm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:79
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    31b8:	81 11       	cpse	r24, r1
    31ba:	25 c0       	rjmp	.+74     	; 0x3206 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x194>
    31bc:	1d 82       	std	Y+5, r1	; 0x05
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:97

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
}
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	2f 96       	adiw	r28, 0x0f	; 15
    31c2:	0f b6       	in	r0, 0x3f	; 63
    31c4:	f8 94       	cli
    31c6:	de bf       	out	0x3e, r29	; 62
    31c8:	0f be       	out	0x3f, r0	; 63
    31ca:	cd bf       	out	0x3d, r28	; 61
    31cc:	df 91       	pop	r29
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	ff 90       	pop	r15
    31d6:	ef 90       	pop	r14
    31d8:	df 90       	pop	r13
    31da:	cf 90       	pop	r12
    31dc:	bf 90       	pop	r11
    31de:	af 90       	pop	r10
    31e0:	9f 90       	pop	r9
    31e2:	8f 90       	pop	r8
    31e4:	7f 90       	pop	r7
    31e6:	6f 90       	pop	r6
    31e8:	5f 90       	pop	r5
    31ea:	4f 90       	pop	r4
    31ec:	3f 90       	pop	r3
    31ee:	2f 90       	pop	r2
    31f0:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:72
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;

    if (f != 0) {
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    31f2:	6c 01       	movw	r12, r24
    31f4:	7d 01       	movw	r14, r26
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:59

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    31f6:	1f ef       	ldi	r17, 0xFF	; 255
    31f8:	21 1a       	sub	r2, r17
    31fa:	31 0a       	sbc	r3, r17
    31fc:	41 0a       	sbc	r4, r17
    31fe:	51 0a       	sbc	r5, r17
    3200:	4c 01       	movw	r8, r24
    3202:	5d 01       	movw	r10, r26
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:77
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
      // done - found space
      break;
    }
  }
    3204:	8c cf       	rjmp	.-232    	; 0x311e <SdVolume::allocContiguous(unsigned long, unsigned long*)+0xac>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:82
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3206:	c8 14       	cp	r12, r8
    3208:	d9 04       	cpc	r13, r9
    320a:	ea 04       	cpc	r14, r10
    320c:	fb 04       	cpc	r15, r11
    320e:	88 f4       	brcc	.+34     	; 0x3232 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1c0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:83
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3210:	14 01       	movw	r2, r8
    3212:	25 01       	movw	r4, r10
    3214:	21 e0       	ldi	r18, 0x01	; 1
    3216:	22 1a       	sub	r2, r18
    3218:	31 08       	sbc	r3, r1
    321a:	41 08       	sbc	r4, r1
    321c:	51 08       	sbc	r5, r1
    321e:	95 01       	movw	r18, r10
    3220:	84 01       	movw	r16, r8
    3222:	b2 01       	movw	r22, r4
    3224:	a1 01       	movw	r20, r2
    3226:	c3 01       	movw	r24, r6
    3228:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <SdVolume::fatPut(unsigned long, unsigned long)>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:84
    endCluster--;
    322c:	52 01       	movw	r10, r4
    322e:	41 01       	movw	r8, r2
    3230:	c3 cf       	rjmp	.-122    	; 0x31b8 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x146>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:86
  }
  if (*curCluster != 0) {
    3232:	ae 81       	ldd	r26, Y+6	; 0x06
    3234:	bf 81       	ldd	r27, Y+7	; 0x07
    3236:	4d 91       	ld	r20, X+
    3238:	5d 91       	ld	r21, X+
    323a:	6d 91       	ld	r22, X+
    323c:	7c 91       	ld	r23, X
    323e:	41 15       	cp	r20, r1
    3240:	51 05       	cpc	r21, r1
    3242:	61 05       	cpc	r22, r1
    3244:	71 05       	cpc	r23, r1
    3246:	61 f4       	brne	.+24     	; 0x3260 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1ee>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:91
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    3248:	ee 81       	ldd	r30, Y+6	; 0x06
    324a:	ff 81       	ldd	r31, Y+7	; 0x07
    324c:	c0 82       	st	Z, r12
    324e:	d1 82       	std	Z+1, r13	; 0x01
    3250:	e2 82       	std	Z+2, r14	; 0x02
    3252:	f3 82       	std	Z+3, r15	; 0x03
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:94

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    3254:	fd 81       	ldd	r31, Y+5	; 0x05
    3256:	f1 11       	cpse	r31, r1
    3258:	0b c0       	rjmp	.+22     	; 0x3270 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1fe>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:96

  return true;
    325a:	01 e0       	ldi	r16, 0x01	; 1
    325c:	0d 83       	std	Y+5, r16	; 0x05
    325e:	af cf       	rjmp	.-162    	; 0x31be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x14c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:88
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    3260:	97 01       	movw	r18, r14
    3262:	86 01       	movw	r16, r12
    3264:	c3 01       	movw	r24, r6
    3266:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <SdVolume::fatPut(unsigned long, unsigned long)>
    326a:	81 11       	cpse	r24, r1
    326c:	ed cf       	rjmp	.-38     	; 0x3248 <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x1d6>
    326e:	a6 cf       	rjmp	.-180    	; 0x31bc <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x14a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:94 (discriminator 1)
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    3270:	1f ef       	ldi	r17, 0xFF	; 255
    3272:	c1 1a       	sub	r12, r17
    3274:	d1 0a       	sbc	r13, r17
    3276:	e1 0a       	sbc	r14, r17
    3278:	f1 0a       	sbc	r15, r17
    327a:	d3 01       	movw	r26, r6
    327c:	cd 92       	st	X+, r12
    327e:	dd 92       	st	X+, r13
    3280:	ed 92       	st	X+, r14
    3282:	fc 92       	st	X, r15
    3284:	13 97       	sbiw	r26, 0x03	; 3
    3286:	9b cf       	rjmp	.-202    	; 0x31be <SdVolume::allocContiguous(unsigned long, unsigned long*)+0x14c>

00003288 <SdVolume::freeChain(unsigned long)>:
_ZN8SdVolume9freeChainEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:195
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
    3288:	af 92       	push	r10
    328a:	bf 92       	push	r11
    328c:	cf 92       	push	r12
    328e:	df 92       	push	r13
    3290:	ef 92       	push	r14
    3292:	ff 92       	push	r15
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	cf 93       	push	r28
    329a:	df 93       	push	r29
    329c:	00 d0       	rcall	.+0      	; 0x329e <SdVolume::freeChain(unsigned long)+0x16>
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <SdVolume::freeChain(unsigned long)+0x18>
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	5c 01       	movw	r10, r24
    32a6:	6a 01       	movw	r12, r20
    32a8:	7b 01       	movw	r14, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:197
  // clear free cluster location
  allocSearchStart_ = 2;
    32aa:	82 e0       	ldi	r24, 0x02	; 2
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	a0 e0       	ldi	r26, 0x00	; 0
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	f5 01       	movw	r30, r10
    32b4:	80 83       	st	Z, r24
    32b6:	91 83       	std	Z+1, r25	; 0x01
    32b8:	a2 83       	std	Z+2, r26	; 0x02
    32ba:	b3 83       	std	Z+3, r27	; 0x03
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:201

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    32bc:	9e 01       	movw	r18, r28
    32be:	2f 5f       	subi	r18, 0xFF	; 255
    32c0:	3f 4f       	sbci	r19, 0xFF	; 255
    32c2:	b7 01       	movw	r22, r14
    32c4:	a6 01       	movw	r20, r12
    32c6:	c5 01       	movw	r24, r10
    32c8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <SdVolume::fatGet(unsigned long, unsigned long*) const>
    32cc:	88 23       	and	r24, r24
    32ce:	81 f1       	breq	.+96     	; 0x3330 <SdVolume::freeChain(unsigned long)+0xa8>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:204

    // free cluster
    if (!fatPut(cluster, 0)) return false;
    32d0:	00 e0       	ldi	r16, 0x00	; 0
    32d2:	10 e0       	ldi	r17, 0x00	; 0
    32d4:	98 01       	movw	r18, r16
    32d6:	b7 01       	movw	r22, r14
    32d8:	a6 01       	movw	r20, r12
    32da:	c5 01       	movw	r24, r10
    32dc:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <SdVolume::fatPut(unsigned long, unsigned long)>
    32e0:	88 23       	and	r24, r24
    32e2:	31 f1       	breq	.+76     	; 0x3330 <SdVolume::freeChain(unsigned long)+0xa8>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:206

    cluster = next;
    32e4:	c9 80       	ldd	r12, Y+1	; 0x01
    32e6:	da 80       	ldd	r13, Y+2	; 0x02
    32e8:	eb 80       	ldd	r14, Y+3	; 0x03
    32ea:	fc 80       	ldd	r15, Y+4	; 0x04
_ZNK8SdVolume5isEOCEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:539
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    32ec:	f5 01       	movw	r30, r10
    32ee:	87 89       	ldd	r24, Z+23	; 0x17
    32f0:	80 31       	cpi	r24, 0x10	; 16
    32f2:	c9 f0       	breq	.+50     	; 0x3326 <SdVolume::freeChain(unsigned long)+0x9e>
    32f4:	88 ef       	ldi	r24, 0xF8	; 248
    32f6:	9f ef       	ldi	r25, 0xFF	; 255
    32f8:	af ef       	ldi	r26, 0xFF	; 255
    32fa:	bf e0       	ldi	r27, 0x0F	; 15
_ZN8SdVolume9freeChainEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:207
  } while (!isEOC(cluster));
    32fc:	c8 16       	cp	r12, r24
    32fe:	d9 06       	cpc	r13, r25
    3300:	ea 06       	cpc	r14, r26
    3302:	fb 06       	cpc	r15, r27
    3304:	d8 f2       	brcs	.-74     	; 0x32bc <SdVolume::freeChain(unsigned long)+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:209

  return true;
    3306:	81 e0       	ldi	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:210
}
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	df 91       	pop	r29
    3312:	cf 91       	pop	r28
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	bf 90       	pop	r11
    3322:	af 90       	pop	r10
    3324:	08 95       	ret
_ZNK8SdVolume5isEOCEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdFat.h:539
    3326:	88 ef       	ldi	r24, 0xF8	; 248
    3328:	9f ef       	ldi	r25, 0xFF	; 255
    332a:	a0 e0       	ldi	r26, 0x00	; 0
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e6 cf       	rjmp	.-52     	; 0x32fc <SdVolume::freeChain(unsigned long)+0x74>
_ZN8SdVolume9freeChainEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:201
  // clear free cluster location
  allocSearchStart_ = 2;

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	ea cf       	rjmp	.-44     	; 0x3308 <SdVolume::freeChain(unsigned long)+0x80>

00003334 <SdVolume::init(Sd2Card*, unsigned char)>:
_ZN8SdVolume4initEP7Sd2Cardh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:227
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    3334:	8f 92       	push	r8
    3336:	9f 92       	push	r9
    3338:	af 92       	push	r10
    333a:	bf 92       	push	r11
    333c:	cf 92       	push	r12
    333e:	df 92       	push	r13
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	cf 93       	push	r28
    334a:	df 93       	push	r29
    334c:	ec 01       	movw	r28, r24
    334e:	14 2f       	mov	r17, r20
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:229
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    3350:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <SdVolume::sdCard_+0x1>
    3354:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <SdVolume::sdCard_>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:232
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    3358:	44 23       	and	r20, r20
    335a:	09 f4       	brne	.+2      	; 0x335e <SdVolume::init(Sd2Card*, unsigned char)+0x2a>
    335c:	78 c0       	rjmp	.+240    	; 0x344e <SdVolume::init(Sd2Card*, unsigned char)+0x11a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:233
    if (part > 4)return false;
    335e:	45 30       	cpi	r20, 0x05	; 5
    3360:	70 f0       	brcs	.+28     	; 0x337e <SdVolume::init(Sd2Card*, unsigned char)+0x4a>
    3362:	80 e0       	ldi	r24, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:295
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    3364:	df 91       	pop	r29
    3366:	cf 91       	pop	r28
    3368:	1f 91       	pop	r17
    336a:	0f 91       	pop	r16
    336c:	ff 90       	pop	r15
    336e:	ef 90       	pop	r14
    3370:	df 90       	pop	r13
    3372:	cf 90       	pop	r12
    3374:	bf 90       	pop	r11
    3376:	af 90       	pop	r10
    3378:	9f 90       	pop	r9
    337a:	8f 90       	pop	r8
    337c:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:234
  sdCard_ = dev;
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    337e:	40 e0       	ldi	r20, 0x00	; 0
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	cb 01       	movw	r24, r22
    3386:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    338a:	88 23       	and	r24, r24
    338c:	51 f3       	breq	.-44     	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:235
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    338e:	81 2f       	mov	r24, r17
    3390:	81 50       	subi	r24, 0x01	; 1
    3392:	99 0b       	sbc	r25, r25
    3394:	ac 01       	movw	r20, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:236
    if ((p->boot & 0X7F) !=0  ||
    3396:	64 e0       	ldi	r22, 0x04	; 4
    3398:	44 0f       	add	r20, r20
    339a:	55 1f       	adc	r21, r21
    339c:	6a 95       	dec	r22
    339e:	e1 f7       	brne	.-8      	; 0x3398 <SdVolume::init(Sd2Card*, unsigned char)+0x64>
    33a0:	43 55       	subi	r20, 0x53	; 83
    33a2:	5d 4f       	sbci	r21, 0xFD	; 253
    33a4:	fa 01       	movw	r30, r20
    33a6:	e2 54       	subi	r30, 0x42	; 66
    33a8:	fe 4f       	sbci	r31, 0xFE	; 254
    33aa:	80 81       	ld	r24, Z
    33ac:	8f 77       	andi	r24, 0x7F	; 127
    33ae:	c9 f6       	brne	.-78     	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:237 (discriminator 1)
      p->totalSectors < 100 ||
    33b0:	3c 96       	adiw	r30, 0x0c	; 12
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:236 (discriminator 1)
  // if part > 0 assume mbr volume with partition table
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
    33b2:	80 81       	ld	r24, Z
    33b4:	91 81       	ldd	r25, Z+1	; 0x01
    33b6:	a2 81       	ldd	r26, Z+2	; 0x02
    33b8:	b3 81       	ldd	r27, Z+3	; 0x03
    33ba:	84 36       	cpi	r24, 0x64	; 100
    33bc:	91 05       	cpc	r25, r1
    33be:	a1 05       	cpc	r26, r1
    33c0:	b1 05       	cpc	r27, r1
    33c2:	78 f2       	brcs	.-98     	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:238
      p->totalSectors < 100 ||
      p->firstSector == 0) {
    33c4:	4a 53       	subi	r20, 0x3A	; 58
    33c6:	5e 4f       	sbci	r21, 0xFE	; 254
    33c8:	fa 01       	movw	r30, r20
    33ca:	c0 80       	ld	r12, Z
    33cc:	d1 80       	ldd	r13, Z+1	; 0x01
    33ce:	e2 80       	ldd	r14, Z+2	; 0x02
    33d0:	f3 80       	ldd	r15, Z+3	; 0x03
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:237
  if (part) {
    if (part > 4)return false;
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    if ((p->boot & 0X7F) !=0  ||
      p->totalSectors < 100 ||
    33d2:	c1 14       	cp	r12, r1
    33d4:	d1 04       	cpc	r13, r1
    33d6:	e1 04       	cpc	r14, r1
    33d8:	f1 04       	cpc	r15, r1
    33da:	19 f2       	breq	.-122    	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:244
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	c7 01       	movw	r24, r14
    33e0:	b6 01       	movw	r22, r12
    33e2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <SdVolume::cacheRawBlock(unsigned long, unsigned char)>
    33e6:	88 23       	and	r24, r24
    33e8:	09 f4       	brne	.+2      	; 0x33ec <SdVolume::init(Sd2Card*, unsigned char)+0xb8>
    33ea:	bb cf       	rjmp	.-138    	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:246
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    33ec:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <SdVolume::cacheBuffer_+0xb>
    33f0:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <SdVolume::cacheBuffer_+0xc>
    33f4:	81 15       	cp	r24, r1
    33f6:	92 40       	sbci	r25, 0x02	; 2
    33f8:	09 f0       	breq	.+2      	; 0x33fc <SdVolume::init(Sd2Card*, unsigned char)+0xc8>
    33fa:	b3 cf       	rjmp	.-154    	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:247 (discriminator 1)
    bpb->fatCount == 0 ||
    33fc:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <SdVolume::cacheBuffer_+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:246 (discriminator 1)
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    3400:	99 23       	and	r25, r25
    3402:	09 f4       	brne	.+2      	; 0x3406 <SdVolume::init(Sd2Card*, unsigned char)+0xd2>
    3404:	ae cf       	rjmp	.-164    	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:247
    bpb->fatCount == 0 ||
    3406:	20 91 bb 02 	lds	r18, 0x02BB	; 0x8002bb <SdVolume::cacheBuffer_+0xe>
    340a:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <SdVolume::cacheBuffer_+0xf>
    340e:	23 2b       	or	r18, r19
    3410:	09 f4       	brne	.+2      	; 0x3414 <SdVolume::init(Sd2Card*, unsigned char)+0xe0>
    3412:	a7 cf       	rjmp	.-178    	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:249
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
    3414:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <SdVolume::cacheBuffer_+0xd>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:248
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    bpb->fatCount == 0 ||
    bpb->reservedSectorCount == 0 ||
    3418:	88 23       	and	r24, r24
    341a:	09 f4       	brne	.+2      	; 0x341e <SdVolume::init(Sd2Card*, unsigned char)+0xea>
    341c:	a2 cf       	rjmp	.-188    	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:253
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    341e:	9a 8b       	std	Y+18, r25	; 0x12
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:254
  blocksPerCluster_ = bpb->sectorsPerCluster;
    3420:	8c 83       	std	Y+4, r24	; 0x04
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:257

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    3422:	1d 86       	std	Y+13, r1	; 0x0d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:258
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	41 e0       	ldi	r20, 0x01	; 1
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	2d 85       	ldd	r18, Y+13	; 0x0d
    342c:	e2 2f       	mov	r30, r18
    342e:	ba 01       	movw	r22, r20
    3430:	02 2e       	mov	r0, r18
    3432:	02 c0       	rjmp	.+4      	; 0x3438 <SdVolume::init(Sd2Card*, unsigned char)+0x104>
    3434:	66 0f       	add	r22, r22
    3436:	77 1f       	adc	r23, r23
    3438:	0a 94       	dec	r0
    343a:	e2 f7       	brpl	.-8      	; 0x3434 <SdVolume::init(Sd2Card*, unsigned char)+0x100>
    343c:	86 17       	cp	r24, r22
    343e:	97 07       	cpc	r25, r23
    3440:	51 f0       	breq	.+20     	; 0x3456 <SdVolume::init(Sd2Card*, unsigned char)+0x122>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:260
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3442:	31 e0       	ldi	r19, 0x01	; 1
    3444:	32 0f       	add	r19, r18
    3446:	3d 87       	std	Y+13, r19	; 0x0d
    3448:	28 30       	cpi	r18, 0x08	; 8
    344a:	78 f3       	brcs	.-34     	; 0x342a <SdVolume::init(Sd2Card*, unsigned char)+0xf6>
    344c:	8a cf       	rjmp	.-236    	; 0x3362 <SdVolume::init(Sd2Card*, unsigned char)+0x2e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:228
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    344e:	c1 2c       	mov	r12, r1
    3450:	d1 2c       	mov	r13, r1
    3452:	76 01       	movw	r14, r12
    3454:	c3 cf       	rjmp	.-122    	; 0x33dc <SdVolume::init(Sd2Card*, unsigned char)+0xa8>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:262
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
    3456:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <SdVolume::cacheBuffer_+0x16>
    345a:	30 91 c4 02 	lds	r19, 0x02C4	; 0x8002c4 <SdVolume::cacheBuffer_+0x17>
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	21 15       	cp	r18, r1
    3464:	31 05       	cpc	r19, r1
    3466:	41 f4       	brne	.+16     	; 0x3478 <SdVolume::init(Sd2Card*, unsigned char)+0x144>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:262 (discriminator 2)
    3468:	20 91 d1 02 	lds	r18, 0x02D1	; 0x8002d1 <SdVolume::cacheBuffer_+0x24>
    346c:	30 91 d2 02 	lds	r19, 0x02D2	; 0x8002d2 <SdVolume::cacheBuffer_+0x25>
    3470:	40 91 d3 02 	lds	r20, 0x02D3	; 0x8002d3 <SdVolume::cacheBuffer_+0x26>
    3474:	50 91 d4 02 	lds	r21, 0x02D4	; 0x8002d4 <SdVolume::cacheBuffer_+0x27>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:262 (discriminator 4)
    3478:	2d 83       	std	Y+5, r18	; 0x05
    347a:	3e 83       	std	Y+6, r19	; 0x06
    347c:	4f 83       	std	Y+7, r20	; 0x07
    347e:	58 87       	std	Y+8, r21	; 0x08
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:265 (discriminator 4)
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    3480:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <SdVolume::cacheBuffer_+0xe>
    3484:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <SdVolume::cacheBuffer_+0xf>
    3488:	46 01       	movw	r8, r12
    348a:	57 01       	movw	r10, r14
    348c:	88 0e       	add	r8, r24
    348e:	99 1e       	adc	r9, r25
    3490:	a1 1c       	adc	r10, r1
    3492:	b1 1c       	adc	r11, r1
    3494:	8b 8a       	std	Y+19, r8	; 0x13
    3496:	9c 8a       	std	Y+20, r9	; 0x14
    3498:	ad 8a       	std	Y+21, r10	; 0x15
    349a:	be 8a       	std	Y+22, r11	; 0x16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:268 (discriminator 4)

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    349c:	00 91 be 02 	lds	r16, 0x02BE	; 0x8002be <SdVolume::cacheBuffer_+0x11>
    34a0:	10 91 bf 02 	lds	r17, 0x02BF	; 0x8002bf <SdVolume::cacheBuffer_+0x12>
    34a4:	19 8f       	std	Y+25, r17	; 0x19
    34a6:	08 8f       	std	Y+24, r16	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:271 (discriminator 4)

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    34a8:	a0 91 bd 02 	lds	r26, 0x02BD	; 0x8002bd <SdVolume::cacheBuffer_+0x10>
    34ac:	b0 e0       	ldi	r27, 0x00	; 0
    34ae:	0e 94 ac 20 	call	0x4158	; 0x4158 <__muluhisi3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	88 0d       	add	r24, r8
    34b8:	99 1d       	adc	r25, r9
    34ba:	aa 1d       	adc	r26, r10
    34bc:	bb 1d       	adc	r27, r11
    34be:	8a 8f       	std	Y+26, r24	; 0x1a
    34c0:	9b 8f       	std	Y+27, r25	; 0x1b
    34c2:	ac 8f       	std	Y+28, r26	; 0x1c
    34c4:	bd 8f       	std	Y+29, r27	; 0x1d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:274 (discriminator 4)

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    34c6:	25 e0       	ldi	r18, 0x05	; 5
    34c8:	00 0f       	add	r16, r16
    34ca:	11 1f       	adc	r17, r17
    34cc:	2a 95       	dec	r18
    34ce:	e1 f7       	brne	.-8      	; 0x34c8 <SdVolume::init(Sd2Card*, unsigned char)+0x194>
    34d0:	01 50       	subi	r16, 0x01	; 1
    34d2:	1e 4f       	sbci	r17, 0xFE	; 254
    34d4:	01 2f       	mov	r16, r17
    34d6:	11 27       	eor	r17, r17
    34d8:	06 95       	lsr	r16
    34da:	80 0f       	add	r24, r16
    34dc:	91 1f       	adc	r25, r17
    34de:	a1 1d       	adc	r26, r1
    34e0:	b1 1d       	adc	r27, r1
    34e2:	8e 87       	std	Y+14, r24	; 0x0e
    34e4:	9f 87       	std	Y+15, r25	; 0x0f
    34e6:	a8 8b       	std	Y+16, r26	; 0x10
    34e8:	b9 8b       	std	Y+17, r27	; 0x11
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:277 (discriminator 4)

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
    34ea:	00 91 c0 02 	lds	r16, 0x02C0	; 0x8002c0 <SdVolume::cacheBuffer_+0x13>
    34ee:	10 91 c1 02 	lds	r17, 0x02C1	; 0x8002c1 <SdVolume::cacheBuffer_+0x14>
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	01 15       	cp	r16, r1
    34f8:	11 05       	cpc	r17, r1
    34fa:	41 f4       	brne	.+16     	; 0x350c <SdVolume::init(Sd2Card*, unsigned char)+0x1d8>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:277 (discriminator 2)
    34fc:	00 91 cd 02 	lds	r16, 0x02CD	; 0x8002cd <SdVolume::cacheBuffer_+0x20>
    3500:	10 91 ce 02 	lds	r17, 0x02CE	; 0x8002ce <SdVolume::cacheBuffer_+0x21>
    3504:	20 91 cf 02 	lds	r18, 0x02CF	; 0x8002cf <SdVolume::cacheBuffer_+0x22>
    3508:	30 91 d0 02 	lds	r19, 0x02D0	; 0x8002d0 <SdVolume::cacheBuffer_+0x23>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:280 (discriminator 4)
                           bpb->totalSectors16 : bpb->totalSectors32;
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    350c:	c8 1a       	sub	r12, r24
    350e:	d9 0a       	sbc	r13, r25
    3510:	ea 0a       	sbc	r14, r26
    3512:	fb 0a       	sbc	r15, r27
    3514:	c0 0e       	add	r12, r16
    3516:	d1 1e       	adc	r13, r17
    3518:	e2 1e       	adc	r14, r18
    351a:	f3 1e       	adc	r15, r19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:283 (discriminator 4)

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    351c:	04 c0       	rjmp	.+8      	; 0x3526 <SdVolume::init(Sd2Card*, unsigned char)+0x1f2>
    351e:	f6 94       	lsr	r15
    3520:	e7 94       	ror	r14
    3522:	d7 94       	ror	r13
    3524:	c7 94       	ror	r12
    3526:	ea 95       	dec	r30
    3528:	d2 f7       	brpl	.-12     	; 0x351e <SdVolume::init(Sd2Card*, unsigned char)+0x1ea>
    352a:	c9 86       	std	Y+9, r12	; 0x09
    352c:	da 86       	std	Y+10, r13	; 0x0a
    352e:	eb 86       	std	Y+11, r14	; 0x0b
    3530:	fc 86       	std	Y+12, r15	; 0x0c
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:287 (discriminator 4)

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    fatType_ = 12;
    3532:	8c e0       	ldi	r24, 0x0C	; 12
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:286 (discriminator 4)

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3534:	25 ef       	ldi	r18, 0xF5	; 245
    3536:	c2 16       	cp	r12, r18
    3538:	2f e0       	ldi	r18, 0x0F	; 15
    353a:	d2 06       	cpc	r13, r18
    353c:	e1 04       	cpc	r14, r1
    353e:	f1 04       	cpc	r15, r1
    3540:	40 f0       	brcs	.+16     	; 0x3552 <SdVolume::init(Sd2Card*, unsigned char)+0x21e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:288
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    3542:	85 ef       	ldi	r24, 0xF5	; 245
    3544:	c8 16       	cp	r12, r24
    3546:	8f ef       	ldi	r24, 0xFF	; 255
    3548:	d8 06       	cpc	r13, r24
    354a:	e1 04       	cpc	r14, r1
    354c:	f1 04       	cpc	r15, r1
    354e:	20 f4       	brcc	.+8      	; 0x3558 <SdVolume::init(Sd2Card*, unsigned char)+0x224>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:289
    fatType_ = 16;
    3550:	80 e1       	ldi	r24, 0x10	; 16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:292
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
    3552:	8f 8b       	std	Y+23, r24	; 0x17
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:294
  }
  return true;
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	06 cf       	rjmp	.-500    	; 0x3364 <SdVolume::init(Sd2Card*, unsigned char)+0x30>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:291
  if (clusterCount_ < 4085) {
    fatType_ = 12;
  } else if (clusterCount_ < 65525) {
    fatType_ = 16;
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    3558:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <SdVolume::cacheBuffer_+0x2c>
    355c:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <SdVolume::cacheBuffer_+0x2d>
    3560:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <SdVolume::cacheBuffer_+0x2e>
    3564:	b0 91 dc 02 	lds	r27, 0x02DC	; 0x8002dc <SdVolume::cacheBuffer_+0x2f>
    3568:	8a 8f       	std	Y+26, r24	; 0x1a
    356a:	9b 8f       	std	Y+27, r25	; 0x1b
    356c:	ac 8f       	std	Y+28, r26	; 0x1c
    356e:	bd 8f       	std	Y+29, r27	; 0x1d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SD/src/utility/SdVolume.cpp:292
    fatType_ = 32;
    3570:	80 e2       	ldi	r24, 0x20	; 32
    3572:	ef cf       	rjmp	.-34     	; 0x3552 <SdVolume::init(Sd2Card*, unsigned char)+0x21e>

00003574 <SPIClass::begin()>:
_ZN8SPIClass5beginEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:27
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3574:	cf 93       	push	r28
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:28
  uint8_t sreg = SREG;
    3576:	cf b7       	in	r28, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:29
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3578:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:30
  if (!initialized) {
    357a:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <SPIClass::initialized>
    357e:	81 11       	cpse	r24, r1
    3580:	27 c0       	rjmp	.+78     	; 0x35d0 <SPIClass::begin()+0x5c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:32
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3582:	e0 ee       	ldi	r30, 0xE0	; 224
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:33
    uint8_t bit = digitalPinToBitMask(SS);
    3588:	e0 ec       	ldi	r30, 0xC0	; 192
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	94 91       	lpm	r25, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:34
    volatile uint8_t *reg = portModeRegister(port);
    358e:	e8 2f       	mov	r30, r24
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	ee 0f       	add	r30, r30
    3594:	ff 1f       	adc	r31, r31
    3596:	ea 5f       	subi	r30, 0xFA	; 250
    3598:	fe 4f       	sbci	r31, 0xFE	; 254
    359a:	a5 91       	lpm	r26, Z+
    359c:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:38

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    359e:	ec 91       	ld	r30, X
    35a0:	e9 23       	and	r30, r25
    35a2:	21 f4       	brne	.+8      	; 0x35ac <SPIClass::begin()+0x38>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:39
      digitalWrite(SS, HIGH);
    35a4:	61 e0       	ldi	r22, 0x01	; 1
    35a6:	84 e0       	ldi	r24, 0x04	; 4
    35a8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <digitalWrite>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:45
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    35ac:	61 e0       	ldi	r22, 0x01	; 1
    35ae:	84 e0       	ldi	r24, 0x04	; 4
    35b0:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:50

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    35b4:	8c b5       	in	r24, 0x2c	; 44
    35b6:	80 61       	ori	r24, 0x10	; 16
    35b8:	8c bd       	out	0x2c, r24	; 44
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:51
    SPCR |= _BV(SPE);
    35ba:	8c b5       	in	r24, 0x2c	; 44
    35bc:	80 64       	ori	r24, 0x40	; 64
    35be:	8c bd       	out	0x2c, r24	; 44
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:59
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    35c0:	61 e0       	ldi	r22, 0x01	; 1
    35c2:	87 e0       	ldi	r24, 0x07	; 7
    35c4:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:60
    pinMode(MOSI, OUTPUT);
    35c8:	61 e0       	ldi	r22, 0x01	; 1
    35ca:	85 e0       	ldi	r24, 0x05	; 5
    35cc:	0e 94 16 20 	call	0x402c	; 0x402c <pinMode>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:62
  }
  initialized++; // reference count
    35d0:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <SPIClass::initialized>
    35d4:	8f 5f       	subi	r24, 0xFF	; 255
    35d6:	80 93 b0 04 	sts	0x04B0, r24	; 0x8004b0 <SPIClass::initialized>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:63
  SREG = sreg;
    35da:	cf bf       	out	0x3f, r28	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/SPI/src/SPI.cpp:64
}
    35dc:	cf 91       	pop	r28
    35de:	08 95       	ret

000035e0 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    35e0:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    35e2:	91 8d       	ldd	r25, Z+25	; 0x19
    35e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    35e6:	89 2f       	mov	r24, r25
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	80 5c       	subi	r24, 0xC0	; 192
    35ec:	9f 4f       	sbci	r25, 0xFF	; 255
    35ee:	82 1b       	sub	r24, r18
    35f0:	91 09       	sbc	r25, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    35f2:	8f 73       	andi	r24, 0x3F	; 63
    35f4:	99 27       	eor	r25, r25
    35f6:	08 95       	ret

000035f8 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    35f8:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    35fa:	91 8d       	ldd	r25, Z+25	; 0x19
    35fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    35fe:	98 17       	cp	r25, r24
    3600:	31 f0       	breq	.+12     	; 0x360e <HardwareSerial::peek()+0x16>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    3602:	82 8d       	ldd	r24, Z+26	; 0x1a
    3604:	e8 0f       	add	r30, r24
    3606:	f1 1d       	adc	r31, r1
    3608:	85 8d       	ldd	r24, Z+29	; 0x1d
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    360e:	8f ef       	ldi	r24, 0xFF	; 255
    3610:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3612:	08 95       	ret

00003614 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    3614:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    3616:	91 8d       	ldd	r25, Z+25	; 0x19
    3618:	82 8d       	ldd	r24, Z+26	; 0x1a
    361a:	98 17       	cp	r25, r24
    361c:	61 f0       	breq	.+24     	; 0x3636 <HardwareSerial::read()+0x22>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    361e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3620:	ae 0f       	add	r26, r30
    3622:	bf 2f       	mov	r27, r31
    3624:	b1 1d       	adc	r27, r1
    3626:	5d 96       	adiw	r26, 0x1d	; 29
    3628:	8c 91       	ld	r24, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    362a:	92 8d       	ldd	r25, Z+26	; 0x1a
    362c:	9f 5f       	subi	r25, 0xFF	; 255
    362e:	9f 73       	andi	r25, 0x3F	; 63
    3630:	92 8f       	std	Z+26, r25	; 0x1a
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3636:	8f ef       	ldi	r24, 0xFF	; 255
    3638:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    363a:	08 95       	ret

0000363c <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    363c:	fc 01       	movw	r30, r24
    363e:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    3640:	44 8d       	ldd	r20, Z+28	; 0x1c
    3642:	25 2f       	mov	r18, r21
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	84 2f       	mov	r24, r20
    3648:	90 e0       	ldi	r25, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    364a:	82 1b       	sub	r24, r18
    364c:	93 0b       	sbc	r25, r19
    364e:	54 17       	cp	r21, r20
    3650:	10 f0       	brcs	.+4      	; 0x3656 <HardwareSerial::availableForWrite()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    3652:	cf 96       	adiw	r24, 0x3f	; 63
    3654:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    3656:	01 97       	sbiw	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    3658:	08 95       	ret

0000365a <serialEventRun()>:
_Z14serialEventRunv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    365a:	89 e8       	ldi	r24, 0x89	; 137
    365c:	9c e1       	ldi	r25, 0x1C	; 28
    365e:	89 2b       	or	r24, r25
    3660:	49 f0       	breq	.+18     	; 0x3674 <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	89 2b       	or	r24, r25
    3668:	29 f0       	breq	.+10     	; 0x3674 <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    366a:	0e 94 89 1c 	call	0x3912	; 0x3912 <Serial0_available()>
    366e:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    3670:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	89 2b       	or	r24, r25
    367a:	49 f0       	breq	.+18     	; 0x368e <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	89 2b       	or	r24, r25
    3682:	29 f0       	breq	.+10     	; 0x368e <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    3684:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3688:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
    368a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    368e:	08 95       	ret

00003690 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3690:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3692:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3694:	a8 0f       	add	r26, r24
    3696:	b9 2f       	mov	r27, r25
    3698:	b1 1d       	adc	r27, r1
    369a:	a3 5a       	subi	r26, 0xA3	; 163
    369c:	bf 4f       	sbci	r27, 0xFF	; 255
    369e:	2c 91       	ld	r18, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    36a0:	84 8d       	ldd	r24, Z+28	; 0x1c
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	8f 73       	andi	r24, 0x3F	; 63
    36a8:	99 27       	eor	r25, r25
    36aa:	84 8f       	std	Z+28, r24	; 0x1c
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    36ac:	a6 89       	ldd	r26, Z+22	; 0x16
    36ae:	b7 89       	ldd	r27, Z+23	; 0x17
    36b0:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    36b2:	a0 89       	ldd	r26, Z+16	; 0x10
    36b4:	b1 89       	ldd	r27, Z+17	; 0x11
    36b6:	8c 91       	ld	r24, X
    36b8:	83 70       	andi	r24, 0x03	; 3
    36ba:	80 64       	ori	r24, 0x40	; 64
    36bc:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    36be:	93 8d       	ldd	r25, Z+27	; 0x1b
    36c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    36c2:	98 13       	cpse	r25, r24
    36c4:	06 c0       	rjmp	.+12     	; 0x36d2 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    36c6:	02 88       	ldd	r0, Z+18	; 0x12
    36c8:	f3 89       	ldd	r31, Z+19	; 0x13
    36ca:	e0 2d       	mov	r30, r0
    36cc:	80 81       	ld	r24, Z
    36ce:	8f 7d       	andi	r24, 0xDF	; 223
    36d0:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    36d2:	08 95       	ret

000036d4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    36da:	88 8d       	ldd	r24, Y+24	; 0x18
    36dc:	88 23       	and	r24, r24
    36de:	b9 f0       	breq	.+46     	; 0x370e <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    36e0:	aa 89       	ldd	r26, Y+18	; 0x12
    36e2:	bb 89       	ldd	r27, Y+19	; 0x13
    36e4:	e8 89       	ldd	r30, Y+16	; 0x10
    36e6:	f9 89       	ldd	r31, Y+17	; 0x11
    36e8:	8c 91       	ld	r24, X
    36ea:	85 fd       	sbrc	r24, 5
    36ec:	03 c0       	rjmp	.+6      	; 0x36f4 <HardwareSerial::flush()+0x20>
    36ee:	80 81       	ld	r24, Z
    36f0:	86 fd       	sbrc	r24, 6
    36f2:	0d c0       	rjmp	.+26     	; 0x370e <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    36f4:	0f b6       	in	r0, 0x3f	; 63
    36f6:	07 fc       	sbrc	r0, 7
    36f8:	f7 cf       	rjmp	.-18     	; 0x36e8 <HardwareSerial::flush()+0x14>
    36fa:	8c 91       	ld	r24, X
    36fc:	85 ff       	sbrs	r24, 5
    36fe:	f2 cf       	rjmp	.-28     	; 0x36e4 <HardwareSerial::flush()+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    3700:	80 81       	ld	r24, Z
    3702:	85 ff       	sbrs	r24, 5
    3704:	ed cf       	rjmp	.-38     	; 0x36e0 <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    3706:	ce 01       	movw	r24, r28
    3708:	0e 94 48 1b 	call	0x3690	; 0x3690 <HardwareSerial::_tx_udr_empty_irq()>
    370c:	e9 cf       	rjmp	.-46     	; 0x36e0 <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    370e:	df 91       	pop	r29
    3710:	cf 91       	pop	r28
    3712:	08 95       	ret

00003714 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    3714:	ef 92       	push	r14
    3716:	ff 92       	push	r15
    3718:	0f 93       	push	r16
    371a:	1f 93       	push	r17
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	88 8f       	std	Y+24, r24	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    3726:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3728:	8c 8d       	ldd	r24, Y+28	; 0x1c
    372a:	98 13       	cpse	r25, r24
    372c:	1a c0       	rjmp	.+52     	; 0x3762 <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    372e:	e8 89       	ldd	r30, Y+16	; 0x10
    3730:	f9 89       	ldd	r31, Y+17	; 0x11
    3732:	80 81       	ld	r24, Z
    3734:	85 ff       	sbrs	r24, 5
    3736:	15 c0       	rjmp	.+42     	; 0x3762 <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    3738:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    373a:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    373c:	ee 89       	ldd	r30, Y+22	; 0x16
    373e:	ff 89       	ldd	r31, Y+23	; 0x17
    3740:	60 83       	st	Z, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    3742:	e8 89       	ldd	r30, Y+16	; 0x10
    3744:	f9 89       	ldd	r31, Y+17	; 0x11
    3746:	80 81       	ld	r24, Z
    3748:	83 70       	andi	r24, 0x03	; 3
    374a:	80 64       	ori	r24, 0x40	; 64
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    374c:	80 83       	st	Z, r24
__iRestore():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    374e:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	08 95       	ret
    3762:	f6 2e       	mov	r15, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3764:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3766:	10 e0       	ldi	r17, 0x00	; 0
    3768:	0f 5f       	subi	r16, 0xFF	; 255
    376a:	1f 4f       	sbci	r17, 0xFF	; 255
    376c:	0f 73       	andi	r16, 0x3F	; 63
    376e:	11 27       	eor	r17, r17
    3770:	e0 2e       	mov	r14, r16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3772:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3774:	8e 11       	cpse	r24, r14
    3776:	0c c0       	rjmp	.+24     	; 0x3790 <HardwareSerial::write(unsigned char)+0x7c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	07 fc       	sbrc	r0, 7
    377c:	fa cf       	rjmp	.-12     	; 0x3772 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    377e:	e8 89       	ldd	r30, Y+16	; 0x10
    3780:	f9 89       	ldd	r31, Y+17	; 0x11
    3782:	80 81       	ld	r24, Z
    3784:	85 ff       	sbrs	r24, 5
    3786:	f5 cf       	rjmp	.-22     	; 0x3772 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    3788:	ce 01       	movw	r24, r28
    378a:	0e 94 48 1b 	call	0x3690	; 0x3690 <HardwareSerial::_tx_udr_empty_irq()>
    378e:	f1 cf       	rjmp	.-30     	; 0x3772 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3790:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3792:	ec 0f       	add	r30, r28
    3794:	fd 2f       	mov	r31, r29
    3796:	f1 1d       	adc	r31, r1
    3798:	e3 5a       	subi	r30, 0xA3	; 163
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	f0 82       	st	Z, r15
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    379e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    37a0:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    37a2:	0b 8f       	std	Y+27, r16	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    37a4:	ea 89       	ldd	r30, Y+18	; 0x12
    37a6:	fb 89       	ldd	r31, Y+19	; 0x13
    37a8:	80 81       	ld	r24, Z
    37aa:	80 62       	ori	r24, 0x20	; 32
    37ac:	cf cf       	rjmp	.-98     	; 0x374c <HardwareSerial::write(unsigned char)+0x38>

000037ae <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    37ae:	cf 92       	push	r12
    37b0:	df 92       	push	r13
    37b2:	ef 92       	push	r14
    37b4:	ff 92       	push	r15
    37b6:	1f 93       	push	r17
    37b8:	cf 93       	push	r28
    37ba:	df 93       	push	r29
    37bc:	ec 01       	movw	r28, r24
    37be:	6a 01       	movw	r12, r20
    37c0:	7b 01       	movw	r14, r22
    37c2:	12 2f       	mov	r17, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    37c4:	60 e8       	ldi	r22, 0x80	; 128
    37c6:	74 e8       	ldi	r23, 0x84	; 132
    37c8:	8e e1       	ldi	r24, 0x1E	; 30
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	a7 01       	movw	r20, r14
    37ce:	96 01       	movw	r18, r12
    37d0:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    37d4:	21 50       	subi	r18, 0x01	; 1
    37d6:	31 09       	sbc	r19, r1
    37d8:	41 09       	sbc	r20, r1
    37da:	51 09       	sbc	r21, r1
    37dc:	56 95       	lsr	r21
    37de:	47 95       	ror	r20
    37e0:	37 95       	ror	r19
    37e2:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    37e4:	e8 89       	ldd	r30, Y+16	; 0x10
    37e6:	f9 89       	ldd	r31, Y+17	; 0x11
    37e8:	82 e0       	ldi	r24, 0x02	; 2
    37ea:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    37ec:	21 15       	cp	r18, r1
    37ee:	80 e1       	ldi	r24, 0x10	; 16
    37f0:	38 07       	cpc	r19, r24
    37f2:	98 f0       	brcs	.+38     	; 0x381a <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    37f4:	e8 89       	ldd	r30, Y+16	; 0x10
    37f6:	f9 89       	ldd	r31, Y+17	; 0x11
    37f8:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    37fa:	60 e4       	ldi	r22, 0x40	; 64
    37fc:	72 e4       	ldi	r23, 0x42	; 66
    37fe:	8f e0       	ldi	r24, 0x0F	; 15
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	a7 01       	movw	r20, r14
    3804:	96 01       	movw	r18, r12
    3806:	0e 94 81 20 	call	0x4102	; 0x4102 <__udivmodsi4>
    380a:	21 50       	subi	r18, 0x01	; 1
    380c:	31 09       	sbc	r19, r1
    380e:	41 09       	sbc	r20, r1
    3810:	51 09       	sbc	r21, r1
    3812:	56 95       	lsr	r21
    3814:	47 95       	ror	r20
    3816:	37 95       	ror	r19
    3818:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    381a:	ec 85       	ldd	r30, Y+12	; 0x0c
    381c:	fd 85       	ldd	r31, Y+13	; 0x0d
    381e:	30 83       	st	Z, r19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    3820:	ee 85       	ldd	r30, Y+14	; 0x0e
    3822:	ff 85       	ldd	r31, Y+15	; 0x0f
    3824:	20 83       	st	Z, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    3826:	18 8e       	std	Y+24, r1	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    3828:	ec 89       	ldd	r30, Y+20	; 0x14
    382a:	fd 89       	ldd	r31, Y+21	; 0x15
    382c:	10 83       	st	Z, r17
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    382e:	ea 89       	ldd	r30, Y+18	; 0x12
    3830:	fb 89       	ldd	r31, Y+19	; 0x13
    3832:	80 81       	ld	r24, Z
    3834:	88 69       	ori	r24, 0x98	; 152
    3836:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    3838:	ea 89       	ldd	r30, Y+18	; 0x12
    383a:	fb 89       	ldd	r31, Y+19	; 0x13
    383c:	80 81       	ld	r24, Z
    383e:	8f 7d       	andi	r24, 0xDF	; 223
    3840:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	1f 91       	pop	r17
    3848:	ff 90       	pop	r15
    384a:	ef 90       	pop	r14
    384c:	df 90       	pop	r13
    384e:	cf 90       	pop	r12
    3850:	08 95       	ret

00003852 <__vector_20>:
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3852:	1f 92       	push	r1
    3854:	0f 92       	push	r0
    3856:	0f b6       	in	r0, 0x3f	; 63
    3858:	0f 92       	push	r0
    385a:	11 24       	eor	r1, r1
    385c:	0b b6       	in	r0, 0x3b	; 59
    385e:	0f 92       	push	r0
    3860:	2f 93       	push	r18
    3862:	8f 93       	push	r24
    3864:	9f 93       	push	r25
    3866:	ef 93       	push	r30
    3868:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    386a:	e0 91 c1 04 	lds	r30, 0x04C1	; 0x8004c1 <Serial+0x10>
    386e:	f0 91 c2 04 	lds	r31, 0x04C2	; 0x8004c2 <Serial+0x11>
    3872:	80 81       	ld	r24, Z
    3874:	e0 91 c7 04 	lds	r30, 0x04C7	; 0x8004c7 <Serial+0x16>
    3878:	f0 91 c8 04 	lds	r31, 0x04C8	; 0x8004c8 <Serial+0x17>
    387c:	82 fd       	sbrc	r24, 2
    387e:	1d c0       	rjmp	.+58     	; 0x38ba <__vector_20+0x68>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3880:	90 81       	ld	r25, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3882:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <Serial+0x19>
    3886:	8f 5f       	subi	r24, 0xFF	; 255
    3888:	8f 73       	andi	r24, 0x3F	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    388a:	20 91 cb 04 	lds	r18, 0x04CB	; 0x8004cb <Serial+0x1a>
    388e:	82 17       	cp	r24, r18
    3890:	41 f0       	breq	.+16     	; 0x38a2 <__vector_20+0x50>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    3892:	e0 91 ca 04 	lds	r30, 0x04CA	; 0x8004ca <Serial+0x19>
    3896:	f0 e0       	ldi	r31, 0x00	; 0
    3898:	ef 54       	subi	r30, 0x4F	; 79
    389a:	fb 4f       	sbci	r31, 0xFB	; 251
    389c:	95 8f       	std	Z+29, r25	; 0x1d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    389e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <Serial+0x19>
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    38a2:	ff 91       	pop	r31
    38a4:	ef 91       	pop	r30
    38a6:	9f 91       	pop	r25
    38a8:	8f 91       	pop	r24
    38aa:	2f 91       	pop	r18
    38ac:	0f 90       	pop	r0
    38ae:	0b be       	out	0x3b, r0	; 59
    38b0:	0f 90       	pop	r0
    38b2:	0f be       	out	0x3f, r0	; 63
    38b4:	0f 90       	pop	r0
    38b6:	1f 90       	pop	r1
    38b8:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    38ba:	80 81       	ld	r24, Z
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    38bc:	f2 cf       	rjmp	.-28     	; 0x38a2 <__vector_20+0x50>

000038be <__vector_21>:
__vector_21():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    38be:	1f 92       	push	r1
    38c0:	0f 92       	push	r0
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	0f 92       	push	r0
    38c6:	11 24       	eor	r1, r1
    38c8:	0b b6       	in	r0, 0x3b	; 59
    38ca:	0f 92       	push	r0
    38cc:	2f 93       	push	r18
    38ce:	3f 93       	push	r19
    38d0:	4f 93       	push	r20
    38d2:	5f 93       	push	r21
    38d4:	6f 93       	push	r22
    38d6:	7f 93       	push	r23
    38d8:	8f 93       	push	r24
    38da:	9f 93       	push	r25
    38dc:	af 93       	push	r26
    38de:	bf 93       	push	r27
    38e0:	ef 93       	push	r30
    38e2:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    38e4:	81 eb       	ldi	r24, 0xB1	; 177
    38e6:	94 e0       	ldi	r25, 0x04	; 4
    38e8:	0e 94 48 1b 	call	0x3690	; 0x3690 <HardwareSerial::_tx_udr_empty_irq()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    38ec:	ff 91       	pop	r31
    38ee:	ef 91       	pop	r30
    38f0:	bf 91       	pop	r27
    38f2:	af 91       	pop	r26
    38f4:	9f 91       	pop	r25
    38f6:	8f 91       	pop	r24
    38f8:	7f 91       	pop	r23
    38fa:	6f 91       	pop	r22
    38fc:	5f 91       	pop	r21
    38fe:	4f 91       	pop	r20
    3900:	3f 91       	pop	r19
    3902:	2f 91       	pop	r18
    3904:	0f 90       	pop	r0
    3906:	0b be       	out	0x3b, r0	; 59
    3908:	0f 90       	pop	r0
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	0f 90       	pop	r0
    390e:	1f 90       	pop	r1
    3910:	18 95       	reti

00003912 <Serial0_available()>:
_Z17Serial0_availablev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3912:	81 eb       	ldi	r24, 0xB1	; 177
    3914:	94 e0       	ldi	r25, 0x04	; 4
    3916:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <HardwareSerial::available()>
    391a:	21 e0       	ldi	r18, 0x01	; 1
    391c:	89 2b       	or	r24, r25
    391e:	09 f4       	brne	.+2      	; 0x3922 <Serial0_available()+0x10>
    3920:	20 e0       	ldi	r18, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    3922:	82 2f       	mov	r24, r18
    3924:	08 95       	ret

00003926 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
  public:
    Print() : write_error(0) {}
    3926:	e1 eb       	ldi	r30, 0xB1	; 177
    3928:	f4 e0       	ldi	r31, 0x04	; 4
    392a:	13 82       	std	Z+3, r1	; 0x03
    392c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
    392e:	88 ee       	ldi	r24, 0xE8	; 232
    3930:	93 e0       	ldi	r25, 0x03	; 3
    3932:	a0 e0       	ldi	r26, 0x00	; 0
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	84 83       	std	Z+4, r24	; 0x04
    3938:	95 83       	std	Z+5, r25	; 0x05
    393a:	a6 83       	std	Z+6, r26	; 0x06
    393c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    393e:	8a e8       	ldi	r24, 0x8A	; 138
    3940:	91 e0       	ldi	r25, 0x01	; 1
    3942:	91 83       	std	Z+1, r25	; 0x01
    3944:	80 83       	st	Z, r24
    3946:	85 ec       	ldi	r24, 0xC5	; 197
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	95 87       	std	Z+13, r25	; 0x0d
    394c:	84 87       	std	Z+12, r24	; 0x0c
    394e:	84 ec       	ldi	r24, 0xC4	; 196
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	97 87       	std	Z+15, r25	; 0x0f
    3954:	86 87       	std	Z+14, r24	; 0x0e
    3956:	80 ec       	ldi	r24, 0xC0	; 192
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	91 8b       	std	Z+17, r25	; 0x11
    395c:	80 8b       	std	Z+16, r24	; 0x10
    395e:	81 ec       	ldi	r24, 0xC1	; 193
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	93 8b       	std	Z+19, r25	; 0x13
    3964:	82 8b       	std	Z+18, r24	; 0x12
    3966:	82 ec       	ldi	r24, 0xC2	; 194
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	95 8b       	std	Z+21, r25	; 0x15
    396c:	84 8b       	std	Z+20, r24	; 0x14
    396e:	86 ec       	ldi	r24, 0xC6	; 198
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	97 8b       	std	Z+23, r25	; 0x17
    3974:	86 8b       	std	Z+22, r24	; 0x16
    3976:	11 8e       	std	Z+25, r1	; 0x19
    3978:	12 8e       	std	Z+26, r1	; 0x1a
    397a:	13 8e       	std	Z+27, r1	; 0x1b
    397c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    397e:	08 95       	ret

00003980 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:119
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    3980:	af 92       	push	r10
    3982:	bf 92       	push	r11
    3984:	cf 92       	push	r12
    3986:	df 92       	push	r13
    3988:	ef 92       	push	r14
    398a:	ff 92       	push	r15
    398c:	0f 93       	push	r16
    398e:	1f 93       	push	r17
    3990:	cf 93       	push	r28
    3992:	df 93       	push	r29
    3994:	6c 01       	movw	r12, r24
    3996:	7b 01       	movw	r14, r22
    3998:	8b 01       	movw	r16, r22
    399a:	04 0f       	add	r16, r20
    399c:	15 1f       	adc	r17, r21
    399e:	eb 01       	movw	r28, r22
    39a0:	5e 01       	movw	r10, r28
    39a2:	ae 18       	sub	r10, r14
    39a4:	bf 08       	sbc	r11, r15
    39a6:	c0 17       	cp	r28, r16
    39a8:	d1 07       	cpc	r29, r17
    39aa:	59 f0       	breq	.+22     	; 0x39c2 <Print::write(unsigned char const*, unsigned int)+0x42>
    39ac:	69 91       	ld	r22, Y+
    39ae:	d6 01       	movw	r26, r12
    39b0:	ed 91       	ld	r30, X+
    39b2:	fc 91       	ld	r31, X
    39b4:	01 90       	ld	r0, Z+
    39b6:	f0 81       	ld	r31, Z
    39b8:	e0 2d       	mov	r30, r0
    39ba:	c6 01       	movw	r24, r12
    39bc:	09 95       	icall
    39be:	89 2b       	or	r24, r25
    39c0:	79 f7       	brne	.-34     	; 0x39a0 <Print::write(unsigned char const*, unsigned int)+0x20>
    39c2:	c5 01       	movw	r24, r10
    39c4:	df 91       	pop	r29
    39c6:	cf 91       	pop	r28
    39c8:	1f 91       	pop	r17
    39ca:	0f 91       	pop	r16
    39cc:	ff 90       	pop	r15
    39ce:	ef 90       	pop	r14
    39d0:	df 90       	pop	r13
    39d2:	cf 90       	pop	r12
    39d4:	bf 90       	pop	r11
    39d6:	af 90       	pop	r10
    39d8:	08 95       	ret

000039da <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    39da:	fb 01       	movw	r30, r22
    39dc:	01 90       	ld	r0, Z+
    39de:	00 20       	and	r0, r0
    39e0:	e9 f7       	brne	.-6      	; 0x39dc <Print::write(char const*) [clone .part.2]+0x2>
    39e2:	31 97       	sbiw	r30, 0x01	; 1
    39e4:	af 01       	movw	r20, r30
    39e6:	46 1b       	sub	r20, r22
    39e8:	57 0b       	sbc	r21, r23
    39ea:	dc 01       	movw	r26, r24
    39ec:	ed 91       	ld	r30, X+
    39ee:	fc 91       	ld	r31, X
    39f0:	02 80       	ldd	r0, Z+2	; 0x02
    39f2:	f3 81       	ldd	r31, Z+3	; 0x03
    39f4:	e0 2d       	mov	r30, r0
    39f6:	09 94       	ijmp

000039f8 <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    39f8:	db 01       	movw	r26, r22
    39fa:	14 96       	adiw	r26, 0x04	; 4
    39fc:	4d 91       	ld	r20, X+
    39fe:	5c 91       	ld	r21, X
    3a00:	15 97       	sbiw	r26, 0x05	; 5
    3a02:	6d 91       	ld	r22, X+
    3a04:	7c 91       	ld	r23, X
    3a06:	dc 01       	movw	r26, r24
    3a08:	ed 91       	ld	r30, X+
    3a0a:	fc 91       	ld	r31, X
    3a0c:	02 80       	ldd	r0, Z+2	; 0x02
    3a0e:	f3 81       	ldd	r31, Z+3	; 0x03
    3a10:	e0 2d       	mov	r30, r0
    3a12:	09 94       	ijmp

00003a14 <Print::println()>:
_ZN5Print5writeEPKc():
    3a14:	68 e9       	ldi	r22, 0x98	; 152
    3a16:	71 e0       	ldi	r23, 0x01	; 1
    3a18:	0c 94 ed 1c 	jmp	0x39da	; 0x39da <Print::write(char const*) [clone .part.2]>

00003a1c <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:132
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
    3a24:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:133
  size_t n = print(s);
    3a26:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <Print::print(String const&)>
    3a2a:	8c 01       	movw	r16, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:134
  n += println();
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:136
  return n;
}
    3a32:	80 0f       	add	r24, r16
    3a34:	91 1f       	adc	r25, r17
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	1f 91       	pop	r17
    3a3c:	0f 91       	pop	r16
    3a3e:	08 95       	ret

00003a40 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    3a40:	0f 93       	push	r16
    3a42:	1f 93       	push	r17
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    3a4a:	d0 e0       	ldi	r29, 0x00	; 0
    3a4c:	c0 e0       	ldi	r28, 0x00	; 0
    3a4e:	61 15       	cp	r22, r1
    3a50:	71 05       	cpc	r23, r1
    3a52:	19 f0       	breq	.+6      	; 0x3a5a <Print::println(char const*)+0x1a>
    3a54:	0e 94 ed 1c 	call	0x39da	; 0x39da <Print::write(char const*) [clone .part.2]>
    3a58:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    3a5a:	c8 01       	movw	r24, r16
    3a5c:	0e 94 0a 1d 	call	0x3a14	; 0x3a14 <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:143
  return n;
}
    3a60:	8c 0f       	add	r24, r28
    3a62:	9d 1f       	adc	r25, r29
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	1f 91       	pop	r17
    3a6a:	0f 91       	pop	r16
    3a6c:	08 95       	ret

00003a6e <String::~String()>:
_ZN6StringD2Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:342

unsigned char String::concat(const __FlashStringHelper * str)
{
  if (!str) return 0;
  int length = strlen_P((const char *) str);
  if (length == 0) return 1;
    3a6e:	fc 01       	movw	r30, r24
    3a70:	80 81       	ld	r24, Z
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	00 97       	sbiw	r24, 0x00	; 0
    3a76:	11 f0       	breq	.+4      	; 0x3a7c <String::~String()+0xe>
    3a78:	0c 94 62 21 	jmp	0x42c4	; 0x42c4 <free>
    3a7c:	08 95       	ret

00003a7e <String::invalidate()>:
_ZN6String10invalidateEv():
    3a7e:	cf 93       	push	r28
    3a80:	df 93       	push	r29
    3a82:	ec 01       	movw	r28, r24
    3a84:	88 81       	ld	r24, Y
    3a86:	99 81       	ldd	r25, Y+1	; 0x01
    3a88:	00 97       	sbiw	r24, 0x00	; 0
    3a8a:	11 f0       	breq	.+4      	; 0x3a90 <String::invalidate()+0x12>
    3a8c:	0e 94 62 21 	call	0x42c4	; 0x42c4 <free>
    3a90:	19 82       	std	Y+1, r1	; 0x01
    3a92:	18 82       	st	Y, r1
    3a94:	1d 82       	std	Y+5, r1	; 0x05
    3a96:	1c 82       	std	Y+4, r1	; 0x04
    3a98:	1b 82       	std	Y+3, r1	; 0x03
    3a9a:	1a 82       	std	Y+2, r1	; 0x02
    3a9c:	df 91       	pop	r29
    3a9e:	cf 91       	pop	r28
    3aa0:	08 95       	ret

00003aa2 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    3aa2:	0f 93       	push	r16
    3aa4:	1f 93       	push	r17
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	ec 01       	movw	r28, r24
    3aac:	8b 01       	movw	r16, r22
    3aae:	6f 5f       	subi	r22, 0xFF	; 255
    3ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab2:	88 81       	ld	r24, Y
    3ab4:	99 81       	ldd	r25, Y+1	; 0x01
    3ab6:	0e 94 eb 21 	call	0x43d6	; 0x43d6 <realloc>
    3aba:	00 97       	sbiw	r24, 0x00	; 0
    3abc:	51 f0       	breq	.+20     	; 0x3ad2 <String::changeBuffer(unsigned int)+0x30>
    3abe:	99 83       	std	Y+1, r25	; 0x01
    3ac0:	88 83       	st	Y, r24
    3ac2:	1b 83       	std	Y+3, r17	; 0x03
    3ac4:	0a 83       	std	Y+2, r16	; 0x02
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	df 91       	pop	r29
    3aca:	cf 91       	pop	r28
    3acc:	1f 91       	pop	r17
    3ace:	0f 91       	pop	r16
    3ad0:	08 95       	ret
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	f9 cf       	rjmp	.-14     	; 0x3ac8 <String::changeBuffer(unsigned int)+0x26>

00003ad6 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    3ad6:	cf 93       	push	r28
    3ad8:	df 93       	push	r29
    3ada:	ec 01       	movw	r28, r24
    3adc:	88 81       	ld	r24, Y
    3ade:	99 81       	ldd	r25, Y+1	; 0x01
    3ae0:	89 2b       	or	r24, r25
    3ae2:	49 f0       	breq	.+18     	; 0x3af6 <String::reserve(unsigned int)+0x20>
    3ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae8:	86 17       	cp	r24, r22
    3aea:	97 07       	cpc	r25, r23
    3aec:	20 f0       	brcs	.+8      	; 0x3af6 <String::reserve(unsigned int)+0x20>
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	df 91       	pop	r29
    3af2:	cf 91       	pop	r28
    3af4:	08 95       	ret
    3af6:	ce 01       	movw	r24, r28
    3af8:	0e 94 51 1d 	call	0x3aa2	; 0x3aa2 <String::changeBuffer(unsigned int)>
    3afc:	88 23       	and	r24, r24
    3afe:	c1 f3       	breq	.-16     	; 0x3af0 <String::reserve(unsigned int)+0x1a>
    3b00:	8c 81       	ldd	r24, Y+4	; 0x04
    3b02:	9d 81       	ldd	r25, Y+5	; 0x05
    3b04:	89 2b       	or	r24, r25
    3b06:	99 f7       	brne	.-26     	; 0x3aee <String::reserve(unsigned int)+0x18>
    3b08:	e8 81       	ld	r30, Y
    3b0a:	f9 81       	ldd	r31, Y+1	; 0x01
    3b0c:	10 82       	st	Z, r1
    3b0e:	ef cf       	rjmp	.-34     	; 0x3aee <String::reserve(unsigned int)+0x18>

00003b10 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    3b10:	ef 92       	push	r14
    3b12:	ff 92       	push	r15
    3b14:	0f 93       	push	r16
    3b16:	1f 93       	push	r17
    3b18:	cf 93       	push	r28
    3b1a:	df 93       	push	r29
    3b1c:	ec 01       	movw	r28, r24
    3b1e:	7b 01       	movw	r14, r22
    3b20:	8a 01       	movw	r16, r20
    3b22:	ba 01       	movw	r22, r20
    3b24:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <String::reserve(unsigned int)>
    3b28:	81 11       	cpse	r24, r1
    3b2a:	0b c0       	rjmp	.+22     	; 0x3b42 <String::copy(char const*, unsigned int)+0x32>
    3b2c:	ce 01       	movw	r24, r28
    3b2e:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <String::invalidate()>
    3b32:	ce 01       	movw	r24, r28
    3b34:	df 91       	pop	r29
    3b36:	cf 91       	pop	r28
    3b38:	1f 91       	pop	r17
    3b3a:	0f 91       	pop	r16
    3b3c:	ff 90       	pop	r15
    3b3e:	ef 90       	pop	r14
    3b40:	08 95       	ret
    3b42:	1d 83       	std	Y+5, r17	; 0x05
    3b44:	0c 83       	std	Y+4, r16	; 0x04
    3b46:	b7 01       	movw	r22, r14
    3b48:	88 81       	ld	r24, Y
    3b4a:	99 81       	ldd	r25, Y+1	; 0x01
    3b4c:	0e 94 ed 22 	call	0x45da	; 0x45da <strcpy>
    3b50:	f0 cf       	rjmp	.-32     	; 0x3b32 <String::copy(char const*, unsigned int)+0x22>

00003b52 <String::String(char const*)>:
_ZN6String4initEv():
    3b52:	fc 01       	movw	r30, r24
    3b54:	11 82       	std	Z+1, r1	; 0x01
    3b56:	10 82       	st	Z, r1
    3b58:	13 82       	std	Z+3, r1	; 0x03
    3b5a:	12 82       	std	Z+2, r1	; 0x02
    3b5c:	15 82       	std	Z+5, r1	; 0x05
    3b5e:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    3b60:	61 15       	cp	r22, r1
    3b62:	71 05       	cpc	r23, r1
    3b64:	51 f0       	breq	.+20     	; 0x3b7a <String::String(char const*)+0x28>
    3b66:	fb 01       	movw	r30, r22
    3b68:	01 90       	ld	r0, Z+
    3b6a:	00 20       	and	r0, r0
    3b6c:	e9 f7       	brne	.-6      	; 0x3b68 <String::String(char const*)+0x16>
    3b6e:	31 97       	sbiw	r30, 0x01	; 1
    3b70:	af 01       	movw	r20, r30
    3b72:	46 1b       	sub	r20, r22
    3b74:	57 0b       	sbc	r21, r23
    3b76:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <String::copy(char const*, unsigned int)>
    3b7a:	08 95       	ret

00003b7c <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    3b7c:	fb 01       	movw	r30, r22
    3b7e:	01 90       	ld	r0, Z+
    3b80:	00 20       	and	r0, r0
    3b82:	e9 f7       	brne	.-6      	; 0x3b7e <String::operator=(char const*) [clone .part.3]+0x2>
    3b84:	31 97       	sbiw	r30, 0x01	; 1
    3b86:	af 01       	movw	r20, r30
    3b88:	46 1b       	sub	r20, r22
    3b8a:	57 0b       	sbc	r21, r23
    3b8c:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <String::copy(char const*, unsigned int)>

00003b90 <String::String(unsigned char, unsigned char)>:
_ZN6StringC2Ehh():
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	29 97       	sbiw	r28, 0x09	; 9
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	8c 01       	movw	r16, r24
    3baa:	86 2f       	mov	r24, r22
_ZN6String4initEv():
    3bac:	f8 01       	movw	r30, r16
    3bae:	11 82       	std	Z+1, r1	; 0x01
    3bb0:	10 82       	st	Z, r1
    3bb2:	13 82       	std	Z+3, r1	; 0x03
    3bb4:	12 82       	std	Z+2, r1	; 0x02
    3bb6:	15 82       	std	Z+5, r1	; 0x05
    3bb8:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ehh():
    3bba:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    3bbc:	be 01       	movw	r22, r28
    3bbe:	6f 5f       	subi	r22, 0xFF	; 255
    3bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 30 23 	call	0x4660	; 0x4660 <utoa>
_ZN6StringaSEPKc():
    3bc8:	be 01       	movw	r22, r28
    3bca:	6f 5f       	subi	r22, 0xFF	; 255
    3bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    3bce:	c8 01       	movw	r24, r16
    3bd0:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ehh():
    3bd4:	29 96       	adiw	r28, 0x09	; 9
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	1f 91       	pop	r17
    3be6:	0f 91       	pop	r16
    3be8:	08 95       	ret

00003bea <String::String(unsigned int, unsigned char)>:
_ZN6StringC2Ejh():
    3bea:	0f 93       	push	r16
    3bec:	1f 93       	push	r17
    3bee:	cf 93       	push	r28
    3bf0:	df 93       	push	r29
    3bf2:	cd b7       	in	r28, 0x3d	; 61
    3bf4:	de b7       	in	r29, 0x3e	; 62
    3bf6:	61 97       	sbiw	r28, 0x11	; 17
    3bf8:	0f b6       	in	r0, 0x3f	; 63
    3bfa:	f8 94       	cli
    3bfc:	de bf       	out	0x3e, r29	; 62
    3bfe:	0f be       	out	0x3f, r0	; 63
    3c00:	cd bf       	out	0x3d, r28	; 61
    3c02:	8c 01       	movw	r16, r24
    3c04:	cb 01       	movw	r24, r22
_ZN6String4initEv():
    3c06:	f8 01       	movw	r30, r16
    3c08:	11 82       	std	Z+1, r1	; 0x01
    3c0a:	10 82       	st	Z, r1
    3c0c:	13 82       	std	Z+3, r1	; 0x03
    3c0e:	12 82       	std	Z+2, r1	; 0x02
    3c10:	15 82       	std	Z+5, r1	; 0x05
    3c12:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ejh():
    3c14:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    3c16:	be 01       	movw	r22, r28
    3c18:	6f 5f       	subi	r22, 0xFF	; 255
    3c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1c:	0e 94 30 23 	call	0x4660	; 0x4660 <utoa>
_ZN6StringaSEPKc():
    3c20:	be 01       	movw	r22, r28
    3c22:	6f 5f       	subi	r22, 0xFF	; 255
    3c24:	7f 4f       	sbci	r23, 0xFF	; 255
    3c26:	c8 01       	movw	r24, r16
    3c28:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ejh():
    3c2c:	61 96       	adiw	r28, 0x11	; 17
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	08 95       	ret

00003c42 <String::String(unsigned long, unsigned char)>:
_ZN6StringC2Emh():
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	a1 97       	sbiw	r28, 0x21	; 33
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	8c 01       	movw	r16, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	ba 01       	movw	r22, r20
_ZN6String4initEv():
    3c60:	f8 01       	movw	r30, r16
    3c62:	11 82       	std	Z+1, r1	; 0x01
    3c64:	10 82       	st	Z, r1
    3c66:	13 82       	std	Z+3, r1	; 0x03
    3c68:	12 82       	std	Z+2, r1	; 0x02
    3c6a:	15 82       	std	Z+5, r1	; 0x05
    3c6c:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Emh():
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
ultoa():
    3c70:	ae 01       	movw	r20, r28
    3c72:	4f 5f       	subi	r20, 0xFF	; 255
    3c74:	5f 4f       	sbci	r21, 0xFF	; 255
    3c76:	0e 94 03 23 	call	0x4606	; 0x4606 <ultoa>
_ZN6StringaSEPKc():
    3c7a:	be 01       	movw	r22, r28
    3c7c:	6f 5f       	subi	r22, 0xFF	; 255
    3c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3c80:	c8 01       	movw	r24, r16
    3c82:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Emh():
    3c86:	a1 96       	adiw	r28, 0x21	; 33
    3c88:	0f b6       	in	r0, 0x3f	; 63
    3c8a:	f8 94       	cli
    3c8c:	de bf       	out	0x3e, r29	; 62
    3c8e:	0f be       	out	0x3f, r0	; 63
    3c90:	cd bf       	out	0x3d, r28	; 61
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	08 95       	ret

00003c9c <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	ec 01       	movw	r28, r24
    3ca2:	fb 01       	movw	r30, r22
    3ca4:	86 17       	cp	r24, r22
    3ca6:	97 07       	cpc	r25, r23
    3ca8:	49 f0       	breq	.+18     	; 0x3cbc <String::operator=(String const&)+0x20>
    3caa:	60 81       	ld	r22, Z
    3cac:	71 81       	ldd	r23, Z+1	; 0x01
    3cae:	61 15       	cp	r22, r1
    3cb0:	71 05       	cpc	r23, r1
    3cb2:	41 f0       	breq	.+16     	; 0x3cc4 <String::operator=(String const&)+0x28>
    3cb4:	44 81       	ldd	r20, Z+4	; 0x04
    3cb6:	55 81       	ldd	r21, Z+5	; 0x05
    3cb8:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <String::copy(char const*, unsigned int)>
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	08 95       	ret
    3cc4:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <String::invalidate()>
    3cc8:	f9 cf       	rjmp	.-14     	; 0x3cbc <String::operator=(String const&)+0x20>

00003cca <String::String(String const&)>:
_ZN6String4initEv():
    3cca:	fc 01       	movw	r30, r24
    3ccc:	11 82       	std	Z+1, r1	; 0x01
    3cce:	10 82       	st	Z, r1
    3cd0:	13 82       	std	Z+3, r1	; 0x03
    3cd2:	12 82       	std	Z+2, r1	; 0x02
    3cd4:	15 82       	std	Z+5, r1	; 0x05
    3cd6:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
    3cd8:	0c 94 4e 1e 	jmp	0x3c9c	; 0x3c9c <String::operator=(String const&)>

00003cdc <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    3cdc:	ef 92       	push	r14
    3cde:	ff 92       	push	r15
    3ce0:	0f 93       	push	r16
    3ce2:	1f 93       	push	r17
    3ce4:	cf 93       	push	r28
    3ce6:	df 93       	push	r29
    3ce8:	61 15       	cp	r22, r1
    3cea:	71 05       	cpc	r23, r1
    3cec:	41 f4       	brne	.+16     	; 0x3cfe <String::concat(char const*, unsigned int)+0x22>
    3cee:	80 e0       	ldi	r24, 0x00	; 0
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	1f 91       	pop	r17
    3cf6:	0f 91       	pop	r16
    3cf8:	ff 90       	pop	r15
    3cfa:	ef 90       	pop	r14
    3cfc:	08 95       	ret
    3cfe:	41 15       	cp	r20, r1
    3d00:	51 05       	cpc	r21, r1
    3d02:	b1 f0       	breq	.+44     	; 0x3d30 <String::concat(char const*, unsigned int)+0x54>
    3d04:	7b 01       	movw	r14, r22
    3d06:	ec 01       	movw	r28, r24
    3d08:	0c 81       	ldd	r16, Y+4	; 0x04
    3d0a:	1d 81       	ldd	r17, Y+5	; 0x05
    3d0c:	04 0f       	add	r16, r20
    3d0e:	15 1f       	adc	r17, r21
    3d10:	b8 01       	movw	r22, r16
    3d12:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <String::reserve(unsigned int)>
    3d16:	88 23       	and	r24, r24
    3d18:	51 f3       	breq	.-44     	; 0x3cee <String::concat(char const*, unsigned int)+0x12>
    3d1a:	28 81       	ld	r18, Y
    3d1c:	39 81       	ldd	r19, Y+1	; 0x01
    3d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d20:	9d 81       	ldd	r25, Y+5	; 0x05
    3d22:	b7 01       	movw	r22, r14
    3d24:	82 0f       	add	r24, r18
    3d26:	93 1f       	adc	r25, r19
    3d28:	0e 94 ed 22 	call	0x45da	; 0x45da <strcpy>
    3d2c:	1d 83       	std	Y+5, r17	; 0x05
    3d2e:	0c 83       	std	Y+4, r16	; 0x04
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	de cf       	rjmp	.-68     	; 0x3cf0 <String::concat(char const*, unsigned int)+0x14>

00003d34 <String::concat(String const&)>:
_ZN6String6concatERKS_():
    3d34:	fb 01       	movw	r30, r22
    3d36:	44 81       	ldd	r20, Z+4	; 0x04
    3d38:	55 81       	ldd	r21, Z+5	; 0x05
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <String::concat(char const*, unsigned int)>

00003d42 <String::concat(char const*)>:
_ZN6String6concatEPKc():
    3d42:	61 15       	cp	r22, r1
    3d44:	71 05       	cpc	r23, r1
    3d46:	51 f0       	breq	.+20     	; 0x3d5c <String::concat(char const*)+0x1a>
    3d48:	fb 01       	movw	r30, r22
    3d4a:	01 90       	ld	r0, Z+
    3d4c:	00 20       	and	r0, r0
    3d4e:	e9 f7       	brne	.-6      	; 0x3d4a <String::concat(char const*)+0x8>
    3d50:	31 97       	sbiw	r30, 0x01	; 1
    3d52:	af 01       	movw	r20, r30
    3d54:	46 1b       	sub	r20, r22
    3d56:	57 0b       	sbc	r21, r23
    3d58:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <String::concat(char const*, unsigned int)>
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	08 95       	ret

00003d60 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:355
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    3d66:	fb 01       	movw	r30, r22
    3d68:	44 81       	ldd	r20, Z+4	; 0x04
    3d6a:	55 81       	ldd	r21, Z+5	; 0x05
    3d6c:	60 81       	ld	r22, Z
    3d6e:	71 81       	ldd	r23, Z+1	; 0x01
    3d70:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <String::concat(char const*, unsigned int)>
    3d74:	81 11       	cpse	r24, r1
    3d76:	03 c0       	rjmp	.+6      	; 0x3d7e <operator+(StringSumHelper const&, String const&)+0x1e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357 (discriminator 1)
    3d78:	ce 01       	movw	r24, r28
    3d7a:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:359
  return a;
}
    3d7e:	ce 01       	movw	r24, r28
    3d80:	df 91       	pop	r29
    3d82:	cf 91       	pop	r28
    3d84:	08 95       	ret

00003d86 <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:362

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    3d86:	cf 93       	push	r28
    3d88:	df 93       	push	r29
    3d8a:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    3d8c:	61 15       	cp	r22, r1
    3d8e:	71 05       	cpc	r23, r1
    3d90:	39 f4       	brne	.+14     	; 0x3da0 <operator+(StringSumHelper const&, char const*)+0x1a>
    3d92:	ce 01       	movw	r24, r28
    3d94:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:366
  return a;
}
    3d98:	ce 01       	movw	r24, r28
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364 (discriminator 2)
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    3da0:	fb 01       	movw	r30, r22
    3da2:	01 90       	ld	r0, Z+
    3da4:	00 20       	and	r0, r0
    3da6:	e9 f7       	brne	.-6      	; 0x3da2 <operator+(StringSumHelper const&, char const*)+0x1c>
    3da8:	31 97       	sbiw	r30, 0x01	; 1
    3daa:	af 01       	movw	r20, r30
    3dac:	46 1b       	sub	r20, r22
    3dae:	57 0b       	sbc	r21, r23
    3db0:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <String::concat(char const*, unsigned int)>
    3db4:	88 23       	and	r24, r24
    3db6:	69 f3       	breq	.-38     	; 0x3d92 <operator+(StringSumHelper const&, char const*)+0xc>
    3db8:	ef cf       	rjmp	.-34     	; 0x3d98 <operator+(StringSumHelper const&, char const*)+0x12>

00003dba <initVariant>:
initVariant():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    3dba:	08 95       	ret

00003dbc <main>:
main():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    3dbc:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <init>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    3dc0:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <initVariant>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    3dc4:	0e 94 36 03 	call	0x66c	; 0x66c <setup>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3dc8:	cd e2       	ldi	r28, 0x2D	; 45
    3dca:	db e1       	ldi	r29, 0x1B	; 27
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    3dcc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <loop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    3dd0:	20 97       	sbiw	r28, 0x00	; 0
    3dd2:	e1 f3       	breq	.-8      	; 0x3dcc <main+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    3dd4:	0e 94 2d 1b 	call	0x365a	; 0x365a <serialEventRun()>
    3dd8:	f9 cf       	rjmp	.-14     	; 0x3dcc <main+0x10>

00003dda <__vector_18>:
__vector_18():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3dda:	1f 92       	push	r1
    3ddc:	0f 92       	push	r0
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	0f 92       	push	r0
    3de2:	11 24       	eor	r1, r1
    3de4:	2f 93       	push	r18
    3de6:	3f 93       	push	r19
    3de8:	8f 93       	push	r24
    3dea:	9f 93       	push	r25
    3dec:	af 93       	push	r26
    3dee:	bf 93       	push	r27
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    3df0:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <timer0_millis>
    3df4:	90 91 54 05 	lds	r25, 0x0554	; 0x800554 <timer0_millis+0x1>
    3df8:	a0 91 55 05 	lds	r26, 0x0555	; 0x800555 <timer0_millis+0x2>
    3dfc:	b0 91 56 05 	lds	r27, 0x0556	; 0x800556 <timer0_millis+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    3e00:	30 91 52 05 	lds	r19, 0x0552	; 0x800552 <timer0_fract>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    3e04:	26 e0       	ldi	r18, 0x06	; 6
    3e06:	23 0f       	add	r18, r19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    3e08:	2d 37       	cpi	r18, 0x7D	; 125
    3e0a:	68 f1       	brcs	.+90     	; 0x3e66 <__vector_18+0x8c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    3e0c:	29 e8       	ldi	r18, 0x89	; 137
    3e0e:	23 0f       	add	r18, r19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    3e10:	03 96       	adiw	r24, 0x03	; 3
    3e12:	a1 1d       	adc	r26, r1
    3e14:	b1 1d       	adc	r27, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    3e16:	20 93 52 05 	sts	0x0552, r18	; 0x800552 <timer0_fract>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    3e1a:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <timer0_millis>
    3e1e:	90 93 54 05 	sts	0x0554, r25	; 0x800554 <timer0_millis+0x1>
    3e22:	a0 93 55 05 	sts	0x0555, r26	; 0x800555 <timer0_millis+0x2>
    3e26:	b0 93 56 05 	sts	0x0556, r27	; 0x800556 <timer0_millis+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    3e2a:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <timer0_overflow_count>
    3e2e:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <timer0_overflow_count+0x1>
    3e32:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <timer0_overflow_count+0x2>
    3e36:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <timer0_overflow_count+0x3>
    3e3a:	01 96       	adiw	r24, 0x01	; 1
    3e3c:	a1 1d       	adc	r26, r1
    3e3e:	b1 1d       	adc	r27, r1
    3e40:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <timer0_overflow_count>
    3e44:	90 93 4f 05 	sts	0x054F, r25	; 0x80054f <timer0_overflow_count+0x1>
    3e48:	a0 93 50 05 	sts	0x0550, r26	; 0x800550 <timer0_overflow_count+0x2>
    3e4c:	b0 93 51 05 	sts	0x0551, r27	; 0x800551 <timer0_overflow_count+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    3e50:	bf 91       	pop	r27
    3e52:	af 91       	pop	r26
    3e54:	9f 91       	pop	r25
    3e56:	8f 91       	pop	r24
    3e58:	3f 91       	pop	r19
    3e5a:	2f 91       	pop	r18
    3e5c:	0f 90       	pop	r0
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	0f 90       	pop	r0
    3e62:	1f 90       	pop	r1
    3e64:	18 95       	reti
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    3e66:	02 96       	adiw	r24, 0x02	; 2
    3e68:	a1 1d       	adc	r26, r1
    3e6a:	b1 1d       	adc	r27, r1
    3e6c:	d4 cf       	rjmp	.-88     	; 0x3e16 <__vector_18+0x3c>

00003e6e <millis>:
millis():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    3e6e:	2f b7       	in	r18, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    3e70:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    3e72:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <timer0_millis>
    3e76:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <timer0_millis+0x1>
    3e7a:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <timer0_millis+0x2>
    3e7e:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <timer0_millis+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    3e82:	2f bf       	out	0x3f, r18	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    3e84:	08 95       	ret

00003e86 <micros>:
micros():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    3e86:	3f b7       	in	r19, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    3e88:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    3e8a:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <timer0_overflow_count>
    3e8e:	90 91 4f 05 	lds	r25, 0x054F	; 0x80054f <timer0_overflow_count+0x1>
    3e92:	a0 91 50 05 	lds	r26, 0x0550	; 0x800550 <timer0_overflow_count+0x2>
    3e96:	b0 91 51 05 	lds	r27, 0x0551	; 0x800551 <timer0_overflow_count+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    3e9a:	26 b5       	in	r18, 0x26	; 38
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3e9c:	a8 9b       	sbis	0x15, 0	; 21
    3e9e:	05 c0       	rjmp	.+10     	; 0x3eaa <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    3ea0:	2f 3f       	cpi	r18, 0xFF	; 255
    3ea2:	19 f0       	breq	.+6      	; 0x3eaa <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    3ea4:	01 96       	adiw	r24, 0x01	; 1
    3ea6:	a1 1d       	adc	r26, r1
    3ea8:	b1 1d       	adc	r27, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    3eaa:	3f bf       	out	0x3f, r19	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    3eac:	ba 2f       	mov	r27, r26
    3eae:	a9 2f       	mov	r26, r25
    3eb0:	98 2f       	mov	r25, r24
    3eb2:	88 27       	eor	r24, r24
    3eb4:	bc 01       	movw	r22, r24
    3eb6:	cd 01       	movw	r24, r26
    3eb8:	62 0f       	add	r22, r18
    3eba:	71 1d       	adc	r23, r1
    3ebc:	81 1d       	adc	r24, r1
    3ebe:	91 1d       	adc	r25, r1
    3ec0:	43 e0       	ldi	r20, 0x03	; 3
    3ec2:	66 0f       	add	r22, r22
    3ec4:	77 1f       	adc	r23, r23
    3ec6:	88 1f       	adc	r24, r24
    3ec8:	99 1f       	adc	r25, r25
    3eca:	4a 95       	dec	r20
    3ecc:	d1 f7       	brne	.-12     	; 0x3ec2 <micros+0x3c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    3ece:	08 95       	ret

00003ed0 <delay>:
delay():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    3ed0:	8f 92       	push	r8
    3ed2:	9f 92       	push	r9
    3ed4:	af 92       	push	r10
    3ed6:	bf 92       	push	r11
    3ed8:	cf 92       	push	r12
    3eda:	df 92       	push	r13
    3edc:	ef 92       	push	r14
    3ede:	ff 92       	push	r15
    3ee0:	6b 01       	movw	r12, r22
    3ee2:	7c 01       	movw	r14, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    3ee4:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <micros>
    3ee8:	4b 01       	movw	r8, r22
    3eea:	5c 01       	movw	r10, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    3eec:	c1 14       	cp	r12, r1
    3eee:	d1 04       	cpc	r13, r1
    3ef0:	e1 04       	cpc	r14, r1
    3ef2:	f1 04       	cpc	r15, r1
    3ef4:	e9 f0       	breq	.+58     	; 0x3f30 <delay+0x60>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:400
    yield();
    3ef6:	0e 94 80 20 	call	0x4100	; 0x4100 <yield>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    3efa:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <micros>
    3efe:	68 19       	sub	r22, r8
    3f00:	79 09       	sbc	r23, r9
    3f02:	8a 09       	sbc	r24, r10
    3f04:	9b 09       	sbc	r25, r11
    3f06:	68 3e       	cpi	r22, 0xE8	; 232
    3f08:	73 40       	sbci	r23, 0x03	; 3
    3f0a:	81 05       	cpc	r24, r1
    3f0c:	91 05       	cpc	r25, r1
    3f0e:	70 f3       	brcs	.-36     	; 0x3eec <delay+0x1c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    3f10:	21 e0       	ldi	r18, 0x01	; 1
    3f12:	c2 1a       	sub	r12, r18
    3f14:	d1 08       	sbc	r13, r1
    3f16:	e1 08       	sbc	r14, r1
    3f18:	f1 08       	sbc	r15, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    3f1a:	88 ee       	ldi	r24, 0xE8	; 232
    3f1c:	88 0e       	add	r8, r24
    3f1e:	83 e0       	ldi	r24, 0x03	; 3
    3f20:	98 1e       	adc	r9, r24
    3f22:	a1 1c       	adc	r10, r1
    3f24:	b1 1c       	adc	r11, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    3f26:	c1 14       	cp	r12, r1
    3f28:	d1 04       	cpc	r13, r1
    3f2a:	e1 04       	cpc	r14, r1
    3f2c:	f1 04       	cpc	r15, r1
    3f2e:	29 f7       	brne	.-54     	; 0x3efa <delay+0x2a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    3f30:	ff 90       	pop	r15
    3f32:	ef 90       	pop	r14
    3f34:	df 90       	pop	r13
    3f36:	cf 90       	pop	r12
    3f38:	bf 90       	pop	r11
    3f3a:	af 90       	pop	r10
    3f3c:	9f 90       	pop	r9
    3f3e:	8f 90       	pop	r8
    3f40:	08 95       	ret

00003f42 <delayMicroseconds>:
delayMicroseconds():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    3f42:	00 00       	nop
    3f44:	00 00       	nop
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    3f46:	83 30       	cpi	r24, 0x03	; 3
    3f48:	91 05       	cpc	r25, r1
    3f4a:	28 f0       	brcs	.+10     	; 0x3f56 <delayMicroseconds+0x14>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    3f4c:	88 0f       	add	r24, r24
    3f4e:	99 1f       	adc	r25, r25
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    3f50:	05 97       	sbiw	r24, 0x05	; 5
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    3f52:	01 97       	sbiw	r24, 0x01	; 1
    3f54:	f1 f7       	brne	.-4      	; 0x3f52 <delayMicroseconds+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    3f56:	08 95       	ret

00003f58 <init>:
init():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3f58:	78 94       	sei
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    3f5a:	84 b5       	in	r24, 0x24	; 36
    3f5c:	83 60       	ori	r24, 0x03	; 3
    3f5e:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3f60:	85 b5       	in	r24, 0x25	; 37
    3f62:	83 60       	ori	r24, 0x03	; 3
    3f64:	85 bd       	out	0x25, r24	; 37
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    3f66:	ee e6       	ldi	r30, 0x6E	; 110
    3f68:	f0 e0       	ldi	r31, 0x00	; 0
    3f6a:	80 81       	ld	r24, Z
    3f6c:	81 60       	ori	r24, 0x01	; 1
    3f6e:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3f70:	e1 e8       	ldi	r30, 0x81	; 129
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	82 e0       	ldi	r24, 0x02	; 2
    3f76:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3f78:	80 81       	ld	r24, Z
    3f7a:	81 60       	ori	r24, 0x01	; 1
    3f7c:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    3f7e:	e0 e8       	ldi	r30, 0x80	; 128
    3f80:	f0 e0       	ldi	r31, 0x00	; 0
    3f82:	80 81       	ld	r24, Z
    3f84:	81 60       	ori	r24, 0x01	; 1
    3f86:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    3f88:	e1 eb       	ldi	r30, 0xB1	; 177
    3f8a:	f0 e0       	ldi	r31, 0x00	; 0
    3f8c:	80 81       	ld	r24, Z
    3f8e:	84 60       	ori	r24, 0x04	; 4
    3f90:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    3f92:	e0 eb       	ldi	r30, 0xB0	; 176
    3f94:	f0 e0       	ldi	r31, 0x00	; 0
    3f96:	80 81       	ld	r24, Z
    3f98:	81 60       	ori	r24, 0x01	; 1
    3f9a:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    3f9c:	e1 e9       	ldi	r30, 0x91	; 145
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 81       	ld	r24, Z
    3fa2:	83 60       	ori	r24, 0x03	; 3
    3fa4:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    3fa6:	e0 e9       	ldi	r30, 0x90	; 144
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	80 81       	ld	r24, Z
    3fac:	81 60       	ori	r24, 0x01	; 1
    3fae:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    3fb0:	86 e8       	ldi	r24, 0x86	; 134
    3fb2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    3fb6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    3fba:	08 95       	ret

00003fbc <turnOffPWM>:
turnOffPWM():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    3fbc:	82 50       	subi	r24, 0x02	; 2
    3fbe:	8a 30       	cpi	r24, 0x0A	; 10
    3fc0:	88 f5       	brcc	.+98     	; 0x4024 <turnOffPWM+0x68>
    3fc2:	e8 2f       	mov	r30, r24
    3fc4:	f0 e0       	ldi	r31, 0x00	; 0
    3fc6:	e9 51       	subi	r30, 0x19	; 25
    3fc8:	f0 4e       	sbci	r31, 0xE0	; 224
    3fca:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__tablejump2__>
    3fce:	0f 20       	and	r0, r15
    3fd0:	13 20       	and	r1, r3
    3fd2:	f1 1f       	adc	r31, r17
    3fd4:	f7 1f       	adc	r31, r23
    3fd6:	12 20       	and	r1, r2
    3fd8:	12 20       	and	r1, r2
    3fda:	fb 1f       	adc	r31, r27
    3fdc:	01 20       	and	r0, r1
    3fde:	05 20       	and	r0, r5
    3fe0:	0b 20       	and	r0, r11
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    3fe2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3fe6:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    3fe8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    3fec:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    3fee:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3ff2:	8f 7d       	andi	r24, 0xDF	; 223
    3ff4:	f9 cf       	rjmp	.-14     	; 0x3fe8 <turnOffPWM+0x2c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    3ff6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3ffa:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    3ffc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    4000:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    4002:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    4006:	8f 7d       	andi	r24, 0xDF	; 223
    4008:	f9 cf       	rjmp	.-14     	; 0x3ffc <turnOffPWM+0x40>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    400a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    400e:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    4010:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:122
        break;
    4014:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    4016:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    401a:	8f 7d       	andi	r24, 0xDF	; 223
    401c:	f9 cf       	rjmp	.-14     	; 0x4010 <turnOffPWM+0x54>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    401e:	84 b5       	in	r24, 0x24	; 36
    4020:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    4022:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    4024:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    4026:	84 b5       	in	r24, 0x24	; 36
    4028:	8f 7d       	andi	r24, 0xDF	; 223
    402a:	fb cf       	rjmp	.-10     	; 0x4022 <turnOffPWM+0x66>

0000402c <pinMode>:
pinMode():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    402c:	cf 93       	push	r28
    402e:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	fc 01       	movw	r30, r24
    4034:	e4 54       	subi	r30, 0x44	; 68
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	24 91       	lpm	r18, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    403a:	84 52       	subi	r24, 0x24	; 36
    403c:	9f 4f       	sbci	r25, 0xFF	; 255
    403e:	fc 01       	movw	r30, r24
    4040:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    4042:	88 23       	and	r24, r24
    4044:	c9 f0       	breq	.+50     	; 0x4078 <pinMode+0x4c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	88 0f       	add	r24, r24
    404a:	99 1f       	adc	r25, r25
    404c:	fc 01       	movw	r30, r24
    404e:	ea 5f       	subi	r30, 0xFA	; 250
    4050:	fe 4f       	sbci	r31, 0xFE	; 254
    4052:	a5 91       	lpm	r26, Z+
    4054:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    4056:	fc 01       	movw	r30, r24
    4058:	e4 50       	subi	r30, 0x04	; 4
    405a:	ff 4f       	sbci	r31, 0xFF	; 255
    405c:	c5 91       	lpm	r28, Z+
    405e:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    4060:	61 11       	cpse	r22, r1
    4062:	0d c0       	rjmp	.+26     	; 0x407e <pinMode+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    4064:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    4066:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    4068:	8c 91       	ld	r24, X
    406a:	20 95       	com	r18
    406c:	82 23       	and	r24, r18
    406e:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    4070:	88 81       	ld	r24, Y
    4072:	28 23       	and	r18, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    4074:	28 83       	st	Y, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    4076:	9f bf       	out	0x3f, r25	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    4078:	df 91       	pop	r29
    407a:	cf 91       	pop	r28
    407c:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    407e:	62 30       	cpi	r22, 0x02	; 2
    4080:	51 f4       	brne	.+20     	; 0x4096 <pinMode+0x6a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    4082:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    4084:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    4086:	3c 91       	ld	r19, X
    4088:	82 2f       	mov	r24, r18
    408a:	80 95       	com	r24
    408c:	83 23       	and	r24, r19
    408e:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    4090:	e8 81       	ld	r30, Y
    4092:	2e 2b       	or	r18, r30
    4094:	ef cf       	rjmp	.-34     	; 0x4074 <pinMode+0x48>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    4096:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    4098:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    409a:	ec 91       	ld	r30, X
    409c:	2e 2b       	or	r18, r30
    409e:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    40a0:	8f bf       	out	0x3f, r24	; 63
    40a2:	ea cf       	rjmp	.-44     	; 0x4078 <pinMode+0x4c>

000040a4 <digitalWrite>:
digitalWrite():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    40a4:	1f 93       	push	r17
    40a6:	cf 93       	push	r28
    40a8:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    40aa:	28 2f       	mov	r18, r24
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	f9 01       	movw	r30, r18
    40b0:	e4 56       	subi	r30, 0x64	; 100
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    40b6:	f9 01       	movw	r30, r18
    40b8:	e4 54       	subi	r30, 0x44	; 68
    40ba:	ff 4f       	sbci	r31, 0xFF	; 255
    40bc:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    40be:	f9 01       	movw	r30, r18
    40c0:	e4 52       	subi	r30, 0x24	; 36
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	c4 91       	lpm	r28, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    40c6:	cc 23       	and	r28, r28
    40c8:	a9 f0       	breq	.+42     	; 0x40f4 <digitalWrite+0x50>
    40ca:	16 2f       	mov	r17, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    40cc:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    40ce:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <turnOffPWM>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    40d2:	ec 2f       	mov	r30, r28
    40d4:	f0 e0       	ldi	r31, 0x00	; 0
    40d6:	ee 0f       	add	r30, r30
    40d8:	ff 1f       	adc	r31, r31
    40da:	e4 50       	subi	r30, 0x04	; 4
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	a5 91       	lpm	r26, Z+
    40e0:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    40e2:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    40e4:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    40e6:	ec 91       	ld	r30, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    40e8:	11 11       	cpse	r17, r1
    40ea:	08 c0       	rjmp	.+16     	; 0x40fc <digitalWrite+0x58>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    40ec:	d0 95       	com	r29
    40ee:	de 23       	and	r29, r30
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    40f0:	dc 93       	st	X, r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    40f2:	8f bf       	out	0x3f, r24	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    40f4:	df 91       	pop	r29
    40f6:	cf 91       	pop	r28
    40f8:	1f 91       	pop	r17
    40fa:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    40fc:	de 2b       	or	r29, r30
    40fe:	f8 cf       	rjmp	.-16     	; 0x40f0 <digitalWrite+0x4c>

00004100 <yield>:
__empty():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    4100:	08 95       	ret

00004102 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4102:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4104:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4106:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4108:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    410a:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    410c:	0d c0       	rjmp	.+26     	; 0x4128 <__udivmodsi4_ep>

0000410e <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    410e:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4110:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4112:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4114:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4116:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4118:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    411a:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    411c:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    411e:	20 f0       	brcs	.+8      	; 0x4128 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4120:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4122:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4124:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    4126:	f5 0b       	sbc	r31, r21

00004128 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    4128:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    412a:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    412c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    412e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4130:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4132:	69 f7       	brne	.-38     	; 0x410e <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4134:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    4136:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    4138:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    413a:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    413c:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    413e:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4140:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4142:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4144:	08 95       	ret

00004146 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4146:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4148:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    414a:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    414c:	00 1c       	adc	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    414e:	0b be       	out	0x3b, r0	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    4150:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    4152:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    4154:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    4156:	09 94       	ijmp

00004158 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    4158:	0e 94 b7 20 	call	0x416e	; 0x416e <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    415c:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    415e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    4160:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    4162:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    4164:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    4166:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    4168:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    416a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    416c:	08 95       	ret

0000416e <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    416e:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    4170:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    4172:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    4174:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    4176:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    4178:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    417a:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    417c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    417e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    4180:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    4182:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    4184:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    4186:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    4188:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    418a:	08 95       	ret

0000418c <malloc>:
malloc():
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	82 30       	cpi	r24, 0x02	; 2
    4196:	91 05       	cpc	r25, r1
    4198:	10 f4       	brcc	.+4      	; 0x419e <malloc+0x12>
    419a:	82 e0       	ldi	r24, 0x02	; 2
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	e0 91 59 05 	lds	r30, 0x0559	; 0x800559 <__flp>
    41a2:	f0 91 5a 05 	lds	r31, 0x055A	; 0x80055a <__flp+0x1>
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	b0 e0       	ldi	r27, 0x00	; 0
    41ac:	a0 e0       	ldi	r26, 0x00	; 0
    41ae:	30 97       	sbiw	r30, 0x00	; 0
    41b0:	99 f4       	brne	.+38     	; 0x41d8 <malloc+0x4c>
    41b2:	21 15       	cp	r18, r1
    41b4:	31 05       	cpc	r19, r1
    41b6:	09 f4       	brne	.+2      	; 0x41ba <malloc+0x2e>
    41b8:	4a c0       	rjmp	.+148    	; 0x424e <malloc+0xc2>
    41ba:	28 1b       	sub	r18, r24
    41bc:	39 0b       	sbc	r19, r25
    41be:	24 30       	cpi	r18, 0x04	; 4
    41c0:	31 05       	cpc	r19, r1
    41c2:	d8 f5       	brcc	.+118    	; 0x423a <malloc+0xae>
    41c4:	8a 81       	ldd	r24, Y+2	; 0x02
    41c6:	9b 81       	ldd	r25, Y+3	; 0x03
    41c8:	61 15       	cp	r22, r1
    41ca:	71 05       	cpc	r23, r1
    41cc:	89 f1       	breq	.+98     	; 0x4230 <malloc+0xa4>
    41ce:	fb 01       	movw	r30, r22
    41d0:	93 83       	std	Z+3, r25	; 0x03
    41d2:	82 83       	std	Z+2, r24	; 0x02
    41d4:	fe 01       	movw	r30, r28
    41d6:	11 c0       	rjmp	.+34     	; 0x41fa <malloc+0x6e>
    41d8:	40 81       	ld	r20, Z
    41da:	51 81       	ldd	r21, Z+1	; 0x01
    41dc:	02 81       	ldd	r16, Z+2	; 0x02
    41de:	13 81       	ldd	r17, Z+3	; 0x03
    41e0:	48 17       	cp	r20, r24
    41e2:	59 07       	cpc	r21, r25
    41e4:	e0 f0       	brcs	.+56     	; 0x421e <malloc+0x92>
    41e6:	48 17       	cp	r20, r24
    41e8:	59 07       	cpc	r21, r25
    41ea:	99 f4       	brne	.+38     	; 0x4212 <malloc+0x86>
    41ec:	10 97       	sbiw	r26, 0x00	; 0
    41ee:	61 f0       	breq	.+24     	; 0x4208 <malloc+0x7c>
    41f0:	12 96       	adiw	r26, 0x02	; 2
    41f2:	0c 93       	st	X, r16
    41f4:	12 97       	sbiw	r26, 0x02	; 2
    41f6:	13 96       	adiw	r26, 0x03	; 3
    41f8:	1c 93       	st	X, r17
    41fa:	32 96       	adiw	r30, 0x02	; 2
    41fc:	cf 01       	movw	r24, r30
    41fe:	df 91       	pop	r29
    4200:	cf 91       	pop	r28
    4202:	1f 91       	pop	r17
    4204:	0f 91       	pop	r16
    4206:	08 95       	ret
    4208:	00 93 59 05 	sts	0x0559, r16	; 0x800559 <__flp>
    420c:	10 93 5a 05 	sts	0x055A, r17	; 0x80055a <__flp+0x1>
    4210:	f4 cf       	rjmp	.-24     	; 0x41fa <malloc+0x6e>
    4212:	21 15       	cp	r18, r1
    4214:	31 05       	cpc	r19, r1
    4216:	51 f0       	breq	.+20     	; 0x422c <malloc+0xa0>
    4218:	42 17       	cp	r20, r18
    421a:	53 07       	cpc	r21, r19
    421c:	38 f0       	brcs	.+14     	; 0x422c <malloc+0xa0>
    421e:	a9 01       	movw	r20, r18
    4220:	db 01       	movw	r26, r22
    4222:	9a 01       	movw	r18, r20
    4224:	bd 01       	movw	r22, r26
    4226:	df 01       	movw	r26, r30
    4228:	f8 01       	movw	r30, r16
    422a:	c1 cf       	rjmp	.-126    	; 0x41ae <malloc+0x22>
    422c:	ef 01       	movw	r28, r30
    422e:	f9 cf       	rjmp	.-14     	; 0x4222 <malloc+0x96>
    4230:	90 93 5a 05 	sts	0x055A, r25	; 0x80055a <__flp+0x1>
    4234:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <__flp>
    4238:	cd cf       	rjmp	.-102    	; 0x41d4 <malloc+0x48>
    423a:	fe 01       	movw	r30, r28
    423c:	e2 0f       	add	r30, r18
    423e:	f3 1f       	adc	r31, r19
    4240:	81 93       	st	Z+, r24
    4242:	91 93       	st	Z+, r25
    4244:	22 50       	subi	r18, 0x02	; 2
    4246:	31 09       	sbc	r19, r1
    4248:	39 83       	std	Y+1, r19	; 0x01
    424a:	28 83       	st	Y, r18
    424c:	d7 cf       	rjmp	.-82     	; 0x41fc <malloc+0x70>
    424e:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <__brkval>
    4252:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <__brkval+0x1>
    4256:	23 2b       	or	r18, r19
    4258:	41 f4       	brne	.+16     	; 0x426a <malloc+0xde>
    425a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    425e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4262:	30 93 58 05 	sts	0x0558, r19	; 0x800558 <__brkval+0x1>
    4266:	20 93 57 05 	sts	0x0557, r18	; 0x800557 <__brkval>
    426a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    426e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4272:	21 15       	cp	r18, r1
    4274:	31 05       	cpc	r19, r1
    4276:	41 f4       	brne	.+16     	; 0x4288 <malloc+0xfc>
    4278:	2d b7       	in	r18, 0x3d	; 61
    427a:	3e b7       	in	r19, 0x3e	; 62
    427c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4280:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4284:	24 1b       	sub	r18, r20
    4286:	35 0b       	sbc	r19, r21
    4288:	e0 91 57 05 	lds	r30, 0x0557	; 0x800557 <__brkval>
    428c:	f0 91 58 05 	lds	r31, 0x0558	; 0x800558 <__brkval+0x1>
    4290:	e2 17       	cp	r30, r18
    4292:	f3 07       	cpc	r31, r19
    4294:	a0 f4       	brcc	.+40     	; 0x42be <malloc+0x132>
    4296:	2e 1b       	sub	r18, r30
    4298:	3f 0b       	sbc	r19, r31
    429a:	28 17       	cp	r18, r24
    429c:	39 07       	cpc	r19, r25
    429e:	78 f0       	brcs	.+30     	; 0x42be <malloc+0x132>
    42a0:	ac 01       	movw	r20, r24
    42a2:	4e 5f       	subi	r20, 0xFE	; 254
    42a4:	5f 4f       	sbci	r21, 0xFF	; 255
    42a6:	24 17       	cp	r18, r20
    42a8:	35 07       	cpc	r19, r21
    42aa:	48 f0       	brcs	.+18     	; 0x42be <malloc+0x132>
    42ac:	4e 0f       	add	r20, r30
    42ae:	5f 1f       	adc	r21, r31
    42b0:	50 93 58 05 	sts	0x0558, r21	; 0x800558 <__brkval+0x1>
    42b4:	40 93 57 05 	sts	0x0557, r20	; 0x800557 <__brkval>
    42b8:	81 93       	st	Z+, r24
    42ba:	91 93       	st	Z+, r25
    42bc:	9f cf       	rjmp	.-194    	; 0x41fc <malloc+0x70>
    42be:	f0 e0       	ldi	r31, 0x00	; 0
    42c0:	e0 e0       	ldi	r30, 0x00	; 0
    42c2:	9c cf       	rjmp	.-200    	; 0x41fc <malloc+0x70>

000042c4 <free>:
free():
    42c4:	cf 93       	push	r28
    42c6:	df 93       	push	r29
    42c8:	00 97       	sbiw	r24, 0x00	; 0
    42ca:	e9 f0       	breq	.+58     	; 0x4306 <free+0x42>
    42cc:	fc 01       	movw	r30, r24
    42ce:	32 97       	sbiw	r30, 0x02	; 2
    42d0:	13 82       	std	Z+3, r1	; 0x03
    42d2:	12 82       	std	Z+2, r1	; 0x02
    42d4:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <__flp>
    42d8:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <__flp+0x1>
    42dc:	ed 01       	movw	r28, r26
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	20 e0       	ldi	r18, 0x00	; 0
    42e2:	10 97       	sbiw	r26, 0x00	; 0
    42e4:	a1 f4       	brne	.+40     	; 0x430e <free+0x4a>
    42e6:	20 81       	ld	r18, Z
    42e8:	31 81       	ldd	r19, Z+1	; 0x01
    42ea:	82 0f       	add	r24, r18
    42ec:	93 1f       	adc	r25, r19
    42ee:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <__brkval>
    42f2:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <__brkval+0x1>
    42f6:	28 17       	cp	r18, r24
    42f8:	39 07       	cpc	r19, r25
    42fa:	09 f0       	breq	.+2      	; 0x42fe <free+0x3a>
    42fc:	61 c0       	rjmp	.+194    	; 0x43c0 <free+0xfc>
    42fe:	f0 93 58 05 	sts	0x0558, r31	; 0x800558 <__brkval+0x1>
    4302:	e0 93 57 05 	sts	0x0557, r30	; 0x800557 <__brkval>
    4306:	df 91       	pop	r29
    4308:	cf 91       	pop	r28
    430a:	08 95       	ret
    430c:	ea 01       	movw	r28, r20
    430e:	ce 17       	cp	r28, r30
    4310:	df 07       	cpc	r29, r31
    4312:	e8 f5       	brcc	.+122    	; 0x438e <free+0xca>
    4314:	4a 81       	ldd	r20, Y+2	; 0x02
    4316:	5b 81       	ldd	r21, Y+3	; 0x03
    4318:	9e 01       	movw	r18, r28
    431a:	41 15       	cp	r20, r1
    431c:	51 05       	cpc	r21, r1
    431e:	b1 f7       	brne	.-20     	; 0x430c <free+0x48>
    4320:	e9 01       	movw	r28, r18
    4322:	fb 83       	std	Y+3, r31	; 0x03
    4324:	ea 83       	std	Y+2, r30	; 0x02
    4326:	49 91       	ld	r20, Y+
    4328:	59 91       	ld	r21, Y+
    432a:	c4 0f       	add	r28, r20
    432c:	d5 1f       	adc	r29, r21
    432e:	ec 17       	cp	r30, r28
    4330:	fd 07       	cpc	r31, r29
    4332:	61 f4       	brne	.+24     	; 0x434c <free+0x88>
    4334:	80 81       	ld	r24, Z
    4336:	91 81       	ldd	r25, Z+1	; 0x01
    4338:	02 96       	adiw	r24, 0x02	; 2
    433a:	84 0f       	add	r24, r20
    433c:	95 1f       	adc	r25, r21
    433e:	e9 01       	movw	r28, r18
    4340:	99 83       	std	Y+1, r25	; 0x01
    4342:	88 83       	st	Y, r24
    4344:	82 81       	ldd	r24, Z+2	; 0x02
    4346:	93 81       	ldd	r25, Z+3	; 0x03
    4348:	9b 83       	std	Y+3, r25	; 0x03
    434a:	8a 83       	std	Y+2, r24	; 0x02
    434c:	f0 e0       	ldi	r31, 0x00	; 0
    434e:	e0 e0       	ldi	r30, 0x00	; 0
    4350:	12 96       	adiw	r26, 0x02	; 2
    4352:	8d 91       	ld	r24, X+
    4354:	9c 91       	ld	r25, X
    4356:	13 97       	sbiw	r26, 0x03	; 3
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	b9 f5       	brne	.+110    	; 0x43ca <free+0x106>
    435c:	2d 91       	ld	r18, X+
    435e:	3c 91       	ld	r19, X
    4360:	11 97       	sbiw	r26, 0x01	; 1
    4362:	cd 01       	movw	r24, r26
    4364:	02 96       	adiw	r24, 0x02	; 2
    4366:	82 0f       	add	r24, r18
    4368:	93 1f       	adc	r25, r19
    436a:	20 91 57 05 	lds	r18, 0x0557	; 0x800557 <__brkval>
    436e:	30 91 58 05 	lds	r19, 0x0558	; 0x800558 <__brkval+0x1>
    4372:	28 17       	cp	r18, r24
    4374:	39 07       	cpc	r19, r25
    4376:	39 f6       	brne	.-114    	; 0x4306 <free+0x42>
    4378:	30 97       	sbiw	r30, 0x00	; 0
    437a:	51 f5       	brne	.+84     	; 0x43d0 <free+0x10c>
    437c:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <__flp+0x1>
    4380:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <__flp>
    4384:	b0 93 58 05 	sts	0x0558, r27	; 0x800558 <__brkval+0x1>
    4388:	a0 93 57 05 	sts	0x0557, r26	; 0x800557 <__brkval>
    438c:	bc cf       	rjmp	.-136    	; 0x4306 <free+0x42>
    438e:	d3 83       	std	Z+3, r29	; 0x03
    4390:	c2 83       	std	Z+2, r28	; 0x02
    4392:	40 81       	ld	r20, Z
    4394:	51 81       	ldd	r21, Z+1	; 0x01
    4396:	84 0f       	add	r24, r20
    4398:	95 1f       	adc	r25, r21
    439a:	c8 17       	cp	r28, r24
    439c:	d9 07       	cpc	r29, r25
    439e:	61 f4       	brne	.+24     	; 0x43b8 <free+0xf4>
    43a0:	4e 5f       	subi	r20, 0xFE	; 254
    43a2:	5f 4f       	sbci	r21, 0xFF	; 255
    43a4:	88 81       	ld	r24, Y
    43a6:	99 81       	ldd	r25, Y+1	; 0x01
    43a8:	48 0f       	add	r20, r24
    43aa:	59 1f       	adc	r21, r25
    43ac:	51 83       	std	Z+1, r21	; 0x01
    43ae:	40 83       	st	Z, r20
    43b0:	8a 81       	ldd	r24, Y+2	; 0x02
    43b2:	9b 81       	ldd	r25, Y+3	; 0x03
    43b4:	93 83       	std	Z+3, r25	; 0x03
    43b6:	82 83       	std	Z+2, r24	; 0x02
    43b8:	21 15       	cp	r18, r1
    43ba:	31 05       	cpc	r19, r1
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <free+0xfc>
    43be:	b0 cf       	rjmp	.-160    	; 0x4320 <free+0x5c>
    43c0:	f0 93 5a 05 	sts	0x055A, r31	; 0x80055a <__flp+0x1>
    43c4:	e0 93 59 05 	sts	0x0559, r30	; 0x800559 <__flp>
    43c8:	9e cf       	rjmp	.-196    	; 0x4306 <free+0x42>
    43ca:	fd 01       	movw	r30, r26
    43cc:	dc 01       	movw	r26, r24
    43ce:	c0 cf       	rjmp	.-128    	; 0x4350 <free+0x8c>
    43d0:	13 82       	std	Z+3, r1	; 0x03
    43d2:	12 82       	std	Z+2, r1	; 0x02
    43d4:	d7 cf       	rjmp	.-82     	; 0x4384 <free+0xc0>

000043d6 <realloc>:
realloc():
    43d6:	4f 92       	push	r4
    43d8:	5f 92       	push	r5
    43da:	6f 92       	push	r6
    43dc:	7f 92       	push	r7
    43de:	8f 92       	push	r8
    43e0:	9f 92       	push	r9
    43e2:	af 92       	push	r10
    43e4:	bf 92       	push	r11
    43e6:	cf 92       	push	r12
    43e8:	df 92       	push	r13
    43ea:	ef 92       	push	r14
    43ec:	ff 92       	push	r15
    43ee:	0f 93       	push	r16
    43f0:	1f 93       	push	r17
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	8c 01       	movw	r16, r24
    43f8:	00 97       	sbiw	r24, 0x00	; 0
    43fa:	99 f4       	brne	.+38     	; 0x4422 <realloc+0x4c>
    43fc:	cb 01       	movw	r24, r22
    43fe:	df 91       	pop	r29
    4400:	cf 91       	pop	r28
    4402:	1f 91       	pop	r17
    4404:	0f 91       	pop	r16
    4406:	ff 90       	pop	r15
    4408:	ef 90       	pop	r14
    440a:	df 90       	pop	r13
    440c:	cf 90       	pop	r12
    440e:	bf 90       	pop	r11
    4410:	af 90       	pop	r10
    4412:	9f 90       	pop	r9
    4414:	8f 90       	pop	r8
    4416:	7f 90       	pop	r7
    4418:	6f 90       	pop	r6
    441a:	5f 90       	pop	r5
    441c:	4f 90       	pop	r4
    441e:	0c 94 c6 20 	jmp	0x418c	; 0x418c <malloc>
    4422:	fc 01       	movw	r30, r24
    4424:	e6 0f       	add	r30, r22
    4426:	f7 1f       	adc	r31, r23
    4428:	9c 01       	movw	r18, r24
    442a:	22 50       	subi	r18, 0x02	; 2
    442c:	31 09       	sbc	r19, r1
    442e:	e2 17       	cp	r30, r18
    4430:	f3 07       	cpc	r31, r19
    4432:	08 f4       	brcc	.+2      	; 0x4436 <realloc+0x60>
    4434:	ae c0       	rjmp	.+348    	; 0x4592 <realloc+0x1bc>
    4436:	d9 01       	movw	r26, r18
    4438:	cd 91       	ld	r28, X+
    443a:	dc 91       	ld	r29, X
    443c:	11 97       	sbiw	r26, 0x01	; 1
    443e:	c6 17       	cp	r28, r22
    4440:	d7 07       	cpc	r29, r23
    4442:	20 f1       	brcs	.+72     	; 0x448c <realloc+0xb6>
    4444:	c5 30       	cpi	r28, 0x05	; 5
    4446:	d1 05       	cpc	r29, r1
    4448:	78 f0       	brcs	.+30     	; 0x4468 <realloc+0x92>
    444a:	ce 01       	movw	r24, r28
    444c:	04 97       	sbiw	r24, 0x04	; 4
    444e:	86 17       	cp	r24, r22
    4450:	97 07       	cpc	r25, r23
    4452:	50 f0       	brcs	.+20     	; 0x4468 <realloc+0x92>
    4454:	c6 1b       	sub	r28, r22
    4456:	d7 0b       	sbc	r29, r23
    4458:	22 97       	sbiw	r28, 0x02	; 2
    445a:	c1 93       	st	Z+, r28
    445c:	d1 93       	st	Z+, r29
    445e:	6d 93       	st	X+, r22
    4460:	7c 93       	st	X, r23
    4462:	cf 01       	movw	r24, r30
    4464:	0e 94 62 21 	call	0x42c4	; 0x42c4 <free>
    4468:	c8 01       	movw	r24, r16
    446a:	df 91       	pop	r29
    446c:	cf 91       	pop	r28
    446e:	1f 91       	pop	r17
    4470:	0f 91       	pop	r16
    4472:	ff 90       	pop	r15
    4474:	ef 90       	pop	r14
    4476:	df 90       	pop	r13
    4478:	cf 90       	pop	r12
    447a:	bf 90       	pop	r11
    447c:	af 90       	pop	r10
    447e:	9f 90       	pop	r9
    4480:	8f 90       	pop	r8
    4482:	7f 90       	pop	r7
    4484:	6f 90       	pop	r6
    4486:	5f 90       	pop	r5
    4488:	4f 90       	pop	r4
    448a:	08 95       	ret
    448c:	5b 01       	movw	r10, r22
    448e:	ac 1a       	sub	r10, r28
    4490:	bd 0a       	sbc	r11, r29
    4492:	4c 01       	movw	r8, r24
    4494:	8c 0e       	add	r8, r28
    4496:	9d 1e       	adc	r9, r29
    4498:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <__flp>
    449c:	b0 91 5a 05 	lds	r27, 0x055A	; 0x80055a <__flp+0x1>
    44a0:	51 2c       	mov	r5, r1
    44a2:	41 2c       	mov	r4, r1
    44a4:	f1 2c       	mov	r15, r1
    44a6:	e1 2c       	mov	r14, r1
    44a8:	10 97       	sbiw	r26, 0x00	; 0
    44aa:	31 f5       	brne	.+76     	; 0x44f8 <realloc+0x122>
    44ac:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <__brkval>
    44b0:	90 91 58 05 	lds	r25, 0x0558	; 0x800558 <__brkval+0x1>
    44b4:	88 15       	cp	r24, r8
    44b6:	99 05       	cpc	r25, r9
    44b8:	09 f0       	breq	.+2      	; 0x44bc <realloc+0xe6>
    44ba:	5c c0       	rjmp	.+184    	; 0x4574 <realloc+0x19e>
    44bc:	46 16       	cp	r4, r22
    44be:	57 06       	cpc	r5, r23
    44c0:	08 f0       	brcs	.+2      	; 0x44c4 <realloc+0xee>
    44c2:	58 c0       	rjmp	.+176    	; 0x4574 <realloc+0x19e>
    44c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    44c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    44cc:	00 97       	sbiw	r24, 0x00	; 0
    44ce:	41 f4       	brne	.+16     	; 0x44e0 <realloc+0x10a>
    44d0:	8d b7       	in	r24, 0x3d	; 61
    44d2:	9e b7       	in	r25, 0x3e	; 62
    44d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    44d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    44dc:	84 1b       	sub	r24, r20
    44de:	95 0b       	sbc	r25, r21
    44e0:	e8 17       	cp	r30, r24
    44e2:	f9 07       	cpc	r31, r25
    44e4:	08 f0       	brcs	.+2      	; 0x44e8 <realloc+0x112>
    44e6:	55 c0       	rjmp	.+170    	; 0x4592 <realloc+0x1bc>
    44e8:	f0 93 58 05 	sts	0x0558, r31	; 0x800558 <__brkval+0x1>
    44ec:	e0 93 57 05 	sts	0x0557, r30	; 0x800557 <__brkval>
    44f0:	f9 01       	movw	r30, r18
    44f2:	71 83       	std	Z+1, r23	; 0x01
    44f4:	60 83       	st	Z, r22
    44f6:	b8 cf       	rjmp	.-144    	; 0x4468 <realloc+0x92>
    44f8:	8d 91       	ld	r24, X+
    44fa:	9c 91       	ld	r25, X
    44fc:	11 97       	sbiw	r26, 0x01	; 1
    44fe:	12 96       	adiw	r26, 0x02	; 2
    4500:	6c 90       	ld	r6, X
    4502:	12 97       	sbiw	r26, 0x02	; 2
    4504:	13 96       	adiw	r26, 0x03	; 3
    4506:	7c 90       	ld	r7, X
    4508:	13 97       	sbiw	r26, 0x03	; 3
    450a:	a8 15       	cp	r26, r8
    450c:	b9 05       	cpc	r27, r9
    450e:	59 f5       	brne	.+86     	; 0x4566 <realloc+0x190>
    4510:	6c 01       	movw	r12, r24
    4512:	42 e0       	ldi	r20, 0x02	; 2
    4514:	c4 0e       	add	r12, r20
    4516:	d1 1c       	adc	r13, r1
    4518:	ca 14       	cp	r12, r10
    451a:	db 04       	cpc	r13, r11
    451c:	20 f1       	brcs	.+72     	; 0x4566 <realloc+0x190>
    451e:	ac 01       	movw	r20, r24
    4520:	4a 19       	sub	r20, r10
    4522:	5b 09       	sbc	r21, r11
    4524:	da 01       	movw	r26, r20
    4526:	12 96       	adiw	r26, 0x02	; 2
    4528:	15 97       	sbiw	r26, 0x05	; 5
    452a:	80 f0       	brcs	.+32     	; 0x454c <realloc+0x176>
    452c:	62 82       	std	Z+2, r6	; 0x02
    452e:	73 82       	std	Z+3, r7	; 0x03
    4530:	51 83       	std	Z+1, r21	; 0x01
    4532:	40 83       	st	Z, r20
    4534:	d9 01       	movw	r26, r18
    4536:	6d 93       	st	X+, r22
    4538:	7c 93       	st	X, r23
    453a:	e1 14       	cp	r14, r1
    453c:	f1 04       	cpc	r15, r1
    453e:	71 f0       	breq	.+28     	; 0x455c <realloc+0x186>
    4540:	d7 01       	movw	r26, r14
    4542:	13 96       	adiw	r26, 0x03	; 3
    4544:	fc 93       	st	X, r31
    4546:	ee 93       	st	-X, r30
    4548:	12 97       	sbiw	r26, 0x02	; 2
    454a:	8e cf       	rjmp	.-228    	; 0x4468 <realloc+0x92>
    454c:	22 96       	adiw	r28, 0x02	; 2
    454e:	8c 0f       	add	r24, r28
    4550:	9d 1f       	adc	r25, r29
    4552:	f9 01       	movw	r30, r18
    4554:	91 83       	std	Z+1, r25	; 0x01
    4556:	80 83       	st	Z, r24
    4558:	f3 01       	movw	r30, r6
    455a:	ef cf       	rjmp	.-34     	; 0x453a <realloc+0x164>
    455c:	f0 93 5a 05 	sts	0x055A, r31	; 0x80055a <__flp+0x1>
    4560:	e0 93 59 05 	sts	0x0559, r30	; 0x800559 <__flp>
    4564:	81 cf       	rjmp	.-254    	; 0x4468 <realloc+0x92>
    4566:	48 16       	cp	r4, r24
    4568:	59 06       	cpc	r5, r25
    456a:	08 f4       	brcc	.+2      	; 0x456e <realloc+0x198>
    456c:	2c 01       	movw	r4, r24
    456e:	7d 01       	movw	r14, r26
    4570:	d3 01       	movw	r26, r6
    4572:	9a cf       	rjmp	.-204    	; 0x44a8 <realloc+0xd2>
    4574:	cb 01       	movw	r24, r22
    4576:	0e 94 c6 20 	call	0x418c	; 0x418c <malloc>
    457a:	7c 01       	movw	r14, r24
    457c:	00 97       	sbiw	r24, 0x00	; 0
    457e:	49 f0       	breq	.+18     	; 0x4592 <realloc+0x1bc>
    4580:	ae 01       	movw	r20, r28
    4582:	b8 01       	movw	r22, r16
    4584:	0e 94 d9 22 	call	0x45b2	; 0x45b2 <memcpy>
    4588:	c8 01       	movw	r24, r16
    458a:	0e 94 62 21 	call	0x42c4	; 0x42c4 <free>
    458e:	87 01       	movw	r16, r14
    4590:	6b cf       	rjmp	.-298    	; 0x4468 <realloc+0x92>
    4592:	10 e0       	ldi	r17, 0x00	; 0
    4594:	00 e0       	ldi	r16, 0x00	; 0
    4596:	68 cf       	rjmp	.-304    	; 0x4468 <realloc+0x92>

00004598 <memcmp>:
memcmp():
    4598:	fb 01       	movw	r30, r22
    459a:	dc 01       	movw	r26, r24
    459c:	04 c0       	rjmp	.+8      	; 0x45a6 <memcmp+0xe>
    459e:	8d 91       	ld	r24, X+
    45a0:	01 90       	ld	r0, Z+
    45a2:	80 19       	sub	r24, r0
    45a4:	21 f4       	brne	.+8      	; 0x45ae <memcmp+0x16>
    45a6:	41 50       	subi	r20, 0x01	; 1
    45a8:	50 40       	sbci	r21, 0x00	; 0
    45aa:	c8 f7       	brcc	.-14     	; 0x459e <memcmp+0x6>
    45ac:	88 1b       	sub	r24, r24
    45ae:	99 0b       	sbc	r25, r25
    45b0:	08 95       	ret

000045b2 <memcpy>:
memcpy():
    45b2:	fb 01       	movw	r30, r22
    45b4:	dc 01       	movw	r26, r24
    45b6:	02 c0       	rjmp	.+4      	; 0x45bc <memcpy+0xa>
    45b8:	01 90       	ld	r0, Z+
    45ba:	0d 92       	st	X+, r0
    45bc:	41 50       	subi	r20, 0x01	; 1
    45be:	50 40       	sbci	r21, 0x00	; 0
    45c0:	d8 f7       	brcc	.-10     	; 0x45b8 <memcpy+0x6>
    45c2:	08 95       	ret

000045c4 <strchr>:
strchr():
    45c4:	fc 01       	movw	r30, r24
    45c6:	81 91       	ld	r24, Z+
    45c8:	86 17       	cp	r24, r22
    45ca:	21 f0       	breq	.+8      	; 0x45d4 <strchr+0x10>
    45cc:	88 23       	and	r24, r24
    45ce:	d9 f7       	brne	.-10     	; 0x45c6 <strchr+0x2>
    45d0:	99 27       	eor	r25, r25
    45d2:	08 95       	ret
    45d4:	31 97       	sbiw	r30, 0x01	; 1
    45d6:	cf 01       	movw	r24, r30
    45d8:	08 95       	ret

000045da <strcpy>:
strcpy():
    45da:	fb 01       	movw	r30, r22
    45dc:	dc 01       	movw	r26, r24
    45de:	01 90       	ld	r0, Z+
    45e0:	0d 92       	st	X+, r0
    45e2:	00 20       	and	r0, r0
    45e4:	e1 f7       	brne	.-8      	; 0x45de <strcpy+0x4>
    45e6:	08 95       	ret

000045e8 <strncpy>:
strncpy():
    45e8:	fb 01       	movw	r30, r22
    45ea:	dc 01       	movw	r26, r24
    45ec:	41 50       	subi	r20, 0x01	; 1
    45ee:	50 40       	sbci	r21, 0x00	; 0
    45f0:	48 f0       	brcs	.+18     	; 0x4604 <strncpy+0x1c>
    45f2:	01 90       	ld	r0, Z+
    45f4:	0d 92       	st	X+, r0
    45f6:	00 20       	and	r0, r0
    45f8:	c9 f7       	brne	.-14     	; 0x45ec <strncpy+0x4>
    45fa:	01 c0       	rjmp	.+2      	; 0x45fe <strncpy+0x16>
    45fc:	1d 92       	st	X+, r1
    45fe:	41 50       	subi	r20, 0x01	; 1
    4600:	50 40       	sbci	r21, 0x00	; 0
    4602:	e0 f7       	brcc	.-8      	; 0x45fc <strncpy+0x14>
    4604:	08 95       	ret

00004606 <ultoa>:
ultoa():
    4606:	25 32       	cpi	r18, 0x25	; 37
    4608:	31 05       	cpc	r19, r1
    460a:	20 f4       	brcc	.+8      	; 0x4614 <ultoa+0xe>
    460c:	22 30       	cpi	r18, 0x02	; 2
    460e:	10 f0       	brcs	.+4      	; 0x4614 <ultoa+0xe>
    4610:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__ultoa_ncheck>
    4614:	fa 01       	movw	r30, r20
    4616:	10 82       	st	Z, r1
    4618:	ca 01       	movw	r24, r20
    461a:	08 95       	ret

0000461c <__ultoa_ncheck>:
__ultoa_ncheck():
    461c:	bb 27       	eor	r27, r27

0000461e <__ultoa_common>:
    461e:	fa 01       	movw	r30, r20
    4620:	a6 2f       	mov	r26, r22
    4622:	62 17       	cp	r22, r18
    4624:	71 05       	cpc	r23, r1
    4626:	81 05       	cpc	r24, r1
    4628:	91 05       	cpc	r25, r1
    462a:	33 0b       	sbc	r19, r19
    462c:	30 fb       	bst	r19, 0
    462e:	66 f0       	brts	.+24     	; 0x4648 <__ultoa_common+0x2a>
    4630:	aa 27       	eor	r26, r26
    4632:	66 0f       	add	r22, r22
    4634:	77 1f       	adc	r23, r23
    4636:	88 1f       	adc	r24, r24
    4638:	99 1f       	adc	r25, r25
    463a:	aa 1f       	adc	r26, r26
    463c:	a2 17       	cp	r26, r18
    463e:	10 f0       	brcs	.+4      	; 0x4644 <__ultoa_common+0x26>
    4640:	a2 1b       	sub	r26, r18
    4642:	63 95       	inc	r22
    4644:	38 50       	subi	r19, 0x08	; 8
    4646:	a9 f7       	brne	.-22     	; 0x4632 <__ultoa_common+0x14>
    4648:	a0 5d       	subi	r26, 0xD0	; 208
    464a:	aa 33       	cpi	r26, 0x3A	; 58
    464c:	08 f0       	brcs	.+2      	; 0x4650 <__ultoa_common+0x32>
    464e:	a9 5d       	subi	r26, 0xD9	; 217
    4650:	a1 93       	st	Z+, r26
    4652:	36 f7       	brtc	.-52     	; 0x4620 <__ultoa_common+0x2>
    4654:	b1 11       	cpse	r27, r1
    4656:	b1 93       	st	Z+, r27
    4658:	10 82       	st	Z, r1
    465a:	ca 01       	movw	r24, r20
    465c:	0c 94 55 23 	jmp	0x46aa	; 0x46aa <strrev>

00004660 <utoa>:
utoa():
    4660:	45 32       	cpi	r20, 0x25	; 37
    4662:	51 05       	cpc	r21, r1
    4664:	20 f4       	brcc	.+8      	; 0x466e <utoa+0xe>
    4666:	42 30       	cpi	r20, 0x02	; 2
    4668:	10 f0       	brcs	.+4      	; 0x466e <utoa+0xe>
    466a:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__utoa_ncheck>
    466e:	fb 01       	movw	r30, r22
    4670:	10 82       	st	Z, r1
    4672:	cb 01       	movw	r24, r22
    4674:	08 95       	ret

00004676 <__utoa_ncheck>:
__utoa_ncheck():
    4676:	bb 27       	eor	r27, r27

00004678 <__utoa_common>:
    4678:	fb 01       	movw	r30, r22
    467a:	55 27       	eor	r21, r21
    467c:	aa 27       	eor	r26, r26
    467e:	88 0f       	add	r24, r24
    4680:	99 1f       	adc	r25, r25
    4682:	aa 1f       	adc	r26, r26
    4684:	a4 17       	cp	r26, r20
    4686:	10 f0       	brcs	.+4      	; 0x468c <__utoa_common+0x14>
    4688:	a4 1b       	sub	r26, r20
    468a:	83 95       	inc	r24
    468c:	50 51       	subi	r21, 0x10	; 16
    468e:	b9 f7       	brne	.-18     	; 0x467e <__utoa_common+0x6>
    4690:	a0 5d       	subi	r26, 0xD0	; 208
    4692:	aa 33       	cpi	r26, 0x3A	; 58
    4694:	08 f0       	brcs	.+2      	; 0x4698 <__utoa_common+0x20>
    4696:	a9 5d       	subi	r26, 0xD9	; 217
    4698:	a1 93       	st	Z+, r26
    469a:	00 97       	sbiw	r24, 0x00	; 0
    469c:	79 f7       	brne	.-34     	; 0x467c <__utoa_common+0x4>
    469e:	b1 11       	cpse	r27, r1
    46a0:	b1 93       	st	Z+, r27
    46a2:	11 92       	st	Z+, r1
    46a4:	cb 01       	movw	r24, r22
    46a6:	0c 94 55 23 	jmp	0x46aa	; 0x46aa <strrev>

000046aa <strrev>:
strrev():
    46aa:	dc 01       	movw	r26, r24
    46ac:	fc 01       	movw	r30, r24
    46ae:	67 2f       	mov	r22, r23
    46b0:	71 91       	ld	r23, Z+
    46b2:	77 23       	and	r23, r23
    46b4:	e1 f7       	brne	.-8      	; 0x46ae <strrev+0x4>
    46b6:	32 97       	sbiw	r30, 0x02	; 2
    46b8:	04 c0       	rjmp	.+8      	; 0x46c2 <strrev+0x18>
    46ba:	7c 91       	ld	r23, X
    46bc:	6d 93       	st	X+, r22
    46be:	70 83       	st	Z, r23
    46c0:	62 91       	ld	r22, -Z
    46c2:	ae 17       	cp	r26, r30
    46c4:	bf 07       	cpc	r27, r31
    46c6:	c8 f3       	brcs	.-14     	; 0x46ba <strrev+0x10>
    46c8:	08 95       	ret

000046ca <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    46ca:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    46cc:	cd e8       	ldi	r28, 0x8D	; 141
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    46ce:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    46d0:	04 c0       	rjmp	.+8      	; 0x46da <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    46d2:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    46d4:	0e 94 a3 20 	call	0x4146	; 0x4146 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    46d8:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    46da:	ce 38       	cpi	r28, 0x8E	; 142
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    46dc:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    46de:	c9 f7       	brne	.-14     	; 0x46d2 <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    46e0:	f8 94       	cli

000046e2 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    46e2:	ff cf       	rjmp	.-2      	; 0x46e2 <__stop_program>
