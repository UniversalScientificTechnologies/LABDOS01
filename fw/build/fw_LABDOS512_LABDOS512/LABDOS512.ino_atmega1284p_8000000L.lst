
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/build/LABDOS512.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__dtors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_18>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__vector_20>
      54:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_21>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_26>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	00 02       	muls	r16, r16
      90:	03 00       	.word	0x0003	; ????
      92:	0a 0b       	sbc	r16, r26
      94:	00 00       	nop
      96:	00 00       	nop
      98:	05 04       	cpc	r0, r5
      9a:	09 08       	sbc	r0, r9
	...

000000ac <digital_pin_to_bit_mask_PGM>:
      ac:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      bc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000cc <digital_pin_to_port_PGM>:
      cc:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      dc:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000ec <port_to_output_PGM>:
      ec:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000100 <__ctors_start>:
__ctors_start():
     100:	5c 02       	muls	r21, r28
     102:	13 06       	cpc	r1, r19
     104:	32 09       	sbc	r19, r2
     106:	f0 0c       	add	r15, r0

00000108 <__ctors_end>:
__dtors_start():
     108:	68 02       	muls	r22, r24

0000010a <__dtors_end>:
__dtors_end():
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d0 e4       	ldi	r29, 0x40	; 64
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     116:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     118:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     11a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     11c:	e2 e9       	ldi	r30, 0x92	; 146
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     11e:	f8 e2       	ldi	r31, 0x28	; 40
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     120:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     122:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     126:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     128:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     12a:	a0 3a       	cpi	r26, 0xA0	; 160
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     12c:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0x10>

00000130 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     130:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     132:	a0 ea       	ldi	r26, 0xA0	; 160
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     134:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     13a:	a7 31       	cpi	r26, 0x17	; 23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     13c:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>

00000140 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     140:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     142:	c4 e8       	ldi	r28, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     144:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     146:	04 c0       	rjmp	.+8      	; 0x150 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     148:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     14a:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     14c:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     150:	c0 38       	cpi	r28, 0x80	; 128
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     152:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     154:	c9 f7       	brne	.-14     	; 0x148 <__do_global_ctors+0x8>
     156:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <main>
     15a:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__do_global_dtors>

0000015e <__bad_interrupt>:
__vector_22():
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <loop>:
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:235
  rtc.resetClock();
}


void loop()
{
     162:	4f 92       	push	r4
     164:	5f 92       	push	r5
     166:	6f 92       	push	r6
     168:	7f 92       	push	r7
     16a:	8f 92       	push	r8
     16c:	9f 92       	push	r9
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	cc 50       	subi	r28, 0x0C	; 12
     188:	d8 40       	sbci	r29, 0x08	; 8
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	fe 01       	movw	r30, r28
     196:	31 96       	adiw	r30, 0x01	; 1
     198:	8e 01       	movw	r16, r28
     19a:	0f 5f       	subi	r16, 0xFF	; 255
     19c:	17 4f       	sbci	r17, 0xF7	; 247
     19e:	7f 01       	movw	r14, r30
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:239 (discriminator 2)
  uint16_t histogram[CHANNELS];
  for(int n=0; n<CHANNELS; n++)
  {
    histogram[n]=0;
     1a0:	11 92       	st	Z+, r1
     1a2:	11 92       	st	Z+, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:237 (discriminator 2)


void loop()
{
  uint16_t histogram[CHANNELS];
  for(int n=0; n<CHANNELS; n++)
     1a4:	e0 17       	cp	r30, r16
     1a6:	f1 07       	cpc	r31, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <loop+0x3e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:243
  {
    histogram[n]=0;
  }

  // dummy conversion
  ADMUX = (analog_reference << 6) | 0b10000; // Select +A0,-A1 for measurement
     1aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     1ae:	20 e4       	ldi	r18, 0x40	; 64
     1b0:	82 9f       	mul	r24, r18
     1b2:	c0 01       	movw	r24, r0
     1b4:	11 24       	eor	r1, r1
     1b6:	80 61       	ori	r24, 0x10	; 16
     1b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:244
  ADCSRB = 0;               // Switching ADC to Free Running mode
     1bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:245
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     1c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1c4:	80 62       	ori	r24, 0x20	; 32
     1c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:246
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
     1ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:247
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
     1d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1d8:	84 60       	ori	r24, 0x04	; 4
     1da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:248
  sbi(ADCSRA, 1);        
     1de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1e2:	82 60       	ori	r24, 0x02	; 2
     1e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:249
  sbi(ADCSRA, 0);        
     1e8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:251
  
  PORTB = 1;                          // Set reset output for peak detector to H
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	85 b9       	out	0x05, r24	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:252
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     1f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1fa:	80 61       	ori	r24, 0x10	; 16
     1fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:253
  while (bit_is_clear(ADCSRA, ADIF)); // wait for the first dummy conversion 
     200:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     204:	84 ff       	sbrs	r24, 4
     206:	fc cf       	rjmp	.-8      	; 0x200 <loop+0x9e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:254
  DDRB = 0b10011111;                  // Reset peak detector
     208:	8f e9       	ldi	r24, 0x9F	; 159
     20a:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:255
  delayMicroseconds(100);             // guaranteed reset
     20c:	84 e6       	ldi	r24, 0x64	; 100
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 1f 10 	call	0x203e	; 0x203e <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:256
  DDRB = 0b10011110;
     214:	8e e9       	ldi	r24, 0x9E	; 158
     216:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:258

  sbi(ADCSRA, ADIF);        // reset interrupt flag from ADC
     218:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     21c:	80 61       	ori	r24, 0x10	; 16
     21e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:262

  uint16_t suppress = 0;      
    
  while (bit_is_clear(ADCSRA, ADIF)); // wait for dummy conversion 
     222:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     226:	84 ff       	sbrs	r24, 4
     228:	fc cf       	rjmp	.-8      	; 0x222 <loop+0xc0>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:263
  DDRB = 0b10011111;                  // Reset peak detector
     22a:	8f e9       	ldi	r24, 0x9F	; 159
     22c:	84 b9       	out	0x04, r24	; 4
	...
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:268
  asm("NOP");                         // cca 6 us for 2k2 resistor and 1k capacitor in peak detector
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
     236:	00 00       	nop
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:269
  DDRB = 0b10011110;
     238:	8e e9       	ldi	r24, 0x9E	; 158
     23a:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:270
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     23c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     240:	80 61       	ori	r24, 0x10	; 16
     242:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     246:	60 eb       	ldi	r22, 0xB0	; 176
     248:	c6 2e       	mov	r12, r22
     24a:	63 eb       	ldi	r22, 0xB3	; 179
     24c:	d6 2e       	mov	r13, r22
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:278
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
    delayMicroseconds(13);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
    
    DDRB = 0b10011111;                  // Reset peak detector
     24e:	7f e9       	ldi	r23, 0x9F	; 159
     250:	b7 2e       	mov	r11, r23
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:280
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
    DDRB = 0b10011110;
     252:	ee e9       	ldi	r30, 0x9E	; 158
     254:	ae 2e       	mov	r10, r30
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:275
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
  
  // dosimeter integration
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
     256:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     25a:	84 ff       	sbrs	r24, 4
     25c:	fc cf       	rjmp	.-8      	; 0x256 <loop+0xf4>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:276
    delayMicroseconds(13);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
     25e:	8d e0       	ldi	r24, 0x0D	; 13
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 1f 10 	call	0x203e	; 0x203e <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:278
    
    DDRB = 0b10011111;                  // Reset peak detector
     266:	b4 b8       	out	0x04, r11	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:279
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
     268:	87 e0       	ldi	r24, 0x07	; 7
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 1f 10 	call	0x203e	; 0x203e <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:280
    DDRB = 0b10011110;
     270:	a4 b8       	out	0x04, r10	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:281
    sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     272:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     276:	80 61       	ori	r24, 0x10	; 16
     278:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:287

    // we have to read ADCL first; doing so locks both ADCL
    // and ADCH until ADCH is read.  reading ADCL second would
    // cause the results of each conversion to be discarded,
    // as ADCL and ADCH would be locked when it completed.
    lo = ADCL;
     27c:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     280:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:288
    hi = ADCH;
     284:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     288:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:291

    // combine the two bytes
    u_sensor = (hi << 8) | (lo);
     28c:	89 27       	eor	r24, r25
     28e:	98 27       	eor	r25, r24
     290:	89 27       	eor	r24, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:294

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     292:	81 15       	cp	r24, r1
     294:	e2 e0       	ldi	r30, 0x02	; 2
     296:	9e 07       	cpc	r25, r30
     298:	08 f0       	brcs	.+2      	; 0x29c <loop+0x13a>
     29a:	3f c0       	rjmp	.+126    	; 0x31a <loop+0x1b8>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:294 (discriminator 1)
     29c:	9e 5f       	subi	r25, 0xFE	; 254
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:294 (discriminator 2)
     29e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <u_sensor+0x1>
     2a2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:296 (discriminator 2)
              
    histogram[u_sensor]++;
     2a6:	e0 91 b2 01 	lds	r30, 0x01B2	; 0x8001b2 <u_sensor>
     2aa:	f0 91 b3 01 	lds	r31, 0x01B3	; 0x8001b3 <u_sensor+0x1>
     2ae:	ee 0f       	add	r30, r30
     2b0:	ff 1f       	adc	r31, r31
     2b2:	ee 0d       	add	r30, r14
     2b4:	ff 1d       	adc	r31, r15
     2b6:	80 81       	ld	r24, Z
     2b8:	91 81       	ldd	r25, Z+1	; 0x01
     2ba:	01 96       	adiw	r24, 0x01	; 1
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24
     2c0:	f1 e0       	ldi	r31, 0x01	; 1
     2c2:	cf 1a       	sub	r12, r31
     2c4:	d1 08       	sbc	r13, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:273 (discriminator 2)
  asm("NOP");                         
  DDRB = 0b10011110;
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
  
  // dosimeter integration
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
     2c6:	39 f6       	brne	.-114    	; 0x256 <loop+0xf4>
_ZNK4RTCx9readClockERNS_2tmENS_10timeFunc_tE():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.h:207
	device = d;
}

inline bool RTCx::readClock(struct tm &tm, timeFunc_t func) const
{
	return readClock(&tm, func);
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	60 ea       	ldi	r22, 0xA0	; 160
     2ce:	71 e0       	ldi	r23, 0x01	; 1
     2d0:	88 ec       	ldi	r24, 0xC8	; 200
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	0e 94 2b 07 	call	0xe56	; 0xe56 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:314
  }  
  
  // Data out
  {
    rtc.readClock(tm);
    RTCx::time_t t = RTCx::mktime(&tm);
     2d8:	80 ea       	ldi	r24, 0xA0	; 160
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 8b 04 	call	0x916	; 0x916 <RTCx::mktime(RTCx::tm*)>
     2e0:	2b 01       	movw	r4, r22
     2e2:	3c 01       	movw	r6, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:316

    uint16_t noise = base_offset+3;
     2e4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <base_offset>
     2e8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <base_offset+0x1>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:320
    uint32_t dose=0;
    #define RANGE 500

    for(int n=noise; n<(base_offset+RANGE); n++)  
     2ec:	c9 01       	movw	r24, r18
     2ee:	03 96       	adiw	r24, 0x03	; 3
     2f0:	fc 01       	movw	r30, r24
     2f2:	ee 0f       	add	r30, r30
     2f4:	ff 1f       	adc	r31, r31
     2f6:	ee 0d       	add	r30, r14
     2f8:	ff 1d       	adc	r31, r15
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:317
  {
    rtc.readClock(tm);
    RTCx::time_t t = RTCx::mktime(&tm);

    uint16_t noise = base_offset+3;
    uint32_t dose=0;
     2fa:	81 2c       	mov	r8, r1
     2fc:	91 2c       	mov	r9, r1
     2fe:	54 01       	movw	r10, r8
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:320
    #define RANGE 500

    for(int n=noise; n<(base_offset+RANGE); n++)  
     300:	2c 50       	subi	r18, 0x0C	; 12
     302:	3e 4f       	sbci	r19, 0xFE	; 254
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:320 (discriminator 3)
     304:	82 17       	cp	r24, r18
     306:	93 07       	cpc	r25, r19
     308:	50 f4       	brcc	.+20     	; 0x31e <loop+0x1bc>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:322 (discriminator 2)
    {
      dose += histogram[n]; 
     30a:	41 91       	ld	r20, Z+
     30c:	51 91       	ld	r21, Z+
     30e:	84 0e       	add	r8, r20
     310:	95 1e       	adc	r9, r21
     312:	a1 1c       	adc	r10, r1
     314:	b1 1c       	adc	r11, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:320 (discriminator 2)

    uint16_t noise = base_offset+3;
    uint32_t dose=0;
    #define RANGE 500

    for(int n=noise; n<(base_offset+RANGE); n++)  
     316:	01 96       	adiw	r24, 0x01	; 1
     318:	f5 cf       	rjmp	.-22     	; 0x304 <loop+0x1a2>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:294 (discriminator 2)

    // combine the two bytes
    u_sensor = (hi << 8) | (lo);

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     31a:	92 50       	subi	r25, 0x02	; 2
     31c:	c0 cf       	rjmp	.-128    	; 0x29e <loop+0x13c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:325
    for(int n=noise; n<(base_offset+RANGE); n++)  
    {
      dose += histogram[n]; 
    }

    digitalWrite(LED3, HIGH); 
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	87 e1       	ldi	r24, 0x17	; 23
     322:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:328

    // make a string for assembling the data to log:
    String dataString = "";
     326:	6e e9       	ldi	r22, 0x9E	; 158
     328:	71 e0       	ldi	r23, 0x01	; 1
     32a:	ce 01       	movw	r24, r28
     32c:	89 5f       	subi	r24, 0xF9	; 249
     32e:	97 4f       	sbci	r25, 0xF7	; 247
     330:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <String::String(char const*)>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     334:	64 e3       	ldi	r22, 0x34	; 52
     336:	71 e0       	ldi	r23, 0x01	; 1
     338:	ce 01       	movw	r24, r28
     33a:	89 5f       	subi	r24, 0xF9	; 249
     33c:	97 4f       	sbci	r25, 0xF7	; 247
     33e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:332
    
    // make a string for assembling the data to log:
    dataString += "$HIST,";
    dataString += String(count); 
     342:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <count>
     346:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <count+0x1>
     34a:	4a e0       	ldi	r20, 0x0A	; 10
     34c:	c8 01       	movw	r24, r16
     34e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     352:	b8 01       	movw	r22, r16
     354:	ce 01       	movw	r24, r28
     356:	89 5f       	subi	r24, 0xF9	; 249
     358:	97 4f       	sbci	r25, 0xF7	; 247
     35a:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:332
     35e:	c8 01       	movw	r24, r16
     360:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     364:	6b e6       	ldi	r22, 0x6B	; 107
     366:	71 e0       	ldi	r23, 0x01	; 1
     368:	ce 01       	movw	r24, r28
     36a:	89 5f       	subi	r24, 0xF9	; 249
     36c:	97 4f       	sbci	r25, 0xF7	; 247
     36e:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:334
    dataString += ",";  
    dataString += String(t-946684800); 
     372:	b3 01       	movw	r22, r6
     374:	a2 01       	movw	r20, r4
     376:	40 58       	subi	r20, 0x80	; 128
     378:	53 44       	sbci	r21, 0x43	; 67
     37a:	6d 46       	sbci	r22, 0x6D	; 109
     37c:	78 43       	sbci	r23, 0x38	; 56
     37e:	2a e0       	ldi	r18, 0x0A	; 10
     380:	c8 01       	movw	r24, r16
     382:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <String::String(long, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     386:	b8 01       	movw	r22, r16
     388:	ce 01       	movw	r24, r28
     38a:	89 5f       	subi	r24, 0xF9	; 249
     38c:	97 4f       	sbci	r25, 0xF7	; 247
     38e:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:334
     392:	c8 01       	movw	r24, r16
     394:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     398:	6b e6       	ldi	r22, 0x6B	; 107
     39a:	71 e0       	ldi	r23, 0x01	; 1
     39c:	ce 01       	movw	r24, r28
     39e:	89 5f       	subi	r24, 0xF9	; 249
     3a0:	97 4f       	sbci	r25, 0xF7	; 247
     3a2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:336
    dataString += ",";
    dataString += String(suppress);
     3a6:	4a e0       	ldi	r20, 0x0A	; 10
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	c8 01       	movw	r24, r16
     3ae:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     3b2:	b8 01       	movw	r22, r16
     3b4:	ce 01       	movw	r24, r28
     3b6:	89 5f       	subi	r24, 0xF9	; 249
     3b8:	97 4f       	sbci	r25, 0xF7	; 247
     3ba:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:336
     3be:	c8 01       	movw	r24, r16
     3c0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     3c4:	6b e6       	ldi	r22, 0x6B	; 107
     3c6:	71 e0       	ldi	r23, 0x01	; 1
     3c8:	ce 01       	movw	r24, r28
     3ca:	89 5f       	subi	r24, 0xF9	; 249
     3cc:	97 4f       	sbci	r25, 0xF7	; 247
     3ce:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:338
    dataString += ",";
    dataString += String(dose);
     3d2:	2a e0       	ldi	r18, 0x0A	; 10
     3d4:	b5 01       	movw	r22, r10
     3d6:	a4 01       	movw	r20, r8
     3d8:	c8 01       	movw	r24, r16
     3da:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <String::String(unsigned long, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     3de:	b8 01       	movw	r22, r16
     3e0:	ce 01       	movw	r24, r28
     3e2:	89 5f       	subi	r24, 0xF9	; 249
     3e4:	97 4f       	sbci	r25, 0xF7	; 247
     3e6:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:338
     3ea:	c8 01       	movw	r24, r16
     3ec:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:340
    
    for(int n=base_offset-1; n<(base_offset-1+RANGE); n++)  
     3f0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <base_offset>
     3f4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <base_offset+0x1>
     3f8:	6c 01       	movw	r12, r24
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	c2 1a       	sub	r12, r18
     3fe:	d1 08       	sbc	r13, r1
     400:	81 50       	subi	r24, 0x01	; 1
     402:	90 48       	sbci	r25, 0x80	; 128
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	e8 0e       	add	r14, r24
     40a:	f9 1e       	adc	r15, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:340 (discriminator 3)
     40c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <base_offset>
     410:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <base_offset+0x1>
     414:	8d 50       	subi	r24, 0x0D	; 13
     416:	9e 4f       	sbci	r25, 0xFE	; 254
     418:	c8 16       	cp	r12, r24
     41a:	d9 06       	cpc	r13, r25
     41c:	e0 f4       	brcc	.+56     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     41e:	6b e6       	ldi	r22, 0x6B	; 107
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	ce 01       	movw	r24, r28
     424:	89 5f       	subi	r24, 0xF9	; 249
     426:	97 4f       	sbci	r25, 0xF7	; 247
     428:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:343
    {
      dataString += ",";
      dataString += String(histogram[n]); 
     42c:	f7 01       	movw	r30, r14
     42e:	61 91       	ld	r22, Z+
     430:	71 91       	ld	r23, Z+
     432:	7f 01       	movw	r14, r30
     434:	4a e0       	ldi	r20, 0x0A	; 10
     436:	c8 01       	movw	r24, r16
     438:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     43c:	b8 01       	movw	r22, r16
     43e:	ce 01       	movw	r24, r28
     440:	89 5f       	subi	r24, 0xF9	; 249
     442:	97 4f       	sbci	r25, 0xF7	; 247
     444:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:343
     448:	c8 01       	movw	r24, r16
     44a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:340
    dataString += ",";
    dataString += String(suppress);
    dataString += ",";
    dataString += String(dose);
    
    for(int n=base_offset-1; n<(base_offset-1+RANGE); n++)  
     44e:	ff ef       	ldi	r31, 0xFF	; 255
     450:	cf 1a       	sub	r12, r31
     452:	df 0a       	sbc	r13, r31
     454:	db cf       	rjmp	.-74     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:363
    dataString += String(int(maxch-noise+3)); 
    dataString += ",";
    dataString += String(maxener); 
    */
    
    count++;
     456:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <count>
     45a:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <count+0x1>
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <count+0x1>
     464:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <count>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:366

    {
      Serial.println(dataString);  // print to terminal (additional 700 ms in DEBUG mode)
     468:	be 01       	movw	r22, r28
     46a:	69 5f       	subi	r22, 0xF9	; 249
     46c:	77 4f       	sbci	r23, 0xF7	; 247
     46e:	8d e6       	ldi	r24, 0x6D	; 109
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:367
      digitalWrite(LED3, LOW); 
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	87 e1       	ldi	r24, 0x17	; 23
     47a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:328
    }

    digitalWrite(LED3, HIGH); 

    // make a string for assembling the data to log:
    String dataString = "";
     47e:	ce 01       	movw	r24, r28
     480:	89 5f       	subi	r24, 0xF9	; 249
     482:	97 4f       	sbci	r25, 0xF7	; 247
     484:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:370
    {
      Serial.println(dataString);  // print to terminal (additional 700 ms in DEBUG mode)
      digitalWrite(LED3, LOW); 
    }          
  }    
}
     488:	c4 5f       	subi	r28, 0xF4	; 244
     48a:	d7 4f       	sbci	r29, 0xF7	; 247
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	6f 90       	pop	r6
     4b2:	5f 90       	pop	r5
     4b4:	4f 90       	pop	r4
     4b6:	08 95       	ret

000004b8 <_GLOBAL__sub_I_githash>:
_GLOBAL__sub_I_githash():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:1
String githash = "379276a";
     4b8:	6b e3       	ldi	r22, 0x3B	; 59
     4ba:	71 e0       	ldi	r23, 0x01	; 1
     4bc:	82 ec       	ldi	r24, 0xC2	; 194
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <String::String(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:2
String FWversion = "L512_02"; // 16 MHz crystal
     4c4:	63 e4       	ldi	r22, 0x43	; 67
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	8c eb       	ldi	r24, 0xBC	; 188
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <String::String(char const*)>

000004d0 <_GLOBAL__sub_D_githash>:
_GLOBAL__sub_D_githash():
     4d0:	8c eb       	ldi	r24, 0xBC	; 188
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:1
String githash = "379276a";
     4d8:	82 ec       	ldi	r24, 0xC2	; 194
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <String::~String()>

000004e0 <setup>:
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:117
//  15  | A15     | A9      | 1x
#define PIN 0
uint8_t analog_reference = INTERNAL2V56; // DEFAULT, INTERNAL, INTERNAL1V1, INTERNAL2V56, or EXTERNAL

void setup()
{
     4e0:	ff 92       	push	r15
     4e2:	0f 93       	push	r16
     4e4:	1f 93       	push	r17
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	cd b7       	in	r28, 0x3d	; 61
     4ec:	de b7       	in	r29, 0x3e	; 62
     4ee:	62 97       	sbiw	r28, 0x12	; 18
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	de bf       	out	0x3e, r29	; 62
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	cd bf       	out	0x3d, r28	; 61
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:118
  pinMode(LED1, OUTPUT); 
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	85 e1       	ldi	r24, 0x15	; 21
     4fe:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:119
  digitalWrite(LED1, HIGH); 
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	85 e1       	ldi	r24, 0x15	; 21
     506:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:120
  delay(100);  
     50a:	64 e6       	ldi	r22, 0x64	; 100
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
_ZN14HardwareSerial5beginEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     516:	26 e0       	ldi	r18, 0x06	; 6
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	52 ec       	ldi	r21, 0xC2	; 194
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	8d e6       	ldi	r24, 0x6D	; 109
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	0e 94 34 0c 	call	0x1868	; 0x1868 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:125

  // Open serial communications and wait for port to open:
  Serial.begin(115200);

  Serial.println("#Cvak...");
     528:	6b e4       	ldi	r22, 0x4B	; 75
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	8d e6       	ldi	r24, 0x6D	; 109
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:127
  
  ADMUX = (analog_reference << 6) | ((PIN | 0x10) & 0x1F);
     534:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     538:	20 e4       	ldi	r18, 0x40	; 64
     53a:	82 9f       	mul	r24, r18
     53c:	c0 01       	movw	r24, r0
     53e:	11 24       	eor	r1, r1
     540:	80 61       	ori	r24, 0x10	; 16
     542:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:128
  ADCSRB = 0;               // Switching ADC to Free Running mode
     546:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:129
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     54a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     54e:	80 62       	ori	r24, 0x20	; 32
     550:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:130
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
     554:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     558:	80 64       	ori	r24, 0x40	; 64
     55a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:131
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128, 125 kHz, 112 us for 14 cycles of one AD conversion, 12 us for 1.5 cycle for sample-hold
     55e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     562:	84 60       	ori	r24, 0x04	; 4
     564:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:132
  sbi(ADCSRA, 1);        
     568:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:133
  sbi(ADCSRA, 0);        
     572:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     576:	81 60       	ori	r24, 0x01	; 1
     578:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:135

  pinMode(RESET, OUTPUT);   // reset for peak detetor
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:145
  //pinMode(SS, OUTPUT);     
  //pinMode(MOSI, INPUT);     
  //pinMode(MISO, INPUT);     
  //pinMode(SCK, OUTPUT);  

  DDRB = 0b10011110;
     584:	8e e9       	ldi	r24, 0x9E	; 158
     586:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:146
  PORTB = 0b00000000;  // SDcard Power OFF
     588:	15 b8       	out	0x05, r1	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:148

  DDRA = 0b11111100;
     58a:	8c ef       	ldi	r24, 0xFC	; 252
     58c:	81 b9       	out	0x01, r24	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:149
  PORTA = 0b00000000;  // SDcard Power OFF
     58e:	12 b8       	out	0x02, r1	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:150
  DDRC = 0b11101100;
     590:	9c ee       	ldi	r25, 0xEC	; 236
     592:	97 b9       	out	0x07, r25	; 7
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:151
  PORTC = 0b00000000;  // SDcard Power OFF
     594:	18 b8       	out	0x08, r1	; 8
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:152
  DDRD = 0b11111100;
     596:	8a b9       	out	0x0a, r24	; 10
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:153
  PORTD = 0b10000000;  // SDcard Power OFF
     598:	80 e8       	ldi	r24, 0x80	; 128
     59a:	8b b9       	out	0x0b, r24	; 11
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:155

  Wire.setClock(100000);
     59c:	40 ea       	ldi	r20, 0xA0	; 160
     59e:	56 e8       	ldi	r21, 0x86	; 134
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	8b ec       	ldi	r24, 0xCB	; 203
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 a6 08 	call	0x114c	; 0x114c <TwoWire::setClock(unsigned long)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:157

  pinMode(LED1, OUTPUT); 
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	85 e1       	ldi	r24, 0x15	; 21
     5b0:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:158
  digitalWrite(LED1, HIGH); 
     5b4:	61 e0       	ldi	r22, 0x01	; 1
     5b6:	85 e1       	ldi	r24, 0x15	; 21
     5b8:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:159
  delay(100);  
     5bc:	64 e6       	ldi	r22, 0x64	; 100
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:160
  Serial.println("#Hmmm...");
     5c8:	64 e5       	ldi	r22, 0x54	; 84
     5ca:	71 e0       	ldi	r23, 0x01	; 1
     5cc:	8d e6       	ldi	r24, 0x6D	; 109
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:161
  pinMode(LED2, OUTPUT); 
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	86 e1       	ldi	r24, 0x16	; 22
     5d8:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:162
  digitalWrite(LED2, HIGH); 
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	86 e1       	ldi	r24, 0x16	; 22
     5e0:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:163
  delay(100);  
     5e4:	64 e6       	ldi	r22, 0x64	; 100
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
     5f0:	98 e0       	ldi	r25, 0x08	; 8
     5f2:	f9 2e       	mov	r15, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:170
  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
    { 
      // measurement of ADC offset
      ADMUX = (analog_reference << 6) | 0b10001; // Select +A1,-A1 for offset correction
     5f4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     5f8:	20 e4       	ldi	r18, 0x40	; 64
     5fa:	82 9f       	mul	r24, r18
     5fc:	c0 01       	movw	r24, r0
     5fe:	11 24       	eor	r1, r1
     600:	81 61       	ori	r24, 0x11	; 17
     602:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:171
      delay(50);
     606:	62 e3       	ldi	r22, 0x32	; 50
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:172
      ADCSRB = 0;               // Switching ADC to Free Running mode
     612:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:173
      sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     616:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     61a:	80 62       	ori	r24, 0x20	; 32
     61c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:174
      sbi(ADCSRA, ADSC);        // ADC start the first conversions
     620:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     624:	80 64       	ori	r24, 0x40	; 64
     626:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:175
      sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
     62a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     62e:	84 60       	ori	r24, 0x04	; 4
     630:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:176
      sbi(ADCSRA, 1);        
     634:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     638:	82 60       	ori	r24, 0x02	; 2
     63a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:177
      sbi(ADCSRA, 0);        
     63e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     642:	81 60       	ori	r24, 0x01	; 1
     644:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:178
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     648:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     64c:	80 61       	ori	r24, 0x10	; 16
     64e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:179
      while (bit_is_clear(ADCSRA, ADIF)); // wait for the first conversion 
     652:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     656:	84 ff       	sbrs	r24, 4
     658:	fc cf       	rjmp	.-8      	; 0x652 <setup+0x172>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:180
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     65a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     65e:	80 61       	ori	r24, 0x10	; 16
     660:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:181
      lo = ADCL;
     664:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     668:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:182
      hi = ADCH;
     66c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     670:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:184
      // combine the two bytes
      u_sensor = (hi << 8) | (lo);
     674:	89 27       	eor	r24, r25
     676:	98 27       	eor	r25, r24
     678:	89 27       	eor	r24, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:186
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     67a:	81 15       	cp	r24, r1
     67c:	22 e0       	ldi	r18, 0x02	; 2
     67e:	92 07       	cpc	r25, r18
     680:	08 f0       	brcs	.+2      	; 0x684 <setup+0x1a4>
     682:	f9 c0       	rjmp	.+498    	; 0x876 <setup+0x396>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:186 (discriminator 1)
     684:	9e 5f       	subi	r25, 0xFE	; 254
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:186 (discriminator 2)
     686:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <u_sensor+0x1>
     68a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:187 (discriminator 2)
      DCoffset += u_sensor;
     68e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <u_sensor>
     692:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <u_sensor+0x1>
     696:	08 0f       	add	r16, r24
     698:	19 1f       	adc	r17, r25
     69a:	fa 94       	dec	r15
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:167 (discriminator 2)
  digitalWrite(LED2, HIGH); 
  delay(100);  

  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
     69c:	f1 10       	cpse	r15, r1
     69e:	aa cf       	rjmp	.-172    	; 0x5f4 <setup+0x114>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:189
      u_sensor = (hi << 8) | (lo);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
      DCoffset += u_sensor;
    }
    base_offset = DCoffset >> 3; // Calculate mean of 8 measurements
     6a0:	83 e0       	ldi	r24, 0x03	; 3
     6a2:	16 95       	lsr	r17
     6a4:	07 95       	ror	r16
     6a6:	8a 95       	dec	r24
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <setup+0x1c2>
     6aa:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <base_offset+0x1>
     6ae:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <base_offset>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:192
  }

  pinMode(LED3, OUTPUT); 
     6b2:	61 e0       	ldi	r22, 0x01	; 1
     6b4:	87 e1       	ldi	r24, 0x17	; 23
     6b6:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:193
  digitalWrite(LED3, HIGH); 
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	87 e1       	ldi	r24, 0x17	; 23
     6be:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:194
  delay(100);  
     6c2:	64 e6       	ldi	r22, 0x64	; 100
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:197
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
     6ce:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <base_offset>
     6d2:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <base_offset+0x1>
     6d6:	4a e0       	ldi	r20, 0x0A	; 10
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <String::String(unsigned int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     6e0:	6d e5       	ldi	r22, 0x5D	; 93
     6e2:	71 e0       	ldi	r23, 0x01	; 1
     6e4:	ce 01       	movw	r24, r28
     6e6:	07 96       	adiw	r24, 0x07	; 7
     6e8:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <String::String(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:197
     6ec:	6c eb       	ldi	r22, 0xBC	; 188
     6ee:	71 e0       	ldi	r23, 0x01	; 1
     6f0:	ce 01       	movw	r24, r28
     6f2:	07 96       	adiw	r24, 0x07	; 7
     6f4:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <operator+(StringSumHelper const&, String const&)>
     6f8:	6b e6       	ldi	r22, 0x6B	; 107
     6fa:	71 e0       	ldi	r23, 0x01	; 1
     6fc:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <operator+(StringSumHelper const&, char const*)>
     700:	be 01       	movw	r22, r28
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
     706:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <operator+(StringSumHelper const&, String const&)>
     70a:	6b e6       	ldi	r22, 0x6B	; 107
     70c:	71 e0       	ldi	r23, 0x01	; 1
     70e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <operator+(StringSumHelper const&, char const*)>
     712:	62 ec       	ldi	r22, 0xC2	; 194
     714:	71 e0       	ldi	r23, 0x01	; 1
     716:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <operator+(StringSumHelper const&, String const&)>
     71a:	6b e6       	ldi	r22, 0x6B	; 107
     71c:	71 e0       	ldi	r23, 0x01	; 1
     71e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <operator+(StringSumHelper const&, char const*)>
     722:	bc 01       	movw	r22, r24
     724:	ce 01       	movw	r24, r28
     726:	0d 96       	adiw	r24, 0x0d	; 13
     728:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <String::String(String const&)>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     72c:	ce 01       	movw	r24, r28
     72e:	07 96       	adiw	r24, 0x07	; 7
     730:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
     734:	ce 01       	movw	r24, r28
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:199
  
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
     73c:	68 e5       	ldi	r22, 0x58	; 88
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	8b ec       	ldi	r24, 0xCB	; 203
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 b4 08 	call	0x1168	; 0x1168 <TwoWire::beginTransmission(int)>
_ZN7TwoWire5writeEi():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.h:86
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     748:	68 e0       	ldi	r22, 0x08	; 8
     74a:	8b ec       	ldi	r24, 0xCB	; 203
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	8b ec       	ldi	r24, 0xCB	; 203
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:202
  Wire.write((int)0x08); // MSB
  Wire.write((int)0x00); // LSB
  Wire.endTransmission();
     75c:	8b ec       	ldi	r24, 0xCB	; 203
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:203
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
     764:	40 e1       	ldi	r20, 0x10	; 16
     766:	68 e5       	ldi	r22, 0x58	; 88
     768:	8b ec       	ldi	r24, 0xCB	; 203
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	0e 94 2c 09 	call	0x1258	; 0x1258 <TwoWire::requestFrom(unsigned char, unsigned char)>
     770:	10 e1       	ldi	r17, 0x10	; 16
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:206
  for (int8_t reg=0; reg<16; reg++)
  { 
    uint8_t serialbyte = Wire.read(); // receive a byte
     772:	8b ec       	ldi	r24, 0xCB	; 203
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     77a:	08 2f       	mov	r16, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:207
    if (serialbyte<0x10) dataString += "0";
     77c:	80 31       	cpi	r24, 0x10	; 16
     77e:	30 f4       	brcc	.+12     	; 0x78c <setup+0x2ac>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     780:	6d e6       	ldi	r22, 0x6D	; 109
     782:	71 e0       	ldi	r23, 0x01	; 1
     784:	ce 01       	movw	r24, r28
     786:	0d 96       	adiw	r24, 0x0d	; 13
     788:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <String::concat(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:208 (discriminator 2)
    dataString += String(serialbyte,HEX);    
     78c:	40 e1       	ldi	r20, 0x10	; 16
     78e:	60 2f       	mov	r22, r16
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <String::String(unsigned char, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113 (discriminator 2)
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     798:	be 01       	movw	r22, r28
     79a:	6f 5f       	subi	r22, 0xFF	; 255
     79c:	7f 4f       	sbci	r23, 0xFF	; 255
     79e:	ce 01       	movw	r24, r28
     7a0:	0d 96       	adiw	r24, 0x0d	; 13
     7a2:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <String::concat(String const&)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:208 (discriminator 2)
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:209 (discriminator 2)
    serialhash += serialbyte;
     7ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <serialhash>
     7b2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <serialhash+0x1>
     7b6:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <serialhash+0x2>
     7ba:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <serialhash+0x3>
     7be:	80 0f       	add	r24, r16
     7c0:	91 1d       	adc	r25, r1
     7c2:	a1 1d       	adc	r26, r1
     7c4:	b1 1d       	adc	r27, r1
     7c6:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <serialhash>
     7ca:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <serialhash+0x1>
     7ce:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <serialhash+0x2>
     7d2:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <serialhash+0x3>
     7d6:	11 50       	subi	r17, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:204 (discriminator 2)
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
  Wire.write((int)0x08); // MSB
  Wire.write((int)0x00); // LSB
  Wire.endTransmission();
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
  for (int8_t reg=0; reg<16; reg++)
     7d8:	61 f6       	brne	.-104    	; 0x772 <setup+0x292>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:213
    dataString += String(serialbyte,HEX);    
    serialhash += serialbyte;
  }

  {
    Serial.println(dataString);  // print SN to terminal 
     7da:	be 01       	movw	r22, r28
     7dc:	63 5f       	subi	r22, 0xF3	; 243
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	8d e6       	ldi	r24, 0x6D	; 109
     7e2:	92 e0       	ldi	r25, 0x02	; 2
     7e4:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:217
  }    

  
  pinMode(LED1, OUTPUT); 
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	85 e1       	ldi	r24, 0x15	; 21
     7ec:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:218
  digitalWrite(LED1, LOW); 
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	85 e1       	ldi	r24, 0x15	; 21
     7f4:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:219
  delay(100);  
     7f8:	64 e6       	ldi	r22, 0x64	; 100
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:220
  pinMode(LED2, OUTPUT); 
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	86 e1       	ldi	r24, 0x16	; 22
     808:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:221
  digitalWrite(LED2, LOW); 
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	86 e1       	ldi	r24, 0x16	; 22
     810:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:222
  delay(100);  
     814:	64 e6       	ldi	r22, 0x64	; 100
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:223
  pinMode(LED3, OUTPUT); 
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	87 e1       	ldi	r24, 0x17	; 23
     824:	0e 94 94 10 	call	0x2128	; 0x2128 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:224
  digitalWrite(LED3, LOW); 
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	87 e1       	ldi	r24, 0x17	; 23
     82c:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:225
  delay(100);  
     830:	64 e6       	ldi	r22, 0x64	; 100
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <delay>
_ZN4RTCx9autoprobeEv():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.h:131
	RTCx(void);
	RTCx(uint8_t a);
	RTCx(uint8_t a, device_t d);

	inline bool autoprobe(void) {
		return autoprobe(&autoprobeDeviceList[0], autoprobeDeviceAddresses, sizeof(autoprobeDeviceList));
     83c:	26 e0       	ldi	r18, 0x06	; 6
     83e:	4f e6       	ldi	r20, 0x6F	; 111
     840:	51 e0       	ldi	r21, 0x01	; 1
     842:	62 e7       	ldi	r22, 0x72	; 114
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	88 ec       	ldi	r24, 0xC8	; 200
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 42 06 	call	0xc84	; 0xc84 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:230


  // Initiates RTC
  rtc.autoprobe();
  rtc.resetClock();
     84e:	88 ec       	ldi	r24, 0xC8	; 200
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 34 06 	call	0xc68	; 0xc68 <RTCx::resetClock() const>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:197
  pinMode(LED3, OUTPUT); 
  digitalWrite(LED3, HIGH); 
  delay(100);  
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
     856:	ce 01       	movw	r24, r28
     858:	0d 96       	adiw	r24, 0x0d	; 13
     85a:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:231


  // Initiates RTC
  rtc.autoprobe();
  rtc.resetClock();
}
     85e:	62 96       	adiw	r28, 0x12	; 18
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	de bf       	out	0x3e, r29	; 62
     866:	0f be       	out	0x3f, r0	; 63
     868:	cd bf       	out	0x3d, r28	; 61
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	1f 91       	pop	r17
     870:	0f 91       	pop	r16
     872:	ff 90       	pop	r15
     874:	08 95       	ret
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/LABDOS512.ino:186 (discriminator 2)
      lo = ADCL;
      hi = ADCH;
      // combine the two bytes
      u_sensor = (hi << 8) | (lo);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     876:	92 50       	subi	r25, 0x02	; 2
     878:	06 cf       	rjmp	.-500    	; 0x686 <setup+0x1a6>

0000087a <RTCx::daysInMonth(unsigned int, unsigned char)>:
_ZN4RTCx11daysInMonthEjh():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:681
			return ((d & 0x80u) ? -r : r);
		}
		break;

	case PCF85263:
		return readData(0x24);
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	2d 97       	sbiw	r28, 0x0d	; 13
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	2d e0       	ldi	r18, 0x0D	; 13
     890:	e9 e0       	ldi	r30, 0x09	; 9
     892:	f1 e0       	ldi	r31, 0x01	; 1
     894:	de 01       	movw	r26, r28
     896:	11 96       	adiw	r26, 0x01	; 1
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	2a 95       	dec	r18
     89e:	e1 f7       	brne	.-8      	; 0x898 <RTCx::daysInMonth(unsigned int, unsigned char)+0x1e>
     8a0:	62 30       	cpi	r22, 0x02	; 2
     8a2:	21 f4       	brne	.+8      	; 0x8ac <RTCx::daysInMonth(unsigned int, unsigned char)+0x32>
_ZN4RTCx10isLeapYearEj():
     8a4:	83 70       	andi	r24, 0x03	; 3
     8a6:	99 27       	eor	r25, r25
_ZN4RTCx11daysInMonthEjh():
     8a8:	89 2b       	or	r24, r25
     8aa:	81 f0       	breq	.+32     	; 0x8cc <RTCx::daysInMonth(unsigned int, unsigned char)+0x52>
     8ac:	e1 e0       	ldi	r30, 0x01	; 1
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ec 0f       	add	r30, r28
     8b2:	fd 1f       	adc	r31, r29
     8b4:	e6 0f       	add	r30, r22
     8b6:	f1 1d       	adc	r31, r1
     8b8:	80 81       	ld	r24, Z
     8ba:	2d 96       	adiw	r28, 0x0d	; 13
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret
     8cc:	8d e1       	ldi	r24, 0x1D	; 29
     8ce:	f5 cf       	rjmp	.-22     	; 0x8ba <RTCx::daysInMonth(unsigned int, unsigned char)+0x40>

000008d0 <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)>:
_ZN4RTCx9dayOfYearEjhh():
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	7c 01       	movw	r14, r24
     8e0:	d6 2e       	mov	r13, r22
     8e2:	14 2f       	mov	r17, r20
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	d0 e0       	ldi	r29, 0x00	; 0
     8e8:	c0 e0       	ldi	r28, 0x00	; 0
     8ea:	6d 15       	cp	r22, r13
     8ec:	48 f4       	brcc	.+18     	; 0x900 <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)+0x30>
     8ee:	01 e0       	ldi	r16, 0x01	; 1
     8f0:	06 0f       	add	r16, r22
     8f2:	c7 01       	movw	r24, r14
     8f4:	0e 94 3d 04 	call	0x87a	; 0x87a <RTCx::daysInMonth(unsigned int, unsigned char)>
     8f8:	c8 0f       	add	r28, r24
     8fa:	d1 1d       	adc	r29, r1
     8fc:	60 2f       	mov	r22, r16
     8fe:	f5 cf       	rjmp	.-22     	; 0x8ea <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)+0x1a>
     900:	ce 01       	movw	r24, r28
     902:	81 0f       	add	r24, r17
     904:	91 1d       	adc	r25, r1
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	08 95       	ret

00000916 <RTCx::mktime(RTCx::tm*)>:
_ZN4RTCx6mktimeEPNS_2tmE():
     916:	7f 92       	push	r7
     918:	8f 92       	push	r8
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	ec 01       	movw	r28, r24
     932:	88 81       	ld	r24, Y
     934:	99 81       	ldd	r25, Y+1	; 0x01
     936:	6c e3       	ldi	r22, 0x3C	; 60
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	0e 94 23 11 	call	0x2246	; 0x2246 <__divmodhi4>
     93e:	2a 81       	ldd	r18, Y+2	; 0x02
     940:	3b 81       	ldd	r19, Y+3	; 0x03
     942:	62 0f       	add	r22, r18
     944:	73 1f       	adc	r23, r19
     946:	7b 83       	std	Y+3, r23	; 0x03
     948:	6a 83       	std	Y+2, r22	; 0x02
     94a:	97 fd       	sbrc	r25, 7
     94c:	33 c0       	rjmp	.+102    	; 0x9b4 <RTCx::mktime(RTCx::tm*)+0x9e>
     94e:	99 83       	std	Y+1, r25	; 0x01
     950:	88 83       	st	Y, r24
     952:	8a 81       	ldd	r24, Y+2	; 0x02
     954:	9b 81       	ldd	r25, Y+3	; 0x03
     956:	6c e3       	ldi	r22, 0x3C	; 60
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	0e 94 23 11 	call	0x2246	; 0x2246 <__divmodhi4>
     95e:	2c 81       	ldd	r18, Y+4	; 0x04
     960:	3d 81       	ldd	r19, Y+5	; 0x05
     962:	62 0f       	add	r22, r18
     964:	73 1f       	adc	r23, r19
     966:	7d 83       	std	Y+5, r23	; 0x05
     968:	6c 83       	std	Y+4, r22	; 0x04
     96a:	97 fd       	sbrc	r25, 7
     96c:	2b c0       	rjmp	.+86     	; 0x9c4 <RTCx::mktime(RTCx::tm*)+0xae>
     96e:	9b 83       	std	Y+3, r25	; 0x03
     970:	8a 83       	std	Y+2, r24	; 0x02
     972:	8c 81       	ldd	r24, Y+4	; 0x04
     974:	9d 81       	ldd	r25, Y+5	; 0x05
     976:	68 e1       	ldi	r22, 0x18	; 24
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	0e 94 23 11 	call	0x2246	; 0x2246 <__divmodhi4>
     97e:	2e 81       	ldd	r18, Y+6	; 0x06
     980:	3f 81       	ldd	r19, Y+7	; 0x07
     982:	62 0f       	add	r22, r18
     984:	73 1f       	adc	r23, r19
     986:	7f 83       	std	Y+7, r23	; 0x07
     988:	6e 83       	std	Y+6, r22	; 0x06
     98a:	97 fd       	sbrc	r25, 7
     98c:	23 c0       	rjmp	.+70     	; 0x9d4 <RTCx::mktime(RTCx::tm*)+0xbe>
     98e:	9d 83       	std	Y+5, r25	; 0x05
     990:	8c 83       	std	Y+4, r24	; 0x04
     992:	88 85       	ldd	r24, Y+8	; 0x08
     994:	99 85       	ldd	r25, Y+9	; 0x09
     996:	0c 97       	sbiw	r24, 0x0c	; 12
     998:	40 f4       	brcc	.+16     	; 0x9aa <RTCx::mktime(RTCx::tm*)+0x94>
     99a:	8e 81       	ldd	r24, Y+6	; 0x06
     99c:	9f 81       	ldd	r25, Y+7	; 0x07
     99e:	3b e0       	ldi	r19, 0x0B	; 11
     9a0:	a3 2e       	mov	r10, r19
     9a2:	b1 2c       	mov	r11, r1
     9a4:	18 16       	cp	r1, r24
     9a6:	19 06       	cpc	r1, r25
     9a8:	fc f0       	brlt	.+62     	; 0x9e8 <RTCx::mktime(RTCx::tm*)+0xd2>
     9aa:	cc 24       	eor	r12, r12
     9ac:	ca 94       	dec	r12
     9ae:	dc 2c       	mov	r13, r12
     9b0:	76 01       	movw	r14, r12
     9b2:	d4 c0       	rjmp	.+424    	; 0xb5c <RTCx::mktime(RTCx::tm*)+0x246>
     9b4:	cc 96       	adiw	r24, 0x3c	; 60
     9b6:	99 83       	std	Y+1, r25	; 0x01
     9b8:	88 83       	st	Y, r24
     9ba:	61 50       	subi	r22, 0x01	; 1
     9bc:	71 09       	sbc	r23, r1
     9be:	7b 83       	std	Y+3, r23	; 0x03
     9c0:	6a 83       	std	Y+2, r22	; 0x02
     9c2:	c7 cf       	rjmp	.-114    	; 0x952 <RTCx::mktime(RTCx::tm*)+0x3c>
     9c4:	cc 96       	adiw	r24, 0x3c	; 60
     9c6:	9b 83       	std	Y+3, r25	; 0x03
     9c8:	8a 83       	std	Y+2, r24	; 0x02
     9ca:	61 50       	subi	r22, 0x01	; 1
     9cc:	71 09       	sbc	r23, r1
     9ce:	7d 83       	std	Y+5, r23	; 0x05
     9d0:	6c 83       	std	Y+4, r22	; 0x04
     9d2:	cf cf       	rjmp	.-98     	; 0x972 <RTCx::mktime(RTCx::tm*)+0x5c>
     9d4:	48 96       	adiw	r24, 0x18	; 24
     9d6:	9d 83       	std	Y+5, r25	; 0x05
     9d8:	8c 83       	std	Y+4, r24	; 0x04
     9da:	61 50       	subi	r22, 0x01	; 1
     9dc:	71 09       	sbc	r23, r1
     9de:	7f 83       	std	Y+7, r23	; 0x07
     9e0:	6e 83       	std	Y+6, r22	; 0x06
     9e2:	d7 cf       	rjmp	.-82     	; 0x992 <RTCx::mktime(RTCx::tm*)+0x7c>
     9e4:	d9 86       	std	Y+9, r13	; 0x09
     9e6:	c8 86       	std	Y+8, r12	; 0x08
     9e8:	c8 84       	ldd	r12, Y+8	; 0x08
     9ea:	d9 84       	ldd	r13, Y+9	; 0x09
     9ec:	77 24       	eor	r7, r7
     9ee:	73 94       	inc	r7
     9f0:	7c 0c       	add	r7, r12
     9f2:	0a 85       	ldd	r16, Y+10	; 0x0a
     9f4:	1b 85       	ldd	r17, Y+11	; 0x0b
     9f6:	48 01       	movw	r8, r16
     9f8:	84 e9       	ldi	r24, 0x94	; 148
     9fa:	88 1a       	sub	r8, r24
     9fc:	88 ef       	ldi	r24, 0xF8	; 248
     9fe:	98 0a       	sbc	r9, r24
     a00:	67 2d       	mov	r22, r7
     a02:	c4 01       	movw	r24, r8
     a04:	0e 94 3d 04 	call	0x87a	; 0x87a <RTCx::daysInMonth(unsigned int, unsigned char)>
     a08:	ee 80       	ldd	r14, Y+6	; 0x06
     a0a:	ff 80       	ldd	r15, Y+7	; 0x07
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	8e 15       	cp	r24, r14
     a10:	9f 05       	cpc	r25, r15
     a12:	94 f4       	brge	.+36     	; 0xa38 <RTCx::mktime(RTCx::tm*)+0x122>
     a14:	e8 1a       	sub	r14, r24
     a16:	f9 0a       	sbc	r15, r25
     a18:	ff 82       	std	Y+7, r15	; 0x07
     a1a:	ee 82       	std	Y+6, r14	; 0x06
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	c8 1a       	sub	r12, r24
     a20:	d8 0a       	sbc	r13, r24
     a22:	8c e0       	ldi	r24, 0x0C	; 12
     a24:	c8 16       	cp	r12, r24
     a26:	d1 04       	cpc	r13, r1
     a28:	e9 f6       	brne	.-70     	; 0x9e4 <RTCx::mktime(RTCx::tm*)+0xce>
     a2a:	19 86       	std	Y+9, r1	; 0x09
     a2c:	18 86       	std	Y+8, r1	; 0x08
     a2e:	0f 5f       	subi	r16, 0xFF	; 255
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	1b 87       	std	Y+11, r17	; 0x0b
     a34:	0a 87       	std	Y+10, r16	; 0x0a
     a36:	d8 cf       	rjmp	.-80     	; 0x9e8 <RTCx::mktime(RTCx::tm*)+0xd2>
     a38:	1e 14       	cp	r1, r14
     a3a:	1f 04       	cpc	r1, r15
     a3c:	dc f0       	brlt	.+54     	; 0xa74 <RTCx::mktime(RTCx::tm*)+0x15e>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	c8 1a       	sub	r12, r24
     a42:	d1 08       	sbc	r13, r1
     a44:	80 f0       	brcs	.+32     	; 0xa66 <RTCx::mktime(RTCx::tm*)+0x150>
     a46:	d9 86       	std	Y+9, r13	; 0x09
     a48:	c8 86       	std	Y+8, r12	; 0x08
     a4a:	68 85       	ldd	r22, Y+8	; 0x08
     a4c:	6f 5f       	subi	r22, 0xFF	; 255
     a4e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a50:	9b 85       	ldd	r25, Y+11	; 0x0b
     a52:	84 59       	subi	r24, 0x94	; 148
     a54:	98 4f       	sbci	r25, 0xF8	; 248
     a56:	0e 94 3d 04 	call	0x87a	; 0x87a <RTCx::daysInMonth(unsigned int, unsigned char)>
     a5a:	8e 0d       	add	r24, r14
     a5c:	9f 2d       	mov	r25, r15
     a5e:	91 1d       	adc	r25, r1
     a60:	9f 83       	std	Y+7, r25	; 0x07
     a62:	8e 83       	std	Y+6, r24	; 0x06
     a64:	c1 cf       	rjmp	.-126    	; 0x9e8 <RTCx::mktime(RTCx::tm*)+0xd2>
     a66:	b9 86       	std	Y+9, r11	; 0x09
     a68:	a8 86       	std	Y+8, r10	; 0x08
     a6a:	01 50       	subi	r16, 0x01	; 1
     a6c:	11 09       	sbc	r17, r1
     a6e:	1b 87       	std	Y+11, r17	; 0x0b
     a70:	0a 87       	std	Y+10, r16	; 0x0a
     a72:	eb cf       	rjmp	.-42     	; 0xa4a <RTCx::mktime(RTCx::tm*)+0x134>
     a74:	4e 2d       	mov	r20, r14
     a76:	67 2d       	mov	r22, r7
     a78:	c4 01       	movw	r24, r8
     a7a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)>
     a7e:	fc 01       	movw	r30, r24
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	ff 87       	std	Y+15, r31	; 0x0f
     a84:	ee 87       	std	Y+14, r30	; 0x0e
     a86:	06 54       	subi	r16, 0x46	; 70
     a88:	8d e6       	ldi	r24, 0x6D	; 109
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	08 9f       	mul	r16, r24
     a8e:	90 01       	movw	r18, r0
     a90:	09 9f       	mul	r16, r25
     a92:	30 0d       	add	r19, r0
     a94:	11 24       	eor	r1, r1
     a96:	03 2e       	mov	r0, r19
     a98:	00 0c       	add	r0, r0
     a9a:	44 0b       	sbc	r20, r20
     a9c:	55 0b       	sbc	r21, r21
     a9e:	80 2f       	mov	r24, r16
     aa0:	86 95       	lsr	r24
     aa2:	86 95       	lsr	r24
     aa4:	28 0f       	add	r18, r24
     aa6:	31 1d       	adc	r19, r1
     aa8:	41 1d       	adc	r20, r1
     aaa:	51 1d       	adc	r21, r1
     aac:	60 e8       	ldi	r22, 0x80	; 128
     aae:	71 e5       	ldi	r23, 0x51	; 81
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__mulsi3>
     ab8:	03 70       	andi	r16, 0x03	; 3
     aba:	c1 2c       	mov	r12, r1
     abc:	d1 2c       	mov	r13, r1
     abe:	76 01       	movw	r14, r12
     ac0:	03 30       	cpi	r16, 0x03	; 3
     ac2:	39 f4       	brne	.+14     	; 0xad2 <RTCx::mktime(RTCx::tm*)+0x1bc>
     ac4:	20 e8       	ldi	r18, 0x80	; 128
     ac6:	c2 2e       	mov	r12, r18
     ac8:	21 e5       	ldi	r18, 0x51	; 81
     aca:	d2 2e       	mov	r13, r18
     acc:	ee 24       	eor	r14, r14
     ace:	e3 94       	inc	r14
     ad0:	f1 2c       	mov	r15, r1
     ad2:	c6 0e       	add	r12, r22
     ad4:	d7 1e       	adc	r13, r23
     ad6:	e8 1e       	adc	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	df 01       	movw	r26, r30
     adc:	20 e8       	ldi	r18, 0x80	; 128
     ade:	31 e5       	ldi	r19, 0x51	; 81
     ae0:	41 e0       	ldi	r20, 0x01	; 1
     ae2:	50 e0       	ldi	r21, 0x00	; 0
     ae4:	0e 94 93 11 	call	0x2326	; 0x2326 <__mulshisi3>
     ae8:	c6 0e       	add	r12, r22
     aea:	d7 1e       	adc	r13, r23
     aec:	e8 1e       	adc	r14, r24
     aee:	f9 1e       	adc	r15, r25
     af0:	ac 81       	ldd	r26, Y+4	; 0x04
     af2:	bd 81       	ldd	r27, Y+5	; 0x05
     af4:	20 e1       	ldi	r18, 0x10	; 16
     af6:	3e e0       	ldi	r19, 0x0E	; 14
     af8:	0e 94 81 11 	call	0x2302	; 0x2302 <__usmulhisi3>
     afc:	c6 0e       	add	r12, r22
     afe:	d7 1e       	adc	r13, r23
     b00:	e8 1e       	adc	r14, r24
     b02:	f9 1e       	adc	r15, r25
     b04:	2a 81       	ldd	r18, Y+2	; 0x02
     b06:	3b 81       	ldd	r19, Y+3	; 0x03
     b08:	4c e3       	ldi	r20, 0x3C	; 60
     b0a:	42 9f       	mul	r20, r18
     b0c:	c0 01       	movw	r24, r0
     b0e:	43 9f       	mul	r20, r19
     b10:	90 0d       	add	r25, r0
     b12:	11 24       	eor	r1, r1
     b14:	c8 0e       	add	r12, r24
     b16:	d9 1e       	adc	r13, r25
     b18:	e1 1c       	adc	r14, r1
     b1a:	f1 1c       	adc	r15, r1
     b1c:	88 81       	ld	r24, Y
     b1e:	99 81       	ldd	r25, Y+1	; 0x01
     b20:	09 2e       	mov	r0, r25
     b22:	00 0c       	add	r0, r0
     b24:	aa 0b       	sbc	r26, r26
     b26:	bb 0b       	sbc	r27, r27
     b28:	c8 0e       	add	r12, r24
     b2a:	d9 1e       	adc	r13, r25
     b2c:	ea 1e       	adc	r14, r26
     b2e:	fb 1e       	adc	r15, r27
     b30:	c7 01       	movw	r24, r14
     b32:	b6 01       	movw	r22, r12
     b34:	20 e8       	ldi	r18, 0x80	; 128
     b36:	31 e5       	ldi	r19, 0x51	; 81
     b38:	41 e0       	ldi	r20, 0x01	; 1
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__divmodsi4>
     b40:	ca 01       	movw	r24, r20
     b42:	b9 01       	movw	r22, r18
     b44:	6c 5f       	subi	r22, 0xFC	; 252
     b46:	7f 4f       	sbci	r23, 0xFF	; 255
     b48:	8f 4f       	sbci	r24, 0xFF	; 255
     b4a:	9f 4f       	sbci	r25, 0xFF	; 255
     b4c:	27 e0       	ldi	r18, 0x07	; 7
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	50 e0       	ldi	r21, 0x00	; 0
     b54:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
     b58:	7d 87       	std	Y+13, r23	; 0x0d
     b5a:	6c 87       	std	Y+12, r22	; 0x0c
     b5c:	c7 01       	movw	r24, r14
     b5e:	b6 01       	movw	r22, r12
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	7f 90       	pop	r7
     b7a:	08 95       	ret

00000b7c <RTCx::bcdToDec(unsigned char)>:
_ZN4RTCx8bcdToDecEh():
     b7c:	98 2f       	mov	r25, r24
     b7e:	92 95       	swap	r25
     b80:	9f 70       	andi	r25, 0x0F	; 15
     b82:	8f 70       	andi	r24, 0x0F	; 15
     b84:	2a e0       	ldi	r18, 0x0A	; 10
     b86:	92 9f       	mul	r25, r18
     b88:	80 0d       	add	r24, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	08 95       	ret

00000b8e <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const>:
_ZNK4RTCx11getRegisterENS_10timeFunc_tERh():
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	6e 97       	sbiw	r28, 0x1e	; 30
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	9c 01       	movw	r18, r24
     ba4:	8f e0       	ldi	r24, 0x0F	; 15
     ba6:	e6 e1       	ldi	r30, 0x16	; 22
     ba8:	f1 e0       	ldi	r31, 0x01	; 1
     baa:	de 01       	movw	r26, r28
     bac:	50 96       	adiw	r26, 0x10	; 16
     bae:	01 90       	ld	r0, Z+
     bb0:	0d 92       	st	X+, r0
     bb2:	8a 95       	dec	r24
     bb4:	e1 f7       	brne	.-8      	; 0xbae <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const+0x20>
     bb6:	8f e0       	ldi	r24, 0x0F	; 15
     bb8:	e5 e2       	ldi	r30, 0x25	; 37
     bba:	f1 e0       	ldi	r31, 0x01	; 1
     bbc:	de 01       	movw	r26, r28
     bbe:	11 96       	adiw	r26, 0x01	; 1
     bc0:	01 90       	ld	r0, Z+
     bc2:	0d 92       	st	X+, r0
     bc4:	8a 95       	dec	r24
     bc6:	e1 f7       	brne	.-8      	; 0xbc0 <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const+0x32>
     bc8:	f9 01       	movw	r30, r18
     bca:	a1 81       	ldd	r26, Z+1	; 0x01
     bcc:	b2 81       	ldd	r27, Z+2	; 0x02
     bce:	95 e0       	ldi	r25, 0x05	; 5
     bd0:	9a 9f       	mul	r25, r26
     bd2:	f0 01       	movw	r30, r0
     bd4:	9b 9f       	mul	r25, r27
     bd6:	f0 0d       	add	r31, r0
     bd8:	11 24       	eor	r1, r1
     bda:	a1 e0       	ldi	r26, 0x01	; 1
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ac 0f       	add	r26, r28
     be0:	bd 1f       	adc	r27, r29
     be2:	ea 0f       	add	r30, r26
     be4:	fb 1f       	adc	r31, r27
     be6:	e6 0f       	add	r30, r22
     be8:	f7 1f       	adc	r31, r23
     bea:	80 81       	ld	r24, Z
     bec:	fa 01       	movw	r30, r20
     bee:	80 83       	st	Z, r24
     bf0:	d9 01       	movw	r26, r18
     bf2:	11 96       	adiw	r26, 0x01	; 1
     bf4:	2d 91       	ld	r18, X+
     bf6:	3c 91       	ld	r19, X
     bf8:	92 9f       	mul	r25, r18
     bfa:	f0 01       	movw	r30, r0
     bfc:	93 9f       	mul	r25, r19
     bfe:	f0 0d       	add	r31, r0
     c00:	11 24       	eor	r1, r1
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	8c 0f       	add	r24, r28
     c08:	9d 1f       	adc	r25, r29
     c0a:	e8 0f       	add	r30, r24
     c0c:	f9 1f       	adc	r31, r25
     c0e:	e6 0f       	add	r30, r22
     c10:	f7 1f       	adc	r31, r23
     c12:	87 85       	ldd	r24, Z+15	; 0x0f
     c14:	6e 96       	adiw	r28, 0x1e	; 30
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <_GLOBAL__sub_I__ZN4RTCx8epochDowE>:
_ZN4RTCxC4Ev():
     c26:	e8 ec       	ldi	r30, 0xC8	; 200
     c28:	f1 e0       	ldi	r31, 0x01	; 1
     c2a:	88 e6       	ldi	r24, 0x68	; 104
     c2c:	80 83       	st	Z, r24
     c2e:	12 82       	std	Z+2, r1	; 0x02
     c30:	11 82       	std	Z+1, r1	; 0x01
_GLOBAL__sub_I__ZN4RTCx8epochDowE():
     c32:	08 95       	ret

00000c34 <RTCx::writeData(unsigned char, unsigned char) const>:
_ZNK4RTCx9writeDataEhh():
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	d6 2f       	mov	r29, r22
     c3a:	c4 2f       	mov	r28, r20
     c3c:	fc 01       	movw	r30, r24
     c3e:	60 81       	ld	r22, Z
     c40:	8b ec       	ldi	r24, 0xCB	; 203
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 aa 08 	call	0x1154	; 0x1154 <TwoWire::beginTransmission(unsigned char)>
     c48:	6d 2f       	mov	r22, r29
     c4a:	8b ec       	ldi	r24, 0xCB	; 203
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
     c52:	6c 2f       	mov	r22, r28
     c54:	8b ec       	ldi	r24, 0xCB	; 203
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
     c5c:	8b ec       	ldi	r24, 0xCB	; 203
     c5e:	91 e0       	ldi	r25, 0x01	; 1
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	0c 94 2f 09 	jmp	0x125e	; 0x125e <TwoWire::endTransmission()>

00000c68 <RTCx::resetClock() const>:
_ZNK4RTCx10resetClockEv():
     c68:	fc 01       	movw	r30, r24
     c6a:	21 81       	ldd	r18, Z+1	; 0x01
     c6c:	32 81       	ldd	r19, Z+2	; 0x02
     c6e:	22 30       	cpi	r18, 0x02	; 2
     c70:	31 05       	cpc	r19, r1
     c72:	31 f4       	brne	.+12     	; 0xc80 <RTCx::resetClock() const+0x18>
     c74:	4c e2       	ldi	r20, 0x2C	; 44
     c76:	6f e2       	ldi	r22, 0x2F	; 47
     c78:	0e 94 1a 06 	call	0xc34	; 0xc34 <RTCx::writeData(unsigned char, unsigned char) const>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	08 95       	ret
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	08 95       	ret

00000c84 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)>:
_ZN4RTCx9autoprobeEPKNS_8device_tEPKhh():
     c84:	8f 92       	push	r8
     c86:	9f 92       	push	r9
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	4c 01       	movw	r8, r24
     c9e:	7b 01       	movw	r14, r22
     ca0:	8a 01       	movw	r16, r20
     ca2:	c2 2e       	mov	r12, r18
     ca4:	d1 2c       	mov	r13, r1
     ca6:	d0 e0       	ldi	r29, 0x00	; 0
     ca8:	c0 e0       	ldi	r28, 0x00	; 0
     caa:	cc 15       	cp	r28, r12
     cac:	dd 05       	cpc	r29, r13
     cae:	e9 f1       	breq	.+122    	; 0xd2a <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0xa6>
     cb0:	58 01       	movw	r10, r16
     cb2:	f8 01       	movw	r30, r16
     cb4:	60 81       	ld	r22, Z
     cb6:	8b ec       	ldi	r24, 0xCB	; 203
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 aa 08 	call	0x1154	; 0x1154 <TwoWire::beginTransmission(unsigned char)>
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	8b ec       	ldi	r24, 0xCB	; 203
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
     cc8:	8b ec       	ldi	r24, 0xCB	; 203
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
     cd0:	41 e0       	ldi	r20, 0x01	; 1
     cd2:	f8 01       	movw	r30, r16
     cd4:	61 91       	ld	r22, Z+
     cd6:	8f 01       	movw	r16, r30
     cd8:	8b ec       	ldi	r24, 0xCB	; 203
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 2c 09 	call	0x1258	; 0x1258 <TwoWire::requestFrom(unsigned char, unsigned char)>
     ce0:	8b ec       	ldi	r24, 0xCB	; 203
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 20 08 	call	0x1040	; 0x1040 <TwoWire::available()>
     ce8:	9e 01       	movw	r18, r28
     cea:	2f 5f       	subi	r18, 0xFF	; 255
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	89 2b       	or	r24, r25
     cf0:	d1 f0       	breq	.+52     	; 0xd26 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0xa2>
     cf2:	cc 0f       	add	r28, r28
     cf4:	dd 1f       	adc	r29, r29
     cf6:	ce 0d       	add	r28, r14
     cf8:	df 1d       	adc	r29, r15
     cfa:	88 81       	ld	r24, Y
     cfc:	99 81       	ldd	r25, Y+1	; 0x01
     cfe:	f5 01       	movw	r30, r10
     d00:	20 81       	ld	r18, Z
     d02:	f4 01       	movw	r30, r8
     d04:	20 83       	st	Z, r18
     d06:	92 83       	std	Z+2, r25	; 0x02
     d08:	81 83       	std	Z+1, r24	; 0x01
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	1f 91       	pop	r17
     d12:	0f 91       	pop	r16
     d14:	ff 90       	pop	r15
     d16:	ef 90       	pop	r14
     d18:	df 90       	pop	r13
     d1a:	cf 90       	pop	r12
     d1c:	bf 90       	pop	r11
     d1e:	af 90       	pop	r10
     d20:	9f 90       	pop	r9
     d22:	8f 90       	pop	r8
     d24:	08 95       	ret
     d26:	e9 01       	movw	r28, r18
     d28:	c0 cf       	rjmp	.-128    	; 0xcaa <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0x26>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	ef cf       	rjmp	.-34     	; 0xd0c <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0x88>

00000d2e <RTCx::readData(unsigned char) const>:
_ZNK4RTCx8readDataEh():
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	ec 01       	movw	r28, r24
     d36:	16 2f       	mov	r17, r22
     d38:	68 81       	ld	r22, Y
     d3a:	8b ec       	ldi	r24, 0xCB	; 203
     d3c:	91 e0       	ldi	r25, 0x01	; 1
     d3e:	0e 94 aa 08 	call	0x1154	; 0x1154 <TwoWire::beginTransmission(unsigned char)>
     d42:	61 2f       	mov	r22, r17
     d44:	8b ec       	ldi	r24, 0xCB	; 203
     d46:	91 e0       	ldi	r25, 0x01	; 1
     d48:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
     d4c:	8b ec       	ldi	r24, 0xCB	; 203
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
     d54:	41 e0       	ldi	r20, 0x01	; 1
     d56:	68 81       	ld	r22, Y
     d58:	8b ec       	ldi	r24, 0xCB	; 203
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	0e 94 2c 09 	call	0x1258	; 0x1258 <TwoWire::requestFrom(unsigned char, unsigned char)>
     d60:	8b ec       	ldi	r24, 0xCB	; 203
     d62:	91 e0       	ldi	r25, 0x01	; 1
     d64:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     d68:	c8 2f       	mov	r28, r24
     d6a:	8b ec       	ldi	r24, 0xCB	; 203
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
     d72:	8c 2f       	mov	r24, r28
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	08 95       	ret

00000d7c <RTCx::readTimeSaver(RTCx::tm*, unsigned char, unsigned char) const>:
_ZNK4RTCx13readTimeSaverEPNS_2tmEhh():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:770
	//return pgm_read_byte((regTable[device][func]));
}


bool RTCx::readTimeSaver(struct tm *tm, uint8_t reg, uint8_t sz) const
{
     d7c:	ef 92       	push	r14
     d7e:	ff 92       	push	r15
     d80:	0f 93       	push	r16
     d82:	1f 93       	push	r17
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
     d88:	8c 01       	movw	r16, r24
     d8a:	eb 01       	movw	r28, r22
     d8c:	e4 2e       	mov	r14, r20
     d8e:	f2 2e       	mov	r15, r18
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:772
	// Reset the register pointer
	Wire.beginTransmission(address);
     d90:	fc 01       	movw	r30, r24
     d92:	60 81       	ld	r22, Z
     d94:	8b ec       	ldi	r24, 0xCB	; 203
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 aa 08 	call	0x1154	; 0x1154 <TwoWire::beginTransmission(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:773
	Wire.write(reg);
     d9c:	6e 2d       	mov	r22, r14
     d9e:	8b ec       	ldi	r24, 0xCB	; 203
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:774
	Wire.endTransmission();
     da6:	8b ec       	ldi	r24, 0xCB	; 203
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:776

	Wire.requestFrom(address, sz);
     dae:	4f 2d       	mov	r20, r15
     db0:	f8 01       	movw	r30, r16
     db2:	60 81       	ld	r22, Z
     db4:	8b ec       	ldi	r24, 0xCB	; 203
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 2c 09 	call	0x1258	; 0x1258 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:777
	tm->tm_sec = 0;
     dbc:	19 82       	std	Y+1, r1	; 0x01
     dbe:	18 82       	st	Y, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:778
	tm->tm_min = bcdToDec(Wire.read() & 0x7f);
     dc0:	8b ec       	ldi	r24, 0xCB	; 203
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     dc8:	8f 77       	andi	r24, 0x7F	; 127
     dca:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	9b 83       	std	Y+3, r25	; 0x03
     dd2:	8a 83       	std	Y+2, r24	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:779
	tm->tm_hour = bcdToDec(Wire.read() & 0x3f);
     dd4:	8b ec       	ldi	r24, 0xCB	; 203
     dd6:	91 e0       	ldi	r25, 0x01	; 1
     dd8:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     ddc:	8f 73       	andi	r24, 0x3F	; 63
     dde:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9d 83       	std	Y+5, r25	; 0x05
     de6:	8c 83       	std	Y+4, r24	; 0x04
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:780
	tm->tm_wday = 0;
     de8:	1d 86       	std	Y+13, r1	; 0x0d
     dea:	1c 86       	std	Y+12, r1	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:781
	tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
     dec:	8b ec       	ldi	r24, 0xCB	; 203
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     df4:	8f 73       	andi	r24, 0x3F	; 63
     df6:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9f 83       	std	Y+7, r25	; 0x07
     dfe:	8e 83       	std	Y+6, r24	; 0x06
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:782
	uint8_t wdayMonth = Wire.read();
     e00:	8b ec       	ldi	r24, 0xCB	; 203
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     e08:	8c 01       	movw	r16, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:783
	tm->tm_mon = bcdToDec(wdayMonth & 0x1f) - 1; // Clock uses [1..12]
     e0a:	8f 71       	andi	r24, 0x1F	; 31
     e0c:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     e10:	81 50       	subi	r24, 0x01	; 1
     e12:	99 0b       	sbc	r25, r25
     e14:	99 87       	std	Y+9, r25	; 0x09
     e16:	88 87       	std	Y+8, r24	; 0x08
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:784
	tm->tm_wday = (wdayMonth >> 5) - 1; // Clock uses [1..7]
     e18:	85 e0       	ldi	r24, 0x05	; 5
     e1a:	15 95       	asr	r17
     e1c:	07 95       	ror	r16
     e1e:	8a 95       	dec	r24
     e20:	e1 f7       	brne	.-8      	; 0xe1a <RTCx::readTimeSaver(RTCx::tm*, unsigned char, unsigned char) const+0x9e>
     e22:	07 70       	andi	r16, 0x07	; 7
     e24:	11 27       	eor	r17, r17
     e26:	01 50       	subi	r16, 0x01	; 1
     e28:	11 09       	sbc	r17, r1
     e2a:	1d 87       	std	Y+13, r17	; 0x0d
     e2c:	0c 87       	std	Y+12, r16	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:785
	tm->tm_year = (RTCX_EPOCH - 1900); // not stored
     e2e:	86 e4       	ldi	r24, 0x46	; 70
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9b 87       	std	Y+11, r25	; 0x0b
     e34:	8a 87       	std	Y+10, r24	; 0x0a
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:786
	tm->tm_yday = -1;
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	9f 87       	std	Y+15, r25	; 0x0f
     e3c:	8e 87       	std	Y+14, r24	; 0x0e
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:787
	Wire.endTransmission();
     e3e:	8b ec       	ldi	r24, 0xCB	; 203
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:789
	return true;
}
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	08 95       	ret

00000e56 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const>:
_ZNK4RTCx9readClockEPNS_2tmENS_10timeFunc_tE():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:391
/* Read a time from the clock. The same function is also used to read
 * the alarms as the register layout is essentially identical but with
 * week day and year omitted.
 */
bool RTCx::readClock(struct tm *tm, timeFunc_t func) const
{
     e56:	5f 92       	push	r5
     e58:	6f 92       	push	r6
     e5a:	7f 92       	push	r7
     e5c:	8f 92       	push	r8
     e5e:	9f 92       	push	r9
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	1f 92       	push	r1
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	7c 01       	movw	r14, r24
     e7c:	8b 01       	movw	r16, r22
     e7e:	6a 01       	movw	r12, r20
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:393
	// Find which register to read from
	uint8_t sz = 0;
     e80:	19 82       	std	Y+1, r1	; 0x01
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:394
	uint8_t reg = getRegister(func, sz);
     e82:	ae 01       	movw	r20, r28
     e84:	4f 5f       	subi	r20, 0xFF	; 255
     e86:	5f 4f       	sbci	r21, 0xFF	; 255
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const>
     e8e:	58 2e       	mov	r5, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:396

	if (sz == 0)
     e90:	29 81       	ldd	r18, Y+1	; 0x01
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:397
		return false; // not supported
     e92:	80 e0       	ldi	r24, 0x00	; 0
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:396
{
	// Find which register to read from
	uint8_t sz = 0;
	uint8_t reg = getRegister(func, sz);

	if (sz == 0)
     e94:	22 23       	and	r18, r18
     e96:	71 f0       	breq	.+28     	; 0xeb4 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x5e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:399
		return false; // not supported

	if (device == MCP7941x &&
     e98:	f7 01       	movw	r30, r14
     e9a:	81 81       	ldd	r24, Z+1	; 0x01
     e9c:	92 81       	ldd	r25, Z+2	; 0x02
     e9e:	01 97       	sbiw	r24, 0x01	; 1
     ea0:	d1 f4       	brne	.+52     	; 0xed6 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x80>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:400 (discriminator 1)
		(func == TIME_POWER_FAILED || func == TIME_POWER_RESTORED))
     ea2:	c6 01       	movw	r24, r12
     ea4:	03 97       	sbiw	r24, 0x03	; 3
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:399 (discriminator 1)
	uint8_t reg = getRegister(func, sz);

	if (sz == 0)
		return false; // not supported

	if (device == MCP7941x &&
     ea6:	02 97       	sbiw	r24, 0x02	; 2
     ea8:	b0 f4       	brcc	.+44     	; 0xed6 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x80>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:401
		(func == TIME_POWER_FAILED || func == TIME_POWER_RESTORED))
		return readTimeSaver(tm, reg, sz);
     eaa:	45 2d       	mov	r20, r5
     eac:	b8 01       	movw	r22, r16
     eae:	c7 01       	movw	r24, r14
     eb0:	0e 94 be 06 	call	0xd7c	; 0xd7c <RTCx::readTimeSaver(RTCx::tm*, unsigned char, unsigned char) const>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:444

		if ((func != TIME) || (tm->tm_sec == bcdToDec(readData(reg) & 0x7f)))
			break;
	}
	return true;
}
     eb4:	0f 90       	pop	r0
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	df 90       	pop	r13
     ec4:	cf 90       	pop	r12
     ec6:	bf 90       	pop	r11
     ec8:	af 90       	pop	r10
     eca:	9f 90       	pop	r9
     ecc:	8f 90       	pop	r8
     ece:	7f 90       	pop	r7
     ed0:	6f 90       	pop	r6
     ed2:	5f 90       	pop	r5
     ed4:	08 95       	ret
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:436

		tm->tm_mon = bcdToDec(Wire.read() & 0x1f) - 1; // Clock uses [1..12]
		if (sz >= 7)
			tm->tm_year = bcdToDec(Wire.read()) + 100; // Assume 21st century
		else
			tm->tm_year = (RTCX_EPOCH - 1900);
     ed6:	86 e4       	ldi	r24, 0x46	; 70
     ed8:	88 2e       	mov	r8, r24
     eda:	91 2c       	mov	r9, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:437
		tm->tm_yday = -1;
     edc:	66 24       	eor	r6, r6
     ede:	6a 94       	dec	r6
     ee0:	76 2c       	mov	r7, r6
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:405
		(func == TIME_POWER_FAILED || func == TIME_POWER_RESTORED))
		return readTimeSaver(tm, reg, sz);

	while (true) {
		// Reset the register pointer
		Wire.beginTransmission(address);
     ee2:	f7 01       	movw	r30, r14
     ee4:	60 81       	ld	r22, Z
     ee6:	8b ec       	ldi	r24, 0xCB	; 203
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 aa 08 	call	0x1154	; 0x1154 <TwoWire::beginTransmission(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:406
		Wire.write(reg);
     eee:	65 2d       	mov	r22, r5
     ef0:	8b ec       	ldi	r24, 0xCB	; 203
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	0e 94 4a 08 	call	0x1094	; 0x1094 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:407
		Wire.endTransmission();
     ef8:	8b ec       	ldi	r24, 0xCB	; 203
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:409

		Wire.requestFrom(address, sz);
     f00:	49 81       	ldd	r20, Y+1	; 0x01
     f02:	f7 01       	movw	r30, r14
     f04:	60 81       	ld	r22, Z
     f06:	8b ec       	ldi	r24, 0xCB	; 203
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	0e 94 2c 09 	call	0x1258	; 0x1258 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:410
		tm->tm_sec = bcdToDec(Wire.read() & 0x7f);
     f0e:	8b ec       	ldi	r24, 0xCB	; 203
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     f16:	8f 77       	andi	r24, 0x7F	; 127
     f18:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	f8 01       	movw	r30, r16
     f20:	91 83       	std	Z+1, r25	; 0x01
     f22:	80 83       	st	Z, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:411
		tm->tm_min = bcdToDec(Wire.read() & 0x7f);
     f24:	8b ec       	ldi	r24, 0xCB	; 203
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     f2c:	8f 77       	andi	r24, 0x7F	; 127
     f2e:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	f8 01       	movw	r30, r16
     f36:	93 83       	std	Z+3, r25	; 0x03
     f38:	82 83       	std	Z+2, r24	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:412
		uint8_t h = Wire.read();
     f3a:	8b ec       	ldi	r24, 0xCB	; 203
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     f42:	b8 2e       	mov	r11, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:413
		if (h & 0x40) {
     f44:	86 ff       	sbrs	r24, 6
     f46:	4c c0       	rjmp	.+152    	; 0xfe0 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x18a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:415
			// Twelve hour mode
			tm->tm_hour = bcdToDec(h & 0x1f);
     f48:	8f 71       	andi	r24, 0x1F	; 31
     f4a:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     f4e:	90 e0       	ldi	r25, 0x00	; 0
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:416
			if (h & 0x20)
     f50:	b5 fc       	sbrc	r11, 5
     f52:	44 c0       	rjmp	.+136    	; 0xfdc <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x186>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:420
				tm->tm_hour += 12; // Seems notation for AM/PM is user-defined
		}
		else
			tm->tm_hour = bcdToDec(h & 0x3f);
     f54:	f8 01       	movw	r30, r16
     f56:	95 83       	std	Z+5, r25	; 0x05
     f58:	84 83       	std	Z+4, r24	; 0x04
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:422

		if (device == PCF85263) {
     f5a:	f7 01       	movw	r30, r14
     f5c:	81 81       	ldd	r24, Z+1	; 0x01
     f5e:	92 81       	ldd	r25, Z+2	; 0x02
     f60:	02 97       	sbiw	r24, 0x02	; 2
     f62:	09 f0       	breq	.+2      	; 0xf66 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x110>
     f64:	42 c0       	rjmp	.+132    	; 0xfea <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x194>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:424
			// Day of month is before day of week!
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
     f66:	8b ec       	ldi	r24, 0xCB	; 203
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     f6e:	8f 73       	andi	r24, 0x3F	; 63
     f70:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	f8 01       	movw	r30, r16
     f78:	97 83       	std	Z+7, r25	; 0x07
     f7a:	86 83       	std	Z+6, r24	; 0x06
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:425
			tm->tm_wday = (Wire.read() & 0x07); // Clock uses [0..6]
     f7c:	8b ec       	ldi	r24, 0xCB	; 203
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     f84:	87 70       	andi	r24, 0x07	; 7
     f86:	99 27       	eor	r25, r25
     f88:	f8 01       	movw	r30, r16
     f8a:	95 87       	std	Z+13, r25	; 0x0d
     f8c:	84 87       	std	Z+12, r24	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:432
		else {
			tm->tm_wday = (Wire.read() & 0x07) - 1; // Clock uses [1..7]
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
		}

		tm->tm_mon = bcdToDec(Wire.read() & 0x1f) - 1; // Clock uses [1..12]
     f8e:	8b ec       	ldi	r24, 0xCB	; 203
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     f96:	8f 71       	andi	r24, 0x1F	; 31
     f98:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	99 0b       	sbc	r25, r25
     fa0:	f8 01       	movw	r30, r16
     fa2:	91 87       	std	Z+9, r25	; 0x09
     fa4:	80 87       	std	Z+8, r24	; 0x08
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:433
		if (sz >= 7)
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	87 30       	cpi	r24, 0x07	; 7
     faa:	a8 f1       	brcs	.+106    	; 0x1016 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x1c0>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:434
			tm->tm_year = bcdToDec(Wire.read()) + 100; // Assume 21st century
     fac:	8b ec       	ldi	r24, 0xCB	; 203
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     fb4:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	8c 59       	subi	r24, 0x9C	; 156
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	f8 01       	movw	r30, r16
     fc0:	93 87       	std	Z+11, r25	; 0x0b
     fc2:	82 87       	std	Z+10, r24	; 0x0a
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:437
		else
			tm->tm_year = (RTCX_EPOCH - 1900);
		tm->tm_yday = -1;
     fc4:	f8 01       	movw	r30, r16
     fc6:	77 86       	std	Z+15, r7	; 0x0f
     fc8:	66 86       	std	Z+14, r6	; 0x0e
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:438
		Wire.endTransmission();
     fca:	8b ec       	ldi	r24, 0xCB	; 203
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 2f 09 	call	0x125e	; 0x125e <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:440

		if ((func != TIME) || (tm->tm_sec == bcdToDec(readData(reg) & 0x7f)))
     fd2:	c1 14       	cp	r12, r1
     fd4:	d1 04       	cpc	r13, r1
     fd6:	11 f1       	breq	.+68     	; 0x101c <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x1c6>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:443
			break;
	}
	return true;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	6c cf       	rjmp	.-296    	; 0xeb4 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x5e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:417
		uint8_t h = Wire.read();
		if (h & 0x40) {
			// Twelve hour mode
			tm->tm_hour = bcdToDec(h & 0x1f);
			if (h & 0x20)
				tm->tm_hour += 12; // Seems notation for AM/PM is user-defined
     fdc:	0c 96       	adiw	r24, 0x0c	; 12
     fde:	ba cf       	rjmp	.-140    	; 0xf54 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0xfe>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:420
		}
		else
			tm->tm_hour = bcdToDec(h & 0x3f);
     fe0:	8f 73       	andi	r24, 0x3F	; 63
     fe2:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	b5 cf       	rjmp	.-150    	; 0xf54 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0xfe>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:428
			// Day of month is before day of week!
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
			tm->tm_wday = (Wire.read() & 0x07); // Clock uses [0..6]
		}
		else {
			tm->tm_wday = (Wire.read() & 0x07) - 1; // Clock uses [1..7]
     fea:	8b ec       	ldi	r24, 0xCB	; 203
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
     ff2:	87 70       	andi	r24, 0x07	; 7
     ff4:	99 27       	eor	r25, r25
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f8 01       	movw	r30, r16
     ffa:	95 87       	std	Z+13, r25	; 0x0d
     ffc:	84 87       	std	Z+12, r24	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:429
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
     ffe:	8b ec       	ldi	r24, 0xCB	; 203
    1000:	91 e0       	ldi	r25, 0x01	; 1
    1002:	0e 94 27 08 	call	0x104e	; 0x104e <TwoWire::read()>
    1006:	8f 73       	andi	r24, 0x3F	; 63
    1008:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	f8 01       	movw	r30, r16
    1010:	97 83       	std	Z+7, r25	; 0x07
    1012:	86 83       	std	Z+6, r24	; 0x06
    1014:	bc cf       	rjmp	.-136    	; 0xf8e <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x138>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:436

		tm->tm_mon = bcdToDec(Wire.read() & 0x1f) - 1; // Clock uses [1..12]
		if (sz >= 7)
			tm->tm_year = bcdToDec(Wire.read()) + 100; // Assume 21st century
		else
			tm->tm_year = (RTCX_EPOCH - 1900);
    1016:	93 86       	std	Z+11, r9	; 0x0b
    1018:	82 86       	std	Z+10, r8	; 0x0a
    101a:	d4 cf       	rjmp	.-88     	; 0xfc4 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x16e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS512/src/RTCx/RTCx.cpp:440 (discriminator 2)
		tm->tm_yday = -1;
		Wire.endTransmission();

		if ((func != TIME) || (tm->tm_sec == bcdToDec(readData(reg) & 0x7f)))
    101c:	f8 01       	movw	r30, r16
    101e:	a0 80       	ld	r10, Z
    1020:	b1 80       	ldd	r11, Z+1	; 0x01
    1022:	65 2d       	mov	r22, r5
    1024:	c7 01       	movw	r24, r14
    1026:	0e 94 97 06 	call	0xd2e	; 0xd2e <RTCx::readData(unsigned char) const>
    102a:	8f 77       	andi	r24, 0x7F	; 127
    102c:	0e 94 be 05 	call	0xb7c	; 0xb7c <RTCx::bcdToDec(unsigned char)>
    1030:	8a 15       	cp	r24, r10
    1032:	1b 04       	cpc	r1, r11
    1034:	09 f0       	breq	.+2      	; 0x1038 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x1e2>
    1036:	55 cf       	rjmp	.-342    	; 0xee2 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x8c>
    1038:	cf cf       	rjmp	.-98     	; 0xfd8 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x182>

0000103a <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:378

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret

00001040 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    1040:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TwoWire::rxBufferLength>
    1044:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <TwoWire::rxBufferIndex>
    1048:	89 1b       	sub	r24, r25
    104a:	99 0b       	sbc	r25, r25
    104c:	08 95       	ret

0000104e <TwoWire::read()>:
_ZN7TwoWire4readEv():
    104e:	90 91 fc 01 	lds	r25, 0x01FC	; 0x8001fc <TwoWire::rxBufferIndex>
    1052:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TwoWire::rxBufferLength>
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	3f ef       	ldi	r19, 0xFF	; 255
    105a:	98 17       	cp	r25, r24
    105c:	48 f4       	brcc	.+18     	; 0x1070 <TwoWire::read()+0x22>
    105e:	e9 2f       	mov	r30, r25
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	e3 50       	subi	r30, 0x03	; 3
    1064:	fe 4f       	sbci	r31, 0xFE	; 254
    1066:	20 81       	ld	r18, Z
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	9f 5f       	subi	r25, 0xFF	; 255
    106c:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <TwoWire::rxBufferIndex>
    1070:	c9 01       	movw	r24, r18
    1072:	08 95       	ret

00001074 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1074:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <TwoWire::rxBufferIndex>
    1078:	80 91 fb 01 	lds	r24, 0x01FB	; 0x8001fb <TwoWire::rxBufferLength>
    107c:	e8 17       	cp	r30, r24
    107e:	30 f4       	brcc	.+12     	; 0x108c <TwoWire::peek()+0x18>
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	e3 50       	subi	r30, 0x03	; 3
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	80 81       	ld	r24, Z
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	08 95       	ret
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	9f ef       	ldi	r25, 0xFF	; 255
    1090:	08 95       	ret

00001092 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1092:	08 95       	ret

00001094 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	1f 92       	push	r1
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	69 83       	std	Y+1, r22	; 0x01
    10a0:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <TwoWire::transmitting>
    10a4:	22 23       	and	r18, r18
    10a6:	f9 f0       	breq	.+62     	; 0x10e6 <TwoWire::write(unsigned char)+0x52>
    10a8:	20 91 d8 01 	lds	r18, 0x01D8	; 0x8001d8 <TwoWire::txBufferLength>
    10ac:	20 32       	cpi	r18, 0x20	; 32
    10ae:	58 f0       	brcs	.+22     	; 0x10c6 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	fc 01       	movw	r30, r24
    10b6:	33 83       	std	Z+3, r19	; 0x03
    10b8:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	0f 90       	pop	r0
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret
    10c6:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <TwoWire::txBufferIndex>
    10ca:	e8 2f       	mov	r30, r24
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	e6 52       	subi	r30, 0x26	; 38
    10d0:	fe 4f       	sbci	r31, 0xFE	; 254
    10d2:	99 81       	ldd	r25, Y+1	; 0x01
    10d4:	90 83       	st	Z, r25
    10d6:	8f 5f       	subi	r24, 0xFF	; 255
    10d8:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <TwoWire::txBufferIndex>
    10dc:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <TwoWire::txBufferLength>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	ec cf       	rjmp	.-40     	; 0x10be <TwoWire::write(unsigned char)+0x2a>
    10e6:	61 e0       	ldi	r22, 0x01	; 1
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	0e 94 e6 09 	call	0x13cc	; 0x13cc <twi_transmit>
    10f0:	f7 cf       	rjmp	.-18     	; 0x10e0 <TwoWire::write(unsigned char)+0x4c>

000010f2 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	0f 93       	push	r16
    10fc:	1f 93       	push	r17
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	7c 01       	movw	r14, r24
    1104:	cb 01       	movw	r24, r22
    1106:	8a 01       	movw	r16, r20
    1108:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <TwoWire::transmitting>
    110c:	22 23       	and	r18, r18
    110e:	89 f0       	breq	.+34     	; 0x1132 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1110:	eb 01       	movw	r28, r22
    1112:	6b 01       	movw	r12, r22
    1114:	c4 0e       	add	r12, r20
    1116:	d5 1e       	adc	r13, r21
    1118:	cc 15       	cp	r28, r12
    111a:	dd 05       	cpc	r29, r13
    111c:	69 f0       	breq	.+26     	; 0x1138 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    111e:	69 91       	ld	r22, Y+
    1120:	d7 01       	movw	r26, r14
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	01 90       	ld	r0, Z+
    1128:	f0 81       	ld	r31, Z
    112a:	e0 2d       	mov	r30, r0
    112c:	c7 01       	movw	r24, r14
    112e:	09 95       	icall
    1130:	f3 cf       	rjmp	.-26     	; 0x1118 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1132:	64 2f       	mov	r22, r20
    1134:	0e 94 e6 09 	call	0x13cc	; 0x13cc <twi_transmit>
    1138:	c8 01       	movw	r24, r16
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	08 95       	ret

0000114c <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    114c:	cb 01       	movw	r24, r22
    114e:	ba 01       	movw	r22, r20
    1150:	0c 94 43 09 	jmp	0x1286	; 0x1286 <twi_setFrequency>

00001154 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <TwoWire::transmitting>
    115a:	60 93 fa 01 	sts	0x01FA, r22	; 0x8001fa <TwoWire::txAddress>
    115e:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <TwoWire::txBufferIndex>
    1162:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <TwoWire::txBufferLength>
    1166:	08 95       	ret

00001168 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    1168:	0c 94 aa 08 	jmp	0x1154	; 0x1154 <TwoWire::beginTransmission(unsigned char)>

0000116c <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    116c:	0f 93       	push	r16
    116e:	06 2f       	mov	r16, r22
    1170:	21 e0       	ldi	r18, 0x01	; 1
    1172:	40 91 d8 01 	lds	r20, 0x01D8	; 0x8001d8 <TwoWire::txBufferLength>
    1176:	6a ed       	ldi	r22, 0xDA	; 218
    1178:	71 e0       	ldi	r23, 0x01	; 1
    117a:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <TwoWire::txAddress>
    117e:	0e 94 96 09 	call	0x132c	; 0x132c <twi_writeTo>
    1182:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <TwoWire::txBufferIndex>
    1186:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <TwoWire::txBufferLength>
    118a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <TwoWire::transmitting>
    118e:	0f 91       	pop	r16
    1190:	08 95       	ret

00001192 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    1192:	4f 92       	push	r4
    1194:	5f 92       	push	r5
    1196:	6f 92       	push	r6
    1198:	7f 92       	push	r7
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	5c 01       	movw	r10, r24
    11ae:	f6 2e       	mov	r15, r22
    11b0:	d4 2f       	mov	r29, r20
    11b2:	28 01       	movw	r4, r16
    11b4:	39 01       	movw	r6, r18
    11b6:	ee 20       	and	r14, r14
    11b8:	19 f1       	breq	.+70     	; 0x1200 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    11ba:	0e 94 aa 08 	call	0x1154	; 0x1154 <TwoWire::beginTransmission(unsigned char)>
    11be:	ce 2d       	mov	r28, r14
    11c0:	c4 30       	cpi	r28, 0x04	; 4
    11c2:	08 f0       	brcs	.+2      	; 0x11c6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    11c4:	c3 e0       	ldi	r28, 0x03	; 3
    11c6:	c1 50       	subi	r28, 0x01	; 1
    11c8:	b8 f0       	brcs	.+46     	; 0x11f8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    11ca:	28 e0       	ldi	r18, 0x08	; 8
    11cc:	c2 9f       	mul	r28, r18
    11ce:	c0 01       	movw	r24, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	a3 01       	movw	r20, r6
    11d4:	92 01       	movw	r18, r4
    11d6:	04 c0       	rjmp	.+8      	; 0x11e0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    11d8:	56 95       	lsr	r21
    11da:	47 95       	ror	r20
    11dc:	37 95       	ror	r19
    11de:	27 95       	ror	r18
    11e0:	8a 95       	dec	r24
    11e2:	d2 f7       	brpl	.-12     	; 0x11d8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    11e4:	b9 01       	movw	r22, r18
    11e6:	d5 01       	movw	r26, r10
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	01 90       	ld	r0, Z+
    11ee:	f0 81       	ld	r31, Z
    11f0:	e0 2d       	mov	r30, r0
    11f2:	c5 01       	movw	r24, r10
    11f4:	09 95       	icall
    11f6:	e7 cf       	rjmp	.-50     	; 0x11c6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	c5 01       	movw	r24, r10
    11fc:	0e 94 b6 08 	call	0x116c	; 0x116c <TwoWire::endTransmission(unsigned char)>
    1200:	4d 2f       	mov	r20, r29
    1202:	d1 32       	cpi	r29, 0x21	; 33
    1204:	08 f0       	brcs	.+2      	; 0x1208 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1206:	40 e2       	ldi	r20, 0x20	; 32
    1208:	2c 2d       	mov	r18, r12
    120a:	6d ef       	ldi	r22, 0xFD	; 253
    120c:	71 e0       	ldi	r23, 0x01	; 1
    120e:	8f 2d       	mov	r24, r15
    1210:	0e 94 56 09 	call	0x12ac	; 0x12ac <twi_readFrom>
    1214:	10 92 fc 01 	sts	0x01FC, r1	; 0x8001fc <TwoWire::rxBufferIndex>
    1218:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <TwoWire::rxBufferLength>
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	7f 90       	pop	r7
    1230:	6f 90       	pop	r6
    1232:	5f 90       	pop	r5
    1234:	4f 90       	pop	r4
    1236:	08 95       	ret

00001238 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1238:	cf 92       	push	r12
    123a:	ef 92       	push	r14
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	c2 2e       	mov	r12, r18
    1242:	e1 2c       	mov	r14, r1
    1244:	00 e0       	ldi	r16, 0x00	; 0
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	98 01       	movw	r18, r16
    124a:	0e 94 c9 08 	call	0x1192	; 0x1192 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	ef 90       	pop	r14
    1254:	cf 90       	pop	r12
    1256:	08 95       	ret

00001258 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    1258:	21 e0       	ldi	r18, 0x01	; 1
    125a:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

0000125e <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	0c 94 b6 08 	jmp	0x116c	; 0x116c <TwoWire::endTransmission(unsigned char)>

00001264 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1264:	eb ec       	ldi	r30, 0xCB	; 203
    1266:	f1 e0       	ldi	r31, 0x01	; 1
    1268:	13 82       	std	Z+3, r1	; 0x03
    126a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    126c:	88 ee       	ldi	r24, 0xE8	; 232
    126e:	93 e0       	ldi	r25, 0x03	; 3
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	84 83       	std	Z+4, r24	; 0x04
    1276:	95 83       	std	Z+5, r25	; 0x05
    1278:	a6 83       	std	Z+6, r26	; 0x06
    127a:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:53
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    127c:	8c e7       	ldi	r24, 0x7C	; 124
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	91 83       	std	Z+1, r25	; 0x01
    1282:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:382
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1284:	08 95       	ret

00001286 <twi_setFrequency>:
twi_setFrequency():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:531
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    1286:	9b 01       	movw	r18, r22
    1288:	ac 01       	movw	r20, r24
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	72 e1       	ldi	r23, 0x12	; 18
    128e:	8a e7       	ldi	r24, 0x7A	; 122
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1296:	20 51       	subi	r18, 0x10	; 16
    1298:	31 09       	sbc	r19, r1
    129a:	41 09       	sbc	r20, r1
    129c:	51 09       	sbc	r21, r1
    129e:	56 95       	lsr	r21
    12a0:	47 95       	ror	r20
    12a2:	37 95       	ror	r19
    12a4:	27 95       	ror	r18
    12a6:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    12aa:	08 95       	ret

000012ac <twi_readFrom>:
twi_readFrom():
    12ac:	41 32       	cpi	r20, 0x21	; 33
    12ae:	e0 f5       	brcc	.+120    	; 0x1328 <twi_readFrom+0x7c>
    12b0:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <twi_state>
    12b4:	91 11       	cpse	r25, r1
    12b6:	fc cf       	rjmp	.-8      	; 0x12b0 <twi_readFrom+0x4>
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <twi_state>
    12be:	20 93 6a 02 	sts	0x026A, r18	; 0x80026a <twi_sendStop>
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	20 93 1d 02 	sts	0x021D, r18	; 0x80021d <twi_error>
    12c8:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <twi_masterBuffer+0x1>
    12cc:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <twi_masterBuffer>
    12d0:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_masterBufferIndex>
    12d4:	24 0f       	add	r18, r20
    12d6:	20 93 61 02 	sts	0x0261, r18	; 0x800261 <twi_masterBufferLength>
    12da:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <twi_slarw>
    12de:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <twi_slarw>
    12e2:	88 0f       	add	r24, r24
    12e4:	89 2b       	or	r24, r25
    12e6:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <twi_slarw>
    12ea:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <twi_inRepStart>
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	c9 f4       	brne	.+50     	; 0x1324 <twi_readFrom+0x78>
    12f2:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <twi_inRepStart>
    12f6:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <twi_slarw>
    12fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    12fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1302:	83 fd       	sbrc	r24, 3
    1304:	f8 cf       	rjmp	.-16     	; 0x12f6 <twi_readFrom+0x4a>
    1306:	85 ec       	ldi	r24, 0xC5	; 197
    1308:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    130c:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <twi_state>
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	e1 f3       	breq	.-8      	; 0x130c <twi_readFrom+0x60>
    1314:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <twi_masterBufferIndex>
    1318:	84 17       	cp	r24, r20
    131a:	10 f4       	brcc	.+4      	; 0x1320 <twi_readFrom+0x74>
    131c:	40 91 62 02 	lds	r20, 0x0262	; 0x800262 <twi_masterBufferIndex>
    1320:	84 2f       	mov	r24, r20
    1322:	08 95       	ret
    1324:	85 ee       	ldi	r24, 0xE5	; 229
    1326:	f0 cf       	rjmp	.-32     	; 0x1308 <twi_readFrom+0x5c>
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	fa cf       	rjmp	.-12     	; 0x1320 <twi_readFrom+0x74>

0000132c <twi_writeTo>:
twi_writeTo():
    132c:	0f 93       	push	r16
    132e:	41 32       	cpi	r20, 0x21	; 33
    1330:	08 f0       	brcs	.+2      	; 0x1334 <twi_writeTo+0x8>
    1332:	44 c0       	rjmp	.+136    	; 0x13bc <twi_writeTo+0x90>
    1334:	90 91 6c 02 	lds	r25, 0x026C	; 0x80026c <twi_state>
    1338:	91 11       	cpse	r25, r1
    133a:	fc cf       	rjmp	.-8      	; 0x1334 <twi_writeTo+0x8>
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <twi_state>
    1342:	00 93 6a 02 	sts	0x026A, r16	; 0x80026a <twi_sendStop>
    1346:	9f ef       	ldi	r25, 0xFF	; 255
    1348:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <twi_error>
    134c:	70 93 64 02 	sts	0x0264, r23	; 0x800264 <twi_masterBuffer+0x1>
    1350:	60 93 63 02 	sts	0x0263, r22	; 0x800263 <twi_masterBuffer>
    1354:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <twi_masterBufferIndex>
    1358:	40 93 61 02 	sts	0x0261, r20	; 0x800261 <twi_masterBufferLength>
    135c:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <twi_slarw>
    1360:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <twi_slarw>
    1364:	88 0f       	add	r24, r24
    1366:	89 2b       	or	r24, r25
    1368:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <twi_slarw>
    136c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <twi_inRepStart>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	11 f5       	brne	.+68     	; 0x13b8 <twi_writeTo+0x8c>
    1374:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <twi_inRepStart>
    1378:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <twi_slarw>
    137c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1380:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1384:	83 fd       	sbrc	r24, 3
    1386:	f8 cf       	rjmp	.-16     	; 0x1378 <twi_writeTo+0x4c>
    1388:	85 ec       	ldi	r24, 0xC5	; 197
    138a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    138e:	22 23       	and	r18, r18
    1390:	21 f0       	breq	.+8      	; 0x139a <twi_writeTo+0x6e>
    1392:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <twi_state>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	d1 f3       	breq	.-12     	; 0x138e <twi_writeTo+0x62>
    139a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_error>
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	79 f0       	breq	.+30     	; 0x13c0 <twi_writeTo+0x94>
    13a2:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_error>
    13a6:	80 32       	cpi	r24, 0x20	; 32
    13a8:	69 f0       	breq	.+26     	; 0x13c4 <twi_writeTo+0x98>
    13aa:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <twi_error>
    13ae:	80 33       	cpi	r24, 0x30	; 48
    13b0:	59 f0       	breq	.+22     	; 0x13c8 <twi_writeTo+0x9c>
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	0f 91       	pop	r16
    13b6:	08 95       	ret
    13b8:	85 ee       	ldi	r24, 0xE5	; 229
    13ba:	e7 cf       	rjmp	.-50     	; 0x138a <twi_writeTo+0x5e>
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	fa cf       	rjmp	.-12     	; 0x13b4 <twi_writeTo+0x88>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	f8 cf       	rjmp	.-16     	; 0x13b4 <twi_writeTo+0x88>
    13c4:	82 e0       	ldi	r24, 0x02	; 2
    13c6:	f6 cf       	rjmp	.-20     	; 0x13b4 <twi_writeTo+0x88>
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	f4 cf       	rjmp	.-24     	; 0x13b4 <twi_writeTo+0x88>

000013cc <twi_transmit>:
twi_transmit():
    13cc:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <twi_txBufferLength>
    13d0:	26 0f       	add	r18, r22
    13d2:	33 27       	eor	r19, r19
    13d4:	33 1f       	adc	r19, r19
    13d6:	21 32       	cpi	r18, 0x21	; 33
    13d8:	31 05       	cpc	r19, r1
    13da:	ec f4       	brge	.+58     	; 0x1416 <twi_transmit+0x4a>
    13dc:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <twi_state>
    13e0:	fc 01       	movw	r30, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	24 30       	cpi	r18, 0x04	; 4
    13e8:	69 f0       	breq	.+26     	; 0x1404 <twi_transmit+0x38>
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	08 95       	ret
    13ee:	a0 91 3f 02 	lds	r26, 0x023F	; 0x80023f <twi_txBufferLength>
    13f2:	21 91       	ld	r18, Z+
    13f4:	ac 01       	movw	r20, r24
    13f6:	4f 5b       	subi	r20, 0xBF	; 191
    13f8:	5d 4f       	sbci	r21, 0xFD	; 253
    13fa:	a4 0f       	add	r26, r20
    13fc:	b5 2f       	mov	r27, r21
    13fe:	b1 1d       	adc	r27, r1
    1400:	2c 93       	st	X, r18
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	86 17       	cp	r24, r22
    1406:	98 f3       	brcs	.-26     	; 0x13ee <twi_transmit+0x22>
    1408:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <twi_txBufferLength>
    140c:	68 0f       	add	r22, r24
    140e:	60 93 3f 02 	sts	0x023F, r22	; 0x80023f <twi_txBufferLength>
    1412:	80 e0       	ldi	r24, 0x00	; 0
    1414:	08 95       	ret
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	08 95       	ret

0000141a <twi_stop>:
twi_stop():
    141a:	85 ed       	ldi	r24, 0xD5	; 213
    141c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1420:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1424:	84 fd       	sbrc	r24, 4
    1426:	fc cf       	rjmp	.-8      	; 0x1420 <twi_stop+0x6>
    1428:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <twi_state>
    142c:	08 95       	ret

0000142e <twi_releaseBus>:
twi_releaseBus():
    142e:	85 ec       	ldi	r24, 0xC5	; 197
    1430:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1434:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <twi_state>
    1438:	08 95       	ret

0000143a <__vector_26>:
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:534

ISR(TWI_vect)
{
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	0b b6       	in	r0, 0x3b	; 59
    1446:	0f 92       	push	r0
    1448:	2f 93       	push	r18
    144a:	3f 93       	push	r19
    144c:	4f 93       	push	r20
    144e:	5f 93       	push	r21
    1450:	6f 93       	push	r22
    1452:	7f 93       	push	r23
    1454:	8f 93       	push	r24
    1456:	9f 93       	push	r25
    1458:	af 93       	push	r26
    145a:	bf 93       	push	r27
    145c:	ef 93       	push	r30
    145e:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    1460:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1464:	88 7f       	andi	r24, 0xF8	; 248
    1466:	80 36       	cpi	r24, 0x60	; 96
    1468:	09 f4       	brne	.+2      	; 0x146c <__vector_26+0x32>
    146a:	4e c0       	rjmp	.+156    	; 0x1508 <__vector_26+0xce>
    146c:	08 f0       	brcs	.+2      	; 0x1470 <__vector_26+0x36>
    146e:	41 c0       	rjmp	.+130    	; 0x14f2 <__vector_26+0xb8>
    1470:	88 32       	cpi	r24, 0x28	; 40
    1472:	09 f4       	brne	.+2      	; 0x1476 <__vector_26+0x3c>
    1474:	aa c0       	rjmp	.+340    	; 0x15ca <__vector_26+0x190>
    1476:	28 f5       	brcc	.+74     	; 0x14c2 <__vector_26+0x88>
    1478:	80 31       	cpi	r24, 0x10	; 16
    147a:	09 f4       	brne	.+2      	; 0x147e <__vector_26+0x44>
    147c:	9e c0       	rjmp	.+316    	; 0x15ba <__vector_26+0x180>
    147e:	c8 f4       	brcc	.+50     	; 0x14b2 <__vector_26+0x78>
    1480:	88 23       	and	r24, r24
    1482:	09 f4       	brne	.+2      	; 0x1486 <__vector_26+0x4c>
    1484:	07 c1       	rjmp	.+526    	; 0x1694 <__vector_26+0x25a>
    1486:	88 30       	cpi	r24, 0x08	; 8
    1488:	09 f4       	brne	.+2      	; 0x148c <__vector_26+0x52>
    148a:	97 c0       	rjmp	.+302    	; 0x15ba <__vector_26+0x180>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	bf 91       	pop	r27
    1492:	af 91       	pop	r26
    1494:	9f 91       	pop	r25
    1496:	8f 91       	pop	r24
    1498:	7f 91       	pop	r23
    149a:	6f 91       	pop	r22
    149c:	5f 91       	pop	r21
    149e:	4f 91       	pop	r20
    14a0:	3f 91       	pop	r19
    14a2:	2f 91       	pop	r18
    14a4:	0f 90       	pop	r0
    14a6:	0b be       	out	0x3b, r0	; 59
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	0f 90       	pop	r0
    14ae:	1f 90       	pop	r1
    14b0:	18 95       	reti
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14b2:	88 31       	cpi	r24, 0x18	; 24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <__vector_26+0x7e>
    14b6:	89 c0       	rjmp	.+274    	; 0x15ca <__vector_26+0x190>
    14b8:	80 32       	cpi	r24, 0x20	; 32
    14ba:	41 f7       	brne	.-48     	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    14bc:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_error>
    14c0:	15 c0       	rjmp	.+42     	; 0x14ec <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14c2:	80 34       	cpi	r24, 0x40	; 64
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <__vector_26+0x8e>
    14c6:	a6 c0       	rjmp	.+332    	; 0x1614 <__vector_26+0x1da>
    14c8:	48 f4       	brcc	.+18     	; 0x14dc <__vector_26+0xa2>
    14ca:	80 33       	cpi	r24, 0x30	; 48
    14cc:	b9 f3       	breq	.-18     	; 0x14bc <__vector_26+0x82>
    14ce:	88 33       	cpi	r24, 0x38	; 56
    14d0:	e9 f6       	brne	.-70     	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    14d2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <twi_error>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:575
      twi_releaseBus();
    14d6:	0e 94 17 0a 	call	0x142e	; 0x142e <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:576
      break;
    14da:	d8 cf       	rjmp	.-80     	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14dc:	80 35       	cpi	r24, 0x50	; 80
    14de:	09 f4       	brne	.+2      	; 0x14e2 <__vector_26+0xa8>
    14e0:	89 c0       	rjmp	.+274    	; 0x15f4 <__vector_26+0x1ba>
    14e2:	88 35       	cpi	r24, 0x58	; 88
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <__vector_26+0xae>
    14e6:	9e c0       	rjmp	.+316    	; 0x1624 <__vector_26+0x1ea>
    14e8:	88 34       	cpi	r24, 0x48	; 72
    14ea:	81 f6       	brne	.-96     	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    14ec:	0e 94 0d 0a 	call	0x141a	; 0x141a <twi_stop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
      break;
  }
}
    14f0:	cd cf       	rjmp	.-102    	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14f2:	88 39       	cpi	r24, 0x98	; 152
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <__vector_26+0xbe>
    14f6:	94 c0       	rjmp	.+296    	; 0x1620 <__vector_26+0x1e6>
    14f8:	38 f5       	brcc	.+78     	; 0x1548 <__vector_26+0x10e>
    14fa:	88 37       	cpi	r24, 0x78	; 120
    14fc:	29 f0       	breq	.+10     	; 0x1508 <__vector_26+0xce>
    14fe:	50 f4       	brcc	.+20     	; 0x1514 <__vector_26+0xda>
    1500:	88 36       	cpi	r24, 0x68	; 104
    1502:	11 f0       	breq	.+4      	; 0x1508 <__vector_26+0xce>
    1504:	80 37       	cpi	r24, 0x70	; 112
    1506:	11 f6       	brne	.-124    	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    150e:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <twi_rxBufferIndex>
    1512:	57 c0       	rjmp	.+174    	; 0x15c2 <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1514:	88 38       	cpi	r24, 0x88	; 136
    1516:	09 f4       	brne	.+2      	; 0x151a <__vector_26+0xe0>
    1518:	83 c0       	rjmp	.+262    	; 0x1620 <__vector_26+0x1e6>
    151a:	80 39       	cpi	r24, 0x90	; 144
    151c:	19 f0       	breq	.+6      	; 0x1524 <__vector_26+0xea>
    151e:	80 38       	cpi	r24, 0x80	; 128
    1520:	09 f0       	breq	.+2      	; 0x1524 <__vector_26+0xea>
    1522:	b4 cf       	rjmp	.-152    	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1524:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <twi_rxBufferIndex>
    1528:	80 32       	cpi	r24, 0x20	; 32
    152a:	08 f0       	brcs	.+2      	; 0x152e <__vector_26+0xf4>
    152c:	79 c0       	rjmp	.+242    	; 0x1620 <__vector_26+0x1e6>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    152e:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <twi_rxBufferIndex>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	8e 0f       	add	r24, r30
    1536:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <twi_rxBufferIndex>
    153a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	e1 5e       	subi	r30, 0xE1	; 225
    1542:	fd 4f       	sbci	r31, 0xFD	; 253
    1544:	80 83       	st	Z, r24
    1546:	3d c0       	rjmp	.+122    	; 0x15c2 <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1548:	80 3b       	cpi	r24, 0xB0	; 176
    154a:	39 f0       	breq	.+14     	; 0x155a <__vector_26+0x120>
    154c:	e0 f4       	brcc	.+56     	; 0x1586 <__vector_26+0x14c>
    154e:	80 3a       	cpi	r24, 0xA0	; 160
    1550:	09 f4       	brne	.+2      	; 0x1554 <__vector_26+0x11a>
    1552:	85 c0       	rjmp	.+266    	; 0x165e <__vector_26+0x224>
    1554:	88 3a       	cpi	r24, 0xA8	; 168
    1556:	09 f0       	breq	.+2      	; 0x155a <__vector_26+0x120>
    1558:	99 cf       	rjmp	.-206    	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    155a:	84 e0       	ldi	r24, 0x04	; 4
    155c:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1560:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <twi_txBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1564:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1568:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <twi_onSlaveTransmit>
    156c:	f0 91 68 02 	lds	r31, 0x0268	; 0x800268 <twi_onSlaveTransmit+0x1>
    1570:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1572:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <twi_txBufferLength>
    1576:	81 11       	cpse	r24, r1
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    1580:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <twi_txBuffer>
    1584:	09 c0       	rjmp	.+18     	; 0x1598 <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1586:	80 3c       	cpi	r24, 0xC0	; 192
    1588:	09 f4       	brne	.+2      	; 0x158c <__vector_26+0x152>
    158a:	82 c0       	rjmp	.+260    	; 0x1690 <__vector_26+0x256>
    158c:	88 3c       	cpi	r24, 0xC8	; 200
    158e:	09 f4       	brne	.+2      	; 0x1592 <__vector_26+0x158>
    1590:	7f c0       	rjmp	.+254    	; 0x1690 <__vector_26+0x256>
    1592:	88 3b       	cpi	r24, 0xB8	; 184
    1594:	09 f0       	breq	.+2      	; 0x1598 <__vector_26+0x15e>
    1596:	7a cf       	rjmp	.-268    	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1598:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <twi_txBufferIndex>
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	8e 0f       	add	r24, r30
    15a0:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <twi_txBufferIndex>
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	ef 5b       	subi	r30, 0xBF	; 191
    15a8:	fd 4f       	sbci	r31, 0xFD	; 253
    15aa:	80 81       	ld	r24, Z
    15ac:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    15b0:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <twi_txBufferIndex>
    15b4:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <twi_txBufferLength>
    15b8:	31 c0       	rjmp	.+98     	; 0x161c <__vector_26+0x1e2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    15ba:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <twi_slarw>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    15be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15c2:	85 ec       	ldi	r24, 0xC5	; 197
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    15c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15c8:	61 cf       	rjmp	.-318    	; 0x148c <__vector_26+0x52>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    15ca:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <twi_masterBufferIndex>
    15ce:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_masterBufferLength>
    15d2:	98 17       	cp	r25, r24
    15d4:	b8 f5       	brcc	.+110    	; 0x1644 <__vector_26+0x20a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    15d6:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <twi_masterBuffer>
    15da:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <twi_masterBuffer+0x1>
    15de:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <twi_masterBufferIndex>
    15e2:	21 e0       	ldi	r18, 0x01	; 1
    15e4:	2e 0f       	add	r18, r30
    15e6:	20 93 62 02 	sts	0x0262, r18	; 0x800262 <twi_masterBufferIndex>
    15ea:	e8 0f       	add	r30, r24
    15ec:	f9 2f       	mov	r31, r25
    15ee:	f1 1d       	adc	r31, r1
    15f0:	80 81       	ld	r24, Z
    15f2:	e5 cf       	rjmp	.-54     	; 0x15be <__vector_26+0x184>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    15f4:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <twi_masterBuffer>
    15f8:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <twi_masterBuffer+0x1>
    15fc:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <twi_masterBufferIndex>
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	8e 0f       	add	r24, r30
    1604:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_masterBufferIndex>
    1608:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    160c:	e2 0f       	add	r30, r18
    160e:	f3 2f       	mov	r31, r19
    1610:	f1 1d       	adc	r31, r1
    1612:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1614:	90 91 62 02 	lds	r25, 0x0262	; 0x800262 <twi_masterBufferIndex>
    1618:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <twi_masterBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    161c:	98 17       	cp	r25, r24
    161e:	88 f2       	brcs	.-94     	; 0x15c2 <__vector_26+0x188>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1620:	85 e8       	ldi	r24, 0x85	; 133
    1622:	d0 cf       	rjmp	.-96     	; 0x15c4 <__vector_26+0x18a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1624:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <twi_masterBuffer>
    1628:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <twi_masterBuffer+0x1>
    162c:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <twi_masterBufferIndex>
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	8e 0f       	add	r24, r30
    1634:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <twi_masterBufferIndex>
    1638:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    163c:	e2 0f       	add	r30, r18
    163e:	f3 2f       	mov	r31, r19
    1640:	f1 1d       	adc	r31, r1
    1642:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    1644:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_sendStop>
    1648:	81 11       	cpse	r24, r1
    164a:	50 cf       	rjmp	.-352    	; 0x14ec <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <twi_inRepStart>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1652:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1654:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1658:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:686
      break;
    165c:	17 cf       	rjmp	.-466    	; 0x148c <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    165e:	0e 94 17 0a 	call	0x142e	; 0x142e <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1662:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <twi_rxBufferIndex>
    1666:	80 32       	cpi	r24, 0x20	; 32
    1668:	30 f4       	brcc	.+12     	; 0x1676 <__vector_26+0x23c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    166a:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <twi_rxBufferIndex>
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	e1 5e       	subi	r30, 0xE1	; 225
    1672:	fd 4f       	sbci	r31, 0xFD	; 253
    1674:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1676:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <twi_rxBufferIndex>
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <twi_onSlaveReceive>
    1680:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <twi_onSlaveReceive+0x1>
    1684:	8f e1       	ldi	r24, 0x1F	; 31
    1686:	92 e0       	ldi	r25, 0x02	; 2
    1688:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    168a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <twi_rxBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:644
      break;
    168e:	fe ce       	rjmp	.-516    	; 0x148c <__vector_26+0x52>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1690:	85 ec       	ldi	r24, 0xC5	; 197
    1692:	e0 cf       	rjmp	.-64     	; 0x1654 <__vector_26+0x21a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    1694:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <twi_error>
    1698:	29 cf       	rjmp	.-430    	; 0x14ec <__vector_26+0xb2>

0000169a <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    169a:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    169c:	91 8d       	ldd	r25, Z+25	; 0x19
    169e:	22 8d       	ldd	r18, Z+26	; 0x1a
    16a0:	89 2f       	mov	r24, r25
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	80 5c       	subi	r24, 0xC0	; 192
    16a6:	9f 4f       	sbci	r25, 0xFF	; 255
    16a8:	82 1b       	sub	r24, r18
    16aa:	91 09       	sbc	r25, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    16ac:	8f 73       	andi	r24, 0x3F	; 63
    16ae:	99 27       	eor	r25, r25
    16b0:	08 95       	ret

000016b2 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    16b2:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    16b4:	91 8d       	ldd	r25, Z+25	; 0x19
    16b6:	82 8d       	ldd	r24, Z+26	; 0x1a
    16b8:	98 17       	cp	r25, r24
    16ba:	31 f0       	breq	.+12     	; 0x16c8 <HardwareSerial::peek()+0x16>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    16bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    16be:	e8 0f       	add	r30, r24
    16c0:	f1 1d       	adc	r31, r1
    16c2:	85 8d       	ldd	r24, Z+29	; 0x1d
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    16cc:	08 95       	ret

000016ce <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    16ce:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    16d0:	91 8d       	ldd	r25, Z+25	; 0x19
    16d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    16d4:	98 17       	cp	r25, r24
    16d6:	61 f0       	breq	.+24     	; 0x16f0 <HardwareSerial::read()+0x22>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    16d8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    16da:	ae 0f       	add	r26, r30
    16dc:	bf 2f       	mov	r27, r31
    16de:	b1 1d       	adc	r27, r1
    16e0:	5d 96       	adiw	r26, 0x1d	; 29
    16e2:	8c 91       	ld	r24, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    16e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    16e6:	9f 5f       	subi	r25, 0xFF	; 255
    16e8:	9f 73       	andi	r25, 0x3F	; 63
    16ea:	92 8f       	std	Z+26, r25	; 0x1a
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    16f4:	08 95       	ret

000016f6 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    16f6:	fc 01       	movw	r30, r24
    16f8:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    16fa:	44 8d       	ldd	r20, Z+28	; 0x1c
    16fc:	25 2f       	mov	r18, r21
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	84 2f       	mov	r24, r20
    1702:	90 e0       	ldi	r25, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1704:	82 1b       	sub	r24, r18
    1706:	93 0b       	sbc	r25, r19
    1708:	54 17       	cp	r21, r20
    170a:	10 f0       	brcs	.+4      	; 0x1710 <HardwareSerial::availableForWrite()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    170c:	cf 96       	adiw	r24, 0x3f	; 63
    170e:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    1710:	01 97       	sbiw	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    1712:	08 95       	ret

00001714 <serialEventRun()>:
_Z14serialEventRunv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1714:	86 ee       	ldi	r24, 0xE6	; 230
    1716:	9c e0       	ldi	r25, 0x0C	; 12
    1718:	89 2b       	or	r24, r25
    171a:	49 f0       	breq	.+18     	; 0x172e <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	89 2b       	or	r24, r25
    1722:	29 f0       	breq	.+10     	; 0x172e <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    1724:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Serial0_available()>
    1728:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    172a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	89 2b       	or	r24, r25
    1734:	49 f0       	breq	.+18     	; 0x1748 <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	89 2b       	or	r24, r25
    173c:	29 f0       	breq	.+10     	; 0x1748 <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    173e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1742:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
    1744:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1748:	08 95       	ret

0000174a <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    174a:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    174c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    174e:	a8 0f       	add	r26, r24
    1750:	b9 2f       	mov	r27, r25
    1752:	b1 1d       	adc	r27, r1
    1754:	a3 5a       	subi	r26, 0xA3	; 163
    1756:	bf 4f       	sbci	r27, 0xFF	; 255
    1758:	2c 91       	ld	r18, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    175a:	84 8d       	ldd	r24, Z+28	; 0x1c
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	8f 73       	andi	r24, 0x3F	; 63
    1762:	99 27       	eor	r25, r25
    1764:	84 8f       	std	Z+28, r24	; 0x1c
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1766:	a6 89       	ldd	r26, Z+22	; 0x16
    1768:	b7 89       	ldd	r27, Z+23	; 0x17
    176a:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    176c:	a0 89       	ldd	r26, Z+16	; 0x10
    176e:	b1 89       	ldd	r27, Z+17	; 0x11
    1770:	8c 91       	ld	r24, X
    1772:	83 70       	andi	r24, 0x03	; 3
    1774:	80 64       	ori	r24, 0x40	; 64
    1776:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    1778:	93 8d       	ldd	r25, Z+27	; 0x1b
    177a:	84 8d       	ldd	r24, Z+28	; 0x1c
    177c:	98 13       	cpse	r25, r24
    177e:	06 c0       	rjmp	.+12     	; 0x178c <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1780:	02 88       	ldd	r0, Z+18	; 0x12
    1782:	f3 89       	ldd	r31, Z+19	; 0x13
    1784:	e0 2d       	mov	r30, r0
    1786:	80 81       	ld	r24, Z
    1788:	8f 7d       	andi	r24, 0xDF	; 223
    178a:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    178c:	08 95       	ret

0000178e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1794:	88 8d       	ldd	r24, Y+24	; 0x18
    1796:	88 23       	and	r24, r24
    1798:	b9 f0       	breq	.+46     	; 0x17c8 <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    179a:	aa 89       	ldd	r26, Y+18	; 0x12
    179c:	bb 89       	ldd	r27, Y+19	; 0x13
    179e:	e8 89       	ldd	r30, Y+16	; 0x10
    17a0:	f9 89       	ldd	r31, Y+17	; 0x11
    17a2:	8c 91       	ld	r24, X
    17a4:	85 fd       	sbrc	r24, 5
    17a6:	03 c0       	rjmp	.+6      	; 0x17ae <HardwareSerial::flush()+0x20>
    17a8:	80 81       	ld	r24, Z
    17aa:	86 fd       	sbrc	r24, 6
    17ac:	0d c0       	rjmp	.+26     	; 0x17c8 <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	07 fc       	sbrc	r0, 7
    17b2:	f7 cf       	rjmp	.-18     	; 0x17a2 <HardwareSerial::flush()+0x14>
    17b4:	8c 91       	ld	r24, X
    17b6:	85 ff       	sbrs	r24, 5
    17b8:	f2 cf       	rjmp	.-28     	; 0x179e <HardwareSerial::flush()+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    17ba:	80 81       	ld	r24, Z
    17bc:	85 ff       	sbrs	r24, 5
    17be:	ed cf       	rjmp	.-38     	; 0x179a <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    17c0:	ce 01       	movw	r24, r28
    17c2:	0e 94 a5 0b 	call	0x174a	; 0x174a <HardwareSerial::_tx_udr_empty_irq()>
    17c6:	e9 cf       	rjmp	.-46     	; 0x179a <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	88 8f       	std	Y+24, r24	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    17e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    17e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17e4:	98 13       	cpse	r25, r24
    17e6:	1a c0       	rjmp	.+52     	; 0x181c <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    17e8:	e8 89       	ldd	r30, Y+16	; 0x10
    17ea:	f9 89       	ldd	r31, Y+17	; 0x11
    17ec:	80 81       	ld	r24, Z
    17ee:	85 ff       	sbrs	r24, 5
    17f0:	15 c0       	rjmp	.+42     	; 0x181c <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    17f2:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    17f4:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    17f6:	ee 89       	ldd	r30, Y+22	; 0x16
    17f8:	ff 89       	ldd	r31, Y+23	; 0x17
    17fa:	60 83       	st	Z, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    17fc:	e8 89       	ldd	r30, Y+16	; 0x10
    17fe:	f9 89       	ldd	r31, Y+17	; 0x11
    1800:	80 81       	ld	r24, Z
    1802:	83 70       	andi	r24, 0x03	; 3
    1804:	80 64       	ori	r24, 0x40	; 64
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    1806:	80 83       	st	Z, r24
__iRestore():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1808:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	ff 90       	pop	r15
    1818:	ef 90       	pop	r14
    181a:	08 95       	ret
    181c:	f6 2e       	mov	r15, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    181e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1820:	10 e0       	ldi	r17, 0x00	; 0
    1822:	0f 5f       	subi	r16, 0xFF	; 255
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	0f 73       	andi	r16, 0x3F	; 63
    1828:	11 27       	eor	r17, r17
    182a:	e0 2e       	mov	r14, r16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    182c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    182e:	8e 11       	cpse	r24, r14
    1830:	0c c0       	rjmp	.+24     	; 0x184a <HardwareSerial::write(unsigned char)+0x7c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	07 fc       	sbrc	r0, 7
    1836:	fa cf       	rjmp	.-12     	; 0x182c <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1838:	e8 89       	ldd	r30, Y+16	; 0x10
    183a:	f9 89       	ldd	r31, Y+17	; 0x11
    183c:	80 81       	ld	r24, Z
    183e:	85 ff       	sbrs	r24, 5
    1840:	f5 cf       	rjmp	.-22     	; 0x182c <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    1842:	ce 01       	movw	r24, r28
    1844:	0e 94 a5 0b 	call	0x174a	; 0x174a <HardwareSerial::_tx_udr_empty_irq()>
    1848:	f1 cf       	rjmp	.-30     	; 0x182c <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    184a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    184c:	ec 0f       	add	r30, r28
    184e:	fd 2f       	mov	r31, r29
    1850:	f1 1d       	adc	r31, r1
    1852:	e3 5a       	subi	r30, 0xA3	; 163
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	f0 82       	st	Z, r15
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1858:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    185a:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    185c:	0b 8f       	std	Y+27, r16	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    185e:	ea 89       	ldd	r30, Y+18	; 0x12
    1860:	fb 89       	ldd	r31, Y+19	; 0x13
    1862:	80 81       	ld	r24, Z
    1864:	80 62       	ori	r24, 0x20	; 32
    1866:	cf cf       	rjmp	.-98     	; 0x1806 <HardwareSerial::write(unsigned char)+0x38>

00001868 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1868:	cf 92       	push	r12
    186a:	df 92       	push	r13
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
    1878:	6a 01       	movw	r12, r20
    187a:	7b 01       	movw	r14, r22
    187c:	12 2f       	mov	r17, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:120
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    187e:	60 e8       	ldi	r22, 0x80	; 128
    1880:	74 e8       	ldi	r23, 0x84	; 132
    1882:	8e e1       	ldi	r24, 0x1E	; 30
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a7 01       	movw	r20, r14
    1888:	96 01       	movw	r18, r12
    188a:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    188e:	21 50       	subi	r18, 0x01	; 1
    1890:	31 09       	sbc	r19, r1
    1892:	41 09       	sbc	r20, r1
    1894:	51 09       	sbc	r21, r1
    1896:	56 95       	lsr	r21
    1898:	47 95       	ror	r20
    189a:	37 95       	ror	r19
    189c:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  *_ucsra = 1 << U2X0;
    189e:	e8 89       	ldd	r30, Y+16	; 0x10
    18a0:	f9 89       	ldd	r31, Y+17	; 0x11
    18a2:	82 e0       	ldi	r24, 0x02	; 2
    18a4:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    18a6:	21 15       	cp	r18, r1
    18a8:	80 e1       	ldi	r24, 0x10	; 16
    18aa:	38 07       	cpc	r19, r24
    18ac:	98 f0       	brcs	.+38     	; 0x18d4 <HardwareSerial::begin(unsigned long, unsigned char)+0x6c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    18ae:	e8 89       	ldd	r30, Y+16	; 0x10
    18b0:	f9 89       	ldd	r31, Y+17	; 0x11
    18b2:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    18b4:	60 e4       	ldi	r22, 0x40	; 64
    18b6:	72 e4       	ldi	r23, 0x42	; 66
    18b8:	8f e0       	ldi	r24, 0x0F	; 15
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a7 01       	movw	r20, r14
    18be:	96 01       	movw	r18, r12
    18c0:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    18c4:	21 50       	subi	r18, 0x01	; 1
    18c6:	31 09       	sbc	r19, r1
    18c8:	41 09       	sbc	r20, r1
    18ca:	51 09       	sbc	r21, r1
    18cc:	56 95       	lsr	r21
    18ce:	47 95       	ror	r20
    18d0:	37 95       	ror	r19
    18d2:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    18d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    18d6:	fd 85       	ldd	r31, Y+13	; 0x0d
    18d8:	30 83       	st	Z, r19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    18da:	ee 85       	ldd	r30, Y+14	; 0x0e
    18dc:	ff 85       	ldd	r31, Y+15	; 0x0f
    18de:	20 83       	st	Z, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    18e0:	18 8e       	std	Y+24, r1	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    18e2:	ec 89       	ldd	r30, Y+20	; 0x14
    18e4:	fd 89       	ldd	r31, Y+21	; 0x15
    18e6:	10 83       	st	Z, r17
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    18e8:	ea 89       	ldd	r30, Y+18	; 0x12
    18ea:	fb 89       	ldd	r31, Y+19	; 0x13
    18ec:	80 81       	ld	r24, Z
    18ee:	88 69       	ori	r24, 0x98	; 152
    18f0:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    18f2:	ea 89       	ldd	r30, Y+18	; 0x12
    18f4:	fb 89       	ldd	r31, Y+19	; 0x13
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7d       	andi	r24, 0xDF	; 223
    18fa:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	1f 91       	pop	r17
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	df 90       	pop	r13
    1908:	cf 90       	pop	r12
    190a:	08 95       	ret

0000190c <__vector_20>:
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    190c:	1f 92       	push	r1
    190e:	0f 92       	push	r0
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	0f 92       	push	r0
    1914:	11 24       	eor	r1, r1
    1916:	0b b6       	in	r0, 0x3b	; 59
    1918:	0f 92       	push	r0
    191a:	2f 93       	push	r18
    191c:	8f 93       	push	r24
    191e:	9f 93       	push	r25
    1920:	ef 93       	push	r30
    1922:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1924:	e0 91 7d 02 	lds	r30, 0x027D	; 0x80027d <Serial+0x10>
    1928:	f0 91 7e 02 	lds	r31, 0x027E	; 0x80027e <Serial+0x11>
    192c:	80 81       	ld	r24, Z
    192e:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <Serial+0x16>
    1932:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <Serial+0x17>
    1936:	82 fd       	sbrc	r24, 2
    1938:	1d c0       	rjmp	.+58     	; 0x1974 <__vector_20+0x68>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    193a:	90 81       	ld	r25, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    193c:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <Serial+0x19>
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	8f 73       	andi	r24, 0x3F	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1944:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <Serial+0x1a>
    1948:	82 17       	cp	r24, r18
    194a:	41 f0       	breq	.+16     	; 0x195c <__vector_20+0x50>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    194c:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <Serial+0x19>
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	e3 59       	subi	r30, 0x93	; 147
    1954:	fd 4f       	sbci	r31, 0xFD	; 253
    1956:	95 8f       	std	Z+29, r25	; 0x1d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1958:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <Serial+0x19>
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	2f 91       	pop	r18
    1966:	0f 90       	pop	r0
    1968:	0b be       	out	0x3b, r0	; 59
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1974:	80 81       	ld	r24, Z
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    1976:	f2 cf       	rjmp	.-28     	; 0x195c <__vector_20+0x50>

00001978 <__vector_21>:
__vector_21():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	0b b6       	in	r0, 0x3b	; 59
    1984:	0f 92       	push	r0
    1986:	2f 93       	push	r18
    1988:	3f 93       	push	r19
    198a:	4f 93       	push	r20
    198c:	5f 93       	push	r21
    198e:	6f 93       	push	r22
    1990:	7f 93       	push	r23
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	af 93       	push	r26
    1998:	bf 93       	push	r27
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    199e:	8d e6       	ldi	r24, 0x6D	; 109
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	0e 94 a5 0b 	call	0x174a	; 0x174a <HardwareSerial::_tx_udr_empty_irq()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    19a6:	ff 91       	pop	r31
    19a8:	ef 91       	pop	r30
    19aa:	bf 91       	pop	r27
    19ac:	af 91       	pop	r26
    19ae:	9f 91       	pop	r25
    19b0:	8f 91       	pop	r24
    19b2:	7f 91       	pop	r23
    19b4:	6f 91       	pop	r22
    19b6:	5f 91       	pop	r21
    19b8:	4f 91       	pop	r20
    19ba:	3f 91       	pop	r19
    19bc:	2f 91       	pop	r18
    19be:	0f 90       	pop	r0
    19c0:	0b be       	out	0x3b, r0	; 59
    19c2:	0f 90       	pop	r0
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	0f 90       	pop	r0
    19c8:	1f 90       	pop	r1
    19ca:	18 95       	reti

000019cc <Serial0_available()>:
_Z17Serial0_availablev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    19cc:	8d e6       	ldi	r24, 0x6D	; 109
    19ce:	92 e0       	ldi	r25, 0x02	; 2
    19d0:	0e 94 4d 0b 	call	0x169a	; 0x169a <HardwareSerial::available()>
    19d4:	21 e0       	ldi	r18, 0x01	; 1
    19d6:	89 2b       	or	r24, r25
    19d8:	09 f4       	brne	.+2      	; 0x19dc <Serial0_available()+0x10>
    19da:	20 e0       	ldi	r18, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    19dc:	82 2f       	mov	r24, r18
    19de:	08 95       	ret

000019e0 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    19e0:	ed e6       	ldi	r30, 0x6D	; 109
    19e2:	f2 e0       	ldi	r31, 0x02	; 2
    19e4:	13 82       	std	Z+3, r1	; 0x03
    19e6:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
    19e8:	88 ee       	ldi	r24, 0xE8	; 232
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	a0 e0       	ldi	r26, 0x00	; 0
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	84 83       	std	Z+4, r24	; 0x04
    19f2:	95 83       	std	Z+5, r25	; 0x05
    19f4:	a6 83       	std	Z+6, r26	; 0x06
    19f6:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    19f8:	8e e8       	ldi	r24, 0x8E	; 142
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	85 ec       	ldi	r24, 0xC5	; 197
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	95 87       	std	Z+13, r25	; 0x0d
    1a06:	84 87       	std	Z+12, r24	; 0x0c
    1a08:	84 ec       	ldi	r24, 0xC4	; 196
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	97 87       	std	Z+15, r25	; 0x0f
    1a0e:	86 87       	std	Z+14, r24	; 0x0e
    1a10:	80 ec       	ldi	r24, 0xC0	; 192
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	91 8b       	std	Z+17, r25	; 0x11
    1a16:	80 8b       	std	Z+16, r24	; 0x10
    1a18:	81 ec       	ldi	r24, 0xC1	; 193
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	93 8b       	std	Z+19, r25	; 0x13
    1a1e:	82 8b       	std	Z+18, r24	; 0x12
    1a20:	82 ec       	ldi	r24, 0xC2	; 194
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	95 8b       	std	Z+21, r25	; 0x15
    1a26:	84 8b       	std	Z+20, r24	; 0x14
    1a28:	86 ec       	ldi	r24, 0xC6	; 198
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	97 8b       	std	Z+23, r25	; 0x17
    1a2e:	86 8b       	std	Z+22, r24	; 0x16
    1a30:	11 8e       	std	Z+25, r1	; 0x19
    1a32:	12 8e       	std	Z+26, r1	; 0x1a
    1a34:	13 8e       	std	Z+27, r1	; 0x1b
    1a36:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    1a38:	08 95       	ret

00001a3a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:119
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    1a3a:	af 92       	push	r10
    1a3c:	bf 92       	push	r11
    1a3e:	cf 92       	push	r12
    1a40:	df 92       	push	r13
    1a42:	ef 92       	push	r14
    1a44:	ff 92       	push	r15
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	6c 01       	movw	r12, r24
    1a50:	7b 01       	movw	r14, r22
    1a52:	8b 01       	movw	r16, r22
    1a54:	04 0f       	add	r16, r20
    1a56:	15 1f       	adc	r17, r21
    1a58:	eb 01       	movw	r28, r22
    1a5a:	5e 01       	movw	r10, r28
    1a5c:	ae 18       	sub	r10, r14
    1a5e:	bf 08       	sbc	r11, r15
    1a60:	c0 17       	cp	r28, r16
    1a62:	d1 07       	cpc	r29, r17
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <Print::write(unsigned char const*, unsigned int)+0x42>
    1a66:	69 91       	ld	r22, Y+
    1a68:	d6 01       	movw	r26, r12
    1a6a:	ed 91       	ld	r30, X+
    1a6c:	fc 91       	ld	r31, X
    1a6e:	01 90       	ld	r0, Z+
    1a70:	f0 81       	ld	r31, Z
    1a72:	e0 2d       	mov	r30, r0
    1a74:	c6 01       	movw	r24, r12
    1a76:	09 95       	icall
    1a78:	89 2b       	or	r24, r25
    1a7a:	79 f7       	brne	.-34     	; 0x1a5a <Print::write(unsigned char const*, unsigned int)+0x20>
    1a7c:	c5 01       	movw	r24, r10
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	08 95       	ret

00001a94 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1a94:	fb 01       	movw	r30, r22
    1a96:	01 90       	ld	r0, Z+
    1a98:	00 20       	and	r0, r0
    1a9a:	e9 f7       	brne	.-6      	; 0x1a96 <Print::write(char const*) [clone .part.2]+0x2>
    1a9c:	31 97       	sbiw	r30, 0x01	; 1
    1a9e:	af 01       	movw	r20, r30
    1aa0:	46 1b       	sub	r20, r22
    1aa2:	57 0b       	sbc	r21, r23
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	ed 91       	ld	r30, X+
    1aa8:	fc 91       	ld	r31, X
    1aaa:	02 80       	ldd	r0, Z+2	; 0x02
    1aac:	f3 81       	ldd	r31, Z+3	; 0x03
    1aae:	e0 2d       	mov	r30, r0
    1ab0:	09 94       	ijmp

00001ab2 <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    1ab2:	db 01       	movw	r26, r22
    1ab4:	14 96       	adiw	r26, 0x04	; 4
    1ab6:	4d 91       	ld	r20, X+
    1ab8:	5c 91       	ld	r21, X
    1aba:	15 97       	sbiw	r26, 0x05	; 5
    1abc:	6d 91       	ld	r22, X+
    1abe:	7c 91       	ld	r23, X
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	ed 91       	ld	r30, X+
    1ac4:	fc 91       	ld	r31, X
    1ac6:	02 80       	ldd	r0, Z+2	; 0x02
    1ac8:	f3 81       	ldd	r31, Z+3	; 0x03
    1aca:	e0 2d       	mov	r30, r0
    1acc:	09 94       	ijmp

00001ace <Print::println()>:
_ZN5Print5writeEPKc():
    1ace:	6c e9       	ldi	r22, 0x9C	; 156
    1ad0:	71 e0       	ldi	r23, 0x01	; 1
    1ad2:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <Print::write(char const*) [clone .part.2]>

00001ad6 <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:132
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    1ad6:	0f 93       	push	r16
    1ad8:	1f 93       	push	r17
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
    1ade:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:133
  size_t n = print(s);
    1ae0:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <Print::print(String const&)>
    1ae4:	8c 01       	movw	r16, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:134
  n += println();
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:136
  return n;
}
    1aec:	80 0f       	add	r24, r16
    1aee:	91 1f       	adc	r25, r17
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	1f 91       	pop	r17
    1af6:	0f 91       	pop	r16
    1af8:	08 95       	ret

00001afa <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1b04:	d0 e0       	ldi	r29, 0x00	; 0
    1b06:	c0 e0       	ldi	r28, 0x00	; 0
    1b08:	61 15       	cp	r22, r1
    1b0a:	71 05       	cpc	r23, r1
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <Print::println(char const*)+0x1a>
    1b0e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <Print::write(char const*) [clone .part.2]>
    1b12:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    1b14:	c8 01       	movw	r24, r16
    1b16:	0e 94 67 0d 	call	0x1ace	; 0x1ace <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:143
  return n;
}
    1b1a:	8c 0f       	add	r24, r28
    1b1c:	9d 1f       	adc	r25, r29
    1b1e:	df 91       	pop	r29
    1b20:	cf 91       	pop	r28
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <String::~String()>:
_ZN6StringD2Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:342

unsigned char String::concat(const __FlashStringHelper * str)
{
  if (!str) return 0;
  int length = strlen_P((const char *) str);
  if (length == 0) return 1;
    1b28:	fc 01       	movw	r30, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	91 81       	ldd	r25, Z+1	; 0x01
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	11 f0       	breq	.+4      	; 0x1b36 <String::~String()+0xe>
    1b32:	0c 94 46 12 	jmp	0x248c	; 0x248c <free>
    1b36:	08 95       	ret

00001b38 <String::invalidate()>:
_ZN6String10invalidateEv():
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	ec 01       	movw	r28, r24
    1b3e:	88 81       	ld	r24, Y
    1b40:	99 81       	ldd	r25, Y+1	; 0x01
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	11 f0       	breq	.+4      	; 0x1b4a <String::invalidate()+0x12>
    1b46:	0e 94 46 12 	call	0x248c	; 0x248c <free>
    1b4a:	19 82       	std	Y+1, r1	; 0x01
    1b4c:	18 82       	st	Y, r1
    1b4e:	1d 82       	std	Y+5, r1	; 0x05
    1b50:	1c 82       	std	Y+4, r1	; 0x04
    1b52:	1b 82       	std	Y+3, r1	; 0x03
    1b54:	1a 82       	std	Y+2, r1	; 0x02
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	08 95       	ret

00001b5c <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
    1b66:	8b 01       	movw	r16, r22
    1b68:	6f 5f       	subi	r22, 0xFF	; 255
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	88 81       	ld	r24, Y
    1b6e:	99 81       	ldd	r25, Y+1	; 0x01
    1b70:	0e 94 cf 12 	call	0x259e	; 0x259e <realloc>
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	51 f0       	breq	.+20     	; 0x1b8c <String::changeBuffer(unsigned int)+0x30>
    1b78:	99 83       	std	Y+1, r25	; 0x01
    1b7a:	88 83       	st	Y, r24
    1b7c:	1b 83       	std	Y+3, r17	; 0x03
    1b7e:	0a 83       	std	Y+2, r16	; 0x02
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	df 91       	pop	r29
    1b84:	cf 91       	pop	r28
    1b86:	1f 91       	pop	r17
    1b88:	0f 91       	pop	r16
    1b8a:	08 95       	ret
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	f9 cf       	rjmp	.-14     	; 0x1b82 <String::changeBuffer(unsigned int)+0x26>

00001b90 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	ec 01       	movw	r28, r24
    1b96:	88 81       	ld	r24, Y
    1b98:	99 81       	ldd	r25, Y+1	; 0x01
    1b9a:	89 2b       	or	r24, r25
    1b9c:	49 f0       	breq	.+18     	; 0x1bb0 <String::reserve(unsigned int)+0x20>
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba2:	86 17       	cp	r24, r22
    1ba4:	97 07       	cpc	r25, r23
    1ba6:	20 f0       	brcs	.+8      	; 0x1bb0 <String::reserve(unsigned int)+0x20>
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <String::changeBuffer(unsigned int)>
    1bb6:	88 23       	and	r24, r24
    1bb8:	c1 f3       	breq	.-16     	; 0x1baa <String::reserve(unsigned int)+0x1a>
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	89 2b       	or	r24, r25
    1bc0:	99 f7       	brne	.-26     	; 0x1ba8 <String::reserve(unsigned int)+0x18>
    1bc2:	e8 81       	ld	r30, Y
    1bc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1bc6:	10 82       	st	Z, r1
    1bc8:	ef cf       	rjmp	.-34     	; 0x1ba8 <String::reserve(unsigned int)+0x18>

00001bca <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
    1bd6:	ec 01       	movw	r28, r24
    1bd8:	7b 01       	movw	r14, r22
    1bda:	8a 01       	movw	r16, r20
    1bdc:	ba 01       	movw	r22, r20
    1bde:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <String::reserve(unsigned int)>
    1be2:	81 11       	cpse	r24, r1
    1be4:	0b c0       	rjmp	.+22     	; 0x1bfc <String::copy(char const*, unsigned int)+0x32>
    1be6:	ce 01       	movw	r24, r28
    1be8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <String::invalidate()>
    1bec:	ce 01       	movw	r24, r28
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	08 95       	ret
    1bfc:	1d 83       	std	Y+5, r17	; 0x05
    1bfe:	0c 83       	std	Y+4, r16	; 0x04
    1c00:	b7 01       	movw	r22, r14
    1c02:	88 81       	ld	r24, Y
    1c04:	99 81       	ldd	r25, Y+1	; 0x01
    1c06:	0e 94 b9 13 	call	0x2772	; 0x2772 <strcpy>
    1c0a:	f0 cf       	rjmp	.-32     	; 0x1bec <String::copy(char const*, unsigned int)+0x22>

00001c0c <String::String(char const*)>:
_ZN6String4initEv():
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	11 82       	std	Z+1, r1	; 0x01
    1c10:	10 82       	st	Z, r1
    1c12:	13 82       	std	Z+3, r1	; 0x03
    1c14:	12 82       	std	Z+2, r1	; 0x02
    1c16:	15 82       	std	Z+5, r1	; 0x05
    1c18:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    1c1a:	61 15       	cp	r22, r1
    1c1c:	71 05       	cpc	r23, r1
    1c1e:	51 f0       	breq	.+20     	; 0x1c34 <String::String(char const*)+0x28>
    1c20:	fb 01       	movw	r30, r22
    1c22:	01 90       	ld	r0, Z+
    1c24:	00 20       	and	r0, r0
    1c26:	e9 f7       	brne	.-6      	; 0x1c22 <String::String(char const*)+0x16>
    1c28:	31 97       	sbiw	r30, 0x01	; 1
    1c2a:	af 01       	movw	r20, r30
    1c2c:	46 1b       	sub	r20, r22
    1c2e:	57 0b       	sbc	r21, r23
    1c30:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <String::copy(char const*, unsigned int)>
    1c34:	08 95       	ret

00001c36 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    1c36:	fb 01       	movw	r30, r22
    1c38:	01 90       	ld	r0, Z+
    1c3a:	00 20       	and	r0, r0
    1c3c:	e9 f7       	brne	.-6      	; 0x1c38 <String::operator=(char const*) [clone .part.3]+0x2>
    1c3e:	31 97       	sbiw	r30, 0x01	; 1
    1c40:	af 01       	movw	r20, r30
    1c42:	46 1b       	sub	r20, r22
    1c44:	57 0b       	sbc	r21, r23
    1c46:	0c 94 e5 0d 	jmp	0x1bca	; 0x1bca <String::copy(char const*, unsigned int)>

00001c4a <String::String(unsigned char, unsigned char)>:
_ZN6StringC2Ehh():
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	29 97       	sbiw	r28, 0x09	; 9
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	8c 01       	movw	r16, r24
    1c64:	86 2f       	mov	r24, r22
_ZN6String4initEv():
    1c66:	f8 01       	movw	r30, r16
    1c68:	11 82       	std	Z+1, r1	; 0x01
    1c6a:	10 82       	st	Z, r1
    1c6c:	13 82       	std	Z+3, r1	; 0x03
    1c6e:	12 82       	std	Z+2, r1	; 0x02
    1c70:	15 82       	std	Z+5, r1	; 0x05
    1c72:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ehh():
    1c74:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    1c76:	be 01       	movw	r22, r28
    1c78:	6f 5f       	subi	r22, 0xFF	; 255
    1c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	0e 94 07 14 	call	0x280e	; 0x280e <utoa>
_ZN6StringaSEPKc():
    1c82:	be 01       	movw	r22, r28
    1c84:	6f 5f       	subi	r22, 0xFF	; 255
    1c86:	7f 4f       	sbci	r23, 0xFF	; 255
    1c88:	c8 01       	movw	r24, r16
    1c8a:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ehh():
    1c8e:	29 96       	adiw	r28, 0x09	; 9
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	08 95       	ret

00001ca4 <String::String(unsigned int, unsigned char)>:
_ZN6StringC2Ejh():
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
    1cac:	cd b7       	in	r28, 0x3d	; 61
    1cae:	de b7       	in	r29, 0x3e	; 62
    1cb0:	61 97       	sbiw	r28, 0x11	; 17
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	8c 01       	movw	r16, r24
    1cbe:	cb 01       	movw	r24, r22
_ZN6String4initEv():
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	11 82       	std	Z+1, r1	; 0x01
    1cc4:	10 82       	st	Z, r1
    1cc6:	13 82       	std	Z+3, r1	; 0x03
    1cc8:	12 82       	std	Z+2, r1	; 0x02
    1cca:	15 82       	std	Z+5, r1	; 0x05
    1ccc:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ejh():
    1cce:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    1cd0:	be 01       	movw	r22, r28
    1cd2:	6f 5f       	subi	r22, 0xFF	; 255
    1cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd6:	0e 94 07 14 	call	0x280e	; 0x280e <utoa>
_ZN6StringaSEPKc():
    1cda:	be 01       	movw	r22, r28
    1cdc:	6f 5f       	subi	r22, 0xFF	; 255
    1cde:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce0:	c8 01       	movw	r24, r16
    1ce2:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ejh():
    1ce6:	61 96       	adiw	r28, 0x11	; 17
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	08 95       	ret

00001cfc <String::String(long, unsigned char)>:
_ZN6StringC2Elh():
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	a2 97       	sbiw	r28, 0x22	; 34
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	cd bf       	out	0x3d, r28	; 61
    1d14:	8c 01       	movw	r16, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	ba 01       	movw	r22, r20
_ZN6String4initEv():
    1d1a:	f8 01       	movw	r30, r16
    1d1c:	11 82       	std	Z+1, r1	; 0x01
    1d1e:	10 82       	st	Z, r1
    1d20:	13 82       	std	Z+3, r1	; 0x03
    1d22:	12 82       	std	Z+2, r1	; 0x02
    1d24:	15 82       	std	Z+5, r1	; 0x05
    1d26:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Elh():
    1d28:	30 e0       	ldi	r19, 0x00	; 0
ltoa():
    1d2a:	ae 01       	movw	r20, r28
    1d2c:	4f 5f       	subi	r20, 0xFF	; 255
    1d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d30:	0e 94 c0 13 	call	0x2780	; 0x2780 <ltoa>
_ZN6StringaSEPKc():
    1d34:	be 01       	movw	r22, r28
    1d36:	6f 5f       	subi	r22, 0xFF	; 255
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	c8 01       	movw	r24, r16
    1d3c:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Elh():
    1d40:	a2 96       	adiw	r28, 0x22	; 34
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	08 95       	ret

00001d56 <String::String(unsigned long, unsigned char)>:
_ZN6StringC2Emh():
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	a1 97       	sbiw	r28, 0x21	; 33
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	8c 01       	movw	r16, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	ba 01       	movw	r22, r20
_ZN6String4initEv():
    1d74:	f8 01       	movw	r30, r16
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	10 82       	st	Z, r1
    1d7a:	13 82       	std	Z+3, r1	; 0x03
    1d7c:	12 82       	std	Z+2, r1	; 0x02
    1d7e:	15 82       	std	Z+5, r1	; 0x05
    1d80:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Emh():
    1d82:	30 e0       	ldi	r19, 0x00	; 0
ultoa():
    1d84:	ae 01       	movw	r20, r28
    1d86:	4f 5f       	subi	r20, 0xFF	; 255
    1d88:	5f 4f       	sbci	r21, 0xFF	; 255
    1d8a:	0e 94 da 13 	call	0x27b4	; 0x27b4 <ultoa>
_ZN6StringaSEPKc():
    1d8e:	be 01       	movw	r22, r28
    1d90:	6f 5f       	subi	r22, 0xFF	; 255
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	c8 01       	movw	r24, r16
    1d96:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Emh():
    1d9a:	a1 96       	adiw	r28, 0x21	; 33
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	df 91       	pop	r29
    1da8:	cf 91       	pop	r28
    1daa:	1f 91       	pop	r17
    1dac:	0f 91       	pop	r16
    1dae:	08 95       	ret

00001db0 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ec 01       	movw	r28, r24
    1db6:	fb 01       	movw	r30, r22
    1db8:	86 17       	cp	r24, r22
    1dba:	97 07       	cpc	r25, r23
    1dbc:	49 f0       	breq	.+18     	; 0x1dd0 <String::operator=(String const&)+0x20>
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	61 15       	cp	r22, r1
    1dc4:	71 05       	cpc	r23, r1
    1dc6:	41 f0       	breq	.+16     	; 0x1dd8 <String::operator=(String const&)+0x28>
    1dc8:	44 81       	ldd	r20, Z+4	; 0x04
    1dca:	55 81       	ldd	r21, Z+5	; 0x05
    1dcc:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <String::copy(char const*, unsigned int)>
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	df 91       	pop	r29
    1dd4:	cf 91       	pop	r28
    1dd6:	08 95       	ret
    1dd8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <String::invalidate()>
    1ddc:	f9 cf       	rjmp	.-14     	; 0x1dd0 <String::operator=(String const&)+0x20>

00001dde <String::String(String const&)>:
_ZN6String4initEv():
    1dde:	fc 01       	movw	r30, r24
    1de0:	11 82       	std	Z+1, r1	; 0x01
    1de2:	10 82       	st	Z, r1
    1de4:	13 82       	std	Z+3, r1	; 0x03
    1de6:	12 82       	std	Z+2, r1	; 0x02
    1de8:	15 82       	std	Z+5, r1	; 0x05
    1dea:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
    1dec:	0c 94 d8 0e 	jmp	0x1db0	; 0x1db0 <String::operator=(String const&)>

00001df0 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    1df0:	ef 92       	push	r14
    1df2:	ff 92       	push	r15
    1df4:	0f 93       	push	r16
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	61 15       	cp	r22, r1
    1dfe:	71 05       	cpc	r23, r1
    1e00:	41 f4       	brne	.+16     	; 0x1e12 <String::concat(char const*, unsigned int)+0x22>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	08 95       	ret
    1e12:	41 15       	cp	r20, r1
    1e14:	51 05       	cpc	r21, r1
    1e16:	b1 f0       	breq	.+44     	; 0x1e44 <String::concat(char const*, unsigned int)+0x54>
    1e18:	7b 01       	movw	r14, r22
    1e1a:	ec 01       	movw	r28, r24
    1e1c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e1e:	1d 81       	ldd	r17, Y+5	; 0x05
    1e20:	04 0f       	add	r16, r20
    1e22:	15 1f       	adc	r17, r21
    1e24:	b8 01       	movw	r22, r16
    1e26:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <String::reserve(unsigned int)>
    1e2a:	88 23       	and	r24, r24
    1e2c:	51 f3       	breq	.-44     	; 0x1e02 <String::concat(char const*, unsigned int)+0x12>
    1e2e:	28 81       	ld	r18, Y
    1e30:	39 81       	ldd	r19, Y+1	; 0x01
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
    1e34:	9d 81       	ldd	r25, Y+5	; 0x05
    1e36:	b7 01       	movw	r22, r14
    1e38:	82 0f       	add	r24, r18
    1e3a:	93 1f       	adc	r25, r19
    1e3c:	0e 94 b9 13 	call	0x2772	; 0x2772 <strcpy>
    1e40:	1d 83       	std	Y+5, r17	; 0x05
    1e42:	0c 83       	std	Y+4, r16	; 0x04
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	de cf       	rjmp	.-68     	; 0x1e04 <String::concat(char const*, unsigned int)+0x14>

00001e48 <String::concat(String const&)>:
_ZN6String6concatERKS_():
    1e48:	fb 01       	movw	r30, r22
    1e4a:	44 81       	ldd	r20, Z+4	; 0x04
    1e4c:	55 81       	ldd	r21, Z+5	; 0x05
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <String::concat(char const*, unsigned int)>

00001e56 <String::concat(char const*)>:
_ZN6String6concatEPKc():
    1e56:	61 15       	cp	r22, r1
    1e58:	71 05       	cpc	r23, r1
    1e5a:	51 f0       	breq	.+20     	; 0x1e70 <String::concat(char const*)+0x1a>
    1e5c:	fb 01       	movw	r30, r22
    1e5e:	01 90       	ld	r0, Z+
    1e60:	00 20       	and	r0, r0
    1e62:	e9 f7       	brne	.-6      	; 0x1e5e <String::concat(char const*)+0x8>
    1e64:	31 97       	sbiw	r30, 0x01	; 1
    1e66:	af 01       	movw	r20, r30
    1e68:	46 1b       	sub	r20, r22
    1e6a:	57 0b       	sbc	r21, r23
    1e6c:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <String::concat(char const*, unsigned int)>
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	08 95       	ret

00001e74 <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:355
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1e7a:	fb 01       	movw	r30, r22
    1e7c:	44 81       	ldd	r20, Z+4	; 0x04
    1e7e:	55 81       	ldd	r21, Z+5	; 0x05
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <String::concat(char const*, unsigned int)>
    1e88:	81 11       	cpse	r24, r1
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <operator+(StringSumHelper const&, String const&)+0x1e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357 (discriminator 1)
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:359
  return a;
}
    1e92:	ce 01       	movw	r24, r28
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:362

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
    1e9e:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    1ea0:	61 15       	cp	r22, r1
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	39 f4       	brne	.+14     	; 0x1eb4 <operator+(StringSumHelper const&, char const*)+0x1a>
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:366
  return a;
}
    1eac:	ce 01       	movw	r24, r28
    1eae:	df 91       	pop	r29
    1eb0:	cf 91       	pop	r28
    1eb2:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364 (discriminator 2)
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    1eb4:	fb 01       	movw	r30, r22
    1eb6:	01 90       	ld	r0, Z+
    1eb8:	00 20       	and	r0, r0
    1eba:	e9 f7       	brne	.-6      	; 0x1eb6 <operator+(StringSumHelper const&, char const*)+0x1c>
    1ebc:	31 97       	sbiw	r30, 0x01	; 1
    1ebe:	af 01       	movw	r20, r30
    1ec0:	46 1b       	sub	r20, r22
    1ec2:	57 0b       	sbc	r21, r23
    1ec4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <String::concat(char const*, unsigned int)>
    1ec8:	88 23       	and	r24, r24
    1eca:	69 f3       	breq	.-38     	; 0x1ea6 <operator+(StringSumHelper const&, char const*)+0xc>
    1ecc:	ef cf       	rjmp	.-34     	; 0x1eac <operator+(StringSumHelper const&, char const*)+0x12>

00001ece <initVariant>:
initVariant():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1ece:	08 95       	ret

00001ed0 <main>:
main():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1ed0:	0e 94 2a 10 	call	0x2054	; 0x2054 <init>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1ed4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <initVariant>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1ed8:	0e 94 70 02 	call	0x4e0	; 0x4e0 <setup>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1edc:	ca e8       	ldi	r28, 0x8A	; 138
    1ede:	db e0       	ldi	r29, 0x0B	; 11
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1ee0:	0e 94 b1 00 	call	0x162	; 0x162 <loop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1ee4:	20 97       	sbiw	r28, 0x00	; 0
    1ee6:	e1 f3       	breq	.-8      	; 0x1ee0 <main+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1ee8:	0e 94 8a 0b 	call	0x1714	; 0x1714 <serialEventRun()>
    1eec:	f9 cf       	rjmp	.-14     	; 0x1ee0 <main+0x10>

00001eee <__vector_18>:
__vector_18():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	2f 93       	push	r18
    1efa:	3f 93       	push	r19
    1efc:	8f 93       	push	r24
    1efe:	9f 93       	push	r25
    1f00:	af 93       	push	r26
    1f02:	bf 93       	push	r27
    1f04:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <timer0_millis>
    1f08:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <timer0_millis+0x1>
    1f0c:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <timer0_millis+0x2>
    1f10:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <timer0_millis+0x3>
    1f14:	30 91 0e 03 	lds	r19, 0x030E	; 0x80030e <timer0_fract>
    1f18:	26 e0       	ldi	r18, 0x06	; 6
    1f1a:	23 0f       	add	r18, r19
    1f1c:	2d 37       	cpi	r18, 0x7D	; 125
    1f1e:	68 f1       	brcs	.+90     	; 0x1f7a <__vector_18+0x8c>
    1f20:	29 e8       	ldi	r18, 0x89	; 137
    1f22:	23 0f       	add	r18, r19
    1f24:	03 96       	adiw	r24, 0x03	; 3
    1f26:	a1 1d       	adc	r26, r1
    1f28:	b1 1d       	adc	r27, r1
    1f2a:	20 93 0e 03 	sts	0x030E, r18	; 0x80030e <timer0_fract>
    1f2e:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <timer0_millis>
    1f32:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <timer0_millis+0x1>
    1f36:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <timer0_millis+0x2>
    1f3a:	b0 93 12 03 	sts	0x0312, r27	; 0x800312 <timer0_millis+0x3>
    1f3e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <timer0_overflow_count>
    1f42:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <timer0_overflow_count+0x1>
    1f46:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <timer0_overflow_count+0x2>
    1f4a:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <timer0_overflow_count+0x3>
    1f4e:	01 96       	adiw	r24, 0x01	; 1
    1f50:	a1 1d       	adc	r26, r1
    1f52:	b1 1d       	adc	r27, r1
    1f54:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <timer0_overflow_count>
    1f58:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <timer0_overflow_count+0x1>
    1f5c:	a0 93 0c 03 	sts	0x030C, r26	; 0x80030c <timer0_overflow_count+0x2>
    1f60:	b0 93 0d 03 	sts	0x030D, r27	; 0x80030d <timer0_overflow_count+0x3>
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	3f 91       	pop	r19
    1f6e:	2f 91       	pop	r18
    1f70:	0f 90       	pop	r0
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	0f 90       	pop	r0
    1f76:	1f 90       	pop	r1
    1f78:	18 95       	reti
    1f7a:	02 96       	adiw	r24, 0x02	; 2
    1f7c:	a1 1d       	adc	r26, r1
    1f7e:	b1 1d       	adc	r27, r1
    1f80:	d4 cf       	rjmp	.-88     	; 0x1f2a <__vector_18+0x3c>

00001f82 <micros>:
micros():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    1f82:	3f b7       	in	r19, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    1f84:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    1f86:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <timer0_overflow_count>
    1f8a:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <timer0_overflow_count+0x1>
    1f8e:	a0 91 0c 03 	lds	r26, 0x030C	; 0x80030c <timer0_overflow_count+0x2>
    1f92:	b0 91 0d 03 	lds	r27, 0x030D	; 0x80030d <timer0_overflow_count+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    1f96:	26 b5       	in	r18, 0x26	; 38
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1f98:	a8 9b       	sbis	0x15, 0	; 21
    1f9a:	05 c0       	rjmp	.+10     	; 0x1fa6 <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    1f9c:	2f 3f       	cpi	r18, 0xFF	; 255
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	a1 1d       	adc	r26, r1
    1fa4:	b1 1d       	adc	r27, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    1fa6:	3f bf       	out	0x3f, r19	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    1fa8:	ba 2f       	mov	r27, r26
    1faa:	a9 2f       	mov	r26, r25
    1fac:	98 2f       	mov	r25, r24
    1fae:	88 27       	eor	r24, r24
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	62 0f       	add	r22, r18
    1fb6:	71 1d       	adc	r23, r1
    1fb8:	81 1d       	adc	r24, r1
    1fba:	91 1d       	adc	r25, r1
    1fbc:	43 e0       	ldi	r20, 0x03	; 3
    1fbe:	66 0f       	add	r22, r22
    1fc0:	77 1f       	adc	r23, r23
    1fc2:	88 1f       	adc	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	4a 95       	dec	r20
    1fc8:	d1 f7       	brne	.-12     	; 0x1fbe <micros+0x3c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    1fca:	08 95       	ret

00001fcc <delay>:
delay():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    1fcc:	8f 92       	push	r8
    1fce:	9f 92       	push	r9
    1fd0:	af 92       	push	r10
    1fd2:	bf 92       	push	r11
    1fd4:	cf 92       	push	r12
    1fd6:	df 92       	push	r13
    1fd8:	ef 92       	push	r14
    1fda:	ff 92       	push	r15
    1fdc:	6b 01       	movw	r12, r22
    1fde:	7c 01       	movw	r14, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    1fe0:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <micros>
    1fe4:	4b 01       	movw	r8, r22
    1fe6:	5c 01       	movw	r10, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    1fe8:	c1 14       	cp	r12, r1
    1fea:	d1 04       	cpc	r13, r1
    1fec:	e1 04       	cpc	r14, r1
    1fee:	f1 04       	cpc	r15, r1
    1ff0:	e9 f0       	breq	.+58     	; 0x202c <delay+0x60>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:400
    yield();
    1ff2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <yield>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1ff6:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <micros>
    1ffa:	68 19       	sub	r22, r8
    1ffc:	79 09       	sbc	r23, r9
    1ffe:	8a 09       	sbc	r24, r10
    2000:	9b 09       	sbc	r25, r11
    2002:	68 3e       	cpi	r22, 0xE8	; 232
    2004:	73 40       	sbci	r23, 0x03	; 3
    2006:	81 05       	cpc	r24, r1
    2008:	91 05       	cpc	r25, r1
    200a:	70 f3       	brcs	.-36     	; 0x1fe8 <delay+0x1c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	c2 1a       	sub	r12, r18
    2010:	d1 08       	sbc	r13, r1
    2012:	e1 08       	sbc	r14, r1
    2014:	f1 08       	sbc	r15, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    2016:	88 ee       	ldi	r24, 0xE8	; 232
    2018:	88 0e       	add	r8, r24
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	98 1e       	adc	r9, r24
    201e:	a1 1c       	adc	r10, r1
    2020:	b1 1c       	adc	r11, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2022:	c1 14       	cp	r12, r1
    2024:	d1 04       	cpc	r13, r1
    2026:	e1 04       	cpc	r14, r1
    2028:	f1 04       	cpc	r15, r1
    202a:	29 f7       	brne	.-54     	; 0x1ff6 <delay+0x2a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    202c:	ff 90       	pop	r15
    202e:	ef 90       	pop	r14
    2030:	df 90       	pop	r13
    2032:	cf 90       	pop	r12
    2034:	bf 90       	pop	r11
    2036:	af 90       	pop	r10
    2038:	9f 90       	pop	r9
    203a:	8f 90       	pop	r8
    203c:	08 95       	ret

0000203e <delayMicroseconds>:
delayMicroseconds():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    203e:	00 00       	nop
    2040:	00 00       	nop
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    2042:	83 30       	cpi	r24, 0x03	; 3
    2044:	91 05       	cpc	r25, r1
    2046:	28 f0       	brcs	.+10     	; 0x2052 <delayMicroseconds+0x14>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    204c:	05 97       	sbiw	r24, 0x05	; 5
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <delayMicroseconds+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    2052:	08 95       	ret

00002054 <init>:
init():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2054:	78 94       	sei
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2056:	84 b5       	in	r24, 0x24	; 36
    2058:	83 60       	ori	r24, 0x03	; 3
    205a:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    205c:	85 b5       	in	r24, 0x25	; 37
    205e:	83 60       	ori	r24, 0x03	; 3
    2060:	85 bd       	out	0x25, r24	; 37
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2062:	ee e6       	ldi	r30, 0x6E	; 110
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	81 60       	ori	r24, 0x01	; 1
    206a:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    206c:	e1 e8       	ldi	r30, 0x81	; 129
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	82 e0       	ldi	r24, 0x02	; 2
    2072:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2074:	80 81       	ld	r24, Z
    2076:	81 60       	ori	r24, 0x01	; 1
    2078:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    207a:	e0 e8       	ldi	r30, 0x80	; 128
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	81 60       	ori	r24, 0x01	; 1
    2082:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2084:	e1 eb       	ldi	r30, 0xB1	; 177
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	84 60       	ori	r24, 0x04	; 4
    208c:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    208e:	e0 eb       	ldi	r30, 0xB0	; 176
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	81 60       	ori	r24, 0x01	; 1
    2096:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2098:	e1 e9       	ldi	r30, 0x91	; 145
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	83 60       	ori	r24, 0x03	; 3
    20a0:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    20a2:	e0 e9       	ldi	r30, 0x90	; 144
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	81 60       	ori	r24, 0x01	; 1
    20aa:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    20ac:	86 e8       	ldi	r24, 0x86	; 134
    20ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    20b2:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    20b6:	08 95       	ret

000020b8 <turnOffPWM>:
turnOffPWM():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    20b8:	82 50       	subi	r24, 0x02	; 2
    20ba:	8a 30       	cpi	r24, 0x0A	; 10
    20bc:	88 f5       	brcc	.+98     	; 0x2120 <turnOffPWM+0x68>
    20be:	e8 2f       	mov	r30, r24
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	eb 59       	subi	r30, 0x9B	; 155
    20c4:	ff 4e       	sbci	r31, 0xEF	; 239
    20c6:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__tablejump2__>
    20ca:	8d 10       	cpse	r8, r13
    20cc:	91 10       	cpse	r9, r1
    20ce:	6f 10       	cpse	r6, r15
    20d0:	75 10       	cpse	r7, r5
    20d2:	90 10       	cpse	r9, r0
    20d4:	90 10       	cpse	r9, r0
    20d6:	79 10       	cpse	r7, r9
    20d8:	7f 10       	cpse	r7, r15
    20da:	83 10       	cpse	r8, r3
    20dc:	89 10       	cpse	r8, r9
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    20de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20e2:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    20e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    20e8:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    20ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20ee:	8f 7d       	andi	r24, 0xDF	; 223
    20f0:	f9 cf       	rjmp	.-14     	; 0x20e4 <turnOffPWM+0x2c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    20f2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    20f6:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    20f8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    20fc:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    20fe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2102:	8f 7d       	andi	r24, 0xDF	; 223
    2104:	f9 cf       	rjmp	.-14     	; 0x20f8 <turnOffPWM+0x40>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2106:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    210a:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    210c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:122
        break;
    2110:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2112:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2116:	8f 7d       	andi	r24, 0xDF	; 223
    2118:	f9 cf       	rjmp	.-14     	; 0x210c <turnOffPWM+0x54>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    211a:	84 b5       	in	r24, 0x24	; 36
    211c:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    211e:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2120:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2122:	84 b5       	in	r24, 0x24	; 36
    2124:	8f 7d       	andi	r24, 0xDF	; 223
    2126:	fb cf       	rjmp	.-10     	; 0x211e <turnOffPWM+0x66>

00002128 <pinMode>:
pinMode():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	fc 01       	movw	r30, r24
    2130:	e4 55       	subi	r30, 0x54	; 84
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	24 91       	lpm	r18, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2136:	84 53       	subi	r24, 0x34	; 52
    2138:	9f 4f       	sbci	r25, 0xFF	; 255
    213a:	fc 01       	movw	r30, r24
    213c:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    213e:	88 23       	and	r24, r24
    2140:	c9 f0       	breq	.+50     	; 0x2174 <pinMode+0x4c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	fc 01       	movw	r30, r24
    214a:	ea 50       	subi	r30, 0x0A	; 10
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	a5 91       	lpm	r26, Z+
    2150:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2152:	fc 01       	movw	r30, r24
    2154:	e4 51       	subi	r30, 0x14	; 20
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	c5 91       	lpm	r28, Z+
    215a:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    215c:	61 11       	cpse	r22, r1
    215e:	0d c0       	rjmp	.+26     	; 0x217a <pinMode+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2160:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    2162:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2164:	8c 91       	ld	r24, X
    2166:	20 95       	com	r18
    2168:	82 23       	and	r24, r18
    216a:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    216c:	88 81       	ld	r24, Y
    216e:	28 23       	and	r18, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2170:	28 83       	st	Y, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2172:	9f bf       	out	0x3f, r25	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    217a:	62 30       	cpi	r22, 0x02	; 2
    217c:	51 f4       	brne	.+20     	; 0x2192 <pinMode+0x6a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    217e:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    2180:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2182:	3c 91       	ld	r19, X
    2184:	82 2f       	mov	r24, r18
    2186:	80 95       	com	r24
    2188:	83 23       	and	r24, r19
    218a:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    218c:	e8 81       	ld	r30, Y
    218e:	2e 2b       	or	r18, r30
    2190:	ef cf       	rjmp	.-34     	; 0x2170 <pinMode+0x48>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2192:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    2194:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2196:	ec 91       	ld	r30, X
    2198:	2e 2b       	or	r18, r30
    219a:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    219c:	8f bf       	out	0x3f, r24	; 63
    219e:	ea cf       	rjmp	.-44     	; 0x2174 <pinMode+0x4c>

000021a0 <digitalWrite>:
digitalWrite():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	f9 01       	movw	r30, r18
    21ac:	e4 57       	subi	r30, 0x74	; 116
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    21b2:	f9 01       	movw	r30, r18
    21b4:	e4 55       	subi	r30, 0x54	; 84
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    21ba:	f9 01       	movw	r30, r18
    21bc:	e4 53       	subi	r30, 0x34	; 52
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	c4 91       	lpm	r28, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    21c2:	cc 23       	and	r28, r28
    21c4:	a9 f0       	breq	.+42     	; 0x21f0 <digitalWrite+0x50>
    21c6:	16 2f       	mov	r17, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    21c8:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    21ca:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <turnOffPWM>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    21ce:	ec 2f       	mov	r30, r28
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	e4 51       	subi	r30, 0x14	; 20
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	a5 91       	lpm	r26, Z+
    21dc:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    21de:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    21e0:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    21e2:	ec 91       	ld	r30, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    21e4:	11 11       	cpse	r17, r1
    21e6:	08 c0       	rjmp	.+16     	; 0x21f8 <digitalWrite+0x58>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    21e8:	d0 95       	com	r29
    21ea:	de 23       	and	r29, r30
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    21ec:	dc 93       	st	X, r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    21ee:	8f bf       	out	0x3f, r24	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    21f0:	df 91       	pop	r29
    21f2:	cf 91       	pop	r28
    21f4:	1f 91       	pop	r17
    21f6:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    21f8:	de 2b       	or	r29, r30
    21fa:	f8 cf       	rjmp	.-16     	; 0x21ec <digitalWrite+0x4c>

000021fc <yield>:
__empty():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    21fc:	08 95       	ret

000021fe <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    21fe:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    2200:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    2202:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    2204:	0e 94 88 11 	call	0x2310	; 0x2310 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    2208:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    220a:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    220c:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    220e:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    2210:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    2212:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    2214:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    2216:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    2218:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    221a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    221c:	08 95       	ret

0000221e <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    221e:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    2220:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    2222:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <__udivmodhi4_ep>

00002226 <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    2226:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    2228:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    222a:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    222c:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    222e:	10 f0       	brcs	.+4      	; 0x2234 <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    2230:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    2232:	b7 0b       	sbc	r27, r23

00002234 <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    2234:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    2236:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    2238:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    223a:	a9 f7       	brne	.-22     	; 0x2226 <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    223c:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    223e:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    2240:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    2242:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    2244:	08 95       	ret

00002246 <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    2246:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    2248:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    224a:	16 f4       	brtc	.+4      	; 0x2250 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    224c:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    224e:	07 d0       	rcall	.+14     	; 0x225e <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    2250:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    2252:	09 d0       	rcall	.+18     	; 0x2266 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    2254:	0e 94 0f 11 	call	0x221e	; 0x221e <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    2258:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    225a:	05 d0       	rcall	.+10     	; 0x2266 <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    225c:	3e f4       	brtc	.+14     	; 0x226c <__divmodhi4_exit>

0000225e <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    225e:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    2260:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    2264:	08 95       	ret

00002266 <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    2266:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    2268:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    226a:	7f 4f       	sbci	r23, 0xFF	; 255

0000226c <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    226c:	08 95       	ret

0000226e <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    226e:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    2270:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    2272:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2274:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2276:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <__udivmodsi4_ep>

0000227a <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    227a:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    227c:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    227e:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    2280:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    2282:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2284:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2286:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2288:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    228a:	20 f0       	brcs	.+8      	; 0x2294 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    228c:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    228e:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    2290:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    2292:	f5 0b       	sbc	r31, r21

00002294 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    2294:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    2296:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    2298:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    229a:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    229c:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    229e:	69 f7       	brne	.-38     	; 0x227a <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    22a0:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    22a2:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    22a4:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    22a6:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    22a8:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    22aa:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    22ac:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    22ae:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    22b0:	08 95       	ret

000022b2 <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    22b2:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    22b4:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    22b6:	1e f4       	brtc	.+6      	; 0x22be <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    22b8:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    22ba:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    22be:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    22c0:	07 d0       	rcall	.+14     	; 0x22d0 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    22c2:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    22c6:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    22c8:	03 d0       	rcall	.+6      	; 0x22d0 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    22ca:	4e f4       	brtc	.+18     	; 0x22de <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    22cc:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__negsi2>

000022d0 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    22d0:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    22d2:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    22d4:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    22d6:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    22da:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    22dc:	5f 4f       	sbci	r21, 0xFF	; 255

000022de <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    22de:	08 95       	ret

000022e0 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    22e0:	90 95       	com	r25
    22e2:	80 95       	com	r24
    22e4:	70 95       	com	r23
    22e6:	61 95       	neg	r22
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	8f 4f       	sbci	r24, 0xFF	; 255
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    22ee:	08 95       	ret

000022f0 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    22f0:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    22f2:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    22f4:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    22f6:	00 1c       	adc	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    22f8:	0b be       	out	0x3b, r0	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    22fa:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    22fc:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    22fe:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2300:	09 94       	ijmp

00002302 <__usmulhisi3>:
__usmulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    2302:	0e 94 9b 11 	call	0x2336	; 0x2336 <__umulhisi3>

00002306 <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    2306:	b7 ff       	sbrs	r27, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    2308:	08 95       	ret
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    230a:	82 1b       	sub	r24, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    230c:	93 0b       	sbc	r25, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    230e:	08 95       	ret

00002310 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    2310:	0e 94 9b 11 	call	0x2336	; 0x2336 <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    2314:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    2316:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    2318:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    231a:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    231c:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    231e:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    2320:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    2322:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    2324:	08 95       	ret

00002326 <__mulshisi3>:
__mulshisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    2326:	b7 ff       	sbrs	r27, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    2328:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__muluhisi3>

0000232c <__mulohisi3>:
__mulohisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    232c:	0e 94 88 11 	call	0x2310	; 0x2310 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    2330:	82 1b       	sub	r24, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    2332:	93 0b       	sbc	r25, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    2334:	08 95       	ret

00002336 <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    2336:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    2338:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    233a:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    233c:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    233e:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    2340:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    2342:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    2344:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    2346:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    2348:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    234a:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    234c:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    234e:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    2350:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    2352:	08 95       	ret

00002354 <malloc>:
malloc():
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	82 30       	cpi	r24, 0x02	; 2
    235e:	91 05       	cpc	r25, r1
    2360:	10 f4       	brcc	.+4      	; 0x2366 <malloc+0x12>
    2362:	82 e0       	ldi	r24, 0x02	; 2
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <__flp>
    236a:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <__flp+0x1>
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	a0 e0       	ldi	r26, 0x00	; 0
    2376:	30 97       	sbiw	r30, 0x00	; 0
    2378:	99 f4       	brne	.+38     	; 0x23a0 <malloc+0x4c>
    237a:	21 15       	cp	r18, r1
    237c:	31 05       	cpc	r19, r1
    237e:	09 f4       	brne	.+2      	; 0x2382 <malloc+0x2e>
    2380:	4a c0       	rjmp	.+148    	; 0x2416 <malloc+0xc2>
    2382:	28 1b       	sub	r18, r24
    2384:	39 0b       	sbc	r19, r25
    2386:	24 30       	cpi	r18, 0x04	; 4
    2388:	31 05       	cpc	r19, r1
    238a:	d8 f5       	brcc	.+118    	; 0x2402 <malloc+0xae>
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	9b 81       	ldd	r25, Y+3	; 0x03
    2390:	61 15       	cp	r22, r1
    2392:	71 05       	cpc	r23, r1
    2394:	89 f1       	breq	.+98     	; 0x23f8 <malloc+0xa4>
    2396:	fb 01       	movw	r30, r22
    2398:	93 83       	std	Z+3, r25	; 0x03
    239a:	82 83       	std	Z+2, r24	; 0x02
    239c:	fe 01       	movw	r30, r28
    239e:	11 c0       	rjmp	.+34     	; 0x23c2 <malloc+0x6e>
    23a0:	40 81       	ld	r20, Z
    23a2:	51 81       	ldd	r21, Z+1	; 0x01
    23a4:	02 81       	ldd	r16, Z+2	; 0x02
    23a6:	13 81       	ldd	r17, Z+3	; 0x03
    23a8:	48 17       	cp	r20, r24
    23aa:	59 07       	cpc	r21, r25
    23ac:	e0 f0       	brcs	.+56     	; 0x23e6 <malloc+0x92>
    23ae:	48 17       	cp	r20, r24
    23b0:	59 07       	cpc	r21, r25
    23b2:	99 f4       	brne	.+38     	; 0x23da <malloc+0x86>
    23b4:	10 97       	sbiw	r26, 0x00	; 0
    23b6:	61 f0       	breq	.+24     	; 0x23d0 <malloc+0x7c>
    23b8:	12 96       	adiw	r26, 0x02	; 2
    23ba:	0c 93       	st	X, r16
    23bc:	12 97       	sbiw	r26, 0x02	; 2
    23be:	13 96       	adiw	r26, 0x03	; 3
    23c0:	1c 93       	st	X, r17
    23c2:	32 96       	adiw	r30, 0x02	; 2
    23c4:	cf 01       	movw	r24, r30
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	1f 91       	pop	r17
    23cc:	0f 91       	pop	r16
    23ce:	08 95       	ret
    23d0:	00 93 15 03 	sts	0x0315, r16	; 0x800315 <__flp>
    23d4:	10 93 16 03 	sts	0x0316, r17	; 0x800316 <__flp+0x1>
    23d8:	f4 cf       	rjmp	.-24     	; 0x23c2 <malloc+0x6e>
    23da:	21 15       	cp	r18, r1
    23dc:	31 05       	cpc	r19, r1
    23de:	51 f0       	breq	.+20     	; 0x23f4 <malloc+0xa0>
    23e0:	42 17       	cp	r20, r18
    23e2:	53 07       	cpc	r21, r19
    23e4:	38 f0       	brcs	.+14     	; 0x23f4 <malloc+0xa0>
    23e6:	a9 01       	movw	r20, r18
    23e8:	db 01       	movw	r26, r22
    23ea:	9a 01       	movw	r18, r20
    23ec:	bd 01       	movw	r22, r26
    23ee:	df 01       	movw	r26, r30
    23f0:	f8 01       	movw	r30, r16
    23f2:	c1 cf       	rjmp	.-126    	; 0x2376 <malloc+0x22>
    23f4:	ef 01       	movw	r28, r30
    23f6:	f9 cf       	rjmp	.-14     	; 0x23ea <malloc+0x96>
    23f8:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <__flp+0x1>
    23fc:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <__flp>
    2400:	cd cf       	rjmp	.-102    	; 0x239c <malloc+0x48>
    2402:	fe 01       	movw	r30, r28
    2404:	e2 0f       	add	r30, r18
    2406:	f3 1f       	adc	r31, r19
    2408:	81 93       	st	Z+, r24
    240a:	91 93       	st	Z+, r25
    240c:	22 50       	subi	r18, 0x02	; 2
    240e:	31 09       	sbc	r19, r1
    2410:	39 83       	std	Y+1, r19	; 0x01
    2412:	28 83       	st	Y, r18
    2414:	d7 cf       	rjmp	.-82     	; 0x23c4 <malloc+0x70>
    2416:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <__brkval>
    241a:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <__brkval+0x1>
    241e:	23 2b       	or	r18, r19
    2420:	41 f4       	brne	.+16     	; 0x2432 <malloc+0xde>
    2422:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2426:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    242a:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <__brkval+0x1>
    242e:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <__brkval>
    2432:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2436:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    243a:	21 15       	cp	r18, r1
    243c:	31 05       	cpc	r19, r1
    243e:	41 f4       	brne	.+16     	; 0x2450 <malloc+0xfc>
    2440:	2d b7       	in	r18, 0x3d	; 61
    2442:	3e b7       	in	r19, 0x3e	; 62
    2444:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2448:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    244c:	24 1b       	sub	r18, r20
    244e:	35 0b       	sbc	r19, r21
    2450:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <__brkval>
    2454:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <__brkval+0x1>
    2458:	e2 17       	cp	r30, r18
    245a:	f3 07       	cpc	r31, r19
    245c:	a0 f4       	brcc	.+40     	; 0x2486 <malloc+0x132>
    245e:	2e 1b       	sub	r18, r30
    2460:	3f 0b       	sbc	r19, r31
    2462:	28 17       	cp	r18, r24
    2464:	39 07       	cpc	r19, r25
    2466:	78 f0       	brcs	.+30     	; 0x2486 <malloc+0x132>
    2468:	ac 01       	movw	r20, r24
    246a:	4e 5f       	subi	r20, 0xFE	; 254
    246c:	5f 4f       	sbci	r21, 0xFF	; 255
    246e:	24 17       	cp	r18, r20
    2470:	35 07       	cpc	r19, r21
    2472:	48 f0       	brcs	.+18     	; 0x2486 <malloc+0x132>
    2474:	4e 0f       	add	r20, r30
    2476:	5f 1f       	adc	r21, r31
    2478:	50 93 14 03 	sts	0x0314, r21	; 0x800314 <__brkval+0x1>
    247c:	40 93 13 03 	sts	0x0313, r20	; 0x800313 <__brkval>
    2480:	81 93       	st	Z+, r24
    2482:	91 93       	st	Z+, r25
    2484:	9f cf       	rjmp	.-194    	; 0x23c4 <malloc+0x70>
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	e0 e0       	ldi	r30, 0x00	; 0
    248a:	9c cf       	rjmp	.-200    	; 0x23c4 <malloc+0x70>

0000248c <free>:
free():
    248c:	cf 93       	push	r28
    248e:	df 93       	push	r29
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	e9 f0       	breq	.+58     	; 0x24ce <free+0x42>
    2494:	fc 01       	movw	r30, r24
    2496:	32 97       	sbiw	r30, 0x02	; 2
    2498:	13 82       	std	Z+3, r1	; 0x03
    249a:	12 82       	std	Z+2, r1	; 0x02
    249c:	a0 91 15 03 	lds	r26, 0x0315	; 0x800315 <__flp>
    24a0:	b0 91 16 03 	lds	r27, 0x0316	; 0x800316 <__flp+0x1>
    24a4:	ed 01       	movw	r28, r26
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	10 97       	sbiw	r26, 0x00	; 0
    24ac:	a1 f4       	brne	.+40     	; 0x24d6 <free+0x4a>
    24ae:	20 81       	ld	r18, Z
    24b0:	31 81       	ldd	r19, Z+1	; 0x01
    24b2:	82 0f       	add	r24, r18
    24b4:	93 1f       	adc	r25, r19
    24b6:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <__brkval>
    24ba:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <__brkval+0x1>
    24be:	28 17       	cp	r18, r24
    24c0:	39 07       	cpc	r19, r25
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <free+0x3a>
    24c4:	61 c0       	rjmp	.+194    	; 0x2588 <free+0xfc>
    24c6:	f0 93 14 03 	sts	0x0314, r31	; 0x800314 <__brkval+0x1>
    24ca:	e0 93 13 03 	sts	0x0313, r30	; 0x800313 <__brkval>
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	08 95       	ret
    24d4:	ea 01       	movw	r28, r20
    24d6:	ce 17       	cp	r28, r30
    24d8:	df 07       	cpc	r29, r31
    24da:	e8 f5       	brcc	.+122    	; 0x2556 <free+0xca>
    24dc:	4a 81       	ldd	r20, Y+2	; 0x02
    24de:	5b 81       	ldd	r21, Y+3	; 0x03
    24e0:	9e 01       	movw	r18, r28
    24e2:	41 15       	cp	r20, r1
    24e4:	51 05       	cpc	r21, r1
    24e6:	b1 f7       	brne	.-20     	; 0x24d4 <free+0x48>
    24e8:	e9 01       	movw	r28, r18
    24ea:	fb 83       	std	Y+3, r31	; 0x03
    24ec:	ea 83       	std	Y+2, r30	; 0x02
    24ee:	49 91       	ld	r20, Y+
    24f0:	59 91       	ld	r21, Y+
    24f2:	c4 0f       	add	r28, r20
    24f4:	d5 1f       	adc	r29, r21
    24f6:	ec 17       	cp	r30, r28
    24f8:	fd 07       	cpc	r31, r29
    24fa:	61 f4       	brne	.+24     	; 0x2514 <free+0x88>
    24fc:	80 81       	ld	r24, Z
    24fe:	91 81       	ldd	r25, Z+1	; 0x01
    2500:	02 96       	adiw	r24, 0x02	; 2
    2502:	84 0f       	add	r24, r20
    2504:	95 1f       	adc	r25, r21
    2506:	e9 01       	movw	r28, r18
    2508:	99 83       	std	Y+1, r25	; 0x01
    250a:	88 83       	st	Y, r24
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	9b 83       	std	Y+3, r25	; 0x03
    2512:	8a 83       	std	Y+2, r24	; 0x02
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	e0 e0       	ldi	r30, 0x00	; 0
    2518:	12 96       	adiw	r26, 0x02	; 2
    251a:	8d 91       	ld	r24, X+
    251c:	9c 91       	ld	r25, X
    251e:	13 97       	sbiw	r26, 0x03	; 3
    2520:	00 97       	sbiw	r24, 0x00	; 0
    2522:	b9 f5       	brne	.+110    	; 0x2592 <free+0x106>
    2524:	2d 91       	ld	r18, X+
    2526:	3c 91       	ld	r19, X
    2528:	11 97       	sbiw	r26, 0x01	; 1
    252a:	cd 01       	movw	r24, r26
    252c:	02 96       	adiw	r24, 0x02	; 2
    252e:	82 0f       	add	r24, r18
    2530:	93 1f       	adc	r25, r19
    2532:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <__brkval>
    2536:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <__brkval+0x1>
    253a:	28 17       	cp	r18, r24
    253c:	39 07       	cpc	r19, r25
    253e:	39 f6       	brne	.-114    	; 0x24ce <free+0x42>
    2540:	30 97       	sbiw	r30, 0x00	; 0
    2542:	51 f5       	brne	.+84     	; 0x2598 <free+0x10c>
    2544:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <__flp+0x1>
    2548:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <__flp>
    254c:	b0 93 14 03 	sts	0x0314, r27	; 0x800314 <__brkval+0x1>
    2550:	a0 93 13 03 	sts	0x0313, r26	; 0x800313 <__brkval>
    2554:	bc cf       	rjmp	.-136    	; 0x24ce <free+0x42>
    2556:	d3 83       	std	Z+3, r29	; 0x03
    2558:	c2 83       	std	Z+2, r28	; 0x02
    255a:	40 81       	ld	r20, Z
    255c:	51 81       	ldd	r21, Z+1	; 0x01
    255e:	84 0f       	add	r24, r20
    2560:	95 1f       	adc	r25, r21
    2562:	c8 17       	cp	r28, r24
    2564:	d9 07       	cpc	r29, r25
    2566:	61 f4       	brne	.+24     	; 0x2580 <free+0xf4>
    2568:	4e 5f       	subi	r20, 0xFE	; 254
    256a:	5f 4f       	sbci	r21, 0xFF	; 255
    256c:	88 81       	ld	r24, Y
    256e:	99 81       	ldd	r25, Y+1	; 0x01
    2570:	48 0f       	add	r20, r24
    2572:	59 1f       	adc	r21, r25
    2574:	51 83       	std	Z+1, r21	; 0x01
    2576:	40 83       	st	Z, r20
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	9b 81       	ldd	r25, Y+3	; 0x03
    257c:	93 83       	std	Z+3, r25	; 0x03
    257e:	82 83       	std	Z+2, r24	; 0x02
    2580:	21 15       	cp	r18, r1
    2582:	31 05       	cpc	r19, r1
    2584:	09 f0       	breq	.+2      	; 0x2588 <free+0xfc>
    2586:	b0 cf       	rjmp	.-160    	; 0x24e8 <free+0x5c>
    2588:	f0 93 16 03 	sts	0x0316, r31	; 0x800316 <__flp+0x1>
    258c:	e0 93 15 03 	sts	0x0315, r30	; 0x800315 <__flp>
    2590:	9e cf       	rjmp	.-196    	; 0x24ce <free+0x42>
    2592:	fd 01       	movw	r30, r26
    2594:	dc 01       	movw	r26, r24
    2596:	c0 cf       	rjmp	.-128    	; 0x2518 <free+0x8c>
    2598:	13 82       	std	Z+3, r1	; 0x03
    259a:	12 82       	std	Z+2, r1	; 0x02
    259c:	d7 cf       	rjmp	.-82     	; 0x254c <free+0xc0>

0000259e <realloc>:
realloc():
    259e:	4f 92       	push	r4
    25a0:	5f 92       	push	r5
    25a2:	6f 92       	push	r6
    25a4:	7f 92       	push	r7
    25a6:	8f 92       	push	r8
    25a8:	9f 92       	push	r9
    25aa:	af 92       	push	r10
    25ac:	bf 92       	push	r11
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	8c 01       	movw	r16, r24
    25c0:	00 97       	sbiw	r24, 0x00	; 0
    25c2:	99 f4       	brne	.+38     	; 0x25ea <realloc+0x4c>
    25c4:	cb 01       	movw	r24, r22
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	7f 90       	pop	r7
    25e0:	6f 90       	pop	r6
    25e2:	5f 90       	pop	r5
    25e4:	4f 90       	pop	r4
    25e6:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <malloc>
    25ea:	fc 01       	movw	r30, r24
    25ec:	e6 0f       	add	r30, r22
    25ee:	f7 1f       	adc	r31, r23
    25f0:	9c 01       	movw	r18, r24
    25f2:	22 50       	subi	r18, 0x02	; 2
    25f4:	31 09       	sbc	r19, r1
    25f6:	e2 17       	cp	r30, r18
    25f8:	f3 07       	cpc	r31, r19
    25fa:	08 f4       	brcc	.+2      	; 0x25fe <realloc+0x60>
    25fc:	ae c0       	rjmp	.+348    	; 0x275a <realloc+0x1bc>
    25fe:	d9 01       	movw	r26, r18
    2600:	cd 91       	ld	r28, X+
    2602:	dc 91       	ld	r29, X
    2604:	11 97       	sbiw	r26, 0x01	; 1
    2606:	c6 17       	cp	r28, r22
    2608:	d7 07       	cpc	r29, r23
    260a:	20 f1       	brcs	.+72     	; 0x2654 <realloc+0xb6>
    260c:	c5 30       	cpi	r28, 0x05	; 5
    260e:	d1 05       	cpc	r29, r1
    2610:	78 f0       	brcs	.+30     	; 0x2630 <realloc+0x92>
    2612:	ce 01       	movw	r24, r28
    2614:	04 97       	sbiw	r24, 0x04	; 4
    2616:	86 17       	cp	r24, r22
    2618:	97 07       	cpc	r25, r23
    261a:	50 f0       	brcs	.+20     	; 0x2630 <realloc+0x92>
    261c:	c6 1b       	sub	r28, r22
    261e:	d7 0b       	sbc	r29, r23
    2620:	22 97       	sbiw	r28, 0x02	; 2
    2622:	c1 93       	st	Z+, r28
    2624:	d1 93       	st	Z+, r29
    2626:	6d 93       	st	X+, r22
    2628:	7c 93       	st	X, r23
    262a:	cf 01       	movw	r24, r30
    262c:	0e 94 46 12 	call	0x248c	; 0x248c <free>
    2630:	c8 01       	movw	r24, r16
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	bf 90       	pop	r11
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	8f 90       	pop	r8
    264a:	7f 90       	pop	r7
    264c:	6f 90       	pop	r6
    264e:	5f 90       	pop	r5
    2650:	4f 90       	pop	r4
    2652:	08 95       	ret
    2654:	5b 01       	movw	r10, r22
    2656:	ac 1a       	sub	r10, r28
    2658:	bd 0a       	sbc	r11, r29
    265a:	4c 01       	movw	r8, r24
    265c:	8c 0e       	add	r8, r28
    265e:	9d 1e       	adc	r9, r29
    2660:	a0 91 15 03 	lds	r26, 0x0315	; 0x800315 <__flp>
    2664:	b0 91 16 03 	lds	r27, 0x0316	; 0x800316 <__flp+0x1>
    2668:	51 2c       	mov	r5, r1
    266a:	41 2c       	mov	r4, r1
    266c:	f1 2c       	mov	r15, r1
    266e:	e1 2c       	mov	r14, r1
    2670:	10 97       	sbiw	r26, 0x00	; 0
    2672:	31 f5       	brne	.+76     	; 0x26c0 <realloc+0x122>
    2674:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <__brkval>
    2678:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <__brkval+0x1>
    267c:	88 15       	cp	r24, r8
    267e:	99 05       	cpc	r25, r9
    2680:	09 f0       	breq	.+2      	; 0x2684 <realloc+0xe6>
    2682:	5c c0       	rjmp	.+184    	; 0x273c <realloc+0x19e>
    2684:	46 16       	cp	r4, r22
    2686:	57 06       	cpc	r5, r23
    2688:	08 f0       	brcs	.+2      	; 0x268c <realloc+0xee>
    268a:	58 c0       	rjmp	.+176    	; 0x273c <realloc+0x19e>
    268c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2690:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	41 f4       	brne	.+16     	; 0x26a8 <realloc+0x10a>
    2698:	8d b7       	in	r24, 0x3d	; 61
    269a:	9e b7       	in	r25, 0x3e	; 62
    269c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    26a0:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26a4:	84 1b       	sub	r24, r20
    26a6:	95 0b       	sbc	r25, r21
    26a8:	e8 17       	cp	r30, r24
    26aa:	f9 07       	cpc	r31, r25
    26ac:	08 f0       	brcs	.+2      	; 0x26b0 <realloc+0x112>
    26ae:	55 c0       	rjmp	.+170    	; 0x275a <realloc+0x1bc>
    26b0:	f0 93 14 03 	sts	0x0314, r31	; 0x800314 <__brkval+0x1>
    26b4:	e0 93 13 03 	sts	0x0313, r30	; 0x800313 <__brkval>
    26b8:	f9 01       	movw	r30, r18
    26ba:	71 83       	std	Z+1, r23	; 0x01
    26bc:	60 83       	st	Z, r22
    26be:	b8 cf       	rjmp	.-144    	; 0x2630 <realloc+0x92>
    26c0:	8d 91       	ld	r24, X+
    26c2:	9c 91       	ld	r25, X
    26c4:	11 97       	sbiw	r26, 0x01	; 1
    26c6:	12 96       	adiw	r26, 0x02	; 2
    26c8:	6c 90       	ld	r6, X
    26ca:	12 97       	sbiw	r26, 0x02	; 2
    26cc:	13 96       	adiw	r26, 0x03	; 3
    26ce:	7c 90       	ld	r7, X
    26d0:	13 97       	sbiw	r26, 0x03	; 3
    26d2:	a8 15       	cp	r26, r8
    26d4:	b9 05       	cpc	r27, r9
    26d6:	59 f5       	brne	.+86     	; 0x272e <realloc+0x190>
    26d8:	6c 01       	movw	r12, r24
    26da:	42 e0       	ldi	r20, 0x02	; 2
    26dc:	c4 0e       	add	r12, r20
    26de:	d1 1c       	adc	r13, r1
    26e0:	ca 14       	cp	r12, r10
    26e2:	db 04       	cpc	r13, r11
    26e4:	20 f1       	brcs	.+72     	; 0x272e <realloc+0x190>
    26e6:	ac 01       	movw	r20, r24
    26e8:	4a 19       	sub	r20, r10
    26ea:	5b 09       	sbc	r21, r11
    26ec:	da 01       	movw	r26, r20
    26ee:	12 96       	adiw	r26, 0x02	; 2
    26f0:	15 97       	sbiw	r26, 0x05	; 5
    26f2:	80 f0       	brcs	.+32     	; 0x2714 <realloc+0x176>
    26f4:	62 82       	std	Z+2, r6	; 0x02
    26f6:	73 82       	std	Z+3, r7	; 0x03
    26f8:	51 83       	std	Z+1, r21	; 0x01
    26fa:	40 83       	st	Z, r20
    26fc:	d9 01       	movw	r26, r18
    26fe:	6d 93       	st	X+, r22
    2700:	7c 93       	st	X, r23
    2702:	e1 14       	cp	r14, r1
    2704:	f1 04       	cpc	r15, r1
    2706:	71 f0       	breq	.+28     	; 0x2724 <realloc+0x186>
    2708:	d7 01       	movw	r26, r14
    270a:	13 96       	adiw	r26, 0x03	; 3
    270c:	fc 93       	st	X, r31
    270e:	ee 93       	st	-X, r30
    2710:	12 97       	sbiw	r26, 0x02	; 2
    2712:	8e cf       	rjmp	.-228    	; 0x2630 <realloc+0x92>
    2714:	22 96       	adiw	r28, 0x02	; 2
    2716:	8c 0f       	add	r24, r28
    2718:	9d 1f       	adc	r25, r29
    271a:	f9 01       	movw	r30, r18
    271c:	91 83       	std	Z+1, r25	; 0x01
    271e:	80 83       	st	Z, r24
    2720:	f3 01       	movw	r30, r6
    2722:	ef cf       	rjmp	.-34     	; 0x2702 <realloc+0x164>
    2724:	f0 93 16 03 	sts	0x0316, r31	; 0x800316 <__flp+0x1>
    2728:	e0 93 15 03 	sts	0x0315, r30	; 0x800315 <__flp>
    272c:	81 cf       	rjmp	.-254    	; 0x2630 <realloc+0x92>
    272e:	48 16       	cp	r4, r24
    2730:	59 06       	cpc	r5, r25
    2732:	08 f4       	brcc	.+2      	; 0x2736 <realloc+0x198>
    2734:	2c 01       	movw	r4, r24
    2736:	7d 01       	movw	r14, r26
    2738:	d3 01       	movw	r26, r6
    273a:	9a cf       	rjmp	.-204    	; 0x2670 <realloc+0xd2>
    273c:	cb 01       	movw	r24, r22
    273e:	0e 94 aa 11 	call	0x2354	; 0x2354 <malloc>
    2742:	7c 01       	movw	r14, r24
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	49 f0       	breq	.+18     	; 0x275a <realloc+0x1bc>
    2748:	ae 01       	movw	r20, r28
    274a:	b8 01       	movw	r22, r16
    274c:	0e 94 b0 13 	call	0x2760	; 0x2760 <memcpy>
    2750:	c8 01       	movw	r24, r16
    2752:	0e 94 46 12 	call	0x248c	; 0x248c <free>
    2756:	87 01       	movw	r16, r14
    2758:	6b cf       	rjmp	.-298    	; 0x2630 <realloc+0x92>
    275a:	10 e0       	ldi	r17, 0x00	; 0
    275c:	00 e0       	ldi	r16, 0x00	; 0
    275e:	68 cf       	rjmp	.-304    	; 0x2630 <realloc+0x92>

00002760 <memcpy>:
memcpy():
    2760:	fb 01       	movw	r30, r22
    2762:	dc 01       	movw	r26, r24
    2764:	02 c0       	rjmp	.+4      	; 0x276a <memcpy+0xa>
    2766:	01 90       	ld	r0, Z+
    2768:	0d 92       	st	X+, r0
    276a:	41 50       	subi	r20, 0x01	; 1
    276c:	50 40       	sbci	r21, 0x00	; 0
    276e:	d8 f7       	brcc	.-10     	; 0x2766 <memcpy+0x6>
    2770:	08 95       	ret

00002772 <strcpy>:
strcpy():
    2772:	fb 01       	movw	r30, r22
    2774:	dc 01       	movw	r26, r24
    2776:	01 90       	ld	r0, Z+
    2778:	0d 92       	st	X+, r0
    277a:	00 20       	and	r0, r0
    277c:	e1 f7       	brne	.-8      	; 0x2776 <strcpy+0x4>
    277e:	08 95       	ret

00002780 <ltoa>:
ltoa():
    2780:	25 32       	cpi	r18, 0x25	; 37
    2782:	31 05       	cpc	r19, r1
    2784:	20 f4       	brcc	.+8      	; 0x278e <ltoa+0xe>
    2786:	22 30       	cpi	r18, 0x02	; 2
    2788:	10 f0       	brcs	.+4      	; 0x278e <ltoa+0xe>
    278a:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <__ltoa_ncheck>
    278e:	fa 01       	movw	r30, r20
    2790:	10 82       	st	Z, r1
    2792:	ca 01       	movw	r24, r20
    2794:	08 95       	ret

00002796 <__ltoa_ncheck>:
__ltoa_ncheck():
    2796:	bb 27       	eor	r27, r27
    2798:	2a 30       	cpi	r18, 0x0A	; 10
    279a:	51 f4       	brne	.+20     	; 0x27b0 <__ltoa_ncheck+0x1a>
    279c:	99 23       	and	r25, r25
    279e:	42 f4       	brpl	.+16     	; 0x27b0 <__ltoa_ncheck+0x1a>
    27a0:	bd e2       	ldi	r27, 0x2D	; 45
    27a2:	90 95       	com	r25
    27a4:	80 95       	com	r24
    27a6:	70 95       	com	r23
    27a8:	61 95       	neg	r22
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	8f 4f       	sbci	r24, 0xFF	; 255
    27ae:	9f 4f       	sbci	r25, 0xFF	; 255
    27b0:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__ultoa_common>

000027b4 <ultoa>:
ultoa():
    27b4:	25 32       	cpi	r18, 0x25	; 37
    27b6:	31 05       	cpc	r19, r1
    27b8:	20 f4       	brcc	.+8      	; 0x27c2 <ultoa+0xe>
    27ba:	22 30       	cpi	r18, 0x02	; 2
    27bc:	10 f0       	brcs	.+4      	; 0x27c2 <ultoa+0xe>
    27be:	0c 94 e5 13 	jmp	0x27ca	; 0x27ca <__ultoa_ncheck>
    27c2:	fa 01       	movw	r30, r20
    27c4:	10 82       	st	Z, r1
    27c6:	ca 01       	movw	r24, r20
    27c8:	08 95       	ret

000027ca <__ultoa_ncheck>:
__ultoa_ncheck():
    27ca:	bb 27       	eor	r27, r27

000027cc <__ultoa_common>:
    27cc:	fa 01       	movw	r30, r20
    27ce:	a6 2f       	mov	r26, r22
    27d0:	62 17       	cp	r22, r18
    27d2:	71 05       	cpc	r23, r1
    27d4:	81 05       	cpc	r24, r1
    27d6:	91 05       	cpc	r25, r1
    27d8:	33 0b       	sbc	r19, r19
    27da:	30 fb       	bst	r19, 0
    27dc:	66 f0       	brts	.+24     	; 0x27f6 <__ultoa_common+0x2a>
    27de:	aa 27       	eor	r26, r26
    27e0:	66 0f       	add	r22, r22
    27e2:	77 1f       	adc	r23, r23
    27e4:	88 1f       	adc	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	aa 1f       	adc	r26, r26
    27ea:	a2 17       	cp	r26, r18
    27ec:	10 f0       	brcs	.+4      	; 0x27f2 <__ultoa_common+0x26>
    27ee:	a2 1b       	sub	r26, r18
    27f0:	63 95       	inc	r22
    27f2:	38 50       	subi	r19, 0x08	; 8
    27f4:	a9 f7       	brne	.-22     	; 0x27e0 <__ultoa_common+0x14>
    27f6:	a0 5d       	subi	r26, 0xD0	; 208
    27f8:	aa 33       	cpi	r26, 0x3A	; 58
    27fa:	08 f0       	brcs	.+2      	; 0x27fe <__ultoa_common+0x32>
    27fc:	a9 5d       	subi	r26, 0xD9	; 217
    27fe:	a1 93       	st	Z+, r26
    2800:	36 f7       	brtc	.-52     	; 0x27ce <__ultoa_common+0x2>
    2802:	b1 11       	cpse	r27, r1
    2804:	b1 93       	st	Z+, r27
    2806:	10 82       	st	Z, r1
    2808:	ca 01       	movw	r24, r20
    280a:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <strrev>

0000280e <utoa>:
utoa():
    280e:	45 32       	cpi	r20, 0x25	; 37
    2810:	51 05       	cpc	r21, r1
    2812:	20 f4       	brcc	.+8      	; 0x281c <utoa+0xe>
    2814:	42 30       	cpi	r20, 0x02	; 2
    2816:	10 f0       	brcs	.+4      	; 0x281c <utoa+0xe>
    2818:	0c 94 12 14 	jmp	0x2824	; 0x2824 <__utoa_ncheck>
    281c:	fb 01       	movw	r30, r22
    281e:	10 82       	st	Z, r1
    2820:	cb 01       	movw	r24, r22
    2822:	08 95       	ret

00002824 <__utoa_ncheck>:
__utoa_ncheck():
    2824:	bb 27       	eor	r27, r27

00002826 <__utoa_common>:
    2826:	fb 01       	movw	r30, r22
    2828:	55 27       	eor	r21, r21
    282a:	aa 27       	eor	r26, r26
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	aa 1f       	adc	r26, r26
    2832:	a4 17       	cp	r26, r20
    2834:	10 f0       	brcs	.+4      	; 0x283a <__utoa_common+0x14>
    2836:	a4 1b       	sub	r26, r20
    2838:	83 95       	inc	r24
    283a:	50 51       	subi	r21, 0x10	; 16
    283c:	b9 f7       	brne	.-18     	; 0x282c <__utoa_common+0x6>
    283e:	a0 5d       	subi	r26, 0xD0	; 208
    2840:	aa 33       	cpi	r26, 0x3A	; 58
    2842:	08 f0       	brcs	.+2      	; 0x2846 <__utoa_common+0x20>
    2844:	a9 5d       	subi	r26, 0xD9	; 217
    2846:	a1 93       	st	Z+, r26
    2848:	00 97       	sbiw	r24, 0x00	; 0
    284a:	79 f7       	brne	.-34     	; 0x282a <__utoa_common+0x4>
    284c:	b1 11       	cpse	r27, r1
    284e:	b1 93       	st	Z+, r27
    2850:	11 92       	st	Z+, r1
    2852:	cb 01       	movw	r24, r22
    2854:	0c 94 2c 14 	jmp	0x2858	; 0x2858 <strrev>

00002858 <strrev>:
strrev():
    2858:	dc 01       	movw	r26, r24
    285a:	fc 01       	movw	r30, r24
    285c:	67 2f       	mov	r22, r23
    285e:	71 91       	ld	r23, Z+
    2860:	77 23       	and	r23, r23
    2862:	e1 f7       	brne	.-8      	; 0x285c <strrev+0x4>
    2864:	32 97       	sbiw	r30, 0x02	; 2
    2866:	04 c0       	rjmp	.+8      	; 0x2870 <strrev+0x18>
    2868:	7c 91       	ld	r23, X
    286a:	6d 93       	st	X+, r22
    286c:	70 83       	st	Z, r23
    286e:	62 91       	ld	r22, -Z
    2870:	ae 17       	cp	r26, r30
    2872:	bf 07       	cpc	r27, r31
    2874:	c8 f3       	brcs	.-14     	; 0x2868 <strrev+0x10>
    2876:	08 95       	ret

00002878 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    2878:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    287a:	c4 e8       	ldi	r28, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    287c:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    287e:	04 c0       	rjmp	.+8      	; 0x2888 <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    2880:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    2882:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    2886:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    2888:	c5 38       	cpi	r28, 0x85	; 133
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    288a:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    288c:	c9 f7       	brne	.-14     	; 0x2880 <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    288e:	f8 94       	cli

00002890 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2890:	ff cf       	rjmp	.-2      	; 0x2890 <__stop_program>
