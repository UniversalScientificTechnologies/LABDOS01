
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/build/LABDOS.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__dtors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 93 0f 	jmp	0x1f26	; 0x1f26 <__vector_18>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_20>
      54:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_21>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	0c 94 33 0a 	jmp	0x1466	; 0x1466 <__vector_26>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 00       	nop
      8e:	00 02       	muls	r16, r16
      90:	03 00       	.word	0x0003	; ????
      92:	0a 0b       	sbc	r16, r26
      94:	00 00       	nop
      96:	00 00       	nop
      98:	05 04       	cpc	r0, r5
      9a:	09 08       	sbc	r0, r9
	...

000000ac <digital_pin_to_bit_mask_PGM>:
      ac:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      bc:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000cc <digital_pin_to_port_PGM>:
      cc:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      dc:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000ec <port_to_output_PGM>:
      ec:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000000f6 <port_to_mode_PGM>:
      f6:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000100 <__ctors_start>:
__ctors_start():
     100:	6c 02       	muls	r22, r28
     102:	29 06       	cpc	r2, r25
     104:	48 09       	sbc	r20, r8
     106:	0c 0d       	add	r16, r12

00000108 <__ctors_end>:
__dtors_start():
     108:	78 02       	muls	r23, r24

0000010a <__dtors_end>:
__dtors_end():
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf ef       	ldi	r28, 0xFF	; 255
     110:	d0 e4       	ldi	r29, 0x40	; 64
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     116:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     118:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     11a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     11c:	ea ec       	ldi	r30, 0xCA	; 202
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     11e:	f8 e2       	ldi	r31, 0x28	; 40
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     120:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     122:	0b bf       	out	0x3b, r16	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     124:	02 c0       	rjmp	.+4      	; 0x12a <__do_copy_data+0x14>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     126:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     128:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     12a:	ac 3b       	cpi	r26, 0xBC	; 188
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     12c:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     12e:	d9 f7       	brne	.-10     	; 0x126 <__do_copy_data+0x10>

00000130 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     130:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     132:	ac eb       	ldi	r26, 0xBC	; 188
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     134:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     136:	01 c0       	rjmp	.+2      	; 0x13a <.do_clear_bss_start>

00000138 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     138:	1d 92       	st	X+, r1

0000013a <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     13a:	a3 33       	cpi	r26, 0x33	; 51
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     13c:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     13e:	e1 f7       	brne	.-8      	; 0x138 <.do_clear_bss_loop>

00000140 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     140:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     142:	c4 e8       	ldi	r28, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     144:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     146:	04 c0       	rjmp	.+8      	; 0x150 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     148:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     14a:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     14c:	0e 94 94 11 	call	0x2328	; 0x2328 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     150:	c0 38       	cpi	r28, 0x80	; 128
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     152:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     154:	c9 f7       	brne	.-14     	; 0x148 <__do_global_ctors+0x8>
     156:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <main>
     15a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <__do_global_dtors>

0000015e <__bad_interrupt>:
__vector_22():
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <loop>:
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:235
  rtc.resetClock();
}


void loop()
{
     162:	4f 92       	push	r4
     164:	5f 92       	push	r5
     166:	6f 92       	push	r6
     168:	7f 92       	push	r7
     16a:	8f 92       	push	r8
     16c:	9f 92       	push	r9
     16e:	af 92       	push	r10
     170:	bf 92       	push	r11
     172:	cf 92       	push	r12
     174:	df 92       	push	r13
     176:	ef 92       	push	r14
     178:	ff 92       	push	r15
     17a:	0f 93       	push	r16
     17c:	1f 93       	push	r17
     17e:	cf 93       	push	r28
     180:	df 93       	push	r29
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	cc 50       	subi	r28, 0x0C	; 12
     188:	d4 40       	sbci	r29, 0x04	; 4
     18a:	0f b6       	in	r0, 0x3f	; 63
     18c:	f8 94       	cli
     18e:	de bf       	out	0x3e, r29	; 62
     190:	0f be       	out	0x3f, r0	; 63
     192:	cd bf       	out	0x3d, r28	; 61
     194:	fe 01       	movw	r30, r28
     196:	31 96       	adiw	r30, 0x01	; 1
     198:	8e 01       	movw	r16, r28
     19a:	0f 5f       	subi	r16, 0xFF	; 255
     19c:	1b 4f       	sbci	r17, 0xFB	; 251
     19e:	7f 01       	movw	r14, r30
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:239 (discriminator 2)
  uint16_t histogram[CHANNELS];
  for(int n=0; n<CHANNELS; n++)
  {
    histogram[n]=0;
     1a0:	11 92       	st	Z+, r1
     1a2:	11 92       	st	Z+, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:237 (discriminator 2)


void loop()
{
  uint16_t histogram[CHANNELS];
  for(int n=0; n<CHANNELS; n++)
     1a4:	e0 17       	cp	r30, r16
     1a6:	f1 07       	cpc	r31, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <loop+0x3e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:243
  {
    histogram[n]=0;
  }

  // dummy conversion
  ADMUX = (analog_reference << 6) | 0b10000; // Select +A0,-A1 for measurement
     1aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     1ae:	20 e4       	ldi	r18, 0x40	; 64
     1b0:	82 9f       	mul	r24, r18
     1b2:	c0 01       	movw	r24, r0
     1b4:	11 24       	eor	r1, r1
     1b6:	80 61       	ori	r24, 0x10	; 16
     1b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:244
  ADCSRB = 0;               // Switching ADC to Free Running mode
     1bc:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:245
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     1c0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1c4:	80 62       	ori	r24, 0x20	; 32
     1c6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:246
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
     1ca:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1ce:	80 64       	ori	r24, 0x40	; 64
     1d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:247
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
     1d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1d8:	84 60       	ori	r24, 0x04	; 4
     1da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:248
  sbi(ADCSRA, 1);        
     1de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1e2:	82 60       	ori	r24, 0x02	; 2
     1e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:249
  sbi(ADCSRA, 0);        
     1e8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1ec:	81 60       	ori	r24, 0x01	; 1
     1ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:251
  
  PORTB = 1;                          // Set reset output for peak detector to H
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	85 b9       	out	0x05, r24	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:252
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     1f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1fa:	80 61       	ori	r24, 0x10	; 16
     1fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:253
  while (bit_is_clear(ADCSRA, ADIF)); // wait for the first dummy conversion 
     200:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     204:	84 ff       	sbrs	r24, 4
     206:	fc cf       	rjmp	.-8      	; 0x200 <loop+0x9e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:254
  DDRB = 0b10011111;                  // Reset peak detector
     208:	8f e9       	ldi	r24, 0x9F	; 159
     20a:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:255
  delayMicroseconds(100);             // guaranteed reset
     20c:	84 e6       	ldi	r24, 0x64	; 100
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 3b 10 	call	0x2076	; 0x2076 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:256
  DDRB = 0b10011110;
     214:	8e e9       	ldi	r24, 0x9E	; 158
     216:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:258

  sbi(ADCSRA, ADIF);        // reset interrupt flag from ADC
     218:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     21c:	80 61       	ori	r24, 0x10	; 16
     21e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:262

  uint16_t suppress = 0;      
    
  while (bit_is_clear(ADCSRA, ADIF)); // wait for dummy conversion 
     222:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     226:	84 ff       	sbrs	r24, 4
     228:	fc cf       	rjmp	.-8      	; 0x222 <loop+0xc0>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:263
  DDRB = 0b10011111;                  // Reset peak detector
     22a:	8f e9       	ldi	r24, 0x9F	; 159
     22c:	84 b9       	out	0x04, r24	; 4
	...
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:268
  asm("NOP");                         // cca 6 us for 2k2 resistor and 1k capacitor in peak detector
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
  asm("NOP");                         
     236:	00 00       	nop
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:269
  DDRB = 0b10011110;
     238:	8e e9       	ldi	r24, 0x9E	; 158
     23a:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:270
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     23c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     240:	80 61       	ori	r24, 0x10	; 16
     242:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     246:	70 eb       	ldi	r23, 0xB0	; 176
     248:	a7 2e       	mov	r10, r23
     24a:	73 eb       	ldi	r23, 0xB3	; 179
     24c:	b7 2e       	mov	r11, r23
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:272
  
  uint8_t previous_sample = 1; // ignore the first ADC
     24e:	99 24       	eor	r9, r9
     250:	93 94       	inc	r9
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:260
  delayMicroseconds(100);             // guaranteed reset
  DDRB = 0b10011110;

  sbi(ADCSRA, ADIF);        // reset interrupt flag from ADC

  uint16_t suppress = 0;      
     252:	d1 2c       	mov	r13, r1
     254:	c1 2c       	mov	r12, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:280
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
    uint8_t raising_edge = PINB; // peak of pulse was before S/H? H = raising edge; L = falling edge
    delayMicroseconds(150);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
    
    DDRB = 0b10011111;                  // Reset peak detector
     256:	ef e9       	ldi	r30, 0x9F	; 159
     258:	7e 2e       	mov	r7, r30
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:282
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
    DDRB = 0b10011110;
     25a:	fe e9       	ldi	r31, 0x9E	; 158
     25c:	6f 2e       	mov	r6, r31
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:276
  
  uint8_t previous_sample = 1; // ignore the first ADC
  // dosimeter integration
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
  {
    while (bit_is_clear(ADCSRA, ADIF)); // wait for end of conversion 
     25e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     262:	84 ff       	sbrs	r24, 4
     264:	fc cf       	rjmp	.-8      	; 0x25e <loop+0xfc>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:277
    uint8_t raising_edge = PINB; // peak of pulse was before S/H? H = raising edge; L = falling edge
     266:	83 b0       	in	r8, 0x03	; 3
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:278
    delayMicroseconds(150);            // 12 us wait for 1.5 cycle of 125 kHz ADC clock for sample/hold for next conversion
     268:	86 e9       	ldi	r24, 0x96	; 150
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 3b 10 	call	0x2076	; 0x2076 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:280
    
    DDRB = 0b10011111;                  // Reset peak detector
     270:	74 b8       	out	0x04, r7	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:281
    delayMicroseconds(7);               // cca 7 us for 2k2 resistor and 100n capacitor in peak detector
     272:	87 e0       	ldi	r24, 0x07	; 7
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 3b 10 	call	0x2076	; 0x2076 <delayMicroseconds>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:282
    DDRB = 0b10011110;
     27a:	64 b8       	out	0x04, r6	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:283
    sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     27c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     280:	80 61       	ori	r24, 0x10	; 16
     282:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:289

    // we have to read ADCL first; doing so locks both ADCL
    // and ADCH until ADCH is read.  reading ADCL second would
    // cause the results of each conversion to be discarded,
    // as ADCL and ADCH would be locked when it completed.
    lo = ADCL;
     286:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     28a:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:290
    hi = ADCH;
     28e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     292:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:293

    // combine the two bytes
    u_sensor = (hi << 7) | (lo >> 1);
     296:	30 e8       	ldi	r19, 0x80	; 128
     298:	83 9f       	mul	r24, r19
     29a:	c0 01       	movw	r24, r0
     29c:	11 24       	eor	r1, r1
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	35 95       	asr	r19
     2a2:	27 95       	ror	r18
     2a4:	82 2b       	or	r24, r18
     2a6:	93 2b       	or	r25, r19
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:296

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     2a8:	8f 3f       	cpi	r24, 0xFF	; 255
     2aa:	91 05       	cpc	r25, r1
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <loop+0x14e>
     2ae:	c4 f5       	brge	.+112    	; 0x320 <loop+0x1be>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:296 (discriminator 1)
     2b0:	93 95       	inc	r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:296 (discriminator 2)
     2b2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <u_sensor+0x1>
     2b6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:298 (discriminator 2)
              
    if (previous_sample & 1) 
     2ba:	90 fe       	sbrs	r9, 0
     2bc:	33 c0       	rjmp	.+102    	; 0x324 <loop+0x1c2>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:301
    //if (false) 
    {
      suppress++;
     2be:	8f ef       	ldi	r24, 0xFF	; 255
     2c0:	c8 1a       	sub	r12, r24
     2c2:	d8 0a       	sbc	r13, r24
     2c4:	e1 e0       	ldi	r30, 0x01	; 1
     2c6:	ae 1a       	sub	r10, r30
     2c8:	b1 08       	sbc	r11, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:308 (discriminator 2)
    else
    {
      histogram[u_sensor]++;
    }

    previous_sample = raising_edge;
     2ca:	98 2c       	mov	r9, r8
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:274 (discriminator 2)
  DDRB = 0b10011110;
  sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
  
  uint8_t previous_sample = 1; // ignore the first ADC
  // dosimeter integration
  for (uint16_t i=0; i<(46000); i++)    // cca 10 s
     2cc:	41 f6       	brne	.-112    	; 0x25e <loop+0xfc>
_ZNK4RTCx9readClockERNS_2tmENS_10timeFunc_tE():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.h:207
	device = d;
}

inline bool RTCx::readClock(struct tm &tm, timeFunc_t func) const
{
	return readClock(&tm, func);
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	40 e0       	ldi	r20, 0x00	; 0
     2d2:	6c eb       	ldi	r22, 0xBC	; 188
     2d4:	71 e0       	ldi	r23, 0x01	; 1
     2d6:	84 ee       	ldi	r24, 0xE4	; 228
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	0e 94 41 07 	call	0xe82	; 0xe82 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:314
  }  
  
  // Data out
  {
    rtc.readClock(tm);
    RTCx::time_t t = RTCx::mktime(&tm);
     2de:	8c eb       	ldi	r24, 0xBC	; 188
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 a1 04 	call	0x942	; 0x942 <RTCx::mktime(RTCx::tm*)>
     2e6:	2b 01       	movw	r4, r22
     2e8:	3c 01       	movw	r6, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:316

    uint16_t noise = base_offset+2;
     2ea:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <base_offset>
     2ee:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <base_offset+0x1>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:320
    uint32_t dose=0;
    #define RANGE 252

    for(int n=noise; n<(base_offset+RANGE); n++)  
     2f2:	c9 01       	movw	r24, r18
     2f4:	02 96       	adiw	r24, 0x02	; 2
     2f6:	fc 01       	movw	r30, r24
     2f8:	ee 0f       	add	r30, r30
     2fa:	ff 1f       	adc	r31, r31
     2fc:	ee 0d       	add	r30, r14
     2fe:	ff 1d       	adc	r31, r15
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:317
  {
    rtc.readClock(tm);
    RTCx::time_t t = RTCx::mktime(&tm);

    uint16_t noise = base_offset+2;
    uint32_t dose=0;
     300:	81 2c       	mov	r8, r1
     302:	91 2c       	mov	r9, r1
     304:	54 01       	movw	r10, r8
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:320
    #define RANGE 252

    for(int n=noise; n<(base_offset+RANGE); n++)  
     306:	24 50       	subi	r18, 0x04	; 4
     308:	3f 4f       	sbci	r19, 0xFF	; 255
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:320 (discriminator 3)
     30a:	82 17       	cp	r24, r18
     30c:	93 07       	cpc	r25, r19
     30e:	c0 f4       	brcc	.+48     	; 0x340 <loop+0x1de>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:322 (discriminator 2)
    {
      dose += histogram[n]; 
     310:	41 91       	ld	r20, Z+
     312:	51 91       	ld	r21, Z+
     314:	84 0e       	add	r8, r20
     316:	95 1e       	adc	r9, r21
     318:	a1 1c       	adc	r10, r1
     31a:	b1 1c       	adc	r11, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:320 (discriminator 2)

    uint16_t noise = base_offset+2;
    uint32_t dose=0;
    #define RANGE 252

    for(int n=noise; n<(base_offset+RANGE); n++)  
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	f5 cf       	rjmp	.-22     	; 0x30a <loop+0x1a8>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:296 (discriminator 2)

    // combine the two bytes
    u_sensor = (hi << 7) | (lo >> 1);

    // manage negative values
    if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     320:	9a 95       	dec	r25
     322:	c7 cf       	rjmp	.-114    	; 0x2b2 <loop+0x150>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:305
    {
      suppress++;
    }
    else
    {
      histogram[u_sensor]++;
     324:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <u_sensor>
     328:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <u_sensor+0x1>
     32c:	ee 0f       	add	r30, r30
     32e:	ff 1f       	adc	r31, r31
     330:	ee 0d       	add	r30, r14
     332:	ff 1d       	adc	r31, r15
     334:	80 81       	ld	r24, Z
     336:	91 81       	ldd	r25, Z+1	; 0x01
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
     33e:	c2 cf       	rjmp	.-124    	; 0x2c4 <loop+0x162>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:325
    for(int n=noise; n<(base_offset+RANGE); n++)  
    {
      dose += histogram[n]; 
    }

    digitalWrite(LED3, HIGH); 
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	87 e1       	ldi	r24, 0x17	; 23
     344:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:328

    // make a string for assembling the data to log:
    String dataString = "";
     348:	6b eb       	ldi	r22, 0xBB	; 187
     34a:	71 e0       	ldi	r23, 0x01	; 1
     34c:	ce 01       	movw	r24, r28
     34e:	89 5f       	subi	r24, 0xF9	; 249
     350:	9b 4f       	sbci	r25, 0xFB	; 251
     352:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <String::String(char const*)>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     356:	64 e3       	ldi	r22, 0x34	; 52
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	ce 01       	movw	r24, r28
     35c:	89 5f       	subi	r24, 0xF9	; 249
     35e:	9b 4f       	sbci	r25, 0xFB	; 251
     360:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:332
    
    // make a string for assembling the data to log:
    dataString += "$HIST,";
    dataString += String(count); 
     364:	60 91 d6 01 	lds	r22, 0x01D6	; 0x8001d6 <count>
     368:	70 91 d7 01 	lds	r23, 0x01D7	; 0x8001d7 <count+0x1>
     36c:	4a e0       	ldi	r20, 0x0A	; 10
     36e:	c8 01       	movw	r24, r16
     370:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     374:	b8 01       	movw	r22, r16
     376:	ce 01       	movw	r24, r28
     378:	89 5f       	subi	r24, 0xF9	; 249
     37a:	9b 4f       	sbci	r25, 0xFB	; 251
     37c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:332
     380:	c8 01       	movw	r24, r16
     382:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     386:	68 e8       	ldi	r22, 0x88	; 136
     388:	71 e0       	ldi	r23, 0x01	; 1
     38a:	ce 01       	movw	r24, r28
     38c:	89 5f       	subi	r24, 0xF9	; 249
     38e:	9b 4f       	sbci	r25, 0xFB	; 251
     390:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:334
    dataString += ",";  
    dataString += String(t-946684800); 
     394:	b3 01       	movw	r22, r6
     396:	a2 01       	movw	r20, r4
     398:	40 58       	subi	r20, 0x80	; 128
     39a:	53 44       	sbci	r21, 0x43	; 67
     39c:	6d 46       	sbci	r22, 0x6D	; 109
     39e:	78 43       	sbci	r23, 0x38	; 56
     3a0:	2a e0       	ldi	r18, 0x0A	; 10
     3a2:	c8 01       	movw	r24, r16
     3a4:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <String::String(long, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     3a8:	b8 01       	movw	r22, r16
     3aa:	ce 01       	movw	r24, r28
     3ac:	89 5f       	subi	r24, 0xF9	; 249
     3ae:	9b 4f       	sbci	r25, 0xFB	; 251
     3b0:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:334
     3b4:	c8 01       	movw	r24, r16
     3b6:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     3ba:	68 e8       	ldi	r22, 0x88	; 136
     3bc:	71 e0       	ldi	r23, 0x01	; 1
     3be:	ce 01       	movw	r24, r28
     3c0:	89 5f       	subi	r24, 0xF9	; 249
     3c2:	9b 4f       	sbci	r25, 0xFB	; 251
     3c4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:336
    dataString += ",";
    dataString += String(suppress);
     3c8:	4a e0       	ldi	r20, 0x0A	; 10
     3ca:	b6 01       	movw	r22, r12
     3cc:	c8 01       	movw	r24, r16
     3ce:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     3d2:	b8 01       	movw	r22, r16
     3d4:	ce 01       	movw	r24, r28
     3d6:	89 5f       	subi	r24, 0xF9	; 249
     3d8:	9b 4f       	sbci	r25, 0xFB	; 251
     3da:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:336
     3de:	c8 01       	movw	r24, r16
     3e0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     3e4:	68 e8       	ldi	r22, 0x88	; 136
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	ce 01       	movw	r24, r28
     3ea:	89 5f       	subi	r24, 0xF9	; 249
     3ec:	9b 4f       	sbci	r25, 0xFB	; 251
     3ee:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:338
    dataString += ",";
    dataString += String(dose);
     3f2:	2a e0       	ldi	r18, 0x0A	; 10
     3f4:	b5 01       	movw	r22, r10
     3f6:	a4 01       	movw	r20, r8
     3f8:	c8 01       	movw	r24, r16
     3fa:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <String::String(unsigned long, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     3fe:	b8 01       	movw	r22, r16
     400:	ce 01       	movw	r24, r28
     402:	89 5f       	subi	r24, 0xF9	; 249
     404:	9b 4f       	sbci	r25, 0xFB	; 251
     406:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:338
     40a:	c8 01       	movw	r24, r16
     40c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:340
    
    for(int n=base_offset-1; n<(base_offset-1+RANGE); n++)  
     410:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <base_offset>
     414:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <base_offset+0x1>
     418:	6c 01       	movw	r12, r24
     41a:	f1 e0       	ldi	r31, 0x01	; 1
     41c:	cf 1a       	sub	r12, r31
     41e:	d1 08       	sbc	r13, r1
     420:	81 50       	subi	r24, 0x01	; 1
     422:	90 48       	sbci	r25, 0x80	; 128
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	e8 0e       	add	r14, r24
     42a:	f9 1e       	adc	r15, r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:340 (discriminator 3)
     42c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <base_offset>
     430:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <base_offset+0x1>
     434:	85 50       	subi	r24, 0x05	; 5
     436:	9f 4f       	sbci	r25, 0xFF	; 255
     438:	c8 16       	cp	r12, r24
     43a:	d9 06       	cpc	r13, r25
     43c:	e0 f4       	brcc	.+56     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     43e:	68 e8       	ldi	r22, 0x88	; 136
     440:	71 e0       	ldi	r23, 0x01	; 1
     442:	ce 01       	movw	r24, r28
     444:	89 5f       	subi	r24, 0xF9	; 249
     446:	9b 4f       	sbci	r25, 0xFB	; 251
     448:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::concat(char const*)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:343
    {
      dataString += ",";
      dataString += String(histogram[n]); 
     44c:	f7 01       	movw	r30, r14
     44e:	61 91       	ld	r22, Z+
     450:	71 91       	ld	r23, Z+
     452:	7f 01       	movw	r14, r30
     454:	4a e0       	ldi	r20, 0x0A	; 10
     456:	c8 01       	movw	r24, r16
     458:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <String::String(unsigned int, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     45c:	b8 01       	movw	r22, r16
     45e:	ce 01       	movw	r24, r28
     460:	89 5f       	subi	r24, 0xF9	; 249
     462:	9b 4f       	sbci	r25, 0xFB	; 251
     464:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <String::concat(String const&)>
loop():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:343
     468:	c8 01       	movw	r24, r16
     46a:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:340
    dataString += ",";
    dataString += String(suppress);
    dataString += ",";
    dataString += String(dose);
    
    for(int n=base_offset-1; n<(base_offset-1+RANGE); n++)  
     46e:	ff ef       	ldi	r31, 0xFF	; 255
     470:	cf 1a       	sub	r12, r31
     472:	df 0a       	sbc	r13, r31
     474:	db cf       	rjmp	.-74     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:363
    dataString += String(int(maxch-noise+3)); 
    dataString += ",";
    dataString += String(maxener); 
    */
    
    count++;
     476:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <count>
     47a:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <count+0x1>
     47e:	01 96       	adiw	r24, 0x01	; 1
     480:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <count+0x1>
     484:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <count>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:366

    {
      Serial.println(dataString);  // print to terminal (additional 700 ms in DEBUG mode)
     488:	be 01       	movw	r22, r28
     48a:	69 5f       	subi	r22, 0xF9	; 249
     48c:	7b 4f       	sbci	r23, 0xFB	; 251
     48e:	89 e8       	ldi	r24, 0x89	; 137
     490:	92 e0       	ldi	r25, 0x02	; 2
     492:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:367
      digitalWrite(LED3, LOW); 
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	87 e1       	ldi	r24, 0x17	; 23
     49a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:328
    }

    digitalWrite(LED3, HIGH); 

    // make a string for assembling the data to log:
    String dataString = "";
     49e:	ce 01       	movw	r24, r28
     4a0:	89 5f       	subi	r24, 0xF9	; 249
     4a2:	9b 4f       	sbci	r25, 0xFB	; 251
     4a4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:370
    {
      Serial.println(dataString);  // print to terminal (additional 700 ms in DEBUG mode)
      digitalWrite(LED3, LOW); 
    }          
  }    
}
     4a8:	c4 5f       	subi	r28, 0xF4	; 244
     4aa:	db 4f       	sbci	r29, 0xFB	; 251
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	f8 94       	cli
     4b0:	de bf       	out	0x3e, r29	; 62
     4b2:	0f be       	out	0x3f, r0	; 63
     4b4:	cd bf       	out	0x3d, r28	; 61
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	ef 90       	pop	r14
     4c2:	df 90       	pop	r13
     4c4:	cf 90       	pop	r12
     4c6:	bf 90       	pop	r11
     4c8:	af 90       	pop	r10
     4ca:	9f 90       	pop	r9
     4cc:	8f 90       	pop	r8
     4ce:	7f 90       	pop	r7
     4d0:	6f 90       	pop	r6
     4d2:	5f 90       	pop	r5
     4d4:	4f 90       	pop	r4
     4d6:	08 95       	ret

000004d8 <_GLOBAL__sub_I_FWversion>:
_GLOBAL__sub_I_FWversion():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:1
String FWversion = "L03"; // 16 MHz crystal
     4d8:	6b e3       	ldi	r22, 0x3B	; 59
     4da:	71 e0       	ldi	r23, 0x01	; 1
     4dc:	8e ed       	ldi	r24, 0xDE	; 222
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <String::String(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/githash.h:2
// This file is overwritten by github actions, do not update it manually
String githash = "1749b94d4e8e8fffbfc67e24aa856b80742219fb";
     4e4:	6f e3       	ldi	r22, 0x3F	; 63
     4e6:	71 e0       	ldi	r23, 0x01	; 1
     4e8:	88 ed       	ldi	r24, 0xD8	; 216
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <String::String(char const*)>

000004f0 <_GLOBAL__sub_D_FWversion>:
_GLOBAL__sub_D_FWversion():
     4f0:	88 ed       	ldi	r24, 0xD8	; 216
     4f2:	91 e0       	ldi	r25, 0x01	; 1
     4f4:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:1
     4f8:	8e ed       	ldi	r24, 0xDE	; 222
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <String::~String()>

00000500 <setup>:
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:117
//  15  | A15     | A9      | 1x
#define PIN 0
uint8_t analog_reference = INTERNAL2V56; // DEFAULT, INTERNAL, INTERNAL1V1, INTERNAL2V56, or EXTERNAL

void setup()
{
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	62 97       	sbiw	r28, 0x12	; 18
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:118
  pinMode(LED1, OUTPUT); 
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	85 e1       	ldi	r24, 0x15	; 21
     51e:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:119
  digitalWrite(LED1, HIGH); 
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	85 e1       	ldi	r24, 0x15	; 21
     526:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:120
  delay(100);  
     52a:	64 e6       	ldi	r22, 0x64	; 100
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
_ZN14HardwareSerial5beginEm():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     536:	26 e0       	ldi	r18, 0x06	; 6
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	52 ec       	ldi	r21, 0xC2	; 194
     53c:	61 e0       	ldi	r22, 0x01	; 1
     53e:	70 e0       	ldi	r23, 0x00	; 0
     540:	89 e8       	ldi	r24, 0x89	; 137
     542:	92 e0       	ldi	r25, 0x02	; 2
     544:	0e 94 4a 0c 	call	0x1894	; 0x1894 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:125

  // Open serial communications and wait for port to open:
  Serial.begin(115200);

  Serial.println("#Cvak...");
     548:	68 e6       	ldi	r22, 0x68	; 104
     54a:	71 e0       	ldi	r23, 0x01	; 1
     54c:	89 e8       	ldi	r24, 0x89	; 137
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:127
  
  ADMUX = (analog_reference << 6) | ((PIN | 0x10) & 0x1F);
     554:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     558:	20 e4       	ldi	r18, 0x40	; 64
     55a:	82 9f       	mul	r24, r18
     55c:	c0 01       	movw	r24, r0
     55e:	11 24       	eor	r1, r1
     560:	80 61       	ori	r24, 0x10	; 16
     562:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:128
  ADCSRB = 0;               // Switching ADC to Free Running mode
     566:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:129
  sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     56a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     56e:	80 62       	ori	r24, 0x20	; 32
     570:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:130
  sbi(ADCSRA, ADSC);        // ADC start the first conversions
     574:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     578:	80 64       	ori	r24, 0x40	; 64
     57a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:131
  sbi(ADCSRA, 2);           // 0x111 = clock divided by 128, 125 kHz, 104 us for 13 cycles of one AD conversion, 12 us for 1.5 cycle for sample-hold
     57e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     582:	84 60       	ori	r24, 0x04	; 4
     584:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:132
  sbi(ADCSRA, 1);        
     588:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     58c:	82 60       	ori	r24, 0x02	; 2
     58e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:133
  sbi(ADCSRA, 0);        
     592:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     596:	81 60       	ori	r24, 0x01	; 1
     598:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:135

  pinMode(RESET, OUTPUT);   // reset for peak detetor
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:145
  //pinMode(SS, OUTPUT);     
  //pinMode(MOSI, INPUT);     
  //pinMode(MISO, INPUT);     
  //pinMode(SCK, OUTPUT);  

  DDRB = 0b10011110;
     5a4:	8e e9       	ldi	r24, 0x9E	; 158
     5a6:	84 b9       	out	0x04, r24	; 4
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:146
  PORTB = 0b00000000;  // SDcard Power OFF
     5a8:	15 b8       	out	0x05, r1	; 5
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:148

  DDRA = 0b11111100;
     5aa:	8c ef       	ldi	r24, 0xFC	; 252
     5ac:	81 b9       	out	0x01, r24	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:149
  PORTA = 0b00000000;  // SDcard Power OFF
     5ae:	12 b8       	out	0x02, r1	; 2
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:150
  DDRC = 0b11101100;
     5b0:	9c ee       	ldi	r25, 0xEC	; 236
     5b2:	97 b9       	out	0x07, r25	; 7
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:151
  PORTC = 0b00000000;  // SDcard Power OFF
     5b4:	18 b8       	out	0x08, r1	; 8
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:152
  DDRD = 0b11111100;
     5b6:	8a b9       	out	0x0a, r24	; 10
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:153
  PORTD = 0b10000000;  // SDcard Power OFF
     5b8:	80 e8       	ldi	r24, 0x80	; 128
     5ba:	8b b9       	out	0x0b, r24	; 11
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:155

  Wire.setClock(100000);
     5bc:	40 ea       	ldi	r20, 0xA0	; 160
     5be:	56 e8       	ldi	r21, 0x86	; 134
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	87 ee       	ldi	r24, 0xE7	; 231
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 bc 08 	call	0x1178	; 0x1178 <TwoWire::setClock(unsigned long)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:157

  pinMode(LED1, OUTPUT); 
     5cc:	61 e0       	ldi	r22, 0x01	; 1
     5ce:	85 e1       	ldi	r24, 0x15	; 21
     5d0:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:158
  digitalWrite(LED1, HIGH); 
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	85 e1       	ldi	r24, 0x15	; 21
     5d8:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:159
  delay(100);  
     5dc:	64 e6       	ldi	r22, 0x64	; 100
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:160
  Serial.println("#Hmmm...");
     5e8:	61 e7       	ldi	r22, 0x71	; 113
     5ea:	71 e0       	ldi	r23, 0x01	; 1
     5ec:	89 e8       	ldi	r24, 0x89	; 137
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Print::println(char const*)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:161
  pinMode(LED2, OUTPUT); 
     5f4:	61 e0       	ldi	r22, 0x01	; 1
     5f6:	86 e1       	ldi	r24, 0x16	; 22
     5f8:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:162
  digitalWrite(LED2, HIGH); 
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	86 e1       	ldi	r24, 0x16	; 22
     600:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:163
  delay(100);  
     604:	64 e6       	ldi	r22, 0x64	; 100
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
     610:	58 e0       	ldi	r21, 0x08	; 8
     612:	f5 2e       	mov	r15, r21
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:170
  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
    { 
      // measurement of ADC offset
      ADMUX = (analog_reference << 6) | 0b10001; // Select +A1,-A1 for offset correction
     614:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <analog_reference>
     618:	30 e4       	ldi	r19, 0x40	; 64
     61a:	83 9f       	mul	r24, r19
     61c:	c0 01       	movw	r24, r0
     61e:	11 24       	eor	r1, r1
     620:	81 61       	ori	r24, 0x11	; 17
     622:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:171
      delay(50);
     626:	62 e3       	ldi	r22, 0x32	; 50
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:172
      ADCSRB = 0;               // Switching ADC to Free Running mode
     632:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:173
      sbi(ADCSRA, ADATE);       // ADC autotrigger enable (mandatory for free running mode)
     636:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     63a:	80 62       	ori	r24, 0x20	; 32
     63c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:174
      sbi(ADCSRA, ADSC);        // ADC start the first conversions
     640:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     644:	80 64       	ori	r24, 0x40	; 64
     646:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:175
      sbi(ADCSRA, 2);           // 0x111 = clock divided by 128
     64a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     64e:	84 60       	ori	r24, 0x04	; 4
     650:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:176
      sbi(ADCSRA, 1);        
     654:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     658:	82 60       	ori	r24, 0x02	; 2
     65a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:177
      sbi(ADCSRA, 0);        
     65e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     662:	81 60       	ori	r24, 0x01	; 1
     664:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:178
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     668:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     66c:	80 61       	ori	r24, 0x10	; 16
     66e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:179
      while (bit_is_clear(ADCSRA, ADIF)); // wait for the first conversion 
     672:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     676:	84 ff       	sbrs	r24, 4
     678:	fc cf       	rjmp	.-8      	; 0x672 <setup+0x172>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:180
      sbi(ADCSRA, ADIF);                  // reset interrupt flag from ADC
     67a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     67e:	80 61       	ori	r24, 0x10	; 16
     680:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:181
      lo = ADCL;
     684:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     688:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <lo>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:182
      hi = ADCH;
     68c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     690:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <hi>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:184
      // combine the two bytes
      u_sensor = (hi << 7) | (lo >> 1);
     694:	30 e8       	ldi	r19, 0x80	; 128
     696:	83 9f       	mul	r24, r19
     698:	c0 01       	movw	r24, r0
     69a:	11 24       	eor	r1, r1
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	35 95       	asr	r19
     6a0:	27 95       	ror	r18
     6a2:	82 2b       	or	r24, r18
     6a4:	93 2b       	or	r25, r19
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:186
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     6a6:	8f 3f       	cpi	r24, 0xFF	; 255
     6a8:	91 05       	cpc	r25, r1
     6aa:	11 f0       	breq	.+4      	; 0x6b0 <setup+0x1b0>
     6ac:	0c f0       	brlt	.+2      	; 0x6b0 <setup+0x1b0>
     6ae:	f9 c0       	rjmp	.+498    	; 0x8a2 <setup+0x3a2>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:186 (discriminator 1)
     6b0:	93 95       	inc	r25
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:186 (discriminator 2)
     6b2:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <u_sensor+0x1>
     6b6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <u_sensor>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:187 (discriminator 2)
      DCoffset += u_sensor;
     6ba:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <u_sensor>
     6be:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <u_sensor+0x1>
     6c2:	08 0f       	add	r16, r24
     6c4:	19 1f       	adc	r17, r25
     6c6:	fa 94       	dec	r15
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:167 (discriminator 2)
  digitalWrite(LED2, HIGH); 
  delay(100);  

  {
    uint16_t DCoffset;
    for (uint8_t n=0; n<8; n++) 
     6c8:	f1 10       	cpse	r15, r1
     6ca:	a4 cf       	rjmp	.-184    	; 0x614 <setup+0x114>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:189
      u_sensor = (hi << 7) | (lo >> 1);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
      DCoffset += u_sensor;
    }
    base_offset = DCoffset >> 3; // Calculate mean of 8 measurements
     6cc:	83 e0       	ldi	r24, 0x03	; 3
     6ce:	16 95       	lsr	r17
     6d0:	07 95       	ror	r16
     6d2:	8a 95       	dec	r24
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <setup+0x1ce>
     6d6:	10 93 08 01 	sts	0x0108, r17	; 0x800108 <base_offset+0x1>
     6da:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <base_offset>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:192
  }

  pinMode(LED3, OUTPUT); 
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	87 e1       	ldi	r24, 0x17	; 23
     6e2:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:193
  digitalWrite(LED3, HIGH); 
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	87 e1       	ldi	r24, 0x17	; 23
     6ea:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:194
  delay(100);  
     6ee:	64 e6       	ldi	r22, 0x64	; 100
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:197
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
     6fa:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <base_offset>
     6fe:	70 91 08 01 	lds	r23, 0x0108	; 0x800108 <base_offset+0x1>
     702:	4a e0       	ldi	r20, 0x0A	; 10
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <String::String(unsigned int, unsigned char)>
_ZN15StringSumHelperC4EPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:217

class StringSumHelper : public String
{
public:
  StringSumHelper(const String &s) : String(s) {}
  StringSumHelper(const char *p) : String(p) {}
     70c:	6a e7       	ldi	r22, 0x7A	; 122
     70e:	71 e0       	ldi	r23, 0x01	; 1
     710:	ce 01       	movw	r24, r28
     712:	07 96       	adiw	r24, 0x07	; 7
     714:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <String::String(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:197
     718:	6e ed       	ldi	r22, 0xDE	; 222
     71a:	71 e0       	ldi	r23, 0x01	; 1
     71c:	ce 01       	movw	r24, r28
     71e:	07 96       	adiw	r24, 0x07	; 7
     720:	0e 94 56 0f 	call	0x1eac	; 0x1eac <operator+(StringSumHelper const&, String const&)>
     724:	68 e8       	ldi	r22, 0x88	; 136
     726:	71 e0       	ldi	r23, 0x01	; 1
     728:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <operator+(StringSumHelper const&, char const*)>
     72c:	be 01       	movw	r22, r28
     72e:	6f 5f       	subi	r22, 0xFF	; 255
     730:	7f 4f       	sbci	r23, 0xFF	; 255
     732:	0e 94 56 0f 	call	0x1eac	; 0x1eac <operator+(StringSumHelper const&, String const&)>
     736:	68 e8       	ldi	r22, 0x88	; 136
     738:	71 e0       	ldi	r23, 0x01	; 1
     73a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <operator+(StringSumHelper const&, char const*)>
     73e:	68 ed       	ldi	r22, 0xD8	; 216
     740:	71 e0       	ldi	r23, 0x01	; 1
     742:	0e 94 56 0f 	call	0x1eac	; 0x1eac <operator+(StringSumHelper const&, String const&)>
     746:	68 e8       	ldi	r22, 0x88	; 136
     748:	71 e0       	ldi	r23, 0x01	; 1
     74a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <operator+(StringSumHelper const&, char const*)>
     74e:	bc 01       	movw	r22, r24
     750:	ce 01       	movw	r24, r28
     752:	0d 96       	adiw	r24, 0x0d	; 13
     754:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <String::String(String const&)>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:213
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
  void move(String &rhs);
  #endif
};

class StringSumHelper : public String
     758:	ce 01       	movw	r24, r28
     75a:	07 96       	adiw	r24, 0x07	; 7
     75c:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:199
  
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
     768:	68 e5       	ldi	r22, 0x58	; 88
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	87 ee       	ldi	r24, 0xE7	; 231
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	0e 94 ca 08 	call	0x1194	; 0x1194 <TwoWire::beginTransmission(int)>
_ZN7TwoWire5writeEi():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.h:86
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     774:	68 e0       	ldi	r22, 0x08	; 8
     776:	87 ee       	ldi	r24, 0xE7	; 231
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	87 ee       	ldi	r24, 0xE7	; 231
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:202
  Wire.write((int)0x08); // MSB
  Wire.write((int)0x00); // LSB
  Wire.endTransmission();
     788:	87 ee       	ldi	r24, 0xE7	; 231
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:203
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
     790:	40 e1       	ldi	r20, 0x10	; 16
     792:	68 e5       	ldi	r22, 0x58	; 88
     794:	87 ee       	ldi	r24, 0xE7	; 231
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 42 09 	call	0x1284	; 0x1284 <TwoWire::requestFrom(unsigned char, unsigned char)>
     79c:	10 e1       	ldi	r17, 0x10	; 16
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:206
  for (int8_t reg=0; reg<16; reg++)
  { 
    uint8_t serialbyte = Wire.read(); // receive a byte
     79e:	87 ee       	ldi	r24, 0xE7	; 231
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     7a6:	08 2f       	mov	r16, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:207
    if (serialbyte<0x10) dataString += "0";
     7a8:	80 31       	cpi	r24, 0x10	; 16
     7aa:	30 f4       	brcc	.+12     	; 0x7b8 <setup+0x2b8>
_ZN6StringpLEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:114
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
  String & operator += (const char *cstr)   {concat(cstr); return (*this);}
     7ac:	6a e8       	ldi	r22, 0x8A	; 138
     7ae:	71 e0       	ldi	r23, 0x01	; 1
     7b0:	ce 01       	movw	r24, r28
     7b2:	0d 96       	adiw	r24, 0x0d	; 13
     7b4:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <String::concat(char const*)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:208 (discriminator 2)
    dataString += String(serialbyte,HEX);    
     7b8:	40 e1       	ldi	r20, 0x10	; 16
     7ba:	60 2f       	mov	r22, r16
     7bc:	ce 01       	movw	r24, r28
     7be:	01 96       	adiw	r24, 0x01	; 1
     7c0:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <String::String(unsigned char, unsigned char)>
_ZN6StringpLERKS_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.h:113 (discriminator 2)
  unsigned char concat(double num);
  unsigned char concat(const __FlashStringHelper * str);

  // if there's not enough memory for the concatenated value, the string
  // will be left unchanged (but this isn't signalled in any way)
  String & operator += (const String &rhs)  {concat(rhs); return (*this);}
     7c4:	be 01       	movw	r22, r28
     7c6:	6f 5f       	subi	r22, 0xFF	; 255
     7c8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ca:	ce 01       	movw	r24, r28
     7cc:	0d 96       	adiw	r24, 0x0d	; 13
     7ce:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <String::concat(String const&)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:208 (discriminator 2)
     7d2:	ce 01       	movw	r24, r28
     7d4:	01 96       	adiw	r24, 0x01	; 1
     7d6:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:209 (discriminator 2)
    serialhash += serialbyte;
     7da:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <serialhash>
     7de:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <serialhash+0x1>
     7e2:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <serialhash+0x2>
     7e6:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <serialhash+0x3>
     7ea:	80 0f       	add	r24, r16
     7ec:	91 1d       	adc	r25, r1
     7ee:	a1 1d       	adc	r26, r1
     7f0:	b1 1d       	adc	r27, r1
     7f2:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <serialhash>
     7f6:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <serialhash+0x1>
     7fa:	a0 93 d4 01 	sts	0x01D4, r26	; 0x8001d4 <serialhash+0x2>
     7fe:	b0 93 d5 01 	sts	0x01D5, r27	; 0x8001d5 <serialhash+0x3>
     802:	11 50       	subi	r17, 0x01	; 1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:204 (discriminator 2)
  Wire.beginTransmission(0x58);                   // request SN from EEPROM
  Wire.write((int)0x08); // MSB
  Wire.write((int)0x00); // LSB
  Wire.endTransmission();
  Wire.requestFrom((uint8_t)0x58, (uint8_t)16);    
  for (int8_t reg=0; reg<16; reg++)
     804:	61 f6       	brne	.-104    	; 0x79e <setup+0x29e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:213
    dataString += String(serialbyte,HEX);    
    serialhash += serialbyte;
  }

  {
    Serial.println(dataString);  // print SN to terminal 
     806:	be 01       	movw	r22, r28
     808:	63 5f       	subi	r22, 0xF3	; 243
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	89 e8       	ldi	r24, 0x89	; 137
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Print::println(String const&)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:217
  }    

  
  pinMode(LED1, OUTPUT); 
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	85 e1       	ldi	r24, 0x15	; 21
     818:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:218
  digitalWrite(LED1, LOW); 
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	85 e1       	ldi	r24, 0x15	; 21
     820:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:219
  delay(100);  
     824:	64 e6       	ldi	r22, 0x64	; 100
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:220
  pinMode(LED2, OUTPUT); 
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	86 e1       	ldi	r24, 0x16	; 22
     834:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:221
  digitalWrite(LED2, LOW); 
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	86 e1       	ldi	r24, 0x16	; 22
     83c:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:222
  delay(100);  
     840:	64 e6       	ldi	r22, 0x64	; 100
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:223
  pinMode(LED3, OUTPUT); 
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	87 e1       	ldi	r24, 0x17	; 23
     850:	0e 94 b0 10 	call	0x2160	; 0x2160 <pinMode>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:224
  digitalWrite(LED3, LOW); 
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	87 e1       	ldi	r24, 0x17	; 23
     858:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <digitalWrite>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:225
  delay(100);  
     85c:	64 e6       	ldi	r22, 0x64	; 100
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 02 10 	call	0x2004	; 0x2004 <delay>
_ZN4RTCx9autoprobeEv():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.h:131
	RTCx(void);
	RTCx(uint8_t a);
	RTCx(uint8_t a, device_t d);

	inline bool autoprobe(void) {
		return autoprobe(&autoprobeDeviceList[0], autoprobeDeviceAddresses, sizeof(autoprobeDeviceList));
     868:	26 e0       	ldi	r18, 0x06	; 6
     86a:	4c e8       	ldi	r20, 0x8C	; 140
     86c:	51 e0       	ldi	r21, 0x01	; 1
     86e:	6f e8       	ldi	r22, 0x8F	; 143
     870:	71 e0       	ldi	r23, 0x01	; 1
     872:	84 ee       	ldi	r24, 0xE4	; 228
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 58 06 	call	0xcb0	; 0xcb0 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)>
setup():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:230


  // Initiates RTC
  rtc.autoprobe();
  rtc.resetClock();
     87a:	84 ee       	ldi	r24, 0xE4	; 228
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 4a 06 	call	0xc94	; 0xc94 <RTCx::resetClock() const>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:197
  pinMode(LED3, OUTPUT); 
  digitalWrite(LED3, HIGH); 
  delay(100);  
  
  // make a string for device identification output
  String dataString = "$DOS,LABDOS01A," + FWversion + "," + String(base_offset) + "," + githash + ","; // FW version and Git hash
     882:	ce 01       	movw	r24, r28
     884:	0d 96       	adiw	r24, 0x0d	; 13
     886:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <String::~String()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:231


  // Initiates RTC
  rtc.autoprobe();
  rtc.resetClock();
}
     88a:	62 96       	adiw	r28, 0x12	; 18
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	08 95       	ret
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/LABDOS.ino:186 (discriminator 2)
      lo = ADCL;
      hi = ADCH;
      // combine the two bytes
      u_sensor = (hi << 7) | (lo >> 1);
      // manage negative values
      if (u_sensor <= (CHANNELS/2)-1 ) {u_sensor += (CHANNELS/2);} else {u_sensor -= (CHANNELS/2);}
     8a2:	9a 95       	dec	r25
     8a4:	06 cf       	rjmp	.-500    	; 0x6b2 <setup+0x1b2>

000008a6 <RTCx::daysInMonth(unsigned int, unsigned char)>:
_ZN4RTCx11daysInMonthEjh():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:681
			return ((d & 0x80u) ? -r : r);
		}
		break;

	case PCF85263:
		return readData(0x24);
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	2d 97       	sbiw	r28, 0x0d	; 13
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	2d e0       	ldi	r18, 0x0D	; 13
     8bc:	e9 e0       	ldi	r30, 0x09	; 9
     8be:	f1 e0       	ldi	r31, 0x01	; 1
     8c0:	de 01       	movw	r26, r28
     8c2:	11 96       	adiw	r26, 0x01	; 1
     8c4:	01 90       	ld	r0, Z+
     8c6:	0d 92       	st	X+, r0
     8c8:	2a 95       	dec	r18
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <RTCx::daysInMonth(unsigned int, unsigned char)+0x1e>
     8cc:	62 30       	cpi	r22, 0x02	; 2
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <RTCx::daysInMonth(unsigned int, unsigned char)+0x32>
_ZN4RTCx10isLeapYearEj():
     8d0:	83 70       	andi	r24, 0x03	; 3
     8d2:	99 27       	eor	r25, r25
_ZN4RTCx11daysInMonthEjh():
     8d4:	89 2b       	or	r24, r25
     8d6:	81 f0       	breq	.+32     	; 0x8f8 <RTCx::daysInMonth(unsigned int, unsigned char)+0x52>
     8d8:	e1 e0       	ldi	r30, 0x01	; 1
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	ec 0f       	add	r30, r28
     8de:	fd 1f       	adc	r31, r29
     8e0:	e6 0f       	add	r30, r22
     8e2:	f1 1d       	adc	r31, r1
     8e4:	80 81       	ld	r24, Z
     8e6:	2d 96       	adiw	r28, 0x0d	; 13
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	de bf       	out	0x3e, r29	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret
     8f8:	8d e1       	ldi	r24, 0x1D	; 29
     8fa:	f5 cf       	rjmp	.-22     	; 0x8e6 <RTCx::daysInMonth(unsigned int, unsigned char)+0x40>

000008fc <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)>:
_ZN4RTCx9dayOfYearEjhh():
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	7c 01       	movw	r14, r24
     90c:	d6 2e       	mov	r13, r22
     90e:	14 2f       	mov	r17, r20
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	d0 e0       	ldi	r29, 0x00	; 0
     914:	c0 e0       	ldi	r28, 0x00	; 0
     916:	6d 15       	cp	r22, r13
     918:	48 f4       	brcc	.+18     	; 0x92c <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)+0x30>
     91a:	01 e0       	ldi	r16, 0x01	; 1
     91c:	06 0f       	add	r16, r22
     91e:	c7 01       	movw	r24, r14
     920:	0e 94 53 04 	call	0x8a6	; 0x8a6 <RTCx::daysInMonth(unsigned int, unsigned char)>
     924:	c8 0f       	add	r28, r24
     926:	d1 1d       	adc	r29, r1
     928:	60 2f       	mov	r22, r16
     92a:	f5 cf       	rjmp	.-22     	; 0x916 <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)+0x1a>
     92c:	ce 01       	movw	r24, r28
     92e:	81 0f       	add	r24, r17
     930:	91 1d       	adc	r25, r1
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	08 95       	ret

00000942 <RTCx::mktime(RTCx::tm*)>:
_ZN4RTCx6mktimeEPNS_2tmE():
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	9f 92       	push	r9
     948:	af 92       	push	r10
     94a:	bf 92       	push	r11
     94c:	cf 92       	push	r12
     94e:	df 92       	push	r13
     950:	ef 92       	push	r14
     952:	ff 92       	push	r15
     954:	0f 93       	push	r16
     956:	1f 93       	push	r17
     958:	cf 93       	push	r28
     95a:	df 93       	push	r29
     95c:	ec 01       	movw	r28, r24
     95e:	88 81       	ld	r24, Y
     960:	99 81       	ldd	r25, Y+1	; 0x01
     962:	6c e3       	ldi	r22, 0x3C	; 60
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	0e 94 3f 11 	call	0x227e	; 0x227e <__divmodhi4>
     96a:	2a 81       	ldd	r18, Y+2	; 0x02
     96c:	3b 81       	ldd	r19, Y+3	; 0x03
     96e:	62 0f       	add	r22, r18
     970:	73 1f       	adc	r23, r19
     972:	7b 83       	std	Y+3, r23	; 0x03
     974:	6a 83       	std	Y+2, r22	; 0x02
     976:	97 fd       	sbrc	r25, 7
     978:	33 c0       	rjmp	.+102    	; 0x9e0 <RTCx::mktime(RTCx::tm*)+0x9e>
     97a:	99 83       	std	Y+1, r25	; 0x01
     97c:	88 83       	st	Y, r24
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	9b 81       	ldd	r25, Y+3	; 0x03
     982:	6c e3       	ldi	r22, 0x3C	; 60
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 3f 11 	call	0x227e	; 0x227e <__divmodhi4>
     98a:	2c 81       	ldd	r18, Y+4	; 0x04
     98c:	3d 81       	ldd	r19, Y+5	; 0x05
     98e:	62 0f       	add	r22, r18
     990:	73 1f       	adc	r23, r19
     992:	7d 83       	std	Y+5, r23	; 0x05
     994:	6c 83       	std	Y+4, r22	; 0x04
     996:	97 fd       	sbrc	r25, 7
     998:	2b c0       	rjmp	.+86     	; 0x9f0 <RTCx::mktime(RTCx::tm*)+0xae>
     99a:	9b 83       	std	Y+3, r25	; 0x03
     99c:	8a 83       	std	Y+2, r24	; 0x02
     99e:	8c 81       	ldd	r24, Y+4	; 0x04
     9a0:	9d 81       	ldd	r25, Y+5	; 0x05
     9a2:	68 e1       	ldi	r22, 0x18	; 24
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	0e 94 3f 11 	call	0x227e	; 0x227e <__divmodhi4>
     9aa:	2e 81       	ldd	r18, Y+6	; 0x06
     9ac:	3f 81       	ldd	r19, Y+7	; 0x07
     9ae:	62 0f       	add	r22, r18
     9b0:	73 1f       	adc	r23, r19
     9b2:	7f 83       	std	Y+7, r23	; 0x07
     9b4:	6e 83       	std	Y+6, r22	; 0x06
     9b6:	97 fd       	sbrc	r25, 7
     9b8:	23 c0       	rjmp	.+70     	; 0xa00 <RTCx::mktime(RTCx::tm*)+0xbe>
     9ba:	9d 83       	std	Y+5, r25	; 0x05
     9bc:	8c 83       	std	Y+4, r24	; 0x04
     9be:	88 85       	ldd	r24, Y+8	; 0x08
     9c0:	99 85       	ldd	r25, Y+9	; 0x09
     9c2:	0c 97       	sbiw	r24, 0x0c	; 12
     9c4:	40 f4       	brcc	.+16     	; 0x9d6 <RTCx::mktime(RTCx::tm*)+0x94>
     9c6:	8e 81       	ldd	r24, Y+6	; 0x06
     9c8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ca:	3b e0       	ldi	r19, 0x0B	; 11
     9cc:	a3 2e       	mov	r10, r19
     9ce:	b1 2c       	mov	r11, r1
     9d0:	18 16       	cp	r1, r24
     9d2:	19 06       	cpc	r1, r25
     9d4:	fc f0       	brlt	.+62     	; 0xa14 <RTCx::mktime(RTCx::tm*)+0xd2>
     9d6:	cc 24       	eor	r12, r12
     9d8:	ca 94       	dec	r12
     9da:	dc 2c       	mov	r13, r12
     9dc:	76 01       	movw	r14, r12
     9de:	d4 c0       	rjmp	.+424    	; 0xb88 <RTCx::mktime(RTCx::tm*)+0x246>
     9e0:	cc 96       	adiw	r24, 0x3c	; 60
     9e2:	99 83       	std	Y+1, r25	; 0x01
     9e4:	88 83       	st	Y, r24
     9e6:	61 50       	subi	r22, 0x01	; 1
     9e8:	71 09       	sbc	r23, r1
     9ea:	7b 83       	std	Y+3, r23	; 0x03
     9ec:	6a 83       	std	Y+2, r22	; 0x02
     9ee:	c7 cf       	rjmp	.-114    	; 0x97e <RTCx::mktime(RTCx::tm*)+0x3c>
     9f0:	cc 96       	adiw	r24, 0x3c	; 60
     9f2:	9b 83       	std	Y+3, r25	; 0x03
     9f4:	8a 83       	std	Y+2, r24	; 0x02
     9f6:	61 50       	subi	r22, 0x01	; 1
     9f8:	71 09       	sbc	r23, r1
     9fa:	7d 83       	std	Y+5, r23	; 0x05
     9fc:	6c 83       	std	Y+4, r22	; 0x04
     9fe:	cf cf       	rjmp	.-98     	; 0x99e <RTCx::mktime(RTCx::tm*)+0x5c>
     a00:	48 96       	adiw	r24, 0x18	; 24
     a02:	9d 83       	std	Y+5, r25	; 0x05
     a04:	8c 83       	std	Y+4, r24	; 0x04
     a06:	61 50       	subi	r22, 0x01	; 1
     a08:	71 09       	sbc	r23, r1
     a0a:	7f 83       	std	Y+7, r23	; 0x07
     a0c:	6e 83       	std	Y+6, r22	; 0x06
     a0e:	d7 cf       	rjmp	.-82     	; 0x9be <RTCx::mktime(RTCx::tm*)+0x7c>
     a10:	d9 86       	std	Y+9, r13	; 0x09
     a12:	c8 86       	std	Y+8, r12	; 0x08
     a14:	c8 84       	ldd	r12, Y+8	; 0x08
     a16:	d9 84       	ldd	r13, Y+9	; 0x09
     a18:	77 24       	eor	r7, r7
     a1a:	73 94       	inc	r7
     a1c:	7c 0c       	add	r7, r12
     a1e:	0a 85       	ldd	r16, Y+10	; 0x0a
     a20:	1b 85       	ldd	r17, Y+11	; 0x0b
     a22:	48 01       	movw	r8, r16
     a24:	84 e9       	ldi	r24, 0x94	; 148
     a26:	88 1a       	sub	r8, r24
     a28:	88 ef       	ldi	r24, 0xF8	; 248
     a2a:	98 0a       	sbc	r9, r24
     a2c:	67 2d       	mov	r22, r7
     a2e:	c4 01       	movw	r24, r8
     a30:	0e 94 53 04 	call	0x8a6	; 0x8a6 <RTCx::daysInMonth(unsigned int, unsigned char)>
     a34:	ee 80       	ldd	r14, Y+6	; 0x06
     a36:	ff 80       	ldd	r15, Y+7	; 0x07
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	8e 15       	cp	r24, r14
     a3c:	9f 05       	cpc	r25, r15
     a3e:	94 f4       	brge	.+36     	; 0xa64 <RTCx::mktime(RTCx::tm*)+0x122>
     a40:	e8 1a       	sub	r14, r24
     a42:	f9 0a       	sbc	r15, r25
     a44:	ff 82       	std	Y+7, r15	; 0x07
     a46:	ee 82       	std	Y+6, r14	; 0x06
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	c8 1a       	sub	r12, r24
     a4c:	d8 0a       	sbc	r13, r24
     a4e:	8c e0       	ldi	r24, 0x0C	; 12
     a50:	c8 16       	cp	r12, r24
     a52:	d1 04       	cpc	r13, r1
     a54:	e9 f6       	brne	.-70     	; 0xa10 <RTCx::mktime(RTCx::tm*)+0xce>
     a56:	19 86       	std	Y+9, r1	; 0x09
     a58:	18 86       	std	Y+8, r1	; 0x08
     a5a:	0f 5f       	subi	r16, 0xFF	; 255
     a5c:	1f 4f       	sbci	r17, 0xFF	; 255
     a5e:	1b 87       	std	Y+11, r17	; 0x0b
     a60:	0a 87       	std	Y+10, r16	; 0x0a
     a62:	d8 cf       	rjmp	.-80     	; 0xa14 <RTCx::mktime(RTCx::tm*)+0xd2>
     a64:	1e 14       	cp	r1, r14
     a66:	1f 04       	cpc	r1, r15
     a68:	dc f0       	brlt	.+54     	; 0xaa0 <RTCx::mktime(RTCx::tm*)+0x15e>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	c8 1a       	sub	r12, r24
     a6e:	d1 08       	sbc	r13, r1
     a70:	80 f0       	brcs	.+32     	; 0xa92 <RTCx::mktime(RTCx::tm*)+0x150>
     a72:	d9 86       	std	Y+9, r13	; 0x09
     a74:	c8 86       	std	Y+8, r12	; 0x08
     a76:	68 85       	ldd	r22, Y+8	; 0x08
     a78:	6f 5f       	subi	r22, 0xFF	; 255
     a7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a7e:	84 59       	subi	r24, 0x94	; 148
     a80:	98 4f       	sbci	r25, 0xF8	; 248
     a82:	0e 94 53 04 	call	0x8a6	; 0x8a6 <RTCx::daysInMonth(unsigned int, unsigned char)>
     a86:	8e 0d       	add	r24, r14
     a88:	9f 2d       	mov	r25, r15
     a8a:	91 1d       	adc	r25, r1
     a8c:	9f 83       	std	Y+7, r25	; 0x07
     a8e:	8e 83       	std	Y+6, r24	; 0x06
     a90:	c1 cf       	rjmp	.-126    	; 0xa14 <RTCx::mktime(RTCx::tm*)+0xd2>
     a92:	b9 86       	std	Y+9, r11	; 0x09
     a94:	a8 86       	std	Y+8, r10	; 0x08
     a96:	01 50       	subi	r16, 0x01	; 1
     a98:	11 09       	sbc	r17, r1
     a9a:	1b 87       	std	Y+11, r17	; 0x0b
     a9c:	0a 87       	std	Y+10, r16	; 0x0a
     a9e:	eb cf       	rjmp	.-42     	; 0xa76 <RTCx::mktime(RTCx::tm*)+0x134>
     aa0:	4e 2d       	mov	r20, r14
     aa2:	67 2d       	mov	r22, r7
     aa4:	c4 01       	movw	r24, r8
     aa6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <RTCx::dayOfYear(unsigned int, unsigned char, unsigned char)>
     aaa:	fc 01       	movw	r30, r24
     aac:	31 97       	sbiw	r30, 0x01	; 1
     aae:	ff 87       	std	Y+15, r31	; 0x0f
     ab0:	ee 87       	std	Y+14, r30	; 0x0e
     ab2:	06 54       	subi	r16, 0x46	; 70
     ab4:	8d e6       	ldi	r24, 0x6D	; 109
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	08 9f       	mul	r16, r24
     aba:	90 01       	movw	r18, r0
     abc:	09 9f       	mul	r16, r25
     abe:	30 0d       	add	r19, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	03 2e       	mov	r0, r19
     ac4:	00 0c       	add	r0, r0
     ac6:	44 0b       	sbc	r20, r20
     ac8:	55 0b       	sbc	r21, r21
     aca:	80 2f       	mov	r24, r16
     acc:	86 95       	lsr	r24
     ace:	86 95       	lsr	r24
     ad0:	28 0f       	add	r18, r24
     ad2:	31 1d       	adc	r19, r1
     ad4:	41 1d       	adc	r20, r1
     ad6:	51 1d       	adc	r21, r1
     ad8:	60 e8       	ldi	r22, 0x80	; 128
     ada:	71 e5       	ldi	r23, 0x51	; 81
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 1b 11 	call	0x2236	; 0x2236 <__mulsi3>
     ae4:	03 70       	andi	r16, 0x03	; 3
     ae6:	c1 2c       	mov	r12, r1
     ae8:	d1 2c       	mov	r13, r1
     aea:	76 01       	movw	r14, r12
     aec:	03 30       	cpi	r16, 0x03	; 3
     aee:	39 f4       	brne	.+14     	; 0xafe <RTCx::mktime(RTCx::tm*)+0x1bc>
     af0:	20 e8       	ldi	r18, 0x80	; 128
     af2:	c2 2e       	mov	r12, r18
     af4:	21 e5       	ldi	r18, 0x51	; 81
     af6:	d2 2e       	mov	r13, r18
     af8:	ee 24       	eor	r14, r14
     afa:	e3 94       	inc	r14
     afc:	f1 2c       	mov	r15, r1
     afe:	c6 0e       	add	r12, r22
     b00:	d7 1e       	adc	r13, r23
     b02:	e8 1e       	adc	r14, r24
     b04:	f9 1e       	adc	r15, r25
     b06:	df 01       	movw	r26, r30
     b08:	20 e8       	ldi	r18, 0x80	; 128
     b0a:	31 e5       	ldi	r19, 0x51	; 81
     b0c:	41 e0       	ldi	r20, 0x01	; 1
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	0e 94 af 11 	call	0x235e	; 0x235e <__mulshisi3>
     b14:	c6 0e       	add	r12, r22
     b16:	d7 1e       	adc	r13, r23
     b18:	e8 1e       	adc	r14, r24
     b1a:	f9 1e       	adc	r15, r25
     b1c:	ac 81       	ldd	r26, Y+4	; 0x04
     b1e:	bd 81       	ldd	r27, Y+5	; 0x05
     b20:	20 e1       	ldi	r18, 0x10	; 16
     b22:	3e e0       	ldi	r19, 0x0E	; 14
     b24:	0e 94 9d 11 	call	0x233a	; 0x233a <__usmulhisi3>
     b28:	c6 0e       	add	r12, r22
     b2a:	d7 1e       	adc	r13, r23
     b2c:	e8 1e       	adc	r14, r24
     b2e:	f9 1e       	adc	r15, r25
     b30:	2a 81       	ldd	r18, Y+2	; 0x02
     b32:	3b 81       	ldd	r19, Y+3	; 0x03
     b34:	4c e3       	ldi	r20, 0x3C	; 60
     b36:	42 9f       	mul	r20, r18
     b38:	c0 01       	movw	r24, r0
     b3a:	43 9f       	mul	r20, r19
     b3c:	90 0d       	add	r25, r0
     b3e:	11 24       	eor	r1, r1
     b40:	c8 0e       	add	r12, r24
     b42:	d9 1e       	adc	r13, r25
     b44:	e1 1c       	adc	r14, r1
     b46:	f1 1c       	adc	r15, r1
     b48:	88 81       	ld	r24, Y
     b4a:	99 81       	ldd	r25, Y+1	; 0x01
     b4c:	09 2e       	mov	r0, r25
     b4e:	00 0c       	add	r0, r0
     b50:	aa 0b       	sbc	r26, r26
     b52:	bb 0b       	sbc	r27, r27
     b54:	c8 0e       	add	r12, r24
     b56:	d9 1e       	adc	r13, r25
     b58:	ea 1e       	adc	r14, r26
     b5a:	fb 1e       	adc	r15, r27
     b5c:	c7 01       	movw	r24, r14
     b5e:	b6 01       	movw	r22, r12
     b60:	20 e8       	ldi	r18, 0x80	; 128
     b62:	31 e5       	ldi	r19, 0x51	; 81
     b64:	41 e0       	ldi	r20, 0x01	; 1
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	0e 94 75 11 	call	0x22ea	; 0x22ea <__divmodsi4>
     b6c:	ca 01       	movw	r24, r20
     b6e:	b9 01       	movw	r22, r18
     b70:	6c 5f       	subi	r22, 0xFC	; 252
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	8f 4f       	sbci	r24, 0xFF	; 255
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	27 e0       	ldi	r18, 0x07	; 7
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodsi4>
     b84:	7d 87       	std	Y+13, r23	; 0x0d
     b86:	6c 87       	std	Y+12, r22	; 0x0c
     b88:	c7 01       	movw	r24, r14
     b8a:	b6 01       	movw	r22, r12
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	bf 90       	pop	r11
     b9e:	af 90       	pop	r10
     ba0:	9f 90       	pop	r9
     ba2:	8f 90       	pop	r8
     ba4:	7f 90       	pop	r7
     ba6:	08 95       	ret

00000ba8 <RTCx::bcdToDec(unsigned char)>:
_ZN4RTCx8bcdToDecEh():
     ba8:	98 2f       	mov	r25, r24
     baa:	92 95       	swap	r25
     bac:	9f 70       	andi	r25, 0x0F	; 15
     bae:	8f 70       	andi	r24, 0x0F	; 15
     bb0:	2a e0       	ldi	r18, 0x0A	; 10
     bb2:	92 9f       	mul	r25, r18
     bb4:	80 0d       	add	r24, r0
     bb6:	11 24       	eor	r1, r1
     bb8:	08 95       	ret

00000bba <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const>:
_ZNK4RTCx11getRegisterENS_10timeFunc_tERh():
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	6e 97       	sbiw	r28, 0x1e	; 30
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
     bce:	9c 01       	movw	r18, r24
     bd0:	8f e0       	ldi	r24, 0x0F	; 15
     bd2:	e6 e1       	ldi	r30, 0x16	; 22
     bd4:	f1 e0       	ldi	r31, 0x01	; 1
     bd6:	de 01       	movw	r26, r28
     bd8:	50 96       	adiw	r26, 0x10	; 16
     bda:	01 90       	ld	r0, Z+
     bdc:	0d 92       	st	X+, r0
     bde:	8a 95       	dec	r24
     be0:	e1 f7       	brne	.-8      	; 0xbda <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const+0x20>
     be2:	8f e0       	ldi	r24, 0x0F	; 15
     be4:	e5 e2       	ldi	r30, 0x25	; 37
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	de 01       	movw	r26, r28
     bea:	11 96       	adiw	r26, 0x01	; 1
     bec:	01 90       	ld	r0, Z+
     bee:	0d 92       	st	X+, r0
     bf0:	8a 95       	dec	r24
     bf2:	e1 f7       	brne	.-8      	; 0xbec <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const+0x32>
     bf4:	f9 01       	movw	r30, r18
     bf6:	a1 81       	ldd	r26, Z+1	; 0x01
     bf8:	b2 81       	ldd	r27, Z+2	; 0x02
     bfa:	95 e0       	ldi	r25, 0x05	; 5
     bfc:	9a 9f       	mul	r25, r26
     bfe:	f0 01       	movw	r30, r0
     c00:	9b 9f       	mul	r25, r27
     c02:	f0 0d       	add	r31, r0
     c04:	11 24       	eor	r1, r1
     c06:	a1 e0       	ldi	r26, 0x01	; 1
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	ac 0f       	add	r26, r28
     c0c:	bd 1f       	adc	r27, r29
     c0e:	ea 0f       	add	r30, r26
     c10:	fb 1f       	adc	r31, r27
     c12:	e6 0f       	add	r30, r22
     c14:	f7 1f       	adc	r31, r23
     c16:	80 81       	ld	r24, Z
     c18:	fa 01       	movw	r30, r20
     c1a:	80 83       	st	Z, r24
     c1c:	d9 01       	movw	r26, r18
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	2d 91       	ld	r18, X+
     c22:	3c 91       	ld	r19, X
     c24:	92 9f       	mul	r25, r18
     c26:	f0 01       	movw	r30, r0
     c28:	93 9f       	mul	r25, r19
     c2a:	f0 0d       	add	r31, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	8c 0f       	add	r24, r28
     c34:	9d 1f       	adc	r25, r29
     c36:	e8 0f       	add	r30, r24
     c38:	f9 1f       	adc	r31, r25
     c3a:	e6 0f       	add	r30, r22
     c3c:	f7 1f       	adc	r31, r23
     c3e:	87 85       	ldd	r24, Z+15	; 0x0f
     c40:	6e 96       	adiw	r28, 0x1e	; 30
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	08 95       	ret

00000c52 <_GLOBAL__sub_I__ZN4RTCx8epochDowE>:
_ZN4RTCxC4Ev():
     c52:	e4 ee       	ldi	r30, 0xE4	; 228
     c54:	f1 e0       	ldi	r31, 0x01	; 1
     c56:	88 e6       	ldi	r24, 0x68	; 104
     c58:	80 83       	st	Z, r24
     c5a:	12 82       	std	Z+2, r1	; 0x02
     c5c:	11 82       	std	Z+1, r1	; 0x01
_GLOBAL__sub_I__ZN4RTCx8epochDowE():
     c5e:	08 95       	ret

00000c60 <RTCx::writeData(unsigned char, unsigned char) const>:
_ZNK4RTCx9writeDataEhh():
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	d6 2f       	mov	r29, r22
     c66:	c4 2f       	mov	r28, r20
     c68:	fc 01       	movw	r30, r24
     c6a:	60 81       	ld	r22, Z
     c6c:	87 ee       	ldi	r24, 0xE7	; 231
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 c0 08 	call	0x1180	; 0x1180 <TwoWire::beginTransmission(unsigned char)>
     c74:	6d 2f       	mov	r22, r29
     c76:	87 ee       	ldi	r24, 0xE7	; 231
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
     c7e:	6c 2f       	mov	r22, r28
     c80:	87 ee       	ldi	r24, 0xE7	; 231
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
     c88:	87 ee       	ldi	r24, 0xE7	; 231
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	0c 94 45 09 	jmp	0x128a	; 0x128a <TwoWire::endTransmission()>

00000c94 <RTCx::resetClock() const>:
_ZNK4RTCx10resetClockEv():
     c94:	fc 01       	movw	r30, r24
     c96:	21 81       	ldd	r18, Z+1	; 0x01
     c98:	32 81       	ldd	r19, Z+2	; 0x02
     c9a:	22 30       	cpi	r18, 0x02	; 2
     c9c:	31 05       	cpc	r19, r1
     c9e:	31 f4       	brne	.+12     	; 0xcac <RTCx::resetClock() const+0x18>
     ca0:	4c e2       	ldi	r20, 0x2C	; 44
     ca2:	6f e2       	ldi	r22, 0x2F	; 47
     ca4:	0e 94 30 06 	call	0xc60	; 0xc60 <RTCx::writeData(unsigned char, unsigned char) const>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	08 95       	ret
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret

00000cb0 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)>:
_ZN4RTCx9autoprobeEPKNS_8device_tEPKhh():
     cb0:	8f 92       	push	r8
     cb2:	9f 92       	push	r9
     cb4:	af 92       	push	r10
     cb6:	bf 92       	push	r11
     cb8:	cf 92       	push	r12
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	4c 01       	movw	r8, r24
     cca:	7b 01       	movw	r14, r22
     ccc:	8a 01       	movw	r16, r20
     cce:	c2 2e       	mov	r12, r18
     cd0:	d1 2c       	mov	r13, r1
     cd2:	d0 e0       	ldi	r29, 0x00	; 0
     cd4:	c0 e0       	ldi	r28, 0x00	; 0
     cd6:	cc 15       	cp	r28, r12
     cd8:	dd 05       	cpc	r29, r13
     cda:	e9 f1       	breq	.+122    	; 0xd56 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0xa6>
     cdc:	58 01       	movw	r10, r16
     cde:	f8 01       	movw	r30, r16
     ce0:	60 81       	ld	r22, Z
     ce2:	87 ee       	ldi	r24, 0xE7	; 231
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 c0 08 	call	0x1180	; 0x1180 <TwoWire::beginTransmission(unsigned char)>
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	87 ee       	ldi	r24, 0xE7	; 231
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
     cf4:	87 ee       	ldi	r24, 0xE7	; 231
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	f8 01       	movw	r30, r16
     d00:	61 91       	ld	r22, Z+
     d02:	8f 01       	movw	r16, r30
     d04:	87 ee       	ldi	r24, 0xE7	; 231
     d06:	91 e0       	ldi	r25, 0x01	; 1
     d08:	0e 94 42 09 	call	0x1284	; 0x1284 <TwoWire::requestFrom(unsigned char, unsigned char)>
     d0c:	87 ee       	ldi	r24, 0xE7	; 231
     d0e:	91 e0       	ldi	r25, 0x01	; 1
     d10:	0e 94 36 08 	call	0x106c	; 0x106c <TwoWire::available()>
     d14:	9e 01       	movw	r18, r28
     d16:	2f 5f       	subi	r18, 0xFF	; 255
     d18:	3f 4f       	sbci	r19, 0xFF	; 255
     d1a:	89 2b       	or	r24, r25
     d1c:	d1 f0       	breq	.+52     	; 0xd52 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0xa2>
     d1e:	cc 0f       	add	r28, r28
     d20:	dd 1f       	adc	r29, r29
     d22:	ce 0d       	add	r28, r14
     d24:	df 1d       	adc	r29, r15
     d26:	88 81       	ld	r24, Y
     d28:	99 81       	ldd	r25, Y+1	; 0x01
     d2a:	f5 01       	movw	r30, r10
     d2c:	20 81       	ld	r18, Z
     d2e:	f4 01       	movw	r30, r8
     d30:	20 83       	st	Z, r18
     d32:	92 83       	std	Z+2, r25	; 0x02
     d34:	81 83       	std	Z+1, r24	; 0x01
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	cf 90       	pop	r12
     d48:	bf 90       	pop	r11
     d4a:	af 90       	pop	r10
     d4c:	9f 90       	pop	r9
     d4e:	8f 90       	pop	r8
     d50:	08 95       	ret
     d52:	e9 01       	movw	r28, r18
     d54:	c0 cf       	rjmp	.-128    	; 0xcd6 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0x26>
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	ef cf       	rjmp	.-34     	; 0xd38 <RTCx::autoprobe(RTCx::device_t const*, unsigned char const*, unsigned char)+0x88>

00000d5a <RTCx::readData(unsigned char) const>:
_ZNK4RTCx8readDataEh():
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	ec 01       	movw	r28, r24
     d62:	16 2f       	mov	r17, r22
     d64:	68 81       	ld	r22, Y
     d66:	87 ee       	ldi	r24, 0xE7	; 231
     d68:	91 e0       	ldi	r25, 0x01	; 1
     d6a:	0e 94 c0 08 	call	0x1180	; 0x1180 <TwoWire::beginTransmission(unsigned char)>
     d6e:	61 2f       	mov	r22, r17
     d70:	87 ee       	ldi	r24, 0xE7	; 231
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
     d78:	87 ee       	ldi	r24, 0xE7	; 231
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	68 81       	ld	r22, Y
     d84:	87 ee       	ldi	r24, 0xE7	; 231
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	0e 94 42 09 	call	0x1284	; 0x1284 <TwoWire::requestFrom(unsigned char, unsigned char)>
     d8c:	87 ee       	ldi	r24, 0xE7	; 231
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     d94:	c8 2f       	mov	r28, r24
     d96:	87 ee       	ldi	r24, 0xE7	; 231
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
     d9e:	8c 2f       	mov	r24, r28
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	08 95       	ret

00000da8 <RTCx::readTimeSaver(RTCx::tm*, unsigned char, unsigned char) const>:
_ZNK4RTCx13readTimeSaverEPNS_2tmEhh():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:770
	//return pgm_read_byte((regTable[device][func]));
}


bool RTCx::readTimeSaver(struct tm *tm, uint8_t reg, uint8_t sz) const
{
     da8:	ef 92       	push	r14
     daa:	ff 92       	push	r15
     dac:	0f 93       	push	r16
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	8c 01       	movw	r16, r24
     db6:	eb 01       	movw	r28, r22
     db8:	e4 2e       	mov	r14, r20
     dba:	f2 2e       	mov	r15, r18
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:772
	// Reset the register pointer
	Wire.beginTransmission(address);
     dbc:	fc 01       	movw	r30, r24
     dbe:	60 81       	ld	r22, Z
     dc0:	87 ee       	ldi	r24, 0xE7	; 231
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	0e 94 c0 08 	call	0x1180	; 0x1180 <TwoWire::beginTransmission(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:773
	Wire.write(reg);
     dc8:	6e 2d       	mov	r22, r14
     dca:	87 ee       	ldi	r24, 0xE7	; 231
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:774
	Wire.endTransmission();
     dd2:	87 ee       	ldi	r24, 0xE7	; 231
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:776

	Wire.requestFrom(address, sz);
     dda:	4f 2d       	mov	r20, r15
     ddc:	f8 01       	movw	r30, r16
     dde:	60 81       	ld	r22, Z
     de0:	87 ee       	ldi	r24, 0xE7	; 231
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 42 09 	call	0x1284	; 0x1284 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:777
	tm->tm_sec = 0;
     de8:	19 82       	std	Y+1, r1	; 0x01
     dea:	18 82       	st	Y, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:778
	tm->tm_min = bcdToDec(Wire.read() & 0x7f);
     dec:	87 ee       	ldi	r24, 0xE7	; 231
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     df4:	8f 77       	andi	r24, 0x7F	; 127
     df6:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9b 83       	std	Y+3, r25	; 0x03
     dfe:	8a 83       	std	Y+2, r24	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:779
	tm->tm_hour = bcdToDec(Wire.read() & 0x3f);
     e00:	87 ee       	ldi	r24, 0xE7	; 231
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     e08:	8f 73       	andi	r24, 0x3F	; 63
     e0a:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	9d 83       	std	Y+5, r25	; 0x05
     e12:	8c 83       	std	Y+4, r24	; 0x04
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:780
	tm->tm_wday = 0;
     e14:	1d 86       	std	Y+13, r1	; 0x0d
     e16:	1c 86       	std	Y+12, r1	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:781
	tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
     e18:	87 ee       	ldi	r24, 0xE7	; 231
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     e20:	8f 73       	andi	r24, 0x3F	; 63
     e22:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	9f 83       	std	Y+7, r25	; 0x07
     e2a:	8e 83       	std	Y+6, r24	; 0x06
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:782
	uint8_t wdayMonth = Wire.read();
     e2c:	87 ee       	ldi	r24, 0xE7	; 231
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     e34:	8c 01       	movw	r16, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:783
	tm->tm_mon = bcdToDec(wdayMonth & 0x1f) - 1; // Clock uses [1..12]
     e36:	8f 71       	andi	r24, 0x1F	; 31
     e38:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     e3c:	81 50       	subi	r24, 0x01	; 1
     e3e:	99 0b       	sbc	r25, r25
     e40:	99 87       	std	Y+9, r25	; 0x09
     e42:	88 87       	std	Y+8, r24	; 0x08
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:784
	tm->tm_wday = (wdayMonth >> 5) - 1; // Clock uses [1..7]
     e44:	85 e0       	ldi	r24, 0x05	; 5
     e46:	15 95       	asr	r17
     e48:	07 95       	ror	r16
     e4a:	8a 95       	dec	r24
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <RTCx::readTimeSaver(RTCx::tm*, unsigned char, unsigned char) const+0x9e>
     e4e:	07 70       	andi	r16, 0x07	; 7
     e50:	11 27       	eor	r17, r17
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	11 09       	sbc	r17, r1
     e56:	1d 87       	std	Y+13, r17	; 0x0d
     e58:	0c 87       	std	Y+12, r16	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:785
	tm->tm_year = (RTCX_EPOCH - 1900); // not stored
     e5a:	86 e4       	ldi	r24, 0x46	; 70
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9b 87       	std	Y+11, r25	; 0x0b
     e60:	8a 87       	std	Y+10, r24	; 0x0a
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:786
	tm->tm_yday = -1;
     e62:	8f ef       	ldi	r24, 0xFF	; 255
     e64:	9f ef       	ldi	r25, 0xFF	; 255
     e66:	9f 87       	std	Y+15, r25	; 0x0f
     e68:	8e 87       	std	Y+14, r24	; 0x0e
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:787
	Wire.endTransmission();
     e6a:	87 ee       	ldi	r24, 0xE7	; 231
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:789
	return true;
}
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	08 95       	ret

00000e82 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const>:
_ZNK4RTCx9readClockEPNS_2tmENS_10timeFunc_tE():
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:391
/* Read a time from the clock. The same function is also used to read
 * the alarms as the register layout is essentially identical but with
 * week day and year omitted.
 */
bool RTCx::readClock(struct tm *tm, timeFunc_t func) const
{
     e82:	5f 92       	push	r5
     e84:	6f 92       	push	r6
     e86:	7f 92       	push	r7
     e88:	8f 92       	push	r8
     e8a:	9f 92       	push	r9
     e8c:	af 92       	push	r10
     e8e:	bf 92       	push	r11
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	1f 92       	push	r1
     ea2:	cd b7       	in	r28, 0x3d	; 61
     ea4:	de b7       	in	r29, 0x3e	; 62
     ea6:	7c 01       	movw	r14, r24
     ea8:	8b 01       	movw	r16, r22
     eaa:	6a 01       	movw	r12, r20
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:393
	// Find which register to read from
	uint8_t sz = 0;
     eac:	19 82       	std	Y+1, r1	; 0x01
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:394
	uint8_t reg = getRegister(func, sz);
     eae:	ae 01       	movw	r20, r28
     eb0:	4f 5f       	subi	r20, 0xFF	; 255
     eb2:	5f 4f       	sbci	r21, 0xFF	; 255
     eb4:	b6 01       	movw	r22, r12
     eb6:	0e 94 dd 05 	call	0xbba	; 0xbba <RTCx::getRegister(RTCx::timeFunc_t, unsigned char&) const>
     eba:	58 2e       	mov	r5, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:396

	if (sz == 0)
     ebc:	29 81       	ldd	r18, Y+1	; 0x01
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:397
		return false; // not supported
     ebe:	80 e0       	ldi	r24, 0x00	; 0
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:396
{
	// Find which register to read from
	uint8_t sz = 0;
	uint8_t reg = getRegister(func, sz);

	if (sz == 0)
     ec0:	22 23       	and	r18, r18
     ec2:	71 f0       	breq	.+28     	; 0xee0 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x5e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:399
		return false; // not supported

	if (device == MCP7941x &&
     ec4:	f7 01       	movw	r30, r14
     ec6:	81 81       	ldd	r24, Z+1	; 0x01
     ec8:	92 81       	ldd	r25, Z+2	; 0x02
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	d1 f4       	brne	.+52     	; 0xf02 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x80>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:400 (discriminator 1)
		(func == TIME_POWER_FAILED || func == TIME_POWER_RESTORED))
     ece:	c6 01       	movw	r24, r12
     ed0:	03 97       	sbiw	r24, 0x03	; 3
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:399 (discriminator 1)
	uint8_t reg = getRegister(func, sz);

	if (sz == 0)
		return false; // not supported

	if (device == MCP7941x &&
     ed2:	02 97       	sbiw	r24, 0x02	; 2
     ed4:	b0 f4       	brcc	.+44     	; 0xf02 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x80>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:401
		(func == TIME_POWER_FAILED || func == TIME_POWER_RESTORED))
		return readTimeSaver(tm, reg, sz);
     ed6:	45 2d       	mov	r20, r5
     ed8:	b8 01       	movw	r22, r16
     eda:	c7 01       	movw	r24, r14
     edc:	0e 94 d4 06 	call	0xda8	; 0xda8 <RTCx::readTimeSaver(RTCx::tm*, unsigned char, unsigned char) const>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:444

		if ((func != TIME) || (tm->tm_sec == bcdToDec(readData(reg) & 0x7f)))
			break;
	}
	return true;
}
     ee0:	0f 90       	pop	r0
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	df 90       	pop	r13
     ef0:	cf 90       	pop	r12
     ef2:	bf 90       	pop	r11
     ef4:	af 90       	pop	r10
     ef6:	9f 90       	pop	r9
     ef8:	8f 90       	pop	r8
     efa:	7f 90       	pop	r7
     efc:	6f 90       	pop	r6
     efe:	5f 90       	pop	r5
     f00:	08 95       	ret
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:436

		tm->tm_mon = bcdToDec(Wire.read() & 0x1f) - 1; // Clock uses [1..12]
		if (sz >= 7)
			tm->tm_year = bcdToDec(Wire.read()) + 100; // Assume 21st century
		else
			tm->tm_year = (RTCX_EPOCH - 1900);
     f02:	86 e4       	ldi	r24, 0x46	; 70
     f04:	88 2e       	mov	r8, r24
     f06:	91 2c       	mov	r9, r1
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:437
		tm->tm_yday = -1;
     f08:	66 24       	eor	r6, r6
     f0a:	6a 94       	dec	r6
     f0c:	76 2c       	mov	r7, r6
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:405
		(func == TIME_POWER_FAILED || func == TIME_POWER_RESTORED))
		return readTimeSaver(tm, reg, sz);

	while (true) {
		// Reset the register pointer
		Wire.beginTransmission(address);
     f0e:	f7 01       	movw	r30, r14
     f10:	60 81       	ld	r22, Z
     f12:	87 ee       	ldi	r24, 0xE7	; 231
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	0e 94 c0 08 	call	0x1180	; 0x1180 <TwoWire::beginTransmission(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:406
		Wire.write(reg);
     f1a:	65 2d       	mov	r22, r5
     f1c:	87 ee       	ldi	r24, 0xE7	; 231
     f1e:	91 e0       	ldi	r25, 0x01	; 1
     f20:	0e 94 60 08 	call	0x10c0	; 0x10c0 <TwoWire::write(unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:407
		Wire.endTransmission();
     f24:	87 ee       	ldi	r24, 0xE7	; 231
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:409

		Wire.requestFrom(address, sz);
     f2c:	49 81       	ldd	r20, Y+1	; 0x01
     f2e:	f7 01       	movw	r30, r14
     f30:	60 81       	ld	r22, Z
     f32:	87 ee       	ldi	r24, 0xE7	; 231
     f34:	91 e0       	ldi	r25, 0x01	; 1
     f36:	0e 94 42 09 	call	0x1284	; 0x1284 <TwoWire::requestFrom(unsigned char, unsigned char)>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:410
		tm->tm_sec = bcdToDec(Wire.read() & 0x7f);
     f3a:	87 ee       	ldi	r24, 0xE7	; 231
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     f42:	8f 77       	andi	r24, 0x7F	; 127
     f44:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	f8 01       	movw	r30, r16
     f4c:	91 83       	std	Z+1, r25	; 0x01
     f4e:	80 83       	st	Z, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:411
		tm->tm_min = bcdToDec(Wire.read() & 0x7f);
     f50:	87 ee       	ldi	r24, 0xE7	; 231
     f52:	91 e0       	ldi	r25, 0x01	; 1
     f54:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     f58:	8f 77       	andi	r24, 0x7F	; 127
     f5a:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	f8 01       	movw	r30, r16
     f62:	93 83       	std	Z+3, r25	; 0x03
     f64:	82 83       	std	Z+2, r24	; 0x02
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:412
		uint8_t h = Wire.read();
     f66:	87 ee       	ldi	r24, 0xE7	; 231
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     f6e:	b8 2e       	mov	r11, r24
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:413
		if (h & 0x40) {
     f70:	86 ff       	sbrs	r24, 6
     f72:	4c c0       	rjmp	.+152    	; 0x100c <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x18a>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:415
			// Twelve hour mode
			tm->tm_hour = bcdToDec(h & 0x1f);
     f74:	8f 71       	andi	r24, 0x1F	; 31
     f76:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     f7a:	90 e0       	ldi	r25, 0x00	; 0
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:416
			if (h & 0x20)
     f7c:	b5 fc       	sbrc	r11, 5
     f7e:	44 c0       	rjmp	.+136    	; 0x1008 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x186>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:420
				tm->tm_hour += 12; // Seems notation for AM/PM is user-defined
		}
		else
			tm->tm_hour = bcdToDec(h & 0x3f);
     f80:	f8 01       	movw	r30, r16
     f82:	95 83       	std	Z+5, r25	; 0x05
     f84:	84 83       	std	Z+4, r24	; 0x04
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:422

		if (device == PCF85263) {
     f86:	f7 01       	movw	r30, r14
     f88:	81 81       	ldd	r24, Z+1	; 0x01
     f8a:	92 81       	ldd	r25, Z+2	; 0x02
     f8c:	02 97       	sbiw	r24, 0x02	; 2
     f8e:	09 f0       	breq	.+2      	; 0xf92 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x110>
     f90:	42 c0       	rjmp	.+132    	; 0x1016 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x194>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:424
			// Day of month is before day of week!
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
     f92:	87 ee       	ldi	r24, 0xE7	; 231
     f94:	91 e0       	ldi	r25, 0x01	; 1
     f96:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     f9a:	8f 73       	andi	r24, 0x3F	; 63
     f9c:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	f8 01       	movw	r30, r16
     fa4:	97 83       	std	Z+7, r25	; 0x07
     fa6:	86 83       	std	Z+6, r24	; 0x06
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:425
			tm->tm_wday = (Wire.read() & 0x07); // Clock uses [0..6]
     fa8:	87 ee       	ldi	r24, 0xE7	; 231
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     fb0:	87 70       	andi	r24, 0x07	; 7
     fb2:	99 27       	eor	r25, r25
     fb4:	f8 01       	movw	r30, r16
     fb6:	95 87       	std	Z+13, r25	; 0x0d
     fb8:	84 87       	std	Z+12, r24	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:432
		else {
			tm->tm_wday = (Wire.read() & 0x07) - 1; // Clock uses [1..7]
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
		}

		tm->tm_mon = bcdToDec(Wire.read() & 0x1f) - 1; // Clock uses [1..12]
     fba:	87 ee       	ldi	r24, 0xE7	; 231
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     fc2:	8f 71       	andi	r24, 0x1F	; 31
     fc4:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     fc8:	81 50       	subi	r24, 0x01	; 1
     fca:	99 0b       	sbc	r25, r25
     fcc:	f8 01       	movw	r30, r16
     fce:	91 87       	std	Z+9, r25	; 0x09
     fd0:	80 87       	std	Z+8, r24	; 0x08
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:433
		if (sz >= 7)
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	87 30       	cpi	r24, 0x07	; 7
     fd6:	a8 f1       	brcs	.+106    	; 0x1042 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x1c0>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:434
			tm->tm_year = bcdToDec(Wire.read()) + 100; // Assume 21st century
     fd8:	87 ee       	ldi	r24, 0xE7	; 231
     fda:	91 e0       	ldi	r25, 0x01	; 1
     fdc:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
     fe0:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	8c 59       	subi	r24, 0x9C	; 156
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	f8 01       	movw	r30, r16
     fec:	93 87       	std	Z+11, r25	; 0x0b
     fee:	82 87       	std	Z+10, r24	; 0x0a
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:437
		else
			tm->tm_year = (RTCX_EPOCH - 1900);
		tm->tm_yday = -1;
     ff0:	f8 01       	movw	r30, r16
     ff2:	77 86       	std	Z+15, r7	; 0x0f
     ff4:	66 86       	std	Z+14, r6	; 0x0e
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:438
		Wire.endTransmission();
     ff6:	87 ee       	ldi	r24, 0xE7	; 231
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	0e 94 45 09 	call	0x128a	; 0x128a <TwoWire::endTransmission()>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:440

		if ((func != TIME) || (tm->tm_sec == bcdToDec(readData(reg) & 0x7f)))
     ffe:	c1 14       	cp	r12, r1
    1000:	d1 04       	cpc	r13, r1
    1002:	11 f1       	breq	.+68     	; 0x1048 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x1c6>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:443
			break;
	}
	return true;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	6c cf       	rjmp	.-296    	; 0xee0 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x5e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:417
		uint8_t h = Wire.read();
		if (h & 0x40) {
			// Twelve hour mode
			tm->tm_hour = bcdToDec(h & 0x1f);
			if (h & 0x20)
				tm->tm_hour += 12; // Seems notation for AM/PM is user-defined
    1008:	0c 96       	adiw	r24, 0x0c	; 12
    100a:	ba cf       	rjmp	.-140    	; 0xf80 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0xfe>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:420
		}
		else
			tm->tm_hour = bcdToDec(h & 0x3f);
    100c:	8f 73       	andi	r24, 0x3F	; 63
    100e:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	b5 cf       	rjmp	.-150    	; 0xf80 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0xfe>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:428
			// Day of month is before day of week!
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
			tm->tm_wday = (Wire.read() & 0x07); // Clock uses [0..6]
		}
		else {
			tm->tm_wday = (Wire.read() & 0x07) - 1; // Clock uses [1..7]
    1016:	87 ee       	ldi	r24, 0xE7	; 231
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
    101e:	87 70       	andi	r24, 0x07	; 7
    1020:	99 27       	eor	r25, r25
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f8 01       	movw	r30, r16
    1026:	95 87       	std	Z+13, r25	; 0x0d
    1028:	84 87       	std	Z+12, r24	; 0x0c
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:429
			tm->tm_mday = bcdToDec(Wire.read() & 0x3f);
    102a:	87 ee       	ldi	r24, 0xE7	; 231
    102c:	91 e0       	ldi	r25, 0x01	; 1
    102e:	0e 94 3d 08 	call	0x107a	; 0x107a <TwoWire::read()>
    1032:	8f 73       	andi	r24, 0x3F	; 63
    1034:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	f8 01       	movw	r30, r16
    103c:	97 83       	std	Z+7, r25	; 0x07
    103e:	86 83       	std	Z+6, r24	; 0x06
    1040:	bc cf       	rjmp	.-136    	; 0xfba <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x138>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:436

		tm->tm_mon = bcdToDec(Wire.read() & 0x1f) - 1; // Clock uses [1..12]
		if (sz >= 7)
			tm->tm_year = bcdToDec(Wire.read()) + 100; // Assume 21st century
		else
			tm->tm_year = (RTCX_EPOCH - 1900);
    1042:	93 86       	std	Z+11, r9	; 0x0b
    1044:	82 86       	std	Z+10, r8	; 0x0a
    1046:	d4 cf       	rjmp	.-88     	; 0xff0 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x16e>
/home/runner/work/LABDOS01/LABDOS01/fw/LABDOS/src/RTCx/RTCx.cpp:440 (discriminator 2)
		tm->tm_yday = -1;
		Wire.endTransmission();

		if ((func != TIME) || (tm->tm_sec == bcdToDec(readData(reg) & 0x7f)))
    1048:	f8 01       	movw	r30, r16
    104a:	a0 80       	ld	r10, Z
    104c:	b1 80       	ldd	r11, Z+1	; 0x01
    104e:	65 2d       	mov	r22, r5
    1050:	c7 01       	movw	r24, r14
    1052:	0e 94 ad 06 	call	0xd5a	; 0xd5a <RTCx::readData(unsigned char) const>
    1056:	8f 77       	andi	r24, 0x7F	; 127
    1058:	0e 94 d4 05 	call	0xba8	; 0xba8 <RTCx::bcdToDec(unsigned char)>
    105c:	8a 15       	cp	r24, r10
    105e:	1b 04       	cpc	r1, r11
    1060:	09 f0       	breq	.+2      	; 0x1064 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x1e2>
    1062:	55 cf       	rjmp	.-342    	; 0xf0e <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x8c>
    1064:	cf cf       	rjmp	.-98     	; 0x1004 <RTCx::readClock(RTCx::tm*, RTCx::timeFunc_t) const+0x182>

00001066 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:378

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	08 95       	ret

0000106c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
    106c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <TwoWire::rxBufferLength>
    1070:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <TwoWire::rxBufferIndex>
    1074:	89 1b       	sub	r24, r25
    1076:	99 0b       	sbc	r25, r25
    1078:	08 95       	ret

0000107a <TwoWire::read()>:
_ZN7TwoWire4readEv():
    107a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <TwoWire::rxBufferIndex>
    107e:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <TwoWire::rxBufferLength>
    1082:	2f ef       	ldi	r18, 0xFF	; 255
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	98 17       	cp	r25, r24
    1088:	48 f4       	brcc	.+18     	; 0x109c <TwoWire::read()+0x22>
    108a:	e9 2f       	mov	r30, r25
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	e7 5e       	subi	r30, 0xE7	; 231
    1090:	fd 4f       	sbci	r31, 0xFD	; 253
    1092:	20 81       	ld	r18, Z
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	9f 5f       	subi	r25, 0xFF	; 255
    1098:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <TwoWire::rxBufferIndex>
    109c:	c9 01       	movw	r24, r18
    109e:	08 95       	ret

000010a0 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    10a0:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <TwoWire::rxBufferIndex>
    10a4:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <TwoWire::rxBufferLength>
    10a8:	e8 17       	cp	r30, r24
    10aa:	30 f4       	brcc	.+12     	; 0x10b8 <TwoWire::peek()+0x18>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	e7 5e       	subi	r30, 0xE7	; 231
    10b0:	fd 4f       	sbci	r31, 0xFD	; 253
    10b2:	80 81       	ld	r24, Z
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	08 95       	ret
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	08 95       	ret

000010be <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    10be:	08 95       	ret

000010c0 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	1f 92       	push	r1
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	69 83       	std	Y+1, r22	; 0x01
    10cc:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <TwoWire::transmitting>
    10d0:	22 23       	and	r18, r18
    10d2:	f9 f0       	breq	.+62     	; 0x1112 <TwoWire::write(unsigned char)+0x52>
    10d4:	20 91 f4 01 	lds	r18, 0x01F4	; 0x8001f4 <TwoWire::txBufferLength>
    10d8:	20 32       	cpi	r18, 0x20	; 32
    10da:	58 f0       	brcs	.+22     	; 0x10f2 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	fc 01       	movw	r30, r24
    10e2:	33 83       	std	Z+3, r19	; 0x03
    10e4:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0f 90       	pop	r0
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret
    10f2:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <TwoWire::txBufferIndex>
    10f6:	e8 2f       	mov	r30, r24
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	ea 50       	subi	r30, 0x0A	; 10
    10fc:	fe 4f       	sbci	r31, 0xFE	; 254
    10fe:	99 81       	ldd	r25, Y+1	; 0x01
    1100:	90 83       	st	Z, r25
    1102:	8f 5f       	subi	r24, 0xFF	; 255
    1104:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <TwoWire::txBufferIndex>
    1108:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <TwoWire::txBufferLength>
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	ec cf       	rjmp	.-40     	; 0x10ea <TwoWire::write(unsigned char)+0x2a>
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <twi_transmit>
    111c:	f7 cf       	rjmp	.-18     	; 0x110c <TwoWire::write(unsigned char)+0x4c>

0000111e <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	7c 01       	movw	r14, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8a 01       	movw	r16, r20
    1134:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <TwoWire::transmitting>
    1138:	22 23       	and	r18, r18
    113a:	89 f0       	breq	.+34     	; 0x115e <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    113c:	eb 01       	movw	r28, r22
    113e:	6b 01       	movw	r12, r22
    1140:	c4 0e       	add	r12, r20
    1142:	d5 1e       	adc	r13, r21
    1144:	cc 15       	cp	r28, r12
    1146:	dd 05       	cpc	r29, r13
    1148:	69 f0       	breq	.+26     	; 0x1164 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    114a:	69 91       	ld	r22, Y+
    114c:	d7 01       	movw	r26, r14
    114e:	ed 91       	ld	r30, X+
    1150:	fc 91       	ld	r31, X
    1152:	01 90       	ld	r0, Z+
    1154:	f0 81       	ld	r31, Z
    1156:	e0 2d       	mov	r30, r0
    1158:	c7 01       	movw	r24, r14
    115a:	09 95       	icall
    115c:	f3 cf       	rjmp	.-26     	; 0x1144 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    115e:	64 2f       	mov	r22, r20
    1160:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <twi_transmit>
    1164:	c8 01       	movw	r24, r16
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	cf 90       	pop	r12
    1176:	08 95       	ret

00001178 <TwoWire::setClock(unsigned long)>:
_ZN7TwoWire8setClockEm():
    1178:	cb 01       	movw	r24, r22
    117a:	ba 01       	movw	r22, r20
    117c:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <twi_setFrequency>

00001180 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <TwoWire::transmitting>
    1186:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <TwoWire::txAddress>
    118a:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <TwoWire::txBufferIndex>
    118e:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <TwoWire::txBufferLength>
    1192:	08 95       	ret

00001194 <TwoWire::beginTransmission(int)>:
_ZN7TwoWire17beginTransmissionEi():
    1194:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <TwoWire::beginTransmission(unsigned char)>

00001198 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1198:	0f 93       	push	r16
    119a:	06 2f       	mov	r16, r22
    119c:	21 e0       	ldi	r18, 0x01	; 1
    119e:	40 91 f4 01 	lds	r20, 0x01F4	; 0x8001f4 <TwoWire::txBufferLength>
    11a2:	66 ef       	ldi	r22, 0xF6	; 246
    11a4:	71 e0       	ldi	r23, 0x01	; 1
    11a6:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <TwoWire::txAddress>
    11aa:	0e 94 ac 09 	call	0x1358	; 0x1358 <twi_writeTo>
    11ae:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <TwoWire::txBufferIndex>
    11b2:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <TwoWire::txBufferLength>
    11b6:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <TwoWire::transmitting>
    11ba:	0f 91       	pop	r16
    11bc:	08 95       	ret

000011be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    11be:	4f 92       	push	r4
    11c0:	5f 92       	push	r5
    11c2:	6f 92       	push	r6
    11c4:	7f 92       	push	r7
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	5c 01       	movw	r10, r24
    11da:	f6 2e       	mov	r15, r22
    11dc:	d4 2f       	mov	r29, r20
    11de:	28 01       	movw	r4, r16
    11e0:	39 01       	movw	r6, r18
    11e2:	ee 20       	and	r14, r14
    11e4:	19 f1       	breq	.+70     	; 0x122c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    11e6:	0e 94 c0 08 	call	0x1180	; 0x1180 <TwoWire::beginTransmission(unsigned char)>
    11ea:	ce 2d       	mov	r28, r14
    11ec:	c4 30       	cpi	r28, 0x04	; 4
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    11f0:	c3 e0       	ldi	r28, 0x03	; 3
    11f2:	c1 50       	subi	r28, 0x01	; 1
    11f4:	b8 f0       	brcs	.+46     	; 0x1224 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    11f6:	28 e0       	ldi	r18, 0x08	; 8
    11f8:	c2 9f       	mul	r28, r18
    11fa:	c0 01       	movw	r24, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	a3 01       	movw	r20, r6
    1200:	92 01       	movw	r18, r4
    1202:	04 c0       	rjmp	.+8      	; 0x120c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    1204:	56 95       	lsr	r21
    1206:	47 95       	ror	r20
    1208:	37 95       	ror	r19
    120a:	27 95       	ror	r18
    120c:	8a 95       	dec	r24
    120e:	d2 f7       	brpl	.-12     	; 0x1204 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    1210:	b9 01       	movw	r22, r18
    1212:	d5 01       	movw	r26, r10
    1214:	ed 91       	ld	r30, X+
    1216:	fc 91       	ld	r31, X
    1218:	01 90       	ld	r0, Z+
    121a:	f0 81       	ld	r31, Z
    121c:	e0 2d       	mov	r30, r0
    121e:	c5 01       	movw	r24, r10
    1220:	09 95       	icall
    1222:	e7 cf       	rjmp	.-50     	; 0x11f2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	c5 01       	movw	r24, r10
    1228:	0e 94 cc 08 	call	0x1198	; 0x1198 <TwoWire::endTransmission(unsigned char)>
    122c:	4d 2f       	mov	r20, r29
    122e:	d1 32       	cpi	r29, 0x21	; 33
    1230:	08 f0       	brcs	.+2      	; 0x1234 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1232:	40 e2       	ldi	r20, 0x20	; 32
    1234:	2c 2d       	mov	r18, r12
    1236:	69 e1       	ldi	r22, 0x19	; 25
    1238:	72 e0       	ldi	r23, 0x02	; 2
    123a:	8f 2d       	mov	r24, r15
    123c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <twi_readFrom>
    1240:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <TwoWire::rxBufferIndex>
    1244:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <TwoWire::rxBufferLength>
    1248:	df 91       	pop	r29
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	0f 91       	pop	r16
    1250:	ff 90       	pop	r15
    1252:	ef 90       	pop	r14
    1254:	cf 90       	pop	r12
    1256:	bf 90       	pop	r11
    1258:	af 90       	pop	r10
    125a:	7f 90       	pop	r7
    125c:	6f 90       	pop	r6
    125e:	5f 90       	pop	r5
    1260:	4f 90       	pop	r4
    1262:	08 95       	ret

00001264 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1264:	cf 92       	push	r12
    1266:	ef 92       	push	r14
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	c2 2e       	mov	r12, r18
    126e:	e1 2c       	mov	r14, r1
    1270:	00 e0       	ldi	r16, 0x00	; 0
    1272:	10 e0       	ldi	r17, 0x00	; 0
    1274:	98 01       	movw	r18, r16
    1276:	0e 94 df 08 	call	0x11be	; 0x11be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	ef 90       	pop	r14
    1280:	cf 90       	pop	r12
    1282:	08 95       	ret

00001284 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    1284:	21 e0       	ldi	r18, 0x01	; 1
    1286:	0c 94 32 09 	jmp	0x1264	; 0x1264 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

0000128a <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    128a:	61 e0       	ldi	r22, 0x01	; 1
    128c:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <TwoWire::endTransmission(unsigned char)>

00001290 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1290:	e7 ee       	ldi	r30, 0xE7	; 231
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	13 82       	std	Z+3, r1	; 0x03
    1296:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1298:	88 ee       	ldi	r24, 0xE8	; 232
    129a:	93 e0       	ldi	r25, 0x03	; 3
    129c:	a0 e0       	ldi	r26, 0x00	; 0
    129e:	b0 e0       	ldi	r27, 0x00	; 0
    12a0:	84 83       	std	Z+4, r24	; 0x04
    12a2:	95 83       	std	Z+5, r25	; 0x05
    12a4:	a6 83       	std	Z+6, r26	; 0x06
    12a6:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:53
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    12a8:	89 e9       	ldi	r24, 0x99	; 153
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/Wire.cpp:382
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    12b0:	08 95       	ret

000012b2 <twi_setFrequency>:
twi_setFrequency():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:531
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	74 e2       	ldi	r23, 0x24	; 36
    12ba:	84 ef       	ldi	r24, 0xF4	; 244
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodsi4>
    12c2:	20 51       	subi	r18, 0x10	; 16
    12c4:	31 09       	sbc	r19, r1
    12c6:	41 09       	sbc	r20, r1
    12c8:	51 09       	sbc	r21, r1
    12ca:	56 95       	lsr	r21
    12cc:	47 95       	ror	r20
    12ce:	37 95       	ror	r19
    12d0:	27 95       	ror	r18
    12d2:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    12d6:	08 95       	ret

000012d8 <twi_readFrom>:
twi_readFrom():
    12d8:	41 32       	cpi	r20, 0x21	; 33
    12da:	e0 f5       	brcc	.+120    	; 0x1354 <twi_readFrom+0x7c>
    12dc:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <twi_state>
    12e0:	91 11       	cpse	r25, r1
    12e2:	fc cf       	rjmp	.-8      	; 0x12dc <twi_readFrom+0x4>
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <twi_state>
    12ea:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <twi_sendStop>
    12ee:	2f ef       	ldi	r18, 0xFF	; 255
    12f0:	20 93 39 02 	sts	0x0239, r18	; 0x800239 <twi_error>
    12f4:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <twi_masterBuffer+0x1>
    12f8:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <twi_masterBuffer>
    12fc:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_masterBufferIndex>
    1300:	24 0f       	add	r18, r20
    1302:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <twi_masterBufferLength>
    1306:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <twi_slarw>
    130a:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <twi_slarw>
    130e:	88 0f       	add	r24, r24
    1310:	89 2b       	or	r24, r25
    1312:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <twi_slarw>
    1316:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <twi_inRepStart>
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	c9 f4       	brne	.+50     	; 0x1350 <twi_readFrom+0x78>
    131e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <twi_inRepStart>
    1322:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_slarw>
    1326:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    132a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    132e:	83 fd       	sbrc	r24, 3
    1330:	f8 cf       	rjmp	.-16     	; 0x1322 <twi_readFrom+0x4a>
    1332:	85 ec       	ldi	r24, 0xC5	; 197
    1334:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1338:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <twi_state>
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	e1 f3       	breq	.-8      	; 0x1338 <twi_readFrom+0x60>
    1340:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <twi_masterBufferIndex>
    1344:	84 17       	cp	r24, r20
    1346:	10 f4       	brcc	.+4      	; 0x134c <twi_readFrom+0x74>
    1348:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <twi_masterBufferIndex>
    134c:	84 2f       	mov	r24, r20
    134e:	08 95       	ret
    1350:	85 ee       	ldi	r24, 0xE5	; 229
    1352:	f0 cf       	rjmp	.-32     	; 0x1334 <twi_readFrom+0x5c>
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	fa cf       	rjmp	.-12     	; 0x134c <twi_readFrom+0x74>

00001358 <twi_writeTo>:
twi_writeTo():
    1358:	0f 93       	push	r16
    135a:	41 32       	cpi	r20, 0x21	; 33
    135c:	08 f0       	brcs	.+2      	; 0x1360 <twi_writeTo+0x8>
    135e:	44 c0       	rjmp	.+136    	; 0x13e8 <twi_writeTo+0x90>
    1360:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <twi_state>
    1364:	91 11       	cpse	r25, r1
    1366:	fc cf       	rjmp	.-8      	; 0x1360 <twi_writeTo+0x8>
    1368:	92 e0       	ldi	r25, 0x02	; 2
    136a:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <twi_state>
    136e:	00 93 86 02 	sts	0x0286, r16	; 0x800286 <twi_sendStop>
    1372:	9f ef       	ldi	r25, 0xFF	; 255
    1374:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <twi_error>
    1378:	70 93 80 02 	sts	0x0280, r23	; 0x800280 <twi_masterBuffer+0x1>
    137c:	60 93 7f 02 	sts	0x027F, r22	; 0x80027f <twi_masterBuffer>
    1380:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <twi_masterBufferIndex>
    1384:	40 93 7d 02 	sts	0x027D, r20	; 0x80027d <twi_masterBufferLength>
    1388:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <twi_slarw>
    138c:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <twi_slarw>
    1390:	88 0f       	add	r24, r24
    1392:	89 2b       	or	r24, r25
    1394:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <twi_slarw>
    1398:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <twi_inRepStart>
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	11 f5       	brne	.+68     	; 0x13e4 <twi_writeTo+0x8c>
    13a0:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <twi_inRepStart>
    13a4:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_slarw>
    13a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    13ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13b0:	83 fd       	sbrc	r24, 3
    13b2:	f8 cf       	rjmp	.-16     	; 0x13a4 <twi_writeTo+0x4c>
    13b4:	85 ec       	ldi	r24, 0xC5	; 197
    13b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13ba:	22 23       	and	r18, r18
    13bc:	21 f0       	breq	.+8      	; 0x13c6 <twi_writeTo+0x6e>
    13be:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <twi_state>
    13c2:	82 30       	cpi	r24, 0x02	; 2
    13c4:	d1 f3       	breq	.-12     	; 0x13ba <twi_writeTo+0x62>
    13c6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_error>
    13ca:	8f 3f       	cpi	r24, 0xFF	; 255
    13cc:	79 f0       	breq	.+30     	; 0x13ec <twi_writeTo+0x94>
    13ce:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_error>
    13d2:	80 32       	cpi	r24, 0x20	; 32
    13d4:	69 f0       	breq	.+26     	; 0x13f0 <twi_writeTo+0x98>
    13d6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <twi_error>
    13da:	80 33       	cpi	r24, 0x30	; 48
    13dc:	59 f0       	breq	.+22     	; 0x13f4 <twi_writeTo+0x9c>
    13de:	84 e0       	ldi	r24, 0x04	; 4
    13e0:	0f 91       	pop	r16
    13e2:	08 95       	ret
    13e4:	85 ee       	ldi	r24, 0xE5	; 229
    13e6:	e7 cf       	rjmp	.-50     	; 0x13b6 <twi_writeTo+0x5e>
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	fa cf       	rjmp	.-12     	; 0x13e0 <twi_writeTo+0x88>
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	f8 cf       	rjmp	.-16     	; 0x13e0 <twi_writeTo+0x88>
    13f0:	82 e0       	ldi	r24, 0x02	; 2
    13f2:	f6 cf       	rjmp	.-20     	; 0x13e0 <twi_writeTo+0x88>
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	f4 cf       	rjmp	.-24     	; 0x13e0 <twi_writeTo+0x88>

000013f8 <twi_transmit>:
twi_transmit():
    13f8:	20 91 5b 02 	lds	r18, 0x025B	; 0x80025b <twi_txBufferLength>
    13fc:	26 0f       	add	r18, r22
    13fe:	33 27       	eor	r19, r19
    1400:	33 1f       	adc	r19, r19
    1402:	21 32       	cpi	r18, 0x21	; 33
    1404:	31 05       	cpc	r19, r1
    1406:	ec f4       	brge	.+58     	; 0x1442 <twi_transmit+0x4a>
    1408:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <twi_state>
    140c:	fc 01       	movw	r30, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	24 30       	cpi	r18, 0x04	; 4
    1414:	69 f0       	breq	.+26     	; 0x1430 <twi_transmit+0x38>
    1416:	82 e0       	ldi	r24, 0x02	; 2
    1418:	08 95       	ret
    141a:	a0 91 5b 02 	lds	r26, 0x025B	; 0x80025b <twi_txBufferLength>
    141e:	21 91       	ld	r18, Z+
    1420:	ac 01       	movw	r20, r24
    1422:	43 5a       	subi	r20, 0xA3	; 163
    1424:	5d 4f       	sbci	r21, 0xFD	; 253
    1426:	a4 0f       	add	r26, r20
    1428:	b5 2f       	mov	r27, r21
    142a:	b1 1d       	adc	r27, r1
    142c:	2c 93       	st	X, r18
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	86 17       	cp	r24, r22
    1432:	98 f3       	brcs	.-26     	; 0x141a <twi_transmit+0x22>
    1434:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_txBufferLength>
    1438:	68 0f       	add	r22, r24
    143a:	60 93 5b 02 	sts	0x025B, r22	; 0x80025b <twi_txBufferLength>
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	08 95       	ret
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	08 95       	ret

00001446 <twi_stop>:
twi_stop():
    1446:	85 ed       	ldi	r24, 0xD5	; 213
    1448:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    144c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1450:	84 fd       	sbrc	r24, 4
    1452:	fc cf       	rjmp	.-8      	; 0x144c <twi_stop+0x6>
    1454:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_state>
    1458:	08 95       	ret

0000145a <twi_releaseBus>:
twi_releaseBus():
    145a:	85 ec       	ldi	r24, 0xC5	; 197
    145c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1460:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_state>
    1464:	08 95       	ret

00001466 <__vector_26>:
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:534

ISR(TWI_vect)
{
    1466:	1f 92       	push	r1
    1468:	0f 92       	push	r0
    146a:	0f b6       	in	r0, 0x3f	; 63
    146c:	0f 92       	push	r0
    146e:	11 24       	eor	r1, r1
    1470:	0b b6       	in	r0, 0x3b	; 59
    1472:	0f 92       	push	r0
    1474:	2f 93       	push	r18
    1476:	3f 93       	push	r19
    1478:	4f 93       	push	r20
    147a:	5f 93       	push	r21
    147c:	6f 93       	push	r22
    147e:	7f 93       	push	r23
    1480:	8f 93       	push	r24
    1482:	9f 93       	push	r25
    1484:	af 93       	push	r26
    1486:	bf 93       	push	r27
    1488:	ef 93       	push	r30
    148a:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  switch(TW_STATUS){
    148c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1490:	88 7f       	andi	r24, 0xF8	; 248
    1492:	80 36       	cpi	r24, 0x60	; 96
    1494:	09 f4       	brne	.+2      	; 0x1498 <__vector_26+0x32>
    1496:	4e c0       	rjmp	.+156    	; 0x1534 <__vector_26+0xce>
    1498:	08 f0       	brcs	.+2      	; 0x149c <__vector_26+0x36>
    149a:	41 c0       	rjmp	.+130    	; 0x151e <__vector_26+0xb8>
    149c:	88 32       	cpi	r24, 0x28	; 40
    149e:	09 f4       	brne	.+2      	; 0x14a2 <__vector_26+0x3c>
    14a0:	aa c0       	rjmp	.+340    	; 0x15f6 <__vector_26+0x190>
    14a2:	28 f5       	brcc	.+74     	; 0x14ee <__vector_26+0x88>
    14a4:	80 31       	cpi	r24, 0x10	; 16
    14a6:	09 f4       	brne	.+2      	; 0x14aa <__vector_26+0x44>
    14a8:	9e c0       	rjmp	.+316    	; 0x15e6 <__vector_26+0x180>
    14aa:	c8 f4       	brcc	.+50     	; 0x14de <__vector_26+0x78>
    14ac:	88 23       	and	r24, r24
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__vector_26+0x4c>
    14b0:	07 c1       	rjmp	.+526    	; 0x16c0 <__vector_26+0x25a>
    14b2:	88 30       	cpi	r24, 0x08	; 8
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <__vector_26+0x52>
    14b6:	97 c0       	rjmp	.+302    	; 0x15e6 <__vector_26+0x180>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	0f 90       	pop	r0
    14d2:	0b be       	out	0x3b, r0	; 59
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14de:	88 31       	cpi	r24, 0x18	; 24
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <__vector_26+0x7e>
    14e2:	89 c0       	rjmp	.+274    	; 0x15f6 <__vector_26+0x190>
    14e4:	80 32       	cpi	r24, 0x20	; 32
    14e6:	41 f7       	brne	.-48     	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:570
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    14e8:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <twi_error>
    14ec:	15 c0       	rjmp	.+42     	; 0x1518 <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    14ee:	80 34       	cpi	r24, 0x40	; 64
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <__vector_26+0x8e>
    14f2:	a6 c0       	rjmp	.+332    	; 0x1640 <__vector_26+0x1da>
    14f4:	48 f4       	brcc	.+18     	; 0x1508 <__vector_26+0xa2>
    14f6:	80 33       	cpi	r24, 0x30	; 48
    14f8:	b9 f3       	breq	.-18     	; 0x14e8 <__vector_26+0x82>
    14fa:	88 33       	cpi	r24, 0x38	; 56
    14fc:	e9 f6       	brne	.-70     	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:574
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    14fe:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <twi_error>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:575
      twi_releaseBus();
    1502:	0e 94 2d 0a 	call	0x145a	; 0x145a <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:576
      break;
    1506:	d8 cf       	rjmp	.-80     	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1508:	80 35       	cpi	r24, 0x50	; 80
    150a:	09 f4       	brne	.+2      	; 0x150e <__vector_26+0xa8>
    150c:	89 c0       	rjmp	.+274    	; 0x1620 <__vector_26+0x1ba>
    150e:	88 35       	cpi	r24, 0x58	; 88
    1510:	09 f4       	brne	.+2      	; 0x1514 <__vector_26+0xae>
    1512:	9e c0       	rjmp	.+316    	; 0x1650 <__vector_26+0x1ea>
    1514:	88 34       	cpi	r24, 0x48	; 72
    1516:	81 f6       	brne	.-96     	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:693
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1518:	0e 94 23 0a 	call	0x1446	; 0x1446 <twi_stop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:696
      break;
  }
}
    151c:	cd cf       	rjmp	.-102    	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    151e:	88 39       	cpi	r24, 0x98	; 152
    1520:	09 f4       	brne	.+2      	; 0x1524 <__vector_26+0xbe>
    1522:	94 c0       	rjmp	.+296    	; 0x164c <__vector_26+0x1e6>
    1524:	38 f5       	brcc	.+78     	; 0x1574 <__vector_26+0x10e>
    1526:	88 37       	cpi	r24, 0x78	; 120
    1528:	29 f0       	breq	.+10     	; 0x1534 <__vector_26+0xce>
    152a:	50 f4       	brcc	.+20     	; 0x1540 <__vector_26+0xda>
    152c:	88 36       	cpi	r24, 0x68	; 104
    152e:	11 f0       	breq	.+4      	; 0x1534 <__vector_26+0xce>
    1530:	80 37       	cpi	r24, 0x70	; 112
    1532:	11 f6       	brne	.-124    	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:616
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1534:	83 e0       	ldi	r24, 0x03	; 3
    1536:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:618
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    153a:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <twi_rxBufferIndex>
    153e:	57 c0       	rjmp	.+174    	; 0x15ee <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1540:	88 38       	cpi	r24, 0x88	; 136
    1542:	09 f4       	brne	.+2      	; 0x1546 <__vector_26+0xe0>
    1544:	83 c0       	rjmp	.+262    	; 0x164c <__vector_26+0x1e6>
    1546:	80 39       	cpi	r24, 0x90	; 144
    1548:	19 f0       	breq	.+6      	; 0x1550 <__vector_26+0xea>
    154a:	80 38       	cpi	r24, 0x80	; 128
    154c:	09 f0       	breq	.+2      	; 0x1550 <__vector_26+0xea>
    154e:	b4 cf       	rjmp	.-152    	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:624
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1550:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <twi_rxBufferIndex>
    1554:	80 32       	cpi	r24, 0x20	; 32
    1556:	08 f0       	brcs	.+2      	; 0x155a <__vector_26+0xf4>
    1558:	79 c0       	rjmp	.+242    	; 0x164c <__vector_26+0x1e6>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:626
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    155a:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_rxBufferIndex>
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	8e 0f       	add	r24, r30
    1562:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <twi_rxBufferIndex>
    1566:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	e5 5c       	subi	r30, 0xC5	; 197
    156e:	fd 4f       	sbci	r31, 0xFD	; 253
    1570:	80 83       	st	Z, r24
    1572:	3d c0       	rjmp	.+122    	; 0x15ee <__vector_26+0x188>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1574:	80 3b       	cpi	r24, 0xB0	; 176
    1576:	39 f0       	breq	.+14     	; 0x1586 <__vector_26+0x120>
    1578:	e0 f4       	brcc	.+56     	; 0x15b2 <__vector_26+0x14c>
    157a:	80 3a       	cpi	r24, 0xA0	; 160
    157c:	09 f4       	brne	.+2      	; 0x1580 <__vector_26+0x11a>
    157e:	85 c0       	rjmp	.+266    	; 0x168a <__vector_26+0x224>
    1580:	88 3a       	cpi	r24, 0xA8	; 168
    1582:	09 f0       	breq	.+2      	; 0x1586 <__vector_26+0x120>
    1584:	99 cf       	rjmp	.-206    	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:655

    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1586:	84 e0       	ldi	r24, 0x04	; 4
    1588:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:657
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    158c:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <twi_txBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:659
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1590:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:662
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1594:	e0 91 83 02 	lds	r30, 0x0283	; 0x800283 <twi_onSlaveTransmit>
    1598:	f0 91 84 02 	lds	r31, 0x0284	; 0x800284 <twi_onSlaveTransmit+0x1>
    159c:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:664
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    159e:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_txBufferLength>
    15a2:	81 11       	cpse	r24, r1
    15a4:	0f c0       	rjmp	.+30     	; 0x15c4 <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:665
        twi_txBufferLength = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <twi_txBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:666
        twi_txBuffer[0] = 0x00;
    15ac:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <twi_txBuffer>
    15b0:	09 c0       	rjmp	.+18     	; 0x15c4 <__vector_26+0x15e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:535
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    15b2:	80 3c       	cpi	r24, 0xC0	; 192
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__vector_26+0x152>
    15b6:	82 c0       	rjmp	.+260    	; 0x16bc <__vector_26+0x256>
    15b8:	88 3c       	cpi	r24, 0xC8	; 200
    15ba:	09 f4       	brne	.+2      	; 0x15be <__vector_26+0x158>
    15bc:	7f c0       	rjmp	.+254    	; 0x16bc <__vector_26+0x256>
    15be:	88 3b       	cpi	r24, 0xB8	; 184
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <__vector_26+0x15e>
    15c2:	7a cf       	rjmp	.-268    	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:672
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    15c4:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <twi_txBufferIndex>
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	8e 0f       	add	r24, r30
    15cc:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <twi_txBufferIndex>
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	e3 5a       	subi	r30, 0xA3	; 163
    15d4:	fd 4f       	sbci	r31, 0xFD	; 253
    15d6:	80 81       	ld	r24, Z
    15d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    15dc:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <twi_txBufferIndex>
    15e0:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <twi_txBufferLength>
    15e4:	31 c0       	rjmp	.+98     	; 0x1648 <__vector_26+0x1e2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:540
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    15e6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <twi_slarw>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    15ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    15ee:	85 ec       	ldi	r24, 0xC5	; 197
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    15f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    15f4:	61 cf       	rjmp	.-318    	; 0x14b8 <__vector_26+0x52>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:548

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop
      if(twi_masterBufferIndex < twi_masterBufferLength){
    15f6:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <twi_masterBufferIndex>
    15fa:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_masterBufferLength>
    15fe:	98 17       	cp	r25, r24
    1600:	b8 f5       	brcc	.+110    	; 0x1670 <__vector_26+0x20a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:550
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1602:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <twi_masterBuffer>
    1606:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <twi_masterBuffer+0x1>
    160a:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <twi_masterBufferIndex>
    160e:	21 e0       	ldi	r18, 0x01	; 1
    1610:	2e 0f       	add	r18, r30
    1612:	20 93 7e 02 	sts	0x027E, r18	; 0x80027e <twi_masterBufferIndex>
    1616:	e8 0f       	add	r30, r24
    1618:	f9 2f       	mov	r31, r25
    161a:	f1 1d       	adc	r31, r1
    161c:	80 81       	ld	r24, Z
    161e:	e5 cf       	rjmp	.-54     	; 0x15ea <__vector_26+0x184>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:581
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1620:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <twi_masterBuffer>
    1624:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <twi_masterBuffer+0x1>
    1628:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <twi_masterBufferIndex>
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	8e 0f       	add	r24, r30
    1630:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <twi_masterBufferIndex>
    1634:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1638:	e2 0f       	add	r30, r18
    163a:	f3 2f       	mov	r31, r19
    163c:	f1 1d       	adc	r31, r1
    163e:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:585
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1640:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <twi_masterBufferIndex>
    1644:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <twi_masterBufferLength>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:674
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1648:	98 17       	cp	r25, r24
    164a:	88 f2       	brcs	.-94     	; 0x15ee <__vector_26+0x188>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:423
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    164c:	85 e8       	ldi	r24, 0x85	; 133
    164e:	d0 cf       	rjmp	.-96     	; 0x15f0 <__vector_26+0x18a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:593
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1650:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <twi_masterBuffer>
    1654:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <twi_masterBuffer+0x1>
    1658:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <twi_masterBufferIndex>
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	8e 0f       	add	r24, r30
    1660:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <twi_masterBufferIndex>
    1664:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1668:	e2 0f       	add	r30, r18
    166a:	f3 2f       	mov	r31, r19
    166c:	f1 1d       	adc	r31, r1
    166e:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:594
  if (twi_sendStop)
    1670:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <twi_sendStop>
    1674:	81 11       	cpse	r24, r1
    1676:	50 cf       	rjmp	.-352    	; 0x1518 <__vector_26+0xb2>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:597
          twi_stop();
  else {
    twi_inRepStart = true;  // we're going to send the START
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <twi_inRepStart>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:601
    // don't enable the interrupt. We'll generate the start, but we
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    167e:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1680:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:685
    case TW_ST_DATA_NACK: // received nack, we are done
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1684:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <twi_state>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:686
      break;
    1688:	17 cf       	rjmp	.-466    	; 0x14b8 <__vector_26+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:635
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    168a:	0e 94 2d 0a 	call	0x145a	; 0x145a <twi_releaseBus>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:637
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    168e:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <twi_rxBufferIndex>
    1692:	80 32       	cpi	r24, 0x20	; 32
    1694:	30 f4       	brcc	.+12     	; 0x16a2 <__vector_26+0x23c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:638
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    1696:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <twi_rxBufferIndex>
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	e5 5c       	subi	r30, 0xC5	; 197
    169e:	fd 4f       	sbci	r31, 0xFD	; 253
    16a0:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:641
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    16a2:	60 91 3a 02 	lds	r22, 0x023A	; 0x80023a <twi_rxBufferIndex>
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	e0 91 81 02 	lds	r30, 0x0281	; 0x800281 <twi_onSlaveReceive>
    16ac:	f0 91 82 02 	lds	r31, 0x0282	; 0x800282 <twi_onSlaveReceive+0x1>
    16b0:	8b e3       	ldi	r24, 0x3B	; 59
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	09 95       	icall
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:643
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    16b6:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <twi_rxBufferIndex>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:644
      break;
    16ba:	fe ce       	rjmp	.-516    	; 0x14b8 <__vector_26+0x52>
twi_reply():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:421
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    16bc:	85 ec       	ldi	r24, 0xC5	; 197
    16be:	e0 cf       	rjmp	.-64     	; 0x1680 <__vector_26+0x21a>
__vector_26():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/libraries/Wire/src/utility/twi.c:692

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    16c0:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <twi_error>
    16c4:	29 cf       	rjmp	.-430    	; 0x1518 <__vector_26+0xb2>

000016c6 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    16c6:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    16c8:	91 8d       	ldd	r25, Z+25	; 0x19
    16ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    16cc:	89 2f       	mov	r24, r25
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	80 5c       	subi	r24, 0xC0	; 192
    16d2:	9f 4f       	sbci	r25, 0xFF	; 255
    16d4:	82 1b       	sub	r24, r18
    16d6:	91 09       	sbc	r25, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:166
}
    16d8:	8f 73       	andi	r24, 0x3F	; 63
    16da:	99 27       	eor	r25, r25
    16dc:	08 95       	ret

000016de <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:169

int HardwareSerial::peek(void)
{
    16de:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
    16e0:	91 8d       	ldd	r25, Z+25	; 0x19
    16e2:	82 8d       	ldd	r24, Z+26	; 0x1a
    16e4:	98 17       	cp	r25, r24
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <HardwareSerial::peek()+0x16>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    16e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    16ea:	e8 0f       	add	r30, r24
    16ec:	f1 1d       	adc	r31, r1
    16ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    16f4:	8f ef       	ldi	r24, 0xFF	; 255
    16f6:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    16f8:	08 95       	ret

000016fa <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:178

int HardwareSerial::read(void)
{
    16fa:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    16fc:	91 8d       	ldd	r25, Z+25	; 0x19
    16fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    1700:	98 17       	cp	r25, r24
    1702:	61 f0       	breq	.+24     	; 0x171c <HardwareSerial::read()+0x22>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1704:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1706:	ae 0f       	add	r26, r30
    1708:	bf 2f       	mov	r27, r31
    170a:	b1 1d       	adc	r27, r1
    170c:	5d 96       	adiw	r26, 0x1d	; 29
    170e:	8c 91       	ld	r24, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1710:	92 8d       	ldd	r25, Z+26	; 0x1a
    1712:	9f 5f       	subi	r25, 0xFF	; 255
    1714:	9f 73       	andi	r25, 0x3F	; 63
    1716:	92 8f       	std	Z+26, r25	; 0x1a
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	9f ef       	ldi	r25, 0xFF	; 255
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1720:	08 95       	ret

00001722 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
    1722:	fc 01       	movw	r30, r24
    1724:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
    1726:	44 8d       	ldd	r20, Z+28	; 0x1c
    1728:	25 2f       	mov	r18, r21
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	84 2f       	mov	r24, r20
    172e:	90 e0       	ldi	r25, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1730:	82 1b       	sub	r24, r18
    1732:	93 0b       	sbc	r25, r19
    1734:	54 17       	cp	r21, r20
    1736:	10 f0       	brcs	.+4      	; 0x173c <HardwareSerial::availableForWrite()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:198 (discriminator 1)
    1738:	cf 96       	adiw	r24, 0x3f	; 63
    173a:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
    173c:	01 97       	sbiw	r24, 0x01	; 1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:200
}
    173e:	08 95       	ret

00001740 <serialEventRun()>:
_Z14serialEventRunv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1740:	82 e0       	ldi	r24, 0x02	; 2
    1742:	9d e0       	ldi	r25, 0x0D	; 13
    1744:	89 2b       	or	r24, r25
    1746:	49 f0       	breq	.+18     	; 0x175a <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 1)
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	89 2b       	or	r24, r25
    174e:	29 f0       	breq	.+10     	; 0x175a <serialEventRun()+0x1a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67 (discriminator 3)
    1750:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <Serial0_available()>
    1754:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:67
    1756:	0e 94 00 00 	call	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	89 2b       	or	r24, r25
    1760:	49 f0       	breq	.+18     	; 0x1774 <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 1)
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	89 2b       	or	r24, r25
    1768:	29 f0       	breq	.+10     	; 0x1774 <serialEventRun()+0x34>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70 (discriminator 3)
    176a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    176e:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:70
    1770:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1774:	08 95       	ret

00001776 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1776:	fc 01       	movw	r30, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1778:	a4 8d       	ldd	r26, Z+28	; 0x1c
    177a:	a8 0f       	add	r26, r24
    177c:	b9 2f       	mov	r27, r25
    177e:	b1 1d       	adc	r27, r1
    1780:	a3 5a       	subi	r26, 0xA3	; 163
    1782:	bf 4f       	sbci	r27, 0xFF	; 255
    1784:	2c 91       	ld	r18, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1786:	84 8d       	ldd	r24, Z+28	; 0x1c
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	8f 73       	andi	r24, 0x3F	; 63
    178e:	99 27       	eor	r25, r25
    1790:	84 8f       	std	Z+28, r24	; 0x1c
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
    1792:	a6 89       	ldd	r26, Z+22	; 0x16
    1794:	b7 89       	ldd	r27, Z+23	; 0x17
    1796:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1798:	a0 89       	ldd	r26, Z+16	; 0x10
    179a:	b1 89       	ldd	r27, Z+17	; 0x11
    179c:	8c 91       	ld	r24, X
    179e:	83 70       	andi	r24, 0x03	; 3
    17a0:	80 64       	ori	r24, 0x40	; 64
    17a2:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
    17a4:	93 8d       	ldd	r25, Z+27	; 0x1b
    17a6:	84 8d       	ldd	r24, Z+28	; 0x1c
    17a8:	98 13       	cpse	r25, r24
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <HardwareSerial::_tx_udr_empty_irq()+0x42>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    17ac:	02 88       	ldd	r0, Z+18	; 0x12
    17ae:	f3 89       	ldd	r31, Z+19	; 0x13
    17b0:	e0 2d       	mov	r30, r0
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 7d       	andi	r24, 0xDF	; 223
    17b6:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
    17b8:	08 95       	ret

000017ba <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    17ba:	cf 93       	push	r28
    17bc:	df 93       	push	r29
    17be:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    17c0:	88 8d       	ldd	r24, Y+24	; 0x18
    17c2:	88 23       	and	r24, r24
    17c4:	b9 f0       	breq	.+46     	; 0x17f4 <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    17c6:	aa 89       	ldd	r26, Y+18	; 0x12
    17c8:	bb 89       	ldd	r27, Y+19	; 0x13
    17ca:	e8 89       	ldd	r30, Y+16	; 0x10
    17cc:	f9 89       	ldd	r31, Y+17	; 0x11
    17ce:	8c 91       	ld	r24, X
    17d0:	85 fd       	sbrc	r24, 5
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <HardwareSerial::flush()+0x20>
    17d4:	80 81       	ld	r24, Z
    17d6:	86 fd       	sbrc	r24, 6
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <HardwareSerial::flush()+0x3a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	07 fc       	sbrc	r0, 7
    17de:	f7 cf       	rjmp	.-18     	; 0x17ce <HardwareSerial::flush()+0x14>
    17e0:	8c 91       	ld	r24, X
    17e2:	85 ff       	sbrs	r24, 5
    17e4:	f2 cf       	rjmp	.-28     	; 0x17ca <HardwareSerial::flush()+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    17e6:	80 81       	ld	r24, Z
    17e8:	85 ff       	sbrs	r24, 5
    17ea:	ed cf       	rjmp	.-38     	; 0x17c6 <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
    17ec:	ce 01       	movw	r24, r28
    17ee:	0e 94 bb 0b 	call	0x1776	; 0x1776 <HardwareSerial::_tx_udr_empty_irq()>
    17f2:	e9 cf       	rjmp	.-46     	; 0x17c6 <HardwareSerial::flush()+0xc>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:223

size_t HardwareSerial::write(uint8_t c)
{
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	88 8f       	std	Y+24, r24	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    180c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    180e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1810:	98 13       	cpse	r25, r24
    1812:	1a c0       	rjmp	.+52     	; 0x1848 <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:229 (discriminator 1)
    1814:	e8 89       	ldd	r30, Y+16	; 0x10
    1816:	f9 89       	ldd	r31, Y+17	; 0x11
    1818:	80 81       	ld	r24, Z
    181a:	85 ff       	sbrs	r24, 5
    181c:	15 c0       	rjmp	.+42     	; 0x1848 <HardwareSerial::write(unsigned char)+0x4e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    181e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1820:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
    1822:	ee 89       	ldd	r30, Y+22	; 0x16
    1824:	ff 89       	ldd	r31, Y+23	; 0x17
    1826:	60 83       	st	Z, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
    1828:	e8 89       	ldd	r30, Y+16	; 0x10
    182a:	f9 89       	ldd	r31, Y+17	; 0x11
    182c:	80 81       	ld	r24, Z
    182e:	83 70       	andi	r24, 0x03	; 3
    1830:	80 64       	ori	r24, 0x40	; 64
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
    1832:	80 83       	st	Z, r24
__iRestore():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1834:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	08 95       	ret
    1848:	f6 2e       	mov	r15, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    184a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    184c:	10 e0       	ldi	r17, 0x00	; 0
    184e:	0f 5f       	subi	r16, 0xFF	; 255
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	0f 73       	andi	r16, 0x3F	; 63
    1854:	11 27       	eor	r17, r17
    1856:	e0 2e       	mov	r14, r16
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1858:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185a:	8e 11       	cpse	r24, r14
    185c:	0c c0       	rjmp	.+24     	; 0x1876 <HardwareSerial::write(unsigned char)+0x7c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	07 fc       	sbrc	r0, 7
    1862:	fa cf       	rjmp	.-12     	; 0x1858 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1864:	e8 89       	ldd	r30, Y+16	; 0x10
    1866:	f9 89       	ldd	r31, Y+17	; 0x11
    1868:	80 81       	ld	r24, Z
    186a:	85 ff       	sbrs	r24, 5
    186c:	f5 cf       	rjmp	.-22     	; 0x1858 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 bb 0b 	call	0x1776	; 0x1776 <HardwareSerial::_tx_udr_empty_irq()>
    1874:	f1 cf       	rjmp	.-30     	; 0x1858 <HardwareSerial::write(unsigned char)+0x5e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1876:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1878:	ec 0f       	add	r30, r28
    187a:	fd 2f       	mov	r31, r29
    187c:	f1 1d       	adc	r31, r1
    187e:	e3 5a       	subi	r30, 0xA3	; 163
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	f0 82       	st	Z, r15
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    1884:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/runner/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1886:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
    1888:	0b 8f       	std	Y+27, r16	; 0x1b
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
    188a:	ea 89       	ldd	r30, Y+18	; 0x12
    188c:	fb 89       	ldd	r31, Y+19	; 0x13
    188e:	80 81       	ld	r24, Z
    1890:	80 62       	ori	r24, 0x20	; 32
    1892:	cf cf       	rjmp	.-98     	; 0x1832 <HardwareSerial::write(unsigned char)+0x38>

00001894 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:118
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	ec 01       	movw	r28, r24
    18a4:	6a 01       	movw	r12, r20
    18a6:	7b 01       	movw	r14, r22
    18a8:	12 2f       	mov	r17, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:121
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    18aa:	e8 89       	ldd	r30, Y+16	; 0x10
    18ac:	f9 89       	ldd	r31, Y+17	; 0x11
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:128
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    18b2:	c1 14       	cp	r12, r1
    18b4:	81 ee       	ldi	r24, 0xE1	; 225
    18b6:	d8 06       	cpc	r13, r24
    18b8:	e1 04       	cpc	r14, r1
    18ba:	f1 04       	cpc	r15, r1
    18bc:	a1 f0       	breq	.+40     	; 0x18e6 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:120 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	79 e0       	ldi	r23, 0x09	; 9
    18c2:	8d e3       	ldi	r24, 0x3D	; 61
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a7 01       	movw	r20, r14
    18c8:	96 01       	movw	r18, r12
    18ca:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodsi4>
    18ce:	21 50       	subi	r18, 0x01	; 1
    18d0:	31 09       	sbc	r19, r1
    18d2:	41 09       	sbc	r20, r1
    18d4:	51 09       	sbc	r21, r1
    18d6:	56 95       	lsr	r21
    18d8:	47 95       	ror	r20
    18da:	37 95       	ror	r19
    18dc:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:128 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    18de:	21 15       	cp	r18, r1
    18e0:	80 e1       	ldi	r24, 0x10	; 16
    18e2:	38 07       	cpc	r19, r24
    18e4:	98 f0       	brcs	.+38     	; 0x190c <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:130
  {
    *_ucsra = 0;
    18e6:	e8 89       	ldd	r30, Y+16	; 0x10
    18e8:	f9 89       	ldd	r31, Y+17	; 0x11
    18ea:	10 82       	st	Z, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:131
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    18ec:	60 e8       	ldi	r22, 0x80	; 128
    18ee:	74 e8       	ldi	r23, 0x84	; 132
    18f0:	8e e1       	ldi	r24, 0x1E	; 30
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a7 01       	movw	r20, r14
    18f6:	96 01       	movw	r18, r12
    18f8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodsi4>
    18fc:	21 50       	subi	r18, 0x01	; 1
    18fe:	31 09       	sbc	r19, r1
    1900:	41 09       	sbc	r20, r1
    1902:	51 09       	sbc	r21, r1
    1904:	56 95       	lsr	r21
    1906:	47 95       	ror	r20
    1908:	37 95       	ror	r19
    190a:	27 95       	ror	r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:135
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    190c:	ec 85       	ldd	r30, Y+12	; 0x0c
    190e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1910:	30 83       	st	Z, r19
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    1912:	ee 85       	ldd	r30, Y+14	; 0x0e
    1914:	ff 85       	ldd	r31, Y+15	; 0x0f
    1916:	20 83       	st	Z, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
    1918:	18 8e       	std	Y+24, r1	; 0x18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    191a:	ec 89       	ldd	r30, Y+20	; 0x14
    191c:	fd 89       	ldd	r31, Y+21	; 0x15
    191e:	10 83       	st	Z, r17
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    1920:	ea 89       	ldd	r30, Y+18	; 0x12
    1922:	fb 89       	ldd	r31, Y+19	; 0x13
    1924:	80 81       	ld	r24, Z
    1926:	88 69       	ori	r24, 0x98	; 152
    1928:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
    192a:	ea 89       	ldd	r30, Y+18	; 0x12
    192c:	fb 89       	ldd	r31, Y+19	; 0x13
    192e:	80 81       	ld	r24, Z
    1930:	8f 7d       	andi	r24, 0xDF	; 223
    1932:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial.cpp:150
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	1f 91       	pop	r17
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	08 95       	ret

00001944 <__vector_20>:
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	0b b6       	in	r0, 0x3b	; 59
    1950:	0f 92       	push	r0
    1952:	2f 93       	push	r18
    1954:	8f 93       	push	r24
    1956:	9f 93       	push	r25
    1958:	ef 93       	push	r30
    195a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    195c:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <Serial+0x10>
    1960:	f0 91 9a 02 	lds	r31, 0x029A	; 0x80029a <Serial+0x11>
    1964:	80 81       	ld	r24, Z
    1966:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <Serial+0x16>
    196a:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <Serial+0x17>
    196e:	82 fd       	sbrc	r24, 2
    1970:	1d c0       	rjmp	.+58     	; 0x19ac <__vector_20+0x68>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1972:	90 81       	ld	r25, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    1974:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <Serial+0x19>
    1978:	8f 5f       	subi	r24, 0xFF	; 255
    197a:	8f 73       	andi	r24, 0x3F	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    197c:	20 91 a3 02 	lds	r18, 0x02A3	; 0x8002a3 <Serial+0x1a>
    1980:	82 17       	cp	r24, r18
    1982:	41 f0       	breq	.+16     	; 0x1994 <__vector_20+0x50>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
    1984:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <Serial+0x19>
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	e7 57       	subi	r30, 0x77	; 119
    198c:	fd 4f       	sbci	r31, 0xFD	; 253
    198e:	95 8f       	std	Z+29, r25	; 0x1d
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
    1990:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <Serial+0x19>
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    1994:	ff 91       	pop	r31
    1996:	ef 91       	pop	r30
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	2f 91       	pop	r18
    199e:	0f 90       	pop	r0
    19a0:	0b be       	out	0x3b, r0	; 59
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    19ac:	80 81       	ld	r24, Z
__vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:52
    19ae:	f2 cf       	rjmp	.-28     	; 0x1994 <__vector_20+0x50>

000019b0 <__vector_21>:
__vector_21():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	0b b6       	in	r0, 0x3b	; 59
    19bc:	0f 92       	push	r0
    19be:	2f 93       	push	r18
    19c0:	3f 93       	push	r19
    19c2:	4f 93       	push	r20
    19c4:	5f 93       	push	r21
    19c6:	6f 93       	push	r22
    19c8:	7f 93       	push	r23
    19ca:	8f 93       	push	r24
    19cc:	9f 93       	push	r25
    19ce:	af 93       	push	r26
    19d0:	bf 93       	push	r27
    19d2:	ef 93       	push	r30
    19d4:	ff 93       	push	r31
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    19d6:	89 e8       	ldi	r24, 0x89	; 137
    19d8:	92 e0       	ldi	r25, 0x02	; 2
    19da:	0e 94 bb 0b 	call	0x1776	; 0x1776 <HardwareSerial::_tx_udr_empty_irq()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:65
}
    19de:	ff 91       	pop	r31
    19e0:	ef 91       	pop	r30
    19e2:	bf 91       	pop	r27
    19e4:	af 91       	pop	r26
    19e6:	9f 91       	pop	r25
    19e8:	8f 91       	pop	r24
    19ea:	7f 91       	pop	r23
    19ec:	6f 91       	pop	r22
    19ee:	5f 91       	pop	r21
    19f0:	4f 91       	pop	r20
    19f2:	3f 91       	pop	r19
    19f4:	2f 91       	pop	r18
    19f6:	0f 90       	pop	r0
    19f8:	0b be       	out	0x3b, r0	; 59
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	0f 90       	pop	r0
    1a00:	1f 90       	pop	r1
    1a02:	18 95       	reti

00001a04 <Serial0_available()>:
_Z17Serial0_availablev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    1a04:	89 e8       	ldi	r24, 0x89	; 137
    1a06:	92 e0       	ldi	r25, 0x02	; 2
    1a08:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <HardwareSerial::available()>
    1a0c:	21 e0       	ldi	r18, 0x01	; 1
    1a0e:	89 2b       	or	r24, r25
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <Serial0_available()+0x10>
    1a12:	20 e0       	ldi	r18, 0x00	; 0
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1a14:	82 2f       	mov	r24, r18
    1a16:	08 95       	ret

00001a18 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:46
    1a18:	e9 e8       	ldi	r30, 0x89	; 137
    1a1a:	f2 e0       	ldi	r31, 0x02	; 2
    1a1c:	13 82       	std	Z+3, r1	; 0x03
    1a1e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Stream.h:63
    1a20:	88 ee       	ldi	r24, 0xE8	; 232
    1a22:	93 e0       	ldi	r25, 0x03	; 3
    1a24:	a0 e0       	ldi	r26, 0x00	; 0
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	84 83       	std	Z+4, r24	; 0x04
    1a2a:	95 83       	std	Z+5, r25	; 0x05
    1a2c:	a6 83       	std	Z+6, r26	; 0x06
    1a2e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1a30:	8b ea       	ldi	r24, 0xAB	; 171
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	80 83       	st	Z, r24
    1a38:	85 ec       	ldi	r24, 0xC5	; 197
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	95 87       	std	Z+13, r25	; 0x0d
    1a3e:	84 87       	std	Z+12, r24	; 0x0c
    1a40:	84 ec       	ldi	r24, 0xC4	; 196
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	97 87       	std	Z+15, r25	; 0x0f
    1a46:	86 87       	std	Z+14, r24	; 0x0e
    1a48:	80 ec       	ldi	r24, 0xC0	; 192
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	91 8b       	std	Z+17, r25	; 0x11
    1a4e:	80 8b       	std	Z+16, r24	; 0x10
    1a50:	81 ec       	ldi	r24, 0xC1	; 193
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	93 8b       	std	Z+19, r25	; 0x13
    1a56:	82 8b       	std	Z+18, r24	; 0x12
    1a58:	82 ec       	ldi	r24, 0xC2	; 194
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	95 8b       	std	Z+21, r25	; 0x15
    1a5e:	84 8b       	std	Z+20, r24	; 0x14
    1a60:	86 ec       	ldi	r24, 0xC6	; 198
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	97 8b       	std	Z+23, r25	; 0x17
    1a66:	86 8b       	std	Z+22, r24	; 0x16
    1a68:	11 8e       	std	Z+25, r1	; 0x19
    1a6a:	12 8e       	std	Z+26, r1	; 0x1a
    1a6c:	13 8e       	std	Z+27, r1	; 0x1b
    1a6e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/HardwareSerial0.cpp:77
    1a70:	08 95       	ret

00001a72 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:119
size_t Print::println(const __FlashStringHelper *ifsh)
{
  size_t n = print(ifsh);
  n += println();
  return n;
}
    1a72:	af 92       	push	r10
    1a74:	bf 92       	push	r11
    1a76:	cf 92       	push	r12
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	6c 01       	movw	r12, r24
    1a88:	7b 01       	movw	r14, r22
    1a8a:	8b 01       	movw	r16, r22
    1a8c:	04 0f       	add	r16, r20
    1a8e:	15 1f       	adc	r17, r21
    1a90:	eb 01       	movw	r28, r22
    1a92:	5e 01       	movw	r10, r28
    1a94:	ae 18       	sub	r10, r14
    1a96:	bf 08       	sbc	r11, r15
    1a98:	c0 17       	cp	r28, r16
    1a9a:	d1 07       	cpc	r29, r17
    1a9c:	59 f0       	breq	.+22     	; 0x1ab4 <Print::write(unsigned char const*, unsigned int)+0x42>
    1a9e:	69 91       	ld	r22, Y+
    1aa0:	d6 01       	movw	r26, r12
    1aa2:	ed 91       	ld	r30, X+
    1aa4:	fc 91       	ld	r31, X
    1aa6:	01 90       	ld	r0, Z+
    1aa8:	f0 81       	ld	r31, Z
    1aaa:	e0 2d       	mov	r30, r0
    1aac:	c6 01       	movw	r24, r12
    1aae:	09 95       	icall
    1ab0:	89 2b       	or	r24, r25
    1ab2:	79 f7       	brne	.-34     	; 0x1a92 <Print::write(unsigned char const*, unsigned int)+0x20>
    1ab4:	c5 01       	movw	r24, r10
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	bf 90       	pop	r11
    1ac8:	af 90       	pop	r10
    1aca:	08 95       	ret

00001acc <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    1acc:	fb 01       	movw	r30, r22
    1ace:	01 90       	ld	r0, Z+
    1ad0:	00 20       	and	r0, r0
    1ad2:	e9 f7       	brne	.-6      	; 0x1ace <Print::write(char const*) [clone .part.2]+0x2>
    1ad4:	31 97       	sbiw	r30, 0x01	; 1
    1ad6:	af 01       	movw	r20, r30
    1ad8:	46 1b       	sub	r20, r22
    1ada:	57 0b       	sbc	r21, r23
    1adc:	dc 01       	movw	r26, r24
    1ade:	ed 91       	ld	r30, X+
    1ae0:	fc 91       	ld	r31, X
    1ae2:	02 80       	ldd	r0, Z+2	; 0x02
    1ae4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ae6:	e0 2d       	mov	r30, r0
    1ae8:	09 94       	ijmp

00001aea <Print::print(String const&)>:
_ZN5Print5writeEPKcj():
    1aea:	db 01       	movw	r26, r22
    1aec:	14 96       	adiw	r26, 0x04	; 4
    1aee:	4d 91       	ld	r20, X+
    1af0:	5c 91       	ld	r21, X
    1af2:	15 97       	sbiw	r26, 0x05	; 5
    1af4:	6d 91       	ld	r22, X+
    1af6:	7c 91       	ld	r23, X
    1af8:	dc 01       	movw	r26, r24
    1afa:	ed 91       	ld	r30, X+
    1afc:	fc 91       	ld	r31, X
    1afe:	02 80       	ldd	r0, Z+2	; 0x02
    1b00:	f3 81       	ldd	r31, Z+3	; 0x03
    1b02:	e0 2d       	mov	r30, r0
    1b04:	09 94       	ijmp

00001b06 <Print::println()>:
_ZN5Print5writeEPKc():
    1b06:	69 eb       	ldi	r22, 0xB9	; 185
    1b08:	71 e0       	ldi	r23, 0x01	; 1
    1b0a:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <Print::write(char const*) [clone .part.2]>

00001b0e <Print::println(String const&)>:
_ZN5Print7printlnERK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:132
{
  return write("\r\n");
}

size_t Print::println(const String &s)
{
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:133
  size_t n = print(s);
    1b18:	0e 94 75 0d 	call	0x1aea	; 0x1aea <Print::print(String const&)>
    1b1c:	8c 01       	movw	r16, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:134
  n += println();
    1b1e:	ce 01       	movw	r24, r28
    1b20:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:136
  return n;
}
    1b24:	80 0f       	add	r24, r16
    1b26:	91 1f       	adc	r25, r17
    1b28:	df 91       	pop	r29
    1b2a:	cf 91       	pop	r28
    1b2c:	1f 91       	pop	r17
    1b2e:	0f 91       	pop	r16
    1b30:	08 95       	ret

00001b32 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:139

size_t Print::println(const char c[])
{
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.h:53
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
    1b3c:	d0 e0       	ldi	r29, 0x00	; 0
    1b3e:	c0 e0       	ldi	r28, 0x00	; 0
    1b40:	61 15       	cp	r22, r1
    1b42:	71 05       	cpc	r23, r1
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <Print::println(char const*)+0x1a>
    1b46:	0e 94 66 0d 	call	0x1acc	; 0x1acc <Print::write(char const*) [clone .part.2]>
    1b4a:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:141
  size_t n = print(c);
  n += println();
    1b4c:	c8 01       	movw	r24, r16
    1b4e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <Print::println()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/Print.cpp:143
  return n;
}
    1b52:	8c 0f       	add	r24, r28
    1b54:	9d 1f       	adc	r25, r29
    1b56:	df 91       	pop	r29
    1b58:	cf 91       	pop	r28
    1b5a:	1f 91       	pop	r17
    1b5c:	0f 91       	pop	r16
    1b5e:	08 95       	ret

00001b60 <String::~String()>:
_ZN6StringD2Ev():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:342

unsigned char String::concat(const __FlashStringHelper * str)
{
  if (!str) return 0;
  int length = strlen_P((const char *) str);
  if (length == 0) return 1;
    1b60:	fc 01       	movw	r30, r24
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <String::~String()+0xe>
    1b6a:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <free>
    1b6e:	08 95       	ret

00001b70 <String::invalidate()>:
_ZN6String10invalidateEv():
    1b70:	cf 93       	push	r28
    1b72:	df 93       	push	r29
    1b74:	ec 01       	movw	r28, r24
    1b76:	88 81       	ld	r24, Y
    1b78:	99 81       	ldd	r25, Y+1	; 0x01
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	11 f0       	breq	.+4      	; 0x1b82 <String::invalidate()+0x12>
    1b7e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <free>
    1b82:	19 82       	std	Y+1, r1	; 0x01
    1b84:	18 82       	st	Y, r1
    1b86:	1d 82       	std	Y+5, r1	; 0x05
    1b88:	1c 82       	std	Y+4, r1	; 0x04
    1b8a:	1b 82       	std	Y+3, r1	; 0x03
    1b8c:	1a 82       	std	Y+2, r1	; 0x02
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	08 95       	ret

00001b94 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	cf 93       	push	r28
    1b9a:	df 93       	push	r29
    1b9c:	ec 01       	movw	r28, r24
    1b9e:	8b 01       	movw	r16, r22
    1ba0:	6f 5f       	subi	r22, 0xFF	; 255
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	88 81       	ld	r24, Y
    1ba6:	99 81       	ldd	r25, Y+1	; 0x01
    1ba8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <realloc>
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	51 f0       	breq	.+20     	; 0x1bc4 <String::changeBuffer(unsigned int)+0x30>
    1bb0:	99 83       	std	Y+1, r25	; 0x01
    1bb2:	88 83       	st	Y, r24
    1bb4:	1b 83       	std	Y+3, r17	; 0x03
    1bb6:	0a 83       	std	Y+2, r16	; 0x02
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	f9 cf       	rjmp	.-14     	; 0x1bba <String::changeBuffer(unsigned int)+0x26>

00001bc8 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29
    1bcc:	ec 01       	movw	r28, r24
    1bce:	88 81       	ld	r24, Y
    1bd0:	99 81       	ldd	r25, Y+1	; 0x01
    1bd2:	89 2b       	or	r24, r25
    1bd4:	49 f0       	breq	.+18     	; 0x1be8 <String::reserve(unsigned int)+0x20>
    1bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bda:	86 17       	cp	r24, r22
    1bdc:	97 07       	cpc	r25, r23
    1bde:	20 f0       	brcs	.+8      	; 0x1be8 <String::reserve(unsigned int)+0x20>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret
    1be8:	ce 01       	movw	r24, r28
    1bea:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <String::changeBuffer(unsigned int)>
    1bee:	88 23       	and	r24, r24
    1bf0:	c1 f3       	breq	.-16     	; 0x1be2 <String::reserve(unsigned int)+0x1a>
    1bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf6:	89 2b       	or	r24, r25
    1bf8:	99 f7       	brne	.-26     	; 0x1be0 <String::reserve(unsigned int)+0x18>
    1bfa:	e8 81       	ld	r30, Y
    1bfc:	f9 81       	ldd	r31, Y+1	; 0x01
    1bfe:	10 82       	st	Z, r1
    1c00:	ef cf       	rjmp	.-34     	; 0x1be0 <String::reserve(unsigned int)+0x18>

00001c02 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    1c02:	ef 92       	push	r14
    1c04:	ff 92       	push	r15
    1c06:	0f 93       	push	r16
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
    1c10:	7b 01       	movw	r14, r22
    1c12:	8a 01       	movw	r16, r20
    1c14:	ba 01       	movw	r22, r20
    1c16:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <String::reserve(unsigned int)>
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	0b c0       	rjmp	.+22     	; 0x1c34 <String::copy(char const*, unsigned int)+0x32>
    1c1e:	ce 01       	movw	r24, r28
    1c20:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <String::invalidate()>
    1c24:	ce 01       	movw	r24, r28
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	08 95       	ret
    1c34:	1d 83       	std	Y+5, r17	; 0x05
    1c36:	0c 83       	std	Y+4, r16	; 0x04
    1c38:	b7 01       	movw	r22, r14
    1c3a:	88 81       	ld	r24, Y
    1c3c:	99 81       	ldd	r25, Y+1	; 0x01
    1c3e:	0e 94 d5 13 	call	0x27aa	; 0x27aa <strcpy>
    1c42:	f0 cf       	rjmp	.-32     	; 0x1c24 <String::copy(char const*, unsigned int)+0x22>

00001c44 <String::String(char const*)>:
_ZN6String4initEv():
    1c44:	fc 01       	movw	r30, r24
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	10 82       	st	Z, r1
    1c4a:	13 82       	std	Z+3, r1	; 0x03
    1c4c:	12 82       	std	Z+2, r1	; 0x02
    1c4e:	15 82       	std	Z+5, r1	; 0x05
    1c50:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    1c52:	61 15       	cp	r22, r1
    1c54:	71 05       	cpc	r23, r1
    1c56:	51 f0       	breq	.+20     	; 0x1c6c <String::String(char const*)+0x28>
    1c58:	fb 01       	movw	r30, r22
    1c5a:	01 90       	ld	r0, Z+
    1c5c:	00 20       	and	r0, r0
    1c5e:	e9 f7       	brne	.-6      	; 0x1c5a <String::String(char const*)+0x16>
    1c60:	31 97       	sbiw	r30, 0x01	; 1
    1c62:	af 01       	movw	r20, r30
    1c64:	46 1b       	sub	r20, r22
    1c66:	57 0b       	sbc	r21, r23
    1c68:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <String::copy(char const*, unsigned int)>
    1c6c:	08 95       	ret

00001c6e <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc():
    1c6e:	fb 01       	movw	r30, r22
    1c70:	01 90       	ld	r0, Z+
    1c72:	00 20       	and	r0, r0
    1c74:	e9 f7       	brne	.-6      	; 0x1c70 <String::operator=(char const*) [clone .part.3]+0x2>
    1c76:	31 97       	sbiw	r30, 0x01	; 1
    1c78:	af 01       	movw	r20, r30
    1c7a:	46 1b       	sub	r20, r22
    1c7c:	57 0b       	sbc	r21, r23
    1c7e:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <String::copy(char const*, unsigned int)>

00001c82 <String::String(unsigned char, unsigned char)>:
_ZN6StringC2Ehh():
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	29 97       	sbiw	r28, 0x09	; 9
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	8c 01       	movw	r16, r24
    1c9c:	86 2f       	mov	r24, r22
_ZN6String4initEv():
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	11 82       	std	Z+1, r1	; 0x01
    1ca2:	10 82       	st	Z, r1
    1ca4:	13 82       	std	Z+3, r1	; 0x03
    1ca6:	12 82       	std	Z+2, r1	; 0x02
    1ca8:	15 82       	std	Z+5, r1	; 0x05
    1caa:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ehh():
    1cac:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    1cae:	be 01       	movw	r22, r28
    1cb0:	6f 5f       	subi	r22, 0xFF	; 255
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 23 14 	call	0x2846	; 0x2846 <utoa>
_ZN6StringaSEPKc():
    1cba:	be 01       	movw	r22, r28
    1cbc:	6f 5f       	subi	r22, 0xFF	; 255
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ehh():
    1cc6:	29 96       	adiw	r28, 0x09	; 9
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <String::String(unsigned int, unsigned char)>:
_ZN6StringC2Ejh():
    1cdc:	0f 93       	push	r16
    1cde:	1f 93       	push	r17
    1ce0:	cf 93       	push	r28
    1ce2:	df 93       	push	r29
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
    1ce8:	61 97       	sbiw	r28, 0x11	; 17
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	8c 01       	movw	r16, r24
    1cf6:	cb 01       	movw	r24, r22
_ZN6String4initEv():
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	11 82       	std	Z+1, r1	; 0x01
    1cfc:	10 82       	st	Z, r1
    1cfe:	13 82       	std	Z+3, r1	; 0x03
    1d00:	12 82       	std	Z+2, r1	; 0x02
    1d02:	15 82       	std	Z+5, r1	; 0x05
    1d04:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Ejh():
    1d06:	50 e0       	ldi	r21, 0x00	; 0
utoa():
    1d08:	be 01       	movw	r22, r28
    1d0a:	6f 5f       	subi	r22, 0xFF	; 255
    1d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d0e:	0e 94 23 14 	call	0x2846	; 0x2846 <utoa>
_ZN6StringaSEPKc():
    1d12:	be 01       	movw	r22, r28
    1d14:	6f 5f       	subi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	c8 01       	movw	r24, r16
    1d1a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Ejh():
    1d1e:	61 96       	adiw	r28, 0x11	; 17
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	08 95       	ret

00001d34 <String::String(long, unsigned char)>:
_ZN6StringC2Elh():
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	a2 97       	sbiw	r28, 0x22	; 34
    1d42:	0f b6       	in	r0, 0x3f	; 63
    1d44:	f8 94       	cli
    1d46:	de bf       	out	0x3e, r29	; 62
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	cd bf       	out	0x3d, r28	; 61
    1d4c:	8c 01       	movw	r16, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	ba 01       	movw	r22, r20
_ZN6String4initEv():
    1d52:	f8 01       	movw	r30, r16
    1d54:	11 82       	std	Z+1, r1	; 0x01
    1d56:	10 82       	st	Z, r1
    1d58:	13 82       	std	Z+3, r1	; 0x03
    1d5a:	12 82       	std	Z+2, r1	; 0x02
    1d5c:	15 82       	std	Z+5, r1	; 0x05
    1d5e:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Elh():
    1d60:	30 e0       	ldi	r19, 0x00	; 0
ltoa():
    1d62:	ae 01       	movw	r20, r28
    1d64:	4f 5f       	subi	r20, 0xFF	; 255
    1d66:	5f 4f       	sbci	r21, 0xFF	; 255
    1d68:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <ltoa>
_ZN6StringaSEPKc():
    1d6c:	be 01       	movw	r22, r28
    1d6e:	6f 5f       	subi	r22, 0xFF	; 255
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	c8 01       	movw	r24, r16
    1d74:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Elh():
    1d78:	a2 96       	adiw	r28, 0x22	; 34
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	08 95       	ret

00001d8e <String::String(unsigned long, unsigned char)>:
_ZN6StringC2Emh():
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	a1 97       	sbiw	r28, 0x21	; 33
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	8c 01       	movw	r16, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	ba 01       	movw	r22, r20
_ZN6String4initEv():
    1dac:	f8 01       	movw	r30, r16
    1dae:	11 82       	std	Z+1, r1	; 0x01
    1db0:	10 82       	st	Z, r1
    1db2:	13 82       	std	Z+3, r1	; 0x03
    1db4:	12 82       	std	Z+2, r1	; 0x02
    1db6:	15 82       	std	Z+5, r1	; 0x05
    1db8:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2Emh():
    1dba:	30 e0       	ldi	r19, 0x00	; 0
ultoa():
    1dbc:	ae 01       	movw	r20, r28
    1dbe:	4f 5f       	subi	r20, 0xFF	; 255
    1dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc2:	0e 94 f6 13 	call	0x27ec	; 0x27ec <ultoa>
_ZN6StringaSEPKc():
    1dc6:	be 01       	movw	r22, r28
    1dc8:	6f 5f       	subi	r22, 0xFF	; 255
    1dca:	7f 4f       	sbci	r23, 0xFF	; 255
    1dcc:	c8 01       	movw	r24, r16
    1dce:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <String::operator=(char const*) [clone .part.3]>
_ZN6StringC2Emh():
    1dd2:	a1 96       	adiw	r28, 0x21	; 33
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	f8 94       	cli
    1dd8:	de bf       	out	0x3e, r29	; 62
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	cd bf       	out	0x3d, r28	; 61
    1dde:	df 91       	pop	r29
    1de0:	cf 91       	pop	r28
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	08 95       	ret

00001de8 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    1de8:	cf 93       	push	r28
    1dea:	df 93       	push	r29
    1dec:	ec 01       	movw	r28, r24
    1dee:	fb 01       	movw	r30, r22
    1df0:	86 17       	cp	r24, r22
    1df2:	97 07       	cpc	r25, r23
    1df4:	49 f0       	breq	.+18     	; 0x1e08 <String::operator=(String const&)+0x20>
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	61 15       	cp	r22, r1
    1dfc:	71 05       	cpc	r23, r1
    1dfe:	41 f0       	breq	.+16     	; 0x1e10 <String::operator=(String const&)+0x28>
    1e00:	44 81       	ldd	r20, Z+4	; 0x04
    1e02:	55 81       	ldd	r21, Z+5	; 0x05
    1e04:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <String::copy(char const*, unsigned int)>
    1e08:	ce 01       	movw	r24, r28
    1e0a:	df 91       	pop	r29
    1e0c:	cf 91       	pop	r28
    1e0e:	08 95       	ret
    1e10:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <String::invalidate()>
    1e14:	f9 cf       	rjmp	.-14     	; 0x1e08 <String::operator=(String const&)+0x20>

00001e16 <String::String(String const&)>:
_ZN6String4initEv():
    1e16:	fc 01       	movw	r30, r24
    1e18:	11 82       	std	Z+1, r1	; 0x01
    1e1a:	10 82       	st	Z, r1
    1e1c:	13 82       	std	Z+3, r1	; 0x03
    1e1e:	12 82       	std	Z+2, r1	; 0x02
    1e20:	15 82       	std	Z+5, r1	; 0x05
    1e22:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
    1e24:	0c 94 f4 0e 	jmp	0x1de8	; 0x1de8 <String::operator=(String const&)>

00001e28 <String::concat(char const*, unsigned int)>:
_ZN6String6concatEPKcj():
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	61 15       	cp	r22, r1
    1e36:	71 05       	cpc	r23, r1
    1e38:	41 f4       	brne	.+16     	; 0x1e4a <String::concat(char const*, unsigned int)+0x22>
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	1f 91       	pop	r17
    1e42:	0f 91       	pop	r16
    1e44:	ff 90       	pop	r15
    1e46:	ef 90       	pop	r14
    1e48:	08 95       	ret
    1e4a:	41 15       	cp	r20, r1
    1e4c:	51 05       	cpc	r21, r1
    1e4e:	b1 f0       	breq	.+44     	; 0x1e7c <String::concat(char const*, unsigned int)+0x54>
    1e50:	7b 01       	movw	r14, r22
    1e52:	ec 01       	movw	r28, r24
    1e54:	0c 81       	ldd	r16, Y+4	; 0x04
    1e56:	1d 81       	ldd	r17, Y+5	; 0x05
    1e58:	04 0f       	add	r16, r20
    1e5a:	15 1f       	adc	r17, r21
    1e5c:	b8 01       	movw	r22, r16
    1e5e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <String::reserve(unsigned int)>
    1e62:	88 23       	and	r24, r24
    1e64:	51 f3       	breq	.-44     	; 0x1e3a <String::concat(char const*, unsigned int)+0x12>
    1e66:	28 81       	ld	r18, Y
    1e68:	39 81       	ldd	r19, Y+1	; 0x01
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e6e:	b7 01       	movw	r22, r14
    1e70:	82 0f       	add	r24, r18
    1e72:	93 1f       	adc	r25, r19
    1e74:	0e 94 d5 13 	call	0x27aa	; 0x27aa <strcpy>
    1e78:	1d 83       	std	Y+5, r17	; 0x05
    1e7a:	0c 83       	std	Y+4, r16	; 0x04
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	de cf       	rjmp	.-68     	; 0x1e3c <String::concat(char const*, unsigned int)+0x14>

00001e80 <String::concat(String const&)>:
_ZN6String6concatERKS_():
    1e80:	fb 01       	movw	r30, r22
    1e82:	44 81       	ldd	r20, Z+4	; 0x04
    1e84:	55 81       	ldd	r21, Z+5	; 0x05
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <String::concat(char const*, unsigned int)>

00001e8e <String::concat(char const*)>:
_ZN6String6concatEPKc():
    1e8e:	61 15       	cp	r22, r1
    1e90:	71 05       	cpc	r23, r1
    1e92:	51 f0       	breq	.+20     	; 0x1ea8 <String::concat(char const*)+0x1a>
    1e94:	fb 01       	movw	r30, r22
    1e96:	01 90       	ld	r0, Z+
    1e98:	00 20       	and	r0, r0
    1e9a:	e9 f7       	brne	.-6      	; 0x1e96 <String::concat(char const*)+0x8>
    1e9c:	31 97       	sbiw	r30, 0x01	; 1
    1e9e:	af 01       	movw	r20, r30
    1ea0:	46 1b       	sub	r20, r22
    1ea2:	57 0b       	sbc	r21, r23
    1ea4:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <String::concat(char const*, unsigned int)>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	08 95       	ret

00001eac <operator+(StringSumHelper const&, String const&)>:
_ZplRK15StringSumHelperRK6String():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:355
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    1eb2:	fb 01       	movw	r30, r22
    1eb4:	44 81       	ldd	r20, Z+4	; 0x04
    1eb6:	55 81       	ldd	r21, Z+5	; 0x05
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <String::concat(char const*, unsigned int)>
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <operator+(StringSumHelper const&, String const&)+0x1e>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:357 (discriminator 1)
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:359
  return a;
}
    1eca:	ce 01       	movw	r24, r28
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <operator+(StringSumHelper const&, char const*)>:
_ZplRK15StringSumHelperPKc():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:362

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	ec 01       	movw	r28, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    1ed8:	61 15       	cp	r22, r1
    1eda:	71 05       	cpc	r23, r1
    1edc:	39 f4       	brne	.+14     	; 0x1eec <operator+(StringSumHelper const&, char const*)+0x1a>
    1ede:	ce 01       	movw	r24, r28
    1ee0:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <String::invalidate()>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:366
  return a;
}
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/WString.cpp:364 (discriminator 2)
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
  StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
  if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    1eec:	fb 01       	movw	r30, r22
    1eee:	01 90       	ld	r0, Z+
    1ef0:	00 20       	and	r0, r0
    1ef2:	e9 f7       	brne	.-6      	; 0x1eee <operator+(StringSumHelper const&, char const*)+0x1c>
    1ef4:	31 97       	sbiw	r30, 0x01	; 1
    1ef6:	af 01       	movw	r20, r30
    1ef8:	46 1b       	sub	r20, r22
    1efa:	57 0b       	sbc	r21, r23
    1efc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <String::concat(char const*, unsigned int)>
    1f00:	88 23       	and	r24, r24
    1f02:	69 f3       	breq	.-38     	; 0x1ede <operator+(StringSumHelper const&, char const*)+0xc>
    1f04:	ef cf       	rjmp	.-34     	; 0x1ee4 <operator+(StringSumHelper const&, char const*)+0x12>

00001f06 <initVariant>:
initVariant():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1f06:	08 95       	ret

00001f08 <main>:
main():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1f08:	0e 94 46 10 	call	0x208c	; 0x208c <init>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1f0c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <initVariant>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1f10:	0e 94 80 02 	call	0x500	; 0x500 <setup>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1f14:	c0 ea       	ldi	r28, 0xA0	; 160
    1f16:	db e0       	ldi	r29, 0x0B	; 11
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1f18:	0e 94 b1 00 	call	0x162	; 0x162 <loop>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1f1c:	20 97       	sbiw	r28, 0x00	; 0
    1f1e:	e1 f3       	breq	.-8      	; 0x1f18 <main+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1f20:	0e 94 a0 0b 	call	0x1740	; 0x1740 <serialEventRun()>
    1f24:	f9 cf       	rjmp	.-14     	; 0x1f18 <main+0x10>

00001f26 <__vector_18>:
__vector_18():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    1f26:	1f 92       	push	r1
    1f28:	0f 92       	push	r0
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	0f 92       	push	r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	2f 93       	push	r18
    1f32:	3f 93       	push	r19
    1f34:	8f 93       	push	r24
    1f36:	9f 93       	push	r25
    1f38:	af 93       	push	r26
    1f3a:	bf 93       	push	r27
    1f3c:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <timer0_millis>
    1f40:	90 91 2c 03 	lds	r25, 0x032C	; 0x80032c <timer0_millis+0x1>
    1f44:	a0 91 2d 03 	lds	r26, 0x032D	; 0x80032d <timer0_millis+0x2>
    1f48:	b0 91 2e 03 	lds	r27, 0x032E	; 0x80032e <timer0_millis+0x3>
    1f4c:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <timer0_fract>
    1f50:	23 e0       	ldi	r18, 0x03	; 3
    1f52:	23 0f       	add	r18, r19
    1f54:	2d 37       	cpi	r18, 0x7D	; 125
    1f56:	68 f1       	brcs	.+90     	; 0x1fb2 <__vector_18+0x8c>
    1f58:	26 e8       	ldi	r18, 0x86	; 134
    1f5a:	23 0f       	add	r18, r19
    1f5c:	02 96       	adiw	r24, 0x02	; 2
    1f5e:	a1 1d       	adc	r26, r1
    1f60:	b1 1d       	adc	r27, r1
    1f62:	20 93 2a 03 	sts	0x032A, r18	; 0x80032a <timer0_fract>
    1f66:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <timer0_millis>
    1f6a:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <timer0_millis+0x1>
    1f6e:	a0 93 2d 03 	sts	0x032D, r26	; 0x80032d <timer0_millis+0x2>
    1f72:	b0 93 2e 03 	sts	0x032E, r27	; 0x80032e <timer0_millis+0x3>
    1f76:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <timer0_overflow_count>
    1f7a:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <timer0_overflow_count+0x1>
    1f7e:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <timer0_overflow_count+0x2>
    1f82:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <timer0_overflow_count+0x3>
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	a1 1d       	adc	r26, r1
    1f8a:	b1 1d       	adc	r27, r1
    1f8c:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <timer0_overflow_count>
    1f90:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <timer0_overflow_count+0x1>
    1f94:	a0 93 28 03 	sts	0x0328, r26	; 0x800328 <timer0_overflow_count+0x2>
    1f98:	b0 93 29 03 	sts	0x0329, r27	; 0x800329 <timer0_overflow_count+0x3>
    1f9c:	bf 91       	pop	r27
    1f9e:	af 91       	pop	r26
    1fa0:	9f 91       	pop	r25
    1fa2:	8f 91       	pop	r24
    1fa4:	3f 91       	pop	r19
    1fa6:	2f 91       	pop	r18
    1fa8:	0f 90       	pop	r0
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	0f 90       	pop	r0
    1fae:	1f 90       	pop	r1
    1fb0:	18 95       	reti
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	a1 1d       	adc	r26, r1
    1fb6:	b1 1d       	adc	r27, r1
    1fb8:	d4 cf       	rjmp	.-88     	; 0x1f62 <__vector_18+0x3c>

00001fba <micros>:
micros():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    1fba:	3f b7       	in	r19, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    1fbc:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    1fbe:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <timer0_overflow_count>
    1fc2:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <timer0_overflow_count+0x1>
    1fc6:	a0 91 28 03 	lds	r26, 0x0328	; 0x800328 <timer0_overflow_count+0x2>
    1fca:	b0 91 29 03 	lds	r27, 0x0329	; 0x800329 <timer0_overflow_count+0x3>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    1fce:	26 b5       	in	r18, 0x26	; 38
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1fd0:	a8 9b       	sbis	0x15, 0	; 21
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    1fd4:	2f 3f       	cpi	r18, 0xFF	; 255
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <micros+0x24>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    1fd8:	01 96       	adiw	r24, 0x01	; 1
    1fda:	a1 1d       	adc	r26, r1
    1fdc:	b1 1d       	adc	r27, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    1fde:	3f bf       	out	0x3f, r19	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    1fe0:	ba 2f       	mov	r27, r26
    1fe2:	a9 2f       	mov	r26, r25
    1fe4:	98 2f       	mov	r25, r24
    1fe6:	88 27       	eor	r24, r24
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	62 0f       	add	r22, r18
    1fee:	71 1d       	adc	r23, r1
    1ff0:	81 1d       	adc	r24, r1
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	42 e0       	ldi	r20, 0x02	; 2
    1ff6:	66 0f       	add	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	4a 95       	dec	r20
    2000:	d1 f7       	brne	.-12     	; 0x1ff6 <micros+0x3c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    2002:	08 95       	ret

00002004 <delay>:
delay():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    2004:	8f 92       	push	r8
    2006:	9f 92       	push	r9
    2008:	af 92       	push	r10
    200a:	bf 92       	push	r11
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	6b 01       	movw	r12, r22
    2016:	7c 01       	movw	r14, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    2018:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <micros>
    201c:	4b 01       	movw	r8, r22
    201e:	5c 01       	movw	r10, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    2020:	c1 14       	cp	r12, r1
    2022:	d1 04       	cpc	r13, r1
    2024:	e1 04       	cpc	r14, r1
    2026:	f1 04       	cpc	r15, r1
    2028:	e9 f0       	breq	.+58     	; 0x2064 <delay+0x60>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:400
    yield();
    202a:	0e 94 1a 11 	call	0x2234	; 0x2234 <yield>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    202e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <micros>
    2032:	68 19       	sub	r22, r8
    2034:	79 09       	sbc	r23, r9
    2036:	8a 09       	sbc	r24, r10
    2038:	9b 09       	sbc	r25, r11
    203a:	68 3e       	cpi	r22, 0xE8	; 232
    203c:	73 40       	sbci	r23, 0x03	; 3
    203e:	81 05       	cpc	r24, r1
    2040:	91 05       	cpc	r25, r1
    2042:	70 f3       	brcs	.-36     	; 0x2020 <delay+0x1c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    2044:	21 e0       	ldi	r18, 0x01	; 1
    2046:	c2 1a       	sub	r12, r18
    2048:	d1 08       	sbc	r13, r1
    204a:	e1 08       	sbc	r14, r1
    204c:	f1 08       	sbc	r15, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    204e:	88 ee       	ldi	r24, 0xE8	; 232
    2050:	88 0e       	add	r8, r24
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	98 1e       	adc	r9, r24
    2056:	a1 1c       	adc	r10, r1
    2058:	b1 1c       	adc	r11, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    205a:	c1 14       	cp	r12, r1
    205c:	d1 04       	cpc	r13, r1
    205e:	e1 04       	cpc	r14, r1
    2060:	f1 04       	cpc	r15, r1
    2062:	29 f7       	brne	.-54     	; 0x202e <delay+0x2a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    2064:	ff 90       	pop	r15
    2066:	ef 90       	pop	r14
    2068:	df 90       	pop	r13
    206a:	cf 90       	pop	r12
    206c:	bf 90       	pop	r11
    206e:	af 90       	pop	r10
    2070:	9f 90       	pop	r9
    2072:	8f 90       	pop	r8
    2074:	08 95       	ret

00002076 <delayMicroseconds>:
delayMicroseconds():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    2076:	82 30       	cpi	r24, 0x02	; 2
    2078:	91 05       	cpc	r25, r1
    207a:	38 f0       	brcs	.+14     	; 0x208a <delayMicroseconds+0x14>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    2084:	05 97       	sbiw	r24, 0x05	; 5
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <delayMicroseconds+0x10>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    208a:	08 95       	ret

0000208c <init>:
init():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    208c:	78 94       	sei
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    208e:	84 b5       	in	r24, 0x24	; 36
    2090:	83 60       	ori	r24, 0x03	; 3
    2092:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2094:	85 b5       	in	r24, 0x25	; 37
    2096:	83 60       	ori	r24, 0x03	; 3
    2098:	85 bd       	out	0x25, r24	; 37
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    209a:	ee e6       	ldi	r30, 0x6E	; 110
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	81 60       	ori	r24, 0x01	; 1
    20a2:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    20a4:	e1 e8       	ldi	r30, 0x81	; 129
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    20ac:	80 81       	ld	r24, Z
    20ae:	81 60       	ori	r24, 0x01	; 1
    20b0:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    20b2:	e0 e8       	ldi	r30, 0x80	; 128
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	81 60       	ori	r24, 0x01	; 1
    20ba:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    20bc:	e1 eb       	ldi	r30, 0xB1	; 177
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	84 60       	ori	r24, 0x04	; 4
    20c4:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    20c6:	e0 eb       	ldi	r30, 0xB0	; 176
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	81 60       	ori	r24, 0x01	; 1
    20ce:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    20d0:	e1 e9       	ldi	r30, 0x91	; 145
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	83 60       	ori	r24, 0x03	; 3
    20d8:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    20da:	e0 e9       	ldi	r30, 0x90	; 144
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	81 60       	ori	r24, 0x01	; 1
    20e2:	80 83       	st	Z, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    20e4:	87 e8       	ldi	r24, 0x87	; 135
    20e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    20ea:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    20ee:	08 95       	ret

000020f0 <turnOffPWM>:
turnOffPWM():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    20f0:	82 50       	subi	r24, 0x02	; 2
    20f2:	8a 30       	cpi	r24, 0x0A	; 10
    20f4:	88 f5       	brcc	.+98     	; 0x2158 <turnOffPWM+0x68>
    20f6:	e8 2f       	mov	r30, r24
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	ef 57       	subi	r30, 0x7F	; 127
    20fc:	ff 4e       	sbci	r31, 0xEF	; 239
    20fe:	0c 94 94 11 	jmp	0x2328	; 0x2328 <__tablejump2__>
    2102:	a9 10       	cpse	r10, r9
    2104:	ad 10       	cpse	r10, r13
    2106:	8b 10       	cpse	r8, r11
    2108:	91 10       	cpse	r9, r1
    210a:	ac 10       	cpse	r10, r12
    210c:	ac 10       	cpse	r10, r12
    210e:	95 10       	cpse	r9, r5
    2110:	9b 10       	cpse	r9, r11
    2112:	9f 10       	cpse	r9, r15
    2114:	a5 10       	cpse	r10, r5
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2116:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    211a:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    211c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    2120:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2122:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2126:	8f 7d       	andi	r24, 0xDF	; 223
    2128:	f9 cf       	rjmp	.-14     	; 0x211c <turnOffPWM+0x2c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    212a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    212e:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2130:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    2134:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2136:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    213a:	8f 7d       	andi	r24, 0xDF	; 223
    213c:	f9 cf       	rjmp	.-14     	; 0x2130 <turnOffPWM+0x40>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    213e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2142:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2144:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:122
        break;
    2148:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    214a:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    214e:	8f 7d       	andi	r24, 0xDF	; 223
    2150:	f9 cf       	rjmp	.-14     	; 0x2144 <turnOffPWM+0x54>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2152:	84 b5       	in	r24, 0x24	; 36
    2154:	8f 77       	andi	r24, 0x7F	; 127
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2156:	84 bd       	out	0x24, r24	; 36
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2158:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    215a:	84 b5       	in	r24, 0x24	; 36
    215c:	8f 7d       	andi	r24, 0xDF	; 223
    215e:	fb cf       	rjmp	.-10     	; 0x2156 <turnOffPWM+0x66>

00002160 <pinMode>:
pinMode():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2160:	cf 93       	push	r28
    2162:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	fc 01       	movw	r30, r24
    2168:	e4 55       	subi	r30, 0x54	; 84
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	24 91       	lpm	r18, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    216e:	84 53       	subi	r24, 0x34	; 52
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	fc 01       	movw	r30, r24
    2174:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2176:	88 23       	and	r24, r24
    2178:	c9 f0       	breq	.+50     	; 0x21ac <pinMode+0x4c>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	fc 01       	movw	r30, r24
    2182:	ea 50       	subi	r30, 0x0A	; 10
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	a5 91       	lpm	r26, Z+
    2188:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    218a:	fc 01       	movw	r30, r24
    218c:	e4 51       	subi	r30, 0x14	; 20
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	c5 91       	lpm	r28, Z+
    2192:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2194:	61 11       	cpse	r22, r1
    2196:	0d c0       	rjmp	.+26     	; 0x21b2 <pinMode+0x52>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2198:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    219a:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    219c:	8c 91       	ld	r24, X
    219e:	20 95       	com	r18
    21a0:	82 23       	and	r24, r18
    21a2:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    21a4:	88 81       	ld	r24, Y
    21a6:	28 23       	and	r18, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    21a8:	28 83       	st	Y, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    21aa:	9f bf       	out	0x3f, r25	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    21b2:	62 30       	cpi	r22, 0x02	; 2
    21b4:	51 f4       	brne	.+20     	; 0x21ca <pinMode+0x6a>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    21b6:	9f b7       	in	r25, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    21b8:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    21ba:	3c 91       	ld	r19, X
    21bc:	82 2f       	mov	r24, r18
    21be:	80 95       	com	r24
    21c0:	83 23       	and	r24, r19
    21c2:	8c 93       	st	X, r24
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    21c4:	e8 81       	ld	r30, Y
    21c6:	2e 2b       	or	r18, r30
    21c8:	ef cf       	rjmp	.-34     	; 0x21a8 <pinMode+0x48>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    21ca:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    21cc:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    21ce:	ec 91       	ld	r30, X
    21d0:	2e 2b       	or	r18, r30
    21d2:	2c 93       	st	X, r18
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    21d4:	8f bf       	out	0x3f, r24	; 63
    21d6:	ea cf       	rjmp	.-44     	; 0x21ac <pinMode+0x4c>

000021d8 <digitalWrite>:
digitalWrite():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    21d8:	1f 93       	push	r17
    21da:	cf 93       	push	r28
    21dc:	df 93       	push	r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    21de:	28 2f       	mov	r18, r24
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	f9 01       	movw	r30, r18
    21e4:	e4 57       	subi	r30, 0x74	; 116
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	84 91       	lpm	r24, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    21ea:	f9 01       	movw	r30, r18
    21ec:	e4 55       	subi	r30, 0x54	; 84
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	d4 91       	lpm	r29, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    21f2:	f9 01       	movw	r30, r18
    21f4:	e4 53       	subi	r30, 0x34	; 52
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	c4 91       	lpm	r28, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    21fa:	cc 23       	and	r28, r28
    21fc:	a9 f0       	breq	.+42     	; 0x2228 <digitalWrite+0x50>
    21fe:	16 2f       	mov	r17, r22
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2200:	81 11       	cpse	r24, r1
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2202:	0e 94 78 10 	call	0x20f0	; 0x20f0 <turnOffPWM>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2206:	ec 2f       	mov	r30, r28
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	ee 0f       	add	r30, r30
    220c:	ff 1f       	adc	r31, r31
    220e:	e4 51       	subi	r30, 0x14	; 20
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	a5 91       	lpm	r26, Z+
    2214:	b4 91       	lpm	r27, Z
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2216:	8f b7       	in	r24, 0x3f	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    2218:	f8 94       	cli
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    221a:	ec 91       	ld	r30, X
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    221c:	11 11       	cpse	r17, r1
    221e:	08 c0       	rjmp	.+16     	; 0x2230 <digitalWrite+0x58>
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2220:	d0 95       	com	r29
    2222:	de 23       	and	r29, r30
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2224:	dc 93       	st	X, r29
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2226:	8f bf       	out	0x3f, r24	; 63
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	08 95       	ret
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2230:	de 2b       	or	r29, r30
    2232:	f8 cf       	rjmp	.-16     	; 0x2224 <digitalWrite+0x4c>

00002234 <yield>:
__empty():
/home/runner/.arduino15/packages/MightyCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    2234:	08 95       	ret

00002236 <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
    2236:	db 01       	movw	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
    2238:	8f 93       	push	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
    223a:	9f 93       	push	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
    223c:	0e 94 a4 11 	call	0x2348	; 0x2348 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
    2240:	bf 91       	pop	r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
    2242:	af 91       	pop	r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
    2244:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
    2246:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
    2248:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
    224a:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
    224c:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
    224e:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
    2250:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
    2252:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
    2254:	08 95       	ret

00002256 <__udivmodhi4>:
__udivmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    2256:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    2258:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    225a:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    225c:	07 c0       	rjmp	.+14     	; 0x226c <__udivmodhi4_ep>

0000225e <__udivmodhi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    225e:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    2260:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    2262:	a6 17       	cp	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    2264:	b7 07       	cpc	r27, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    2266:	10 f0       	brcs	.+4      	; 0x226c <__udivmodhi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    2268:	a6 1b       	sub	r26, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    226a:	b7 0b       	sbc	r27, r23

0000226c <__udivmodhi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    226c:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    226e:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    2270:	5a 95       	dec	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    2272:	a9 f7       	brne	.-22     	; 0x225e <__udivmodhi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    2274:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    2276:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    2278:	bc 01       	movw	r22, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    227a:	cd 01       	movw	r24, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    227c:	08 95       	ret

0000227e <__divmodhi4>:
__divmodhi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    227e:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    2280:	07 2e       	mov	r0, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    2282:	16 f4       	brtc	.+4      	; 0x2288 <__divmodhi4+0xa>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    2284:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    2286:	07 d0       	rcall	.+14     	; 0x2296 <__divmodhi4_neg1>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    2288:	77 fd       	sbrc	r23, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    228a:	09 d0       	rcall	.+18     	; 0x229e <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    228c:	0e 94 2b 11 	call	0x2256	; 0x2256 <__udivmodhi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    2290:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    2292:	05 d0       	rcall	.+10     	; 0x229e <__divmodhi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    2294:	3e f4       	brtc	.+14     	; 0x22a4 <__divmodhi4_exit>

00002296 <__divmodhi4_neg1>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    2296:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    2298:	81 95       	neg	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    229a:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    229c:	08 95       	ret

0000229e <__divmodhi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    229e:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    22a0:	61 95       	neg	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255

000022a4 <__divmodhi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    22a4:	08 95       	ret

000022a6 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    22a6:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    22a8:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    22aa:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    22ac:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    22ae:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    22b0:	0d c0       	rjmp	.+26     	; 0x22cc <__udivmodsi4_ep>

000022b2 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    22b2:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    22b4:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    22b6:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    22b8:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    22ba:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    22bc:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    22be:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    22c0:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    22c2:	20 f0       	brcs	.+8      	; 0x22cc <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    22c4:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    22c6:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    22c8:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    22ca:	f5 0b       	sbc	r31, r21

000022cc <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    22cc:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    22ce:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    22d0:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    22d2:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    22d4:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    22d6:	69 f7       	brne	.-38     	; 0x22b2 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    22d8:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    22da:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    22dc:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    22de:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    22e0:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    22e2:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    22e4:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    22e6:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    22e8:	08 95       	ret

000022ea <__divmodsi4>:
__divmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    22ea:	05 2e       	mov	r0, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    22ec:	97 fb       	bst	r25, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    22ee:	1e f4       	brtc	.+6      	; 0x22f6 <__divmodsi4+0xc>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    22f0:	00 94       	com	r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    22f2:	0e 94 8c 11 	call	0x2318	; 0x2318 <__negsi2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    22f6:	57 fd       	sbrc	r21, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    22f8:	07 d0       	rcall	.+14     	; 0x2308 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    22fa:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__udivmodsi4>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    22fe:	07 fc       	sbrc	r0, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    2300:	03 d0       	rcall	.+6      	; 0x2308 <__divmodsi4_neg2>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    2302:	4e f4       	brtc	.+18     	; 0x2316 <__divmodsi4_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    2304:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__negsi2>

00002308 <__divmodsi4_neg2>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    2308:	50 95       	com	r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    230a:	40 95       	com	r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    230c:	30 95       	com	r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    230e:	21 95       	neg	r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    2312:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    2314:	5f 4f       	sbci	r21, 0xFF	; 255

00002316 <__divmodsi4_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    2316:	08 95       	ret

00002318 <__negsi2>:
__negsi2():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    2318:	90 95       	com	r25
    231a:	80 95       	com	r24
    231c:	70 95       	com	r23
    231e:	61 95       	neg	r22
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	8f 4f       	sbci	r24, 0xFF	; 255
    2324:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    2326:	08 95       	ret

00002328 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    2328:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    232a:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    232c:	00 24       	eor	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    232e:	00 1c       	adc	r0, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    2330:	0b be       	out	0x3b, r0	; 59
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    2332:	07 90       	elpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    2334:	f6 91       	elpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    2336:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    2338:	09 94       	ijmp

0000233a <__usmulhisi3>:
__usmulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:545
    233a:	0e 94 b7 11 	call	0x236e	; 0x236e <__umulhisi3>

0000233e <__usmulhisi3_tail>:
__usmulhisi3_tail():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:551
    233e:	b7 ff       	sbrs	r27, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:552
    2340:	08 95       	ret
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:553
    2342:	82 1b       	sub	r24, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:554
    2344:	93 0b       	sbc	r25, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:555
    2346:	08 95       	ret

00002348 <__muluhisi3>:
__muluhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    2348:	0e 94 b7 11 	call	0x236e	; 0x236e <__umulhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    234c:	a5 9f       	mul	r26, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    234e:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    2350:	b4 9f       	mul	r27, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    2352:	90 0d       	add	r25, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    2354:	a4 9f       	mul	r26, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    2356:	80 0d       	add	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    2358:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    235a:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    235c:	08 95       	ret

0000235e <__mulshisi3>:
__mulshisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:603
    235e:	b7 ff       	sbrs	r27, 7
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:605
    2360:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__muluhisi3>

00002364 <__mulohisi3>:
__mulohisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:613
    2364:	0e 94 a4 11 	call	0x2348	; 0x2348 <__muluhisi3>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:615
    2368:	82 1b       	sub	r24, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:616
    236a:	93 0b       	sbc	r25, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:617
    236c:	08 95       	ret

0000236e <__umulhisi3>:
__umulhisi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    236e:	a2 9f       	mul	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    2370:	b0 01       	movw	r22, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    2372:	b3 9f       	mul	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    2374:	c0 01       	movw	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    2376:	a3 9f       	mul	r26, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    2378:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    237a:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    237c:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    237e:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    2380:	b2 9f       	mul	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    2382:	70 0d       	add	r23, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    2384:	81 1d       	adc	r24, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    2386:	11 24       	eor	r1, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    2388:	91 1d       	adc	r25, r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    238a:	08 95       	ret

0000238c <malloc>:
malloc():
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	82 30       	cpi	r24, 0x02	; 2
    2396:	91 05       	cpc	r25, r1
    2398:	10 f4       	brcc	.+4      	; 0x239e <malloc+0x12>
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	e0 91 31 03 	lds	r30, 0x0331	; 0x800331 <__flp>
    23a2:	f0 91 32 03 	lds	r31, 0x0332	; 0x800332 <__flp+0x1>
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	30 97       	sbiw	r30, 0x00	; 0
    23b0:	99 f4       	brne	.+38     	; 0x23d8 <malloc+0x4c>
    23b2:	21 15       	cp	r18, r1
    23b4:	31 05       	cpc	r19, r1
    23b6:	09 f4       	brne	.+2      	; 0x23ba <malloc+0x2e>
    23b8:	4a c0       	rjmp	.+148    	; 0x244e <malloc+0xc2>
    23ba:	28 1b       	sub	r18, r24
    23bc:	39 0b       	sbc	r19, r25
    23be:	24 30       	cpi	r18, 0x04	; 4
    23c0:	31 05       	cpc	r19, r1
    23c2:	d8 f5       	brcc	.+118    	; 0x243a <malloc+0xae>
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	61 15       	cp	r22, r1
    23ca:	71 05       	cpc	r23, r1
    23cc:	89 f1       	breq	.+98     	; 0x2430 <malloc+0xa4>
    23ce:	fb 01       	movw	r30, r22
    23d0:	93 83       	std	Z+3, r25	; 0x03
    23d2:	82 83       	std	Z+2, r24	; 0x02
    23d4:	fe 01       	movw	r30, r28
    23d6:	11 c0       	rjmp	.+34     	; 0x23fa <malloc+0x6e>
    23d8:	40 81       	ld	r20, Z
    23da:	51 81       	ldd	r21, Z+1	; 0x01
    23dc:	02 81       	ldd	r16, Z+2	; 0x02
    23de:	13 81       	ldd	r17, Z+3	; 0x03
    23e0:	48 17       	cp	r20, r24
    23e2:	59 07       	cpc	r21, r25
    23e4:	e0 f0       	brcs	.+56     	; 0x241e <malloc+0x92>
    23e6:	48 17       	cp	r20, r24
    23e8:	59 07       	cpc	r21, r25
    23ea:	99 f4       	brne	.+38     	; 0x2412 <malloc+0x86>
    23ec:	10 97       	sbiw	r26, 0x00	; 0
    23ee:	61 f0       	breq	.+24     	; 0x2408 <malloc+0x7c>
    23f0:	12 96       	adiw	r26, 0x02	; 2
    23f2:	0c 93       	st	X, r16
    23f4:	12 97       	sbiw	r26, 0x02	; 2
    23f6:	13 96       	adiw	r26, 0x03	; 3
    23f8:	1c 93       	st	X, r17
    23fa:	32 96       	adiw	r30, 0x02	; 2
    23fc:	cf 01       	movw	r24, r30
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	1f 91       	pop	r17
    2404:	0f 91       	pop	r16
    2406:	08 95       	ret
    2408:	00 93 31 03 	sts	0x0331, r16	; 0x800331 <__flp>
    240c:	10 93 32 03 	sts	0x0332, r17	; 0x800332 <__flp+0x1>
    2410:	f4 cf       	rjmp	.-24     	; 0x23fa <malloc+0x6e>
    2412:	21 15       	cp	r18, r1
    2414:	31 05       	cpc	r19, r1
    2416:	51 f0       	breq	.+20     	; 0x242c <malloc+0xa0>
    2418:	42 17       	cp	r20, r18
    241a:	53 07       	cpc	r21, r19
    241c:	38 f0       	brcs	.+14     	; 0x242c <malloc+0xa0>
    241e:	a9 01       	movw	r20, r18
    2420:	db 01       	movw	r26, r22
    2422:	9a 01       	movw	r18, r20
    2424:	bd 01       	movw	r22, r26
    2426:	df 01       	movw	r26, r30
    2428:	f8 01       	movw	r30, r16
    242a:	c1 cf       	rjmp	.-126    	; 0x23ae <malloc+0x22>
    242c:	ef 01       	movw	r28, r30
    242e:	f9 cf       	rjmp	.-14     	; 0x2422 <malloc+0x96>
    2430:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <__flp+0x1>
    2434:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <__flp>
    2438:	cd cf       	rjmp	.-102    	; 0x23d4 <malloc+0x48>
    243a:	fe 01       	movw	r30, r28
    243c:	e2 0f       	add	r30, r18
    243e:	f3 1f       	adc	r31, r19
    2440:	81 93       	st	Z+, r24
    2442:	91 93       	st	Z+, r25
    2444:	22 50       	subi	r18, 0x02	; 2
    2446:	31 09       	sbc	r19, r1
    2448:	39 83       	std	Y+1, r19	; 0x01
    244a:	28 83       	st	Y, r18
    244c:	d7 cf       	rjmp	.-82     	; 0x23fc <malloc+0x70>
    244e:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <__brkval>
    2452:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <__brkval+0x1>
    2456:	23 2b       	or	r18, r19
    2458:	41 f4       	brne	.+16     	; 0x246a <malloc+0xde>
    245a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    245e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2462:	30 93 30 03 	sts	0x0330, r19	; 0x800330 <__brkval+0x1>
    2466:	20 93 2f 03 	sts	0x032F, r18	; 0x80032f <__brkval>
    246a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    246e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2472:	21 15       	cp	r18, r1
    2474:	31 05       	cpc	r19, r1
    2476:	41 f4       	brne	.+16     	; 0x2488 <malloc+0xfc>
    2478:	2d b7       	in	r18, 0x3d	; 61
    247a:	3e b7       	in	r19, 0x3e	; 62
    247c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2480:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2484:	24 1b       	sub	r18, r20
    2486:	35 0b       	sbc	r19, r21
    2488:	e0 91 2f 03 	lds	r30, 0x032F	; 0x80032f <__brkval>
    248c:	f0 91 30 03 	lds	r31, 0x0330	; 0x800330 <__brkval+0x1>
    2490:	e2 17       	cp	r30, r18
    2492:	f3 07       	cpc	r31, r19
    2494:	a0 f4       	brcc	.+40     	; 0x24be <malloc+0x132>
    2496:	2e 1b       	sub	r18, r30
    2498:	3f 0b       	sbc	r19, r31
    249a:	28 17       	cp	r18, r24
    249c:	39 07       	cpc	r19, r25
    249e:	78 f0       	brcs	.+30     	; 0x24be <malloc+0x132>
    24a0:	ac 01       	movw	r20, r24
    24a2:	4e 5f       	subi	r20, 0xFE	; 254
    24a4:	5f 4f       	sbci	r21, 0xFF	; 255
    24a6:	24 17       	cp	r18, r20
    24a8:	35 07       	cpc	r19, r21
    24aa:	48 f0       	brcs	.+18     	; 0x24be <malloc+0x132>
    24ac:	4e 0f       	add	r20, r30
    24ae:	5f 1f       	adc	r21, r31
    24b0:	50 93 30 03 	sts	0x0330, r21	; 0x800330 <__brkval+0x1>
    24b4:	40 93 2f 03 	sts	0x032F, r20	; 0x80032f <__brkval>
    24b8:	81 93       	st	Z+, r24
    24ba:	91 93       	st	Z+, r25
    24bc:	9f cf       	rjmp	.-194    	; 0x23fc <malloc+0x70>
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	e0 e0       	ldi	r30, 0x00	; 0
    24c2:	9c cf       	rjmp	.-200    	; 0x23fc <malloc+0x70>

000024c4 <free>:
free():
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	e9 f0       	breq	.+58     	; 0x2506 <free+0x42>
    24cc:	fc 01       	movw	r30, r24
    24ce:	32 97       	sbiw	r30, 0x02	; 2
    24d0:	13 82       	std	Z+3, r1	; 0x03
    24d2:	12 82       	std	Z+2, r1	; 0x02
    24d4:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <__flp>
    24d8:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <__flp+0x1>
    24dc:	ed 01       	movw	r28, r26
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	10 97       	sbiw	r26, 0x00	; 0
    24e4:	a1 f4       	brne	.+40     	; 0x250e <free+0x4a>
    24e6:	20 81       	ld	r18, Z
    24e8:	31 81       	ldd	r19, Z+1	; 0x01
    24ea:	82 0f       	add	r24, r18
    24ec:	93 1f       	adc	r25, r19
    24ee:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <__brkval>
    24f2:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <__brkval+0x1>
    24f6:	28 17       	cp	r18, r24
    24f8:	39 07       	cpc	r19, r25
    24fa:	09 f0       	breq	.+2      	; 0x24fe <free+0x3a>
    24fc:	61 c0       	rjmp	.+194    	; 0x25c0 <free+0xfc>
    24fe:	f0 93 30 03 	sts	0x0330, r31	; 0x800330 <__brkval+0x1>
    2502:	e0 93 2f 03 	sts	0x032F, r30	; 0x80032f <__brkval>
    2506:	df 91       	pop	r29
    2508:	cf 91       	pop	r28
    250a:	08 95       	ret
    250c:	ea 01       	movw	r28, r20
    250e:	ce 17       	cp	r28, r30
    2510:	df 07       	cpc	r29, r31
    2512:	e8 f5       	brcc	.+122    	; 0x258e <free+0xca>
    2514:	4a 81       	ldd	r20, Y+2	; 0x02
    2516:	5b 81       	ldd	r21, Y+3	; 0x03
    2518:	9e 01       	movw	r18, r28
    251a:	41 15       	cp	r20, r1
    251c:	51 05       	cpc	r21, r1
    251e:	b1 f7       	brne	.-20     	; 0x250c <free+0x48>
    2520:	e9 01       	movw	r28, r18
    2522:	fb 83       	std	Y+3, r31	; 0x03
    2524:	ea 83       	std	Y+2, r30	; 0x02
    2526:	49 91       	ld	r20, Y+
    2528:	59 91       	ld	r21, Y+
    252a:	c4 0f       	add	r28, r20
    252c:	d5 1f       	adc	r29, r21
    252e:	ec 17       	cp	r30, r28
    2530:	fd 07       	cpc	r31, r29
    2532:	61 f4       	brne	.+24     	; 0x254c <free+0x88>
    2534:	80 81       	ld	r24, Z
    2536:	91 81       	ldd	r25, Z+1	; 0x01
    2538:	02 96       	adiw	r24, 0x02	; 2
    253a:	84 0f       	add	r24, r20
    253c:	95 1f       	adc	r25, r21
    253e:	e9 01       	movw	r28, r18
    2540:	99 83       	std	Y+1, r25	; 0x01
    2542:	88 83       	st	Y, r24
    2544:	82 81       	ldd	r24, Z+2	; 0x02
    2546:	93 81       	ldd	r25, Z+3	; 0x03
    2548:	9b 83       	std	Y+3, r25	; 0x03
    254a:	8a 83       	std	Y+2, r24	; 0x02
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	e0 e0       	ldi	r30, 0x00	; 0
    2550:	12 96       	adiw	r26, 0x02	; 2
    2552:	8d 91       	ld	r24, X+
    2554:	9c 91       	ld	r25, X
    2556:	13 97       	sbiw	r26, 0x03	; 3
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	b9 f5       	brne	.+110    	; 0x25ca <free+0x106>
    255c:	2d 91       	ld	r18, X+
    255e:	3c 91       	ld	r19, X
    2560:	11 97       	sbiw	r26, 0x01	; 1
    2562:	cd 01       	movw	r24, r26
    2564:	02 96       	adiw	r24, 0x02	; 2
    2566:	82 0f       	add	r24, r18
    2568:	93 1f       	adc	r25, r19
    256a:	20 91 2f 03 	lds	r18, 0x032F	; 0x80032f <__brkval>
    256e:	30 91 30 03 	lds	r19, 0x0330	; 0x800330 <__brkval+0x1>
    2572:	28 17       	cp	r18, r24
    2574:	39 07       	cpc	r19, r25
    2576:	39 f6       	brne	.-114    	; 0x2506 <free+0x42>
    2578:	30 97       	sbiw	r30, 0x00	; 0
    257a:	51 f5       	brne	.+84     	; 0x25d0 <free+0x10c>
    257c:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <__flp+0x1>
    2580:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <__flp>
    2584:	b0 93 30 03 	sts	0x0330, r27	; 0x800330 <__brkval+0x1>
    2588:	a0 93 2f 03 	sts	0x032F, r26	; 0x80032f <__brkval>
    258c:	bc cf       	rjmp	.-136    	; 0x2506 <free+0x42>
    258e:	d3 83       	std	Z+3, r29	; 0x03
    2590:	c2 83       	std	Z+2, r28	; 0x02
    2592:	40 81       	ld	r20, Z
    2594:	51 81       	ldd	r21, Z+1	; 0x01
    2596:	84 0f       	add	r24, r20
    2598:	95 1f       	adc	r25, r21
    259a:	c8 17       	cp	r28, r24
    259c:	d9 07       	cpc	r29, r25
    259e:	61 f4       	brne	.+24     	; 0x25b8 <free+0xf4>
    25a0:	4e 5f       	subi	r20, 0xFE	; 254
    25a2:	5f 4f       	sbci	r21, 0xFF	; 255
    25a4:	88 81       	ld	r24, Y
    25a6:	99 81       	ldd	r25, Y+1	; 0x01
    25a8:	48 0f       	add	r20, r24
    25aa:	59 1f       	adc	r21, r25
    25ac:	51 83       	std	Z+1, r21	; 0x01
    25ae:	40 83       	st	Z, r20
    25b0:	8a 81       	ldd	r24, Y+2	; 0x02
    25b2:	9b 81       	ldd	r25, Y+3	; 0x03
    25b4:	93 83       	std	Z+3, r25	; 0x03
    25b6:	82 83       	std	Z+2, r24	; 0x02
    25b8:	21 15       	cp	r18, r1
    25ba:	31 05       	cpc	r19, r1
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <free+0xfc>
    25be:	b0 cf       	rjmp	.-160    	; 0x2520 <free+0x5c>
    25c0:	f0 93 32 03 	sts	0x0332, r31	; 0x800332 <__flp+0x1>
    25c4:	e0 93 31 03 	sts	0x0331, r30	; 0x800331 <__flp>
    25c8:	9e cf       	rjmp	.-196    	; 0x2506 <free+0x42>
    25ca:	fd 01       	movw	r30, r26
    25cc:	dc 01       	movw	r26, r24
    25ce:	c0 cf       	rjmp	.-128    	; 0x2550 <free+0x8c>
    25d0:	13 82       	std	Z+3, r1	; 0x03
    25d2:	12 82       	std	Z+2, r1	; 0x02
    25d4:	d7 cf       	rjmp	.-82     	; 0x2584 <free+0xc0>

000025d6 <realloc>:
realloc():
    25d6:	4f 92       	push	r4
    25d8:	5f 92       	push	r5
    25da:	6f 92       	push	r6
    25dc:	7f 92       	push	r7
    25de:	8f 92       	push	r8
    25e0:	9f 92       	push	r9
    25e2:	af 92       	push	r10
    25e4:	bf 92       	push	r11
    25e6:	cf 92       	push	r12
    25e8:	df 92       	push	r13
    25ea:	ef 92       	push	r14
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
    25f6:	8c 01       	movw	r16, r24
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	99 f4       	brne	.+38     	; 0x2622 <realloc+0x4c>
    25fc:	cb 01       	movw	r24, r22
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	1f 91       	pop	r17
    2604:	0f 91       	pop	r16
    2606:	ff 90       	pop	r15
    2608:	ef 90       	pop	r14
    260a:	df 90       	pop	r13
    260c:	cf 90       	pop	r12
    260e:	bf 90       	pop	r11
    2610:	af 90       	pop	r10
    2612:	9f 90       	pop	r9
    2614:	8f 90       	pop	r8
    2616:	7f 90       	pop	r7
    2618:	6f 90       	pop	r6
    261a:	5f 90       	pop	r5
    261c:	4f 90       	pop	r4
    261e:	0c 94 c6 11 	jmp	0x238c	; 0x238c <malloc>
    2622:	fc 01       	movw	r30, r24
    2624:	e6 0f       	add	r30, r22
    2626:	f7 1f       	adc	r31, r23
    2628:	9c 01       	movw	r18, r24
    262a:	22 50       	subi	r18, 0x02	; 2
    262c:	31 09       	sbc	r19, r1
    262e:	e2 17       	cp	r30, r18
    2630:	f3 07       	cpc	r31, r19
    2632:	08 f4       	brcc	.+2      	; 0x2636 <realloc+0x60>
    2634:	ae c0       	rjmp	.+348    	; 0x2792 <realloc+0x1bc>
    2636:	d9 01       	movw	r26, r18
    2638:	cd 91       	ld	r28, X+
    263a:	dc 91       	ld	r29, X
    263c:	11 97       	sbiw	r26, 0x01	; 1
    263e:	c6 17       	cp	r28, r22
    2640:	d7 07       	cpc	r29, r23
    2642:	20 f1       	brcs	.+72     	; 0x268c <realloc+0xb6>
    2644:	c5 30       	cpi	r28, 0x05	; 5
    2646:	d1 05       	cpc	r29, r1
    2648:	78 f0       	brcs	.+30     	; 0x2668 <realloc+0x92>
    264a:	ce 01       	movw	r24, r28
    264c:	04 97       	sbiw	r24, 0x04	; 4
    264e:	86 17       	cp	r24, r22
    2650:	97 07       	cpc	r25, r23
    2652:	50 f0       	brcs	.+20     	; 0x2668 <realloc+0x92>
    2654:	c6 1b       	sub	r28, r22
    2656:	d7 0b       	sbc	r29, r23
    2658:	22 97       	sbiw	r28, 0x02	; 2
    265a:	c1 93       	st	Z+, r28
    265c:	d1 93       	st	Z+, r29
    265e:	6d 93       	st	X+, r22
    2660:	7c 93       	st	X, r23
    2662:	cf 01       	movw	r24, r30
    2664:	0e 94 62 12 	call	0x24c4	; 0x24c4 <free>
    2668:	c8 01       	movw	r24, r16
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	df 90       	pop	r13
    2678:	cf 90       	pop	r12
    267a:	bf 90       	pop	r11
    267c:	af 90       	pop	r10
    267e:	9f 90       	pop	r9
    2680:	8f 90       	pop	r8
    2682:	7f 90       	pop	r7
    2684:	6f 90       	pop	r6
    2686:	5f 90       	pop	r5
    2688:	4f 90       	pop	r4
    268a:	08 95       	ret
    268c:	5b 01       	movw	r10, r22
    268e:	ac 1a       	sub	r10, r28
    2690:	bd 0a       	sbc	r11, r29
    2692:	4c 01       	movw	r8, r24
    2694:	8c 0e       	add	r8, r28
    2696:	9d 1e       	adc	r9, r29
    2698:	a0 91 31 03 	lds	r26, 0x0331	; 0x800331 <__flp>
    269c:	b0 91 32 03 	lds	r27, 0x0332	; 0x800332 <__flp+0x1>
    26a0:	51 2c       	mov	r5, r1
    26a2:	41 2c       	mov	r4, r1
    26a4:	f1 2c       	mov	r15, r1
    26a6:	e1 2c       	mov	r14, r1
    26a8:	10 97       	sbiw	r26, 0x00	; 0
    26aa:	31 f5       	brne	.+76     	; 0x26f8 <realloc+0x122>
    26ac:	80 91 2f 03 	lds	r24, 0x032F	; 0x80032f <__brkval>
    26b0:	90 91 30 03 	lds	r25, 0x0330	; 0x800330 <__brkval+0x1>
    26b4:	88 15       	cp	r24, r8
    26b6:	99 05       	cpc	r25, r9
    26b8:	09 f0       	breq	.+2      	; 0x26bc <realloc+0xe6>
    26ba:	5c c0       	rjmp	.+184    	; 0x2774 <realloc+0x19e>
    26bc:	46 16       	cp	r4, r22
    26be:	57 06       	cpc	r5, r23
    26c0:	08 f0       	brcs	.+2      	; 0x26c4 <realloc+0xee>
    26c2:	58 c0       	rjmp	.+176    	; 0x2774 <realloc+0x19e>
    26c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    26c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    26cc:	00 97       	sbiw	r24, 0x00	; 0
    26ce:	41 f4       	brne	.+16     	; 0x26e0 <realloc+0x10a>
    26d0:	8d b7       	in	r24, 0x3d	; 61
    26d2:	9e b7       	in	r25, 0x3e	; 62
    26d4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    26d8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    26dc:	84 1b       	sub	r24, r20
    26de:	95 0b       	sbc	r25, r21
    26e0:	e8 17       	cp	r30, r24
    26e2:	f9 07       	cpc	r31, r25
    26e4:	08 f0       	brcs	.+2      	; 0x26e8 <realloc+0x112>
    26e6:	55 c0       	rjmp	.+170    	; 0x2792 <realloc+0x1bc>
    26e8:	f0 93 30 03 	sts	0x0330, r31	; 0x800330 <__brkval+0x1>
    26ec:	e0 93 2f 03 	sts	0x032F, r30	; 0x80032f <__brkval>
    26f0:	f9 01       	movw	r30, r18
    26f2:	71 83       	std	Z+1, r23	; 0x01
    26f4:	60 83       	st	Z, r22
    26f6:	b8 cf       	rjmp	.-144    	; 0x2668 <realloc+0x92>
    26f8:	8d 91       	ld	r24, X+
    26fa:	9c 91       	ld	r25, X
    26fc:	11 97       	sbiw	r26, 0x01	; 1
    26fe:	12 96       	adiw	r26, 0x02	; 2
    2700:	6c 90       	ld	r6, X
    2702:	12 97       	sbiw	r26, 0x02	; 2
    2704:	13 96       	adiw	r26, 0x03	; 3
    2706:	7c 90       	ld	r7, X
    2708:	13 97       	sbiw	r26, 0x03	; 3
    270a:	a8 15       	cp	r26, r8
    270c:	b9 05       	cpc	r27, r9
    270e:	59 f5       	brne	.+86     	; 0x2766 <realloc+0x190>
    2710:	6c 01       	movw	r12, r24
    2712:	42 e0       	ldi	r20, 0x02	; 2
    2714:	c4 0e       	add	r12, r20
    2716:	d1 1c       	adc	r13, r1
    2718:	ca 14       	cp	r12, r10
    271a:	db 04       	cpc	r13, r11
    271c:	20 f1       	brcs	.+72     	; 0x2766 <realloc+0x190>
    271e:	ac 01       	movw	r20, r24
    2720:	4a 19       	sub	r20, r10
    2722:	5b 09       	sbc	r21, r11
    2724:	da 01       	movw	r26, r20
    2726:	12 96       	adiw	r26, 0x02	; 2
    2728:	15 97       	sbiw	r26, 0x05	; 5
    272a:	80 f0       	brcs	.+32     	; 0x274c <realloc+0x176>
    272c:	62 82       	std	Z+2, r6	; 0x02
    272e:	73 82       	std	Z+3, r7	; 0x03
    2730:	51 83       	std	Z+1, r21	; 0x01
    2732:	40 83       	st	Z, r20
    2734:	d9 01       	movw	r26, r18
    2736:	6d 93       	st	X+, r22
    2738:	7c 93       	st	X, r23
    273a:	e1 14       	cp	r14, r1
    273c:	f1 04       	cpc	r15, r1
    273e:	71 f0       	breq	.+28     	; 0x275c <realloc+0x186>
    2740:	d7 01       	movw	r26, r14
    2742:	13 96       	adiw	r26, 0x03	; 3
    2744:	fc 93       	st	X, r31
    2746:	ee 93       	st	-X, r30
    2748:	12 97       	sbiw	r26, 0x02	; 2
    274a:	8e cf       	rjmp	.-228    	; 0x2668 <realloc+0x92>
    274c:	22 96       	adiw	r28, 0x02	; 2
    274e:	8c 0f       	add	r24, r28
    2750:	9d 1f       	adc	r25, r29
    2752:	f9 01       	movw	r30, r18
    2754:	91 83       	std	Z+1, r25	; 0x01
    2756:	80 83       	st	Z, r24
    2758:	f3 01       	movw	r30, r6
    275a:	ef cf       	rjmp	.-34     	; 0x273a <realloc+0x164>
    275c:	f0 93 32 03 	sts	0x0332, r31	; 0x800332 <__flp+0x1>
    2760:	e0 93 31 03 	sts	0x0331, r30	; 0x800331 <__flp>
    2764:	81 cf       	rjmp	.-254    	; 0x2668 <realloc+0x92>
    2766:	48 16       	cp	r4, r24
    2768:	59 06       	cpc	r5, r25
    276a:	08 f4       	brcc	.+2      	; 0x276e <realloc+0x198>
    276c:	2c 01       	movw	r4, r24
    276e:	7d 01       	movw	r14, r26
    2770:	d3 01       	movw	r26, r6
    2772:	9a cf       	rjmp	.-204    	; 0x26a8 <realloc+0xd2>
    2774:	cb 01       	movw	r24, r22
    2776:	0e 94 c6 11 	call	0x238c	; 0x238c <malloc>
    277a:	7c 01       	movw	r14, r24
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	49 f0       	breq	.+18     	; 0x2792 <realloc+0x1bc>
    2780:	ae 01       	movw	r20, r28
    2782:	b8 01       	movw	r22, r16
    2784:	0e 94 cc 13 	call	0x2798	; 0x2798 <memcpy>
    2788:	c8 01       	movw	r24, r16
    278a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <free>
    278e:	87 01       	movw	r16, r14
    2790:	6b cf       	rjmp	.-298    	; 0x2668 <realloc+0x92>
    2792:	10 e0       	ldi	r17, 0x00	; 0
    2794:	00 e0       	ldi	r16, 0x00	; 0
    2796:	68 cf       	rjmp	.-304    	; 0x2668 <realloc+0x92>

00002798 <memcpy>:
memcpy():
    2798:	fb 01       	movw	r30, r22
    279a:	dc 01       	movw	r26, r24
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <memcpy+0xa>
    279e:	01 90       	ld	r0, Z+
    27a0:	0d 92       	st	X+, r0
    27a2:	41 50       	subi	r20, 0x01	; 1
    27a4:	50 40       	sbci	r21, 0x00	; 0
    27a6:	d8 f7       	brcc	.-10     	; 0x279e <memcpy+0x6>
    27a8:	08 95       	ret

000027aa <strcpy>:
strcpy():
    27aa:	fb 01       	movw	r30, r22
    27ac:	dc 01       	movw	r26, r24
    27ae:	01 90       	ld	r0, Z+
    27b0:	0d 92       	st	X+, r0
    27b2:	00 20       	and	r0, r0
    27b4:	e1 f7       	brne	.-8      	; 0x27ae <strcpy+0x4>
    27b6:	08 95       	ret

000027b8 <ltoa>:
ltoa():
    27b8:	25 32       	cpi	r18, 0x25	; 37
    27ba:	31 05       	cpc	r19, r1
    27bc:	20 f4       	brcc	.+8      	; 0x27c6 <ltoa+0xe>
    27be:	22 30       	cpi	r18, 0x02	; 2
    27c0:	10 f0       	brcs	.+4      	; 0x27c6 <ltoa+0xe>
    27c2:	0c 94 e7 13 	jmp	0x27ce	; 0x27ce <__ltoa_ncheck>
    27c6:	fa 01       	movw	r30, r20
    27c8:	10 82       	st	Z, r1
    27ca:	ca 01       	movw	r24, r20
    27cc:	08 95       	ret

000027ce <__ltoa_ncheck>:
__ltoa_ncheck():
    27ce:	bb 27       	eor	r27, r27
    27d0:	2a 30       	cpi	r18, 0x0A	; 10
    27d2:	51 f4       	brne	.+20     	; 0x27e8 <__ltoa_ncheck+0x1a>
    27d4:	99 23       	and	r25, r25
    27d6:	42 f4       	brpl	.+16     	; 0x27e8 <__ltoa_ncheck+0x1a>
    27d8:	bd e2       	ldi	r27, 0x2D	; 45
    27da:	90 95       	com	r25
    27dc:	80 95       	com	r24
    27de:	70 95       	com	r23
    27e0:	61 95       	neg	r22
    27e2:	7f 4f       	sbci	r23, 0xFF	; 255
    27e4:	8f 4f       	sbci	r24, 0xFF	; 255
    27e6:	9f 4f       	sbci	r25, 0xFF	; 255
    27e8:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__ultoa_common>

000027ec <ultoa>:
ultoa():
    27ec:	25 32       	cpi	r18, 0x25	; 37
    27ee:	31 05       	cpc	r19, r1
    27f0:	20 f4       	brcc	.+8      	; 0x27fa <ultoa+0xe>
    27f2:	22 30       	cpi	r18, 0x02	; 2
    27f4:	10 f0       	brcs	.+4      	; 0x27fa <ultoa+0xe>
    27f6:	0c 94 01 14 	jmp	0x2802	; 0x2802 <__ultoa_ncheck>
    27fa:	fa 01       	movw	r30, r20
    27fc:	10 82       	st	Z, r1
    27fe:	ca 01       	movw	r24, r20
    2800:	08 95       	ret

00002802 <__ultoa_ncheck>:
__ultoa_ncheck():
    2802:	bb 27       	eor	r27, r27

00002804 <__ultoa_common>:
    2804:	fa 01       	movw	r30, r20
    2806:	a6 2f       	mov	r26, r22
    2808:	62 17       	cp	r22, r18
    280a:	71 05       	cpc	r23, r1
    280c:	81 05       	cpc	r24, r1
    280e:	91 05       	cpc	r25, r1
    2810:	33 0b       	sbc	r19, r19
    2812:	30 fb       	bst	r19, 0
    2814:	66 f0       	brts	.+24     	; 0x282e <__ultoa_common+0x2a>
    2816:	aa 27       	eor	r26, r26
    2818:	66 0f       	add	r22, r22
    281a:	77 1f       	adc	r23, r23
    281c:	88 1f       	adc	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	aa 1f       	adc	r26, r26
    2822:	a2 17       	cp	r26, r18
    2824:	10 f0       	brcs	.+4      	; 0x282a <__ultoa_common+0x26>
    2826:	a2 1b       	sub	r26, r18
    2828:	63 95       	inc	r22
    282a:	38 50       	subi	r19, 0x08	; 8
    282c:	a9 f7       	brne	.-22     	; 0x2818 <__ultoa_common+0x14>
    282e:	a0 5d       	subi	r26, 0xD0	; 208
    2830:	aa 33       	cpi	r26, 0x3A	; 58
    2832:	08 f0       	brcs	.+2      	; 0x2836 <__ultoa_common+0x32>
    2834:	a9 5d       	subi	r26, 0xD9	; 217
    2836:	a1 93       	st	Z+, r26
    2838:	36 f7       	brtc	.-52     	; 0x2806 <__ultoa_common+0x2>
    283a:	b1 11       	cpse	r27, r1
    283c:	b1 93       	st	Z+, r27
    283e:	10 82       	st	Z, r1
    2840:	ca 01       	movw	r24, r20
    2842:	0c 94 48 14 	jmp	0x2890	; 0x2890 <strrev>

00002846 <utoa>:
utoa():
    2846:	45 32       	cpi	r20, 0x25	; 37
    2848:	51 05       	cpc	r21, r1
    284a:	20 f4       	brcc	.+8      	; 0x2854 <utoa+0xe>
    284c:	42 30       	cpi	r20, 0x02	; 2
    284e:	10 f0       	brcs	.+4      	; 0x2854 <utoa+0xe>
    2850:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__utoa_ncheck>
    2854:	fb 01       	movw	r30, r22
    2856:	10 82       	st	Z, r1
    2858:	cb 01       	movw	r24, r22
    285a:	08 95       	ret

0000285c <__utoa_ncheck>:
__utoa_ncheck():
    285c:	bb 27       	eor	r27, r27

0000285e <__utoa_common>:
    285e:	fb 01       	movw	r30, r22
    2860:	55 27       	eor	r21, r21
    2862:	aa 27       	eor	r26, r26
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	aa 1f       	adc	r26, r26
    286a:	a4 17       	cp	r26, r20
    286c:	10 f0       	brcs	.+4      	; 0x2872 <__utoa_common+0x14>
    286e:	a4 1b       	sub	r26, r20
    2870:	83 95       	inc	r24
    2872:	50 51       	subi	r21, 0x10	; 16
    2874:	b9 f7       	brne	.-18     	; 0x2864 <__utoa_common+0x6>
    2876:	a0 5d       	subi	r26, 0xD0	; 208
    2878:	aa 33       	cpi	r26, 0x3A	; 58
    287a:	08 f0       	brcs	.+2      	; 0x287e <__utoa_common+0x20>
    287c:	a9 5d       	subi	r26, 0xD9	; 217
    287e:	a1 93       	st	Z+, r26
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	79 f7       	brne	.-34     	; 0x2862 <__utoa_common+0x4>
    2884:	b1 11       	cpse	r27, r1
    2886:	b1 93       	st	Z+, r27
    2888:	11 92       	st	Z+, r1
    288a:	cb 01       	movw	r24, r22
    288c:	0c 94 48 14 	jmp	0x2890	; 0x2890 <strrev>

00002890 <strrev>:
strrev():
    2890:	dc 01       	movw	r26, r24
    2892:	fc 01       	movw	r30, r24
    2894:	67 2f       	mov	r22, r23
    2896:	71 91       	ld	r23, Z+
    2898:	77 23       	and	r23, r23
    289a:	e1 f7       	brne	.-8      	; 0x2894 <strrev+0x4>
    289c:	32 97       	sbiw	r30, 0x02	; 2
    289e:	04 c0       	rjmp	.+8      	; 0x28a8 <strrev+0x18>
    28a0:	7c 91       	ld	r23, X
    28a2:	6d 93       	st	X+, r22
    28a4:	70 83       	st	Z, r23
    28a6:	62 91       	ld	r22, -Z
    28a8:	ae 17       	cp	r26, r30
    28aa:	bf 07       	cpc	r27, r31
    28ac:	c8 f3       	brcs	.-14     	; 0x28a0 <strrev+0x10>
    28ae:	08 95       	ret

000028b0 <__do_global_dtors>:
__do_global_dtors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    28b0:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    28b2:	c4 e8       	ldi	r28, 0x84	; 132
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    28b4:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    28b6:	04 c0       	rjmp	.+8      	; 0x28c0 <__do_global_dtors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    28b8:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    28ba:	0e 94 94 11 	call	0x2328	; 0x2328 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    28be:	21 96       	adiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    28c0:	c5 38       	cpi	r28, 0x85	; 133
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    28c2:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    28c4:	c9 f7       	brne	.-14     	; 0x28b8 <__do_global_dtors+0x8>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    28c6:	f8 94       	cli

000028c8 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    28c8:	ff cf       	rjmp	.-2      	; 0x28c8 <__stop_program>
