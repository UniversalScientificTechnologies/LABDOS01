name: Build firmware

on:
  # Triggers the workflow on push or pull request events but only for the "SPACEDOS03A" branch
  push:
    #branches: [ "LABDOS01A" ]
    paths:
    - 'fw/**'
    - '*/*.yml'    
  workflow_dispatch:
  workflow_call:
    inputs:
      build_type:
        required: false
        type: string
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: LABDOS_512
            type: LABDOS
            channels: 512
            fqbn: clock=8MHz_external
            
          - name: LABDOS_1024
            type: LABDOS
            channels: 1024
            fqbn: clock=8MHz_external
    
          - name: LABDOS_512_16Mhz
            type: LABDOS
            fqbn: clock=16MHz_external
            channels: 512
            
          - name: LABDOS_1024_16Mhz
            type: LABDOS
            fqbn: clock=16MHz_external
            channels: 1024
            
          - name: UAVDOS
            type: UAVDOS
            fqbn: clock=8MHz_external
            channels: 0

    steps:
        - name: Checkout
          uses: actions/checkout@v3
          continue-on-error: true
          with:
            submodules: True
        
        - name: Update git hash and Compile all examples 
          run: |
            BUILD_TYPE="${{ inputs.build_type }}"
            BT="CIBuild"
            if [ "$BUILD_TYPE" = "B" ]; then
              BT="Beta"
            fi
            if [ "$BUILD_TYPE" = "R" ]; then
              BT="Release"
            fi 

            PREVMAJOR=`cat fw/LABDOS/nextversion|grep MAJOR|cut -d ' ' -f 2`
            PREVMINOR=`cat fw/LABDOS/nextversion|grep MINOR|cut -d ' ' -f 2`
            NEXTRELEASE=`cat fw/LABDOS/nextversion|grep MINOR|cut -d ' ' -f 2`

            CURMAJOR=`cat fw/LABDOS/LABDOS.ino|grep MAJOR|head -n 1|cut -d ' ' -f 3`
            CURMINOR=`cat fw/LABDOS/LABDOS.ino|grep MINOR|head -n 1|cut -d ' ' -f 3`

            echo $PREVMAJOR
            echo $PREVMINOR
            echo $NEXTRELEASE
            echo $CURMAJOR
            echo $CURMINOR

            if [ "$CURMAJOR" = "$PREVMAJOR" ] && [ "$CURMINOR" = "$PREVMINOR" ]; then
              echo "Same version"
            else
              echo "New version, set release to 0"
              NEXTRELEASE=0
            fi

            echo "// This file is overwritten by github actions, do not update it manually" > fw/githash.h
            echo "String githash = \"${{ github.sha }},${BT}\";" >> fw/githash.h
            echo "#define RELEASE ${NEXTRELEASE}" >> fw/githash.h
            echo "#define BUILD ${{ github.build_number }}" >> fw/githash.h
            echo "#define BUILDTYPE ${BT}" >> fw/githash.h

            sudo snap install arduino-cli
            arduino-cli core update-index --additional-urls https://mcudude.github.io/MiniCore/package_MCUdude_MiniCore_index.json,https://mcudude.github.io/MightyCore/package_MCUdude_MightyCore_index.json > /dev/null
            arduino-cli core install MightyCore:avr --additional-urls https://mcudude.github.io/MiniCore/package_MCUdude_MiniCore_index.json,https://mcudude.github.io/MightyCore/package_MCUdude_MightyCore_index.json > /dev/null
            
            PLATFORM=MightyCore:avr
            arduino-cli compile --verbose --warnings all --fqbn MightyCore:avr:1284:BOD=disabled,LTO=Os,${{ matrix.fqbn }},variant=modelP --build-property compiler.cpp.extra_flags="-DCHANNELS=${{ matrix.channels }} -DBUILD=${{ github.build_number }}" --build-path fw/LABDOS/build/  fw/LABDOS

            if [ "$BUILD_TYPE" = "R" ]; then
              NEXTRELEASE=`echo $NEXTRELEASE"+1"|bc`
            fi
            
            echo "#this file is maintained by github actions" > fw/LABDOS/nextversion
            echo "MAJOR ${CURMAJOR}" >> fw/LABDOS/nextversion 
            echo "MINOR ${CURMINOR}" >> fw/LABDOS/nextversion 
            echo "RELEASE ${NEXTRELEASE}" >> fw/LABDOS/nextversion 

        - name: Store data
          uses: actions/upload-artifact@v3
          with:
            name: fw_${{ matrix.type }}_${{ matrix.name }}
            path: |
              fw/${{ matrix.type }}/build/*.hex
              fw/LABDOS/nextversion
            retention-days: 1

  commit:
    if: github.event_name != 'release' #&& github.event.action == 'created'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        continue-on-error: true
        with:
          submodules: True

      - run: |
          rm fw/build -r || true
          mkdir fw/build

      - name: Download a Build Artifact
        uses: actions/download-artifact@v3.0.2
        with:
          path: 'fw/build/'


      - name: Update git hash
        run: |
          mv fw/build/fw_LABDOS_LABDOS_1024_16Mhz/nextversion fw/LABDOS/
          rm fw/build/*/nextversion
          echo "// This file is overwritten by github actions, do not update it manually" > fw/githash.h
          echo "String githash = \"${{ github.sha }},user_build\";" >> fw/githash.h
          echo -n "  #define RELEASE " >> fw/githash.h
          cat fw/LABDOS/nextversion|grep RELEASE|cut -d ' ' -f 2 >>fw/githash.h
          echo "" >> fw/githash.h
          echo "  #define BUILD 0" >> fw/githash.h
          echo "  #define BUILDTYPE User" >> fw/githash.h
      
      - name: Get last commit message
        id: last-commit-message
        run: |
          echo "msg=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT
          
      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: ${{ steps.last-commit-message.outputs.msg }}, extended build
          file_pattern: 'fw/build/* fw/githash.h fw/LABDOS/nextversion'
          #commit_options: '--amend --no-edit'
          #push_options: '--force'
          skip_fetch: true

#  release-job:
#    name: Releasing
#    needs: [build]
#    runs-on: ubuntu-latest
#    if: github.event_name == 'release' #&& github.event.action == 'created'
#    steps:
#      - name: Get release
#        id: get_release
#        uses: bruceadams/get-release@v1.3.2
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#
#      - run: |
#          mkdir build
#          
#      - name: Download a Build Artifact
#        uses: actions/download-artifact@v3.0.2
#        with:
#          path: 'build/'
#          
#      - run: |
#          cd build;
#          find -type f -exec bash -c 'mv $0 $(echo $0|sed "s/\//_/2"|sed 's/\./${{github.build_number}}./g')' {} \;
#          cd ..;
#    
#       - name: Upload Release Asset
#         id: upload-release-asset 
#         uses: NBTX/upload-release-assets@v1
#         with:
#           upload_url: ${{ steps.get_release.outputs.upload_url }}
#           targets: build/**/*.hex

#      - name: Upload Release Assets
#        id: upload-release-assets
#        uses: dwenegar/upload-release-assets@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          release_id: ${{ steps.get_release.outputs.id }}
#          assets_path: build/*.hex
